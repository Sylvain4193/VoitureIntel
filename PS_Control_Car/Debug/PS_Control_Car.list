
PS_Control_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0d4  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  0800d2c0  0800d2c0  0000e2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e030  0800e030  00010228  2**0
                  CONTENTS
  4 .ARM          00000008  0800e030  0800e030  0000f030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e038  0800e038  00010228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e038  0800e038  0000f038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e03c  0800e03c  0000f03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800e040  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  20000228  0800e268  00010228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e0  0800e268  000109e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f3bd  00000000  00000000  00010251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344e  00000000  00000000  0001f60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00022a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00023bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e997  00000000  00000000  00024904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e512  00000000  00000000  0004329b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c907  00000000  00000000  000617ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe0b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  000fe0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00103b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000228 	.word	0x20000228
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d2a4 	.word	0x0800d2a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000022c 	.word	0x2000022c
 8000224:	0800d2a4 	.word	0x0800d2a4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_d2lz>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	2200      	movs	r2, #0
 8001238:	2300      	movs	r3, #0
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	f7ff fc29 	bl	8000a94 <__aeabi_dcmplt>
 8001242:	b928      	cbnz	r0, 8001250 <__aeabi_d2lz+0x1c>
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800124c:	f000 b80a 	b.w	8001264 <__aeabi_d2ulz>
 8001250:	4620      	mov	r0, r4
 8001252:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001256:	f000 f805 	bl	8001264 <__aeabi_d2ulz>
 800125a:	4240      	negs	r0, r0
 800125c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop

08001264 <__aeabi_d2ulz>:
 8001264:	b5d0      	push	{r4, r6, r7, lr}
 8001266:	2200      	movs	r2, #0
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <__aeabi_d2ulz+0x34>)
 800126a:	4606      	mov	r6, r0
 800126c:	460f      	mov	r7, r1
 800126e:	f7ff f99f 	bl	80005b0 <__aeabi_dmul>
 8001272:	f7ff fc75 	bl	8000b60 <__aeabi_d2uiz>
 8001276:	4604      	mov	r4, r0
 8001278:	f7ff f920 	bl	80004bc <__aeabi_ui2d>
 800127c:	2200      	movs	r2, #0
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <__aeabi_d2ulz+0x38>)
 8001280:	f7ff f996 	bl	80005b0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7fe ffd8 	bl	8000240 <__aeabi_dsub>
 8001290:	f7ff fc66 	bl	8000b60 <__aeabi_d2uiz>
 8001294:	4621      	mov	r1, r4
 8001296:	bdd0      	pop	{r4, r6, r7, pc}
 8001298:	3df00000 	.word	0x3df00000
 800129c:	41f00000 	.word	0x41f00000

080012a0 <I2C_WriteByte>:
static SSD1306_t SSD1306;

// 向oled写数据  -- 使用hal库的i2c,不打开i2c的EV_IRQHandler，使用DMA会有bug，此为hal库的bug
// Write data to OLED - use i2c from the HAL library without opening EV_IRQHandler, there may be a bug when using DMA, which is a bug in the hal library
void I2C_WriteByte(unsigned char addr, unsigned char data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
    // 不使用DMA的方式传输-阻塞型
    // Transmission without DMA - Blocking
    HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, addr, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	230a      	movs	r3, #10
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	2178      	movs	r1, #120	@ 0x78
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <I2C_WriteByte+0x34>)
 80012c6:	f004 fa87 	bl	80057d8 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200005f8 	.word	0x200005f8

080012d8 <OLED_Init>:
// 函数功能:oled初始化
// 传入参数:无
// Function function: oled initialization
// Incoming parameter: None
void OLED_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	@ 0x64
 80012de:	f003 fc79 	bl	8004bd4 <HAL_Delay>

    SSD1306_WRITECOMMAND(0xae); // display off
 80012e2:	21ae      	movs	r1, #174	@ 0xae
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ffdb 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // Set Normal Display (default)
 80012ea:	21a6      	movs	r1, #166	@ 0xa6
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ffd7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xAE); // DISPLAYOFF
 80012f2:	21ae      	movs	r1, #174	@ 0xae
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ffd3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD5); // SETDISPLAYCLOCKDIV
 80012fa:	21d5      	movs	r1, #213	@ 0xd5
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ffcf 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x80); // the suggested ratio 0x80
 8001302:	2180      	movs	r1, #128	@ 0x80
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ffcb 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xA8); // SSD1306_SETMULTIPLEX
 800130a:	21a8      	movs	r1, #168	@ 0xa8
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ffc7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x1F);
 8001312:	211f      	movs	r1, #31
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ffc3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD3);       // SETDISPLAYOFFSET
 800131a:	21d3      	movs	r1, #211	@ 0xd3
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ffbf 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x00);       // no offset
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffbb 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40 | 0x0); // SETSTARTLINE
 800132a:	2140      	movs	r1, #64	@ 0x40
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff ffb7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x8D);       // CHARGEPUMP
 8001332:	218d      	movs	r1, #141	@ 0x8d
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffb3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x14);       // 0x014 enable, 0x010 disable
 800133a:	2114      	movs	r1, #20
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffaf 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x20);       // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5),
 8001342:	2120      	movs	r1, #32
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ffab 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02);       // 0x12 //128x32 OLED: 0x002,  128x32 OLED 0x012
 800134a:	2102      	movs	r1, #2
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff ffa7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa1);       // segment remap a0/a1
 8001352:	21a1      	movs	r1, #161	@ 0xa1
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ffa3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xc8);       // c0: scan dir normal, c8: reverse
 800135a:	21c8      	movs	r1, #200	@ 0xc8
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff ff9f 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xda);
 8001362:	21da      	movs	r1, #218	@ 0xda
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ff9b 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02); // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5)
 800136a:	2102      	movs	r1, #2
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff ff97 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x81);
 8001372:	2181      	movs	r1, #129	@ 0x81
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff ff93 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xcf); // [2] set contrast control
 800137a:	21cf      	movs	r1, #207	@ 0xcf
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ff8f 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xd9);
 8001382:	21d9      	movs	r1, #217	@ 0xd9
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff8b 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xf1); // [2] pre-charge period 0x022/f1
 800138a:	21f1      	movs	r1, #241	@ 0xf1
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff ff87 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xdb);
 8001392:	21db      	movs	r1, #219	@ 0xdb
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff ff83 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40); // vcomh deselect level
 800139a:	2140      	movs	r1, #64	@ 0x40
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff7f 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x2e); // Disable scroll
 80013a2:	212e      	movs	r1, #46	@ 0x2e
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ff7b 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa4); // output ram to display
 80013aa:	21a4      	movs	r1, #164	@ 0xa4
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff77 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // none inverted normal display mode
 80013b2:	21a6      	movs	r1, #166	@ 0xa6
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff73 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xaf); // display on
 80013ba:	21af      	movs	r1, #175	@ 0xaf
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff6f 	bl	80012a0 <I2C_WriteByte>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f846 	bl	8001454 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 80013c8:	f000 f80e 	bl	80013e8 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <OLED_Init+0x10c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <OLED_Init+0x10c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <OLED_Init+0x10c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	715a      	strb	r2, [r3, #5]
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000444 	.word	0x20000444

080013e8 <SSD1306_UpdateScreen>:
// 函数功能:oled屏幕更新显示
// 传入参数:无
// Function function: OLED screen update display
// Incoming parameter: None
void SSD1306_UpdateScreen(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    uint8_t m, n;

    for (m = 0; m < 8; m++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e025      	b.n	8001440 <SSD1306_UpdateScreen+0x58>
    {
        SSD1306_WRITECOMMAND(0xB0 + m);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3b50      	subs	r3, #80	@ 0x50
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff ff4f 	bl	80012a0 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x00);
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff ff4b 	bl	80012a0 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x10);
 800140a:	2110      	movs	r1, #16
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff47 	bl	80012a0 <I2C_WriteByte>

        for (n = 0; n < SSD1306_WIDTH; n++)
 8001412:	2300      	movs	r3, #0
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	e00c      	b.n	8001432 <SSD1306_UpdateScreen+0x4a>
        {

            SSD1306_WRITEDATA(SSD1306_Buffer[n + SSD1306_WIDTH * m]);
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	4413      	add	r3, r2
 8001420:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <SSD1306_UpdateScreen+0x68>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	4619      	mov	r1, r3
 8001426:	2040      	movs	r0, #64	@ 0x40
 8001428:	f7ff ff3a 	bl	80012a0 <I2C_WriteByte>
        for (n = 0; n < SSD1306_WIDTH; n++)
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	3301      	adds	r3, #1
 8001430:	71bb      	strb	r3, [r7, #6]
 8001432:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	daee      	bge.n	8001418 <SSD1306_UpdateScreen+0x30>
    for (m = 0; m < 8; m++)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3301      	adds	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b07      	cmp	r3, #7
 8001444:	d9d6      	bls.n	80013f4 <SSD1306_UpdateScreen+0xc>
        }
    }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000244 	.word	0x20000244

08001454 <SSD1306_Fill>:
// 函数功能:oled屏幕清屏，但没刷新显示
// 传入参数:color :SSD1306_COLOR_BLACK SSD1306_COLOR_WHITE
// Function function: OLED screen is cleared, but the display is not refreshed
// Incoming parameter: color: SSD1306_ COLOR_ BLACK SSD1306_ COLOR_ WHITE
void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <SSD1306_Fill+0x14>
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <SSD1306_Fill+0x16>
 8001468:	23ff      	movs	r3, #255	@ 0xff
 800146a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146e:	4619      	mov	r1, r3
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <SSD1306_Fill+0x2c>)
 8001472:	f008 fb4e 	bl	8009b12 <memset>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000244 	.word	0x20000244

08001484 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	460b      	mov	r3, r1
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	70fb      	strb	r3, [r7, #3]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b7f      	cmp	r3, #127	@ 0x7f
 800149a:	d848      	bhi.n	800152e <SSD1306_DrawPixel+0xaa>
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	d845      	bhi.n	800152e <SSD1306_DrawPixel+0xaa>
    {
        return; // Error, out of range 出错，超出范围
    }

    /* Check if pixels are inverted 检查像素是否倒置 */
    if (SSD1306.Inverted)
 80014a2:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <SSD1306_DrawPixel+0xb4>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <SSD1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR_t)!color;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	70fb      	strb	r3, [r7, #3]
    }

    /* COLOR 设置颜色 */
    if (color == SSD1306_COLOR_WHITE)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d11a      	bne.n	80014f4 <SSD1306_DrawPixel+0x70>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	b298      	uxth	r0, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	01db      	lsls	r3, r3, #7
 80014ca:	4413      	add	r3, r2
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b259      	sxtb	r1, r3
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	4603      	mov	r3, r0
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	4413      	add	r3, r2
 80014ec:	b2c9      	uxtb	r1, r1
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 80014f0:	54d1      	strb	r1, [r2, r3]
 80014f2:	e01d      	b.n	8001530 <SSD1306_DrawPixel+0xac>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014f4:	88fa      	ldrh	r2, [r7, #6]
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	b298      	uxth	r0, r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	01db      	lsls	r3, r3, #7
 8001500:	4413      	add	r3, r2
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	b25a      	sxtb	r2, r3
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	b25b      	sxtb	r3, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b259      	sxtb	r1, r3
 800151e:	88fa      	ldrh	r2, [r7, #6]
 8001520:	4603      	mov	r3, r0
 8001522:	01db      	lsls	r3, r3, #7
 8001524:	4413      	add	r3, r2
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 800152a:	54d1      	strb	r1, [r2, r3]
 800152c:	e000      	b.n	8001530 <SSD1306_DrawPixel+0xac>
        return; // Error, out of range 出错，超出范围
 800152e:	bf00      	nop
    }
}
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000444 	.word	0x20000444
 800153c:	20000244 	.word	0x20000244

08001540 <SSD1306_GotoXY>:
// 函数功能:设置当前的光标
// 传入参数:x:横坐标 y:纵坐标
// Function function: Set the current cursor
// Incoming parameter: x: abscissa y: ordinate
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = x;
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <SSD1306_GotoXY+0x28>)
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <SSD1306_GotoXY+0x28>)
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	8053      	strh	r3, [r2, #2]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000444 	.word	0x20000444

0800156c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	4613      	mov	r3, r2
 800157a:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800157c:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <SSD1306_Putc+0xf8>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
    if (
 8001588:	2b7f      	cmp	r3, #127	@ 0x7f
 800158a:	dc07      	bgt.n	800159c <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 800158c:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <SSD1306_Putc+0xf8>)
 800158e:	885b      	ldrh	r3, [r3, #2]
 8001590:	461a      	mov	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001598:	2b1f      	cmp	r3, #31
 800159a:	dd01      	ble.n	80015a0 <SSD1306_Putc+0x34>
    {
        return 0; // Check if pixels are inverted 出错，超出范围
 800159c:	2300      	movs	r3, #0
 800159e:	e05d      	b.n	800165c <SSD1306_Putc+0xf0>
    }

    for (i = 0; i < Font->FontHeight; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e04b      	b.n	800163e <SSD1306_Putc+0xd2>
    {
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3b20      	subs	r3, #32
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	7849      	ldrb	r1, [r1, #1]
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	440b      	add	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	e030      	b.n	800162c <SSD1306_Putc+0xc0>
        {
            if ((b << j) & 0x8000)
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <SSD1306_Putc+0x90>
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <SSD1306_Putc+0xf8>)
 80015dc:	881a      	ldrh	r2, [r3, #0]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b298      	uxth	r0, r3
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <SSD1306_Putc+0xf8>)
 80015e8:	885a      	ldrh	r2, [r3, #2]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff ff45 	bl	8001484 <SSD1306_DrawPixel>
 80015fa:	e014      	b.n	8001626 <SSD1306_Putc+0xba>
            }
            else
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <SSD1306_Putc+0xf8>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b298      	uxth	r0, r3
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <SSD1306_Putc+0xf8>)
 800160a:	885a      	ldrh	r2, [r3, #2]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	b299      	uxth	r1, r3
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	f7ff ff2f 	bl	8001484 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4293      	cmp	r3, r2
 8001636:	d3c8      	bcc.n	80015ca <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	461a      	mov	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3ad      	bcc.n	80015a6 <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <SSD1306_Putc+0xf8>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4413      	add	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <SSD1306_Putc+0xf8>)
 8001658:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 800165a:	79fb      	ldrb	r3, [r7, #7]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000444 	.word	0x20000444

08001668 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	4613      	mov	r3, r2
 8001674:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str)
 8001676:	e012      	b.n	800169e <SSD1306_Puts+0x36>
    {
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	79fa      	ldrb	r2, [r7, #7]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff73 	bl	800156c <SSD1306_Putc>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d002      	beq.n	8001698 <SSD1306_Puts+0x30>
        {
            /* Return error */
            return *str;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	e008      	b.n	80016aa <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
    while (*str)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e8      	bne.n	8001678 <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <OLED_Clear>:
    }
}

/* OLED Clear Screen OLED清除屏幕 */
void OLED_Clear(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fecc 	bl	8001454 <SSD1306_Fill>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <OLED_Refresh>:

/*Refresh OLED screen 刷新OLED屏幕 */
void OLED_Refresh(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    SSD1306_UpdateScreen();
 80016c4:	f7ff fe90 	bl	80013e8 <SSD1306_UpdateScreen>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <OLED_Draw_String>:

/* Write Characters 写入字符 */
void OLED_Draw_String(char *data, uint8_t x, uint8_t y, bool clear, bool refresh)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	70fb      	strb	r3, [r7, #3]
 80016de:	460b      	mov	r3, r1
 80016e0:	70bb      	strb	r3, [r7, #2]
 80016e2:	4613      	mov	r3, r2
 80016e4:	707b      	strb	r3, [r7, #1]
    if (clear)
 80016e6:	787b      	ldrb	r3, [r7, #1]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <OLED_Draw_String+0x24>
        OLED_Clear();
 80016ec:	f7ff ffe1 	bl	80016b2 <OLED_Clear>
    SSD1306_GotoXY(x, y);
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	78ba      	ldrb	r2, [r7, #2]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff20 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts(data, &Font_7x10, SSD1306_COLOR_WHITE);
 8001700:	2201      	movs	r2, #1
 8001702:	4906      	ldr	r1, [pc, #24]	@ (800171c <OLED_Draw_String+0x50>)
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffaf 	bl	8001668 <SSD1306_Puts>
    if (refresh)
 800170a:	7c3b      	ldrb	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <OLED_Draw_String+0x48>
        OLED_Refresh();
 8001710:	f7ff ffd6 	bl	80016c0 <OLED_Refresh>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000

08001720 <OLED_Draw_Line>:

/* Write a line of characters 写入一行字符 */
void OLED_Draw_Line(char *data, uint8_t line, bool clear, bool refresh)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	70fb      	strb	r3, [r7, #3]
 8001732:	460b      	mov	r3, r1
 8001734:	70bb      	strb	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	707b      	strb	r3, [r7, #1]
    if (line > 0 && line <= 3)
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <OLED_Draw_Line+0x46>
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d80f      	bhi.n	8001766 <OLED_Draw_Line+0x46>
    {
        OLED_Draw_String(data, 0, 10 * (line - 1), clear, refresh);
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	461a      	mov	r2, r3
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3b0a      	subs	r3, #10
 8001754:	b2da      	uxtb	r2, r3
 8001756:	78b9      	ldrb	r1, [r7, #2]
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffb3 	bl	80016cc <OLED_Draw_String>
    }
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <User_PS2_Control>:
char line3[20] = {'\0'};

// 函数功能：ps2控制小车
// Function function: PS2 control car
void User_PS2_Control(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	// 如果不接手柄，即4个255 If the handle is not connected, i.e. 4 255
	PS2_LX = PS2_AnologData(PSS_LX);
 8001774:	2007      	movs	r0, #7
 8001776:	f000 fba3 	bl	8001ec0 <PS2_AnologData>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b91      	ldr	r3, [pc, #580]	@ (80019c4 <User_PS2_Control+0x254>)
 8001780:	601a      	str	r2, [r3, #0]
	PS2_LY = PS2_AnologData(PSS_LY);
 8001782:	2008      	movs	r0, #8
 8001784:	f000 fb9c 	bl	8001ec0 <PS2_AnologData>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	4b8e      	ldr	r3, [pc, #568]	@ (80019c8 <User_PS2_Control+0x258>)
 800178e:	601a      	str	r2, [r3, #0]
	PS2_RX = PS2_AnologData(PSS_RX);
 8001790:	2005      	movs	r0, #5
 8001792:	f000 fb95 	bl	8001ec0 <PS2_AnologData>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b8c      	ldr	r3, [pc, #560]	@ (80019cc <User_PS2_Control+0x25c>)
 800179c:	601a      	str	r2, [r3, #0]
	PS2_RY = PS2_AnologData(PSS_RY);
 800179e:	2006      	movs	r0, #6
 80017a0:	f000 fb8e 	bl	8001ec0 <PS2_AnologData>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b89      	ldr	r3, [pc, #548]	@ (80019d0 <User_PS2_Control+0x260>)
 80017aa:	601a      	str	r2, [r3, #0]
	PS2_KEY = PS2_DataKey(); // 192
 80017ac:	f000 fb4e 	bl	8001e4c <PS2_DataKey>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b87      	ldr	r3, [pc, #540]	@ (80019d4 <User_PS2_Control+0x264>)
 80017b6:	601a      	str	r2, [r3, #0]

	sprintf(line1, "speed = %d   ", g_car_speed);
 80017b8:	4b87      	ldr	r3, [pc, #540]	@ (80019d8 <User_PS2_Control+0x268>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	461a      	mov	r2, r3
 80017c0:	4986      	ldr	r1, [pc, #536]	@ (80019dc <User_PS2_Control+0x26c>)
 80017c2:	4887      	ldr	r0, [pc, #540]	@ (80019e0 <User_PS2_Control+0x270>)
 80017c4:	f008 f942 	bl	8009a4c <siprintf>
	sprintf(line2, "Distance = %.3f   ", Distance_Wall);
 80017c8:	4b86      	ldr	r3, [pc, #536]	@ (80019e4 <User_PS2_Control+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe97 	bl	8000500 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4984      	ldr	r1, [pc, #528]	@ (80019e8 <User_PS2_Control+0x278>)
 80017d8:	4884      	ldr	r0, [pc, #528]	@ (80019ec <User_PS2_Control+0x27c>)
 80017da:	f008 f937 	bl	8009a4c <siprintf>
	sprintf(line3, "Break Dist = %.3f   ", Offset_Wall);
 80017de:	4b84      	ldr	r3, [pc, #528]	@ (80019f0 <User_PS2_Control+0x280>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe8c 	bl	8000500 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4981      	ldr	r1, [pc, #516]	@ (80019f4 <User_PS2_Control+0x284>)
 80017ee:	4882      	ldr	r0, [pc, #520]	@ (80019f8 <User_PS2_Control+0x288>)
 80017f0:	f008 f92c 	bl	8009a4c <siprintf>
	
	OLED_Draw_Line(line1, 2, false, false);
 80017f4:	2300      	movs	r3, #0
 80017f6:	2200      	movs	r2, #0
 80017f8:	2102      	movs	r1, #2
 80017fa:	4879      	ldr	r0, [pc, #484]	@ (80019e0 <User_PS2_Control+0x270>)
 80017fc:	f7ff ff90 	bl	8001720 <OLED_Draw_Line>
	OLED_Draw_Line(line2, 2, false, false);
 8001800:	2300      	movs	r3, #0
 8001802:	2200      	movs	r2, #0
 8001804:	2102      	movs	r1, #2
 8001806:	4879      	ldr	r0, [pc, #484]	@ (80019ec <User_PS2_Control+0x27c>)
 8001808:	f7ff ff8a 	bl	8001720 <OLED_Draw_Line>
	OLED_Draw_Line(line3, 3, false, true);
 800180c:	2301      	movs	r3, #1
 800180e:	2200      	movs	r2, #0
 8001810:	2103      	movs	r1, #3
 8001812:	4879      	ldr	r0, [pc, #484]	@ (80019f8 <User_PS2_Control+0x288>)
 8001814:	f7ff ff84 	bl	8001720 <OLED_Draw_Line>

	Distance_Wall = Get_distance();
 8001818:	f002 f8b4 	bl	8003984 <Get_distance>
 800181c:	4603      	mov	r3, r0
 800181e:	4a71      	ldr	r2, [pc, #452]	@ (80019e4 <User_PS2_Control+0x274>)
 8001820:	6013      	str	r3, [r2, #0]

	// The handle is not communicating
	if ((PS2_LX == 255) && (PS2_LY == 255) && (PS2_RX == 255) && (PS2_RY == 255))
 8001822:	4b68      	ldr	r3, [pc, #416]	@ (80019c4 <User_PS2_Control+0x254>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2bff      	cmp	r3, #255	@ 0xff
 8001828:	d10c      	bne.n	8001844 <User_PS2_Control+0xd4>
 800182a:	4b67      	ldr	r3, [pc, #412]	@ (80019c8 <User_PS2_Control+0x258>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2bff      	cmp	r3, #255	@ 0xff
 8001830:	d108      	bne.n	8001844 <User_PS2_Control+0xd4>
 8001832:	4b66      	ldr	r3, [pc, #408]	@ (80019cc <User_PS2_Control+0x25c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2bff      	cmp	r3, #255	@ 0xff
 8001838:	d104      	bne.n	8001844 <User_PS2_Control+0xd4>
 800183a:	4b65      	ldr	r3, [pc, #404]	@ (80019d0 <User_PS2_Control+0x260>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2bff      	cmp	r3, #255	@ 0xff
 8001840:	f000 822d 	beq.w	8001c9e <User_PS2_Control+0x52e>
	{
		return;
	}
	else if ((PS2_LX == 0) && (PS2_LY == 0) && (PS2_RX == 0) && (PS2_RY == 0))
 8001844:	4b5f      	ldr	r3, [pc, #380]	@ (80019c4 <User_PS2_Control+0x254>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10c      	bne.n	8001866 <User_PS2_Control+0xf6>
 800184c:	4b5e      	ldr	r3, [pc, #376]	@ (80019c8 <User_PS2_Control+0x258>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d108      	bne.n	8001866 <User_PS2_Control+0xf6>
 8001854:	4b5d      	ldr	r3, [pc, #372]	@ (80019cc <User_PS2_Control+0x25c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <User_PS2_Control+0xf6>
 800185c:	4b5c      	ldr	r3, [pc, #368]	@ (80019d0 <User_PS2_Control+0x260>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 821e 	beq.w	8001ca2 <User_PS2_Control+0x532>
	{
		return;
	}
	else if ((PS2_LX == 192) || (PS2_LY == 192) || (PS2_RX == 192) || (PS2_RY == 192)) // This is a misjudgment value, you can adjust it yourself then
 8001866:	4b57      	ldr	r3, [pc, #348]	@ (80019c4 <User_PS2_Control+0x254>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2bc0      	cmp	r3, #192	@ 0xc0
 800186c:	f000 821b 	beq.w	8001ca6 <User_PS2_Control+0x536>
 8001870:	4b55      	ldr	r3, [pc, #340]	@ (80019c8 <User_PS2_Control+0x258>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2bc0      	cmp	r3, #192	@ 0xc0
 8001876:	f000 8216 	beq.w	8001ca6 <User_PS2_Control+0x536>
 800187a:	4b54      	ldr	r3, [pc, #336]	@ (80019cc <User_PS2_Control+0x25c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001880:	f000 8211 	beq.w	8001ca6 <User_PS2_Control+0x536>
 8001884:	4b52      	ldr	r3, [pc, #328]	@ (80019d0 <User_PS2_Control+0x260>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2bc0      	cmp	r3, #192	@ 0xc0
 800188a:	f000 820c 	beq.w	8001ca6 <User_PS2_Control+0x536>
	{
		return;
	}
	if (Offset_Wall < Distance_Wall) {
 800188e:	4b58      	ldr	r3, [pc, #352]	@ (80019f0 <User_PS2_Control+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a54      	ldr	r2, [pc, #336]	@ (80019e4 <User_PS2_Control+0x274>)
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fc7d 	bl	8001198 <__aeabi_fcmplt>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ab 	beq.w	80019fc <User_PS2_Control+0x28c>

		// Left controls front and rear, right controls left and right
		if (PS2_LY < 125 && (PS2_RX > 125 && PS2_RX < 150)) // Before control
 80018a6:	4b48      	ldr	r3, [pc, #288]	@ (80019c8 <User_PS2_Control+0x258>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b7c      	cmp	r3, #124	@ 0x7c
 80018ac:	dc10      	bgt.n	80018d0 <User_PS2_Control+0x160>
 80018ae:	4b47      	ldr	r3, [pc, #284]	@ (80019cc <User_PS2_Control+0x25c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b7d      	cmp	r3, #125	@ 0x7d
 80018b4:	dd0c      	ble.n	80018d0 <User_PS2_Control+0x160>
 80018b6:	4b45      	ldr	r3, [pc, #276]	@ (80019cc <User_PS2_Control+0x25c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b95      	cmp	r3, #149	@ 0x95
 80018bc:	dc08      	bgt.n	80018d0 <User_PS2_Control+0x160>
		{
			wheel_State(MOTION_RUN, g_car_speed);
 80018be:	4b46      	ldr	r3, [pc, #280]	@ (80019d8 <User_PS2_Control+0x268>)
 80018c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	2001      	movs	r0, #1
 80018ca:	f001 fb23 	bl	8002f14 <wheel_State>
 80018ce:	e099      	b.n	8001a04 <User_PS2_Control+0x294>
		}
		else if (PS2_LY > 150 && (PS2_RX > 125 && PS2_RX < 150)) // After control
 80018d0:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <User_PS2_Control+0x258>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b96      	cmp	r3, #150	@ 0x96
 80018d6:	dd10      	ble.n	80018fa <User_PS2_Control+0x18a>
 80018d8:	4b3c      	ldr	r3, [pc, #240]	@ (80019cc <User_PS2_Control+0x25c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b7d      	cmp	r3, #125	@ 0x7d
 80018de:	dd0c      	ble.n	80018fa <User_PS2_Control+0x18a>
 80018e0:	4b3a      	ldr	r3, [pc, #232]	@ (80019cc <User_PS2_Control+0x25c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b95      	cmp	r3, #149	@ 0x95
 80018e6:	dc08      	bgt.n	80018fa <User_PS2_Control+0x18a>
		{
			wheel_State(MOTION_BACK, g_car_speed);
 80018e8:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <User_PS2_Control+0x268>)
 80018ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	4619      	mov	r1, r3
 80018f2:	2002      	movs	r0, #2
 80018f4:	f001 fb0e 	bl	8002f14 <wheel_State>
 80018f8:	e084      	b.n	8001a04 <User_PS2_Control+0x294>
		}
		else if (PS2_RX < 125 && (PS2_LY > 125 && PS2_LY < 150)) // Control Left
 80018fa:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <User_PS2_Control+0x25c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b7c      	cmp	r3, #124	@ 0x7c
 8001900:	dc10      	bgt.n	8001924 <User_PS2_Control+0x1b4>
 8001902:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <User_PS2_Control+0x258>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b7d      	cmp	r3, #125	@ 0x7d
 8001908:	dd0c      	ble.n	8001924 <User_PS2_Control+0x1b4>
 800190a:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <User_PS2_Control+0x258>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b95      	cmp	r3, #149	@ 0x95
 8001910:	dc08      	bgt.n	8001924 <User_PS2_Control+0x1b4>
		{
			wheel_State(MOTION_LEFT, g_car_speed);
 8001912:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <User_PS2_Control+0x268>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4619      	mov	r1, r3
 800191c:	2003      	movs	r0, #3
 800191e:	f001 faf9 	bl	8002f14 <wheel_State>
 8001922:	e06f      	b.n	8001a04 <User_PS2_Control+0x294>
		}
		else if (PS2_RX > 150 && (PS2_LY > 125 && PS2_LY < 150)) // Control Right
 8001924:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <User_PS2_Control+0x25c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b96      	cmp	r3, #150	@ 0x96
 800192a:	dd10      	ble.n	800194e <User_PS2_Control+0x1de>
 800192c:	4b26      	ldr	r3, [pc, #152]	@ (80019c8 <User_PS2_Control+0x258>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b7d      	cmp	r3, #125	@ 0x7d
 8001932:	dd0c      	ble.n	800194e <User_PS2_Control+0x1de>
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <User_PS2_Control+0x258>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b95      	cmp	r3, #149	@ 0x95
 800193a:	dc08      	bgt.n	800194e <User_PS2_Control+0x1de>
		{
			wheel_State(MOTION_RIGHT, g_car_speed);
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <User_PS2_Control+0x268>)
 800193e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	2004      	movs	r0, #4
 8001948:	f001 fae4 	bl	8002f14 <wheel_State>
 800194c:	e05a      	b.n	8001a04 <User_PS2_Control+0x294>
		}
		else if ((PS2_LY < 125 && PS2_RX < 125) || (PS2_LY > 150 && PS2_RX < 125)) // counter-clockwise
 800194e:	4b1e      	ldr	r3, [pc, #120]	@ (80019c8 <User_PS2_Control+0x258>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b7c      	cmp	r3, #124	@ 0x7c
 8001954:	dc03      	bgt.n	800195e <User_PS2_Control+0x1ee>
 8001956:	4b1d      	ldr	r3, [pc, #116]	@ (80019cc <User_PS2_Control+0x25c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b7c      	cmp	r3, #124	@ 0x7c
 800195c:	dd07      	ble.n	800196e <User_PS2_Control+0x1fe>
 800195e:	4b1a      	ldr	r3, [pc, #104]	@ (80019c8 <User_PS2_Control+0x258>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b96      	cmp	r3, #150	@ 0x96
 8001964:	dd0c      	ble.n	8001980 <User_PS2_Control+0x210>
 8001966:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <User_PS2_Control+0x25c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b7c      	cmp	r3, #124	@ 0x7c
 800196c:	dc08      	bgt.n	8001980 <User_PS2_Control+0x210>
		{
			wheel_State(MOTION_SPIN_LEFT, g_car_speed);
 800196e:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <User_PS2_Control+0x268>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4619      	mov	r1, r3
 8001978:	2005      	movs	r0, #5
 800197a:	f001 facb 	bl	8002f14 <wheel_State>
 800197e:	e041      	b.n	8001a04 <User_PS2_Control+0x294>
		}
		else if ((PS2_LY < 125 && PS2_RX > 150) || (PS2_LY > 150 && PS2_RX > 150)) // dextrorotation
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <User_PS2_Control+0x258>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b7c      	cmp	r3, #124	@ 0x7c
 8001986:	dc03      	bgt.n	8001990 <User_PS2_Control+0x220>
 8001988:	4b10      	ldr	r3, [pc, #64]	@ (80019cc <User_PS2_Control+0x25c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b96      	cmp	r3, #150	@ 0x96
 800198e:	dc07      	bgt.n	80019a0 <User_PS2_Control+0x230>
 8001990:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <User_PS2_Control+0x258>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b96      	cmp	r3, #150	@ 0x96
 8001996:	dd0c      	ble.n	80019b2 <User_PS2_Control+0x242>
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <User_PS2_Control+0x25c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b96      	cmp	r3, #150	@ 0x96
 800199e:	dd08      	ble.n	80019b2 <User_PS2_Control+0x242>
		{
			wheel_State(MOTION_SPIN_RIGHT, g_car_speed);
 80019a0:	4b0d      	ldr	r3, [pc, #52]	@ (80019d8 <User_PS2_Control+0x268>)
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	2006      	movs	r0, #6
 80019ac:	f001 fab2 	bl	8002f14 <wheel_State>
 80019b0:	e028      	b.n	8001a04 <User_PS2_Control+0x294>
		}

		else
		{
			if (PS2_KEY == 0) // No buttons pressed
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <User_PS2_Control+0x264>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d124      	bne.n	8001a04 <User_PS2_Control+0x294>
				wheel_State(MOTION_STOP, 0);
 80019ba:	2100      	movs	r1, #0
 80019bc:	2000      	movs	r0, #0
 80019be:	f001 faa9 	bl	8002f14 <wheel_State>
 80019c2:	e01f      	b.n	8001a04 <User_PS2_Control+0x294>
 80019c4:	2000044c 	.word	0x2000044c
 80019c8:	20000450 	.word	0x20000450
 80019cc:	20000454 	.word	0x20000454
 80019d0:	20000458 	.word	0x20000458
 80019d4:	2000045c 	.word	0x2000045c
 80019d8:	20000010 	.word	0x20000010
 80019dc:	0800d2c0 	.word	0x0800d2c0
 80019e0:	20000468 	.word	0x20000468
 80019e4:	20000460 	.word	0x20000460
 80019e8:	0800d2d0 	.word	0x0800d2d0
 80019ec:	2000047c 	.word	0x2000047c
 80019f0:	20000008 	.word	0x20000008
 80019f4:	0800d2e4 	.word	0x0800d2e4
 80019f8:	20000490 	.word	0x20000490
		}

	}
	else { //Emergency Break because of the Wall
		wheel_State(MOTION_STOP, 0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	f001 fa88 	bl	8002f14 <wheel_State>
	}

	switch (PS2_KEY)
 8001a04:	4ba9      	ldr	r3, [pc, #676]	@ (8001cac <User_PS2_Control+0x53c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b05      	subs	r3, #5
 8001a0a:	2b0b      	cmp	r3, #11
 8001a0c:	f200 8138 	bhi.w	8001c80 <User_PS2_Control+0x510>
 8001a10:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <User_PS2_Control+0x2a8>)
 8001a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	08001b45 	.word	0x08001b45
 8001a1c:	08001b79 	.word	0x08001b79
 8001a20:	08001b5f 	.word	0x08001b5f
 8001a24:	08001b91 	.word	0x08001b91
 8001a28:	08001a73 	.word	0x08001a73
 8001a2c:	08001a49 	.word	0x08001a49
 8001a30:	08001af1 	.word	0x08001af1
 8001a34:	08001a9d 	.word	0x08001a9d
 8001a38:	08001bc7 	.word	0x08001bc7
 8001a3c:	08001c53 	.word	0x08001c53
 8001a40:	08001bd3 	.word	0x08001bd3
 8001a44:	08001c25 	.word	0x08001c25
	{

	case PSB_R2:
		g_car_speed += 100;
 8001a48:	4b99      	ldr	r3, [pc, #612]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3364      	adds	r3, #100	@ 0x64
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	4b96      	ldr	r3, [pc, #600]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a58:	801a      	strh	r2, [r3, #0]
		if (g_car_speed > 1000)
 8001a5a:	4b95      	ldr	r3, [pc, #596]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a64:	f340 810e 	ble.w	8001c84 <User_PS2_Control+0x514>
			g_car_speed = 1000;
 8001a68:	4b91      	ldr	r3, [pc, #580]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a6e:	801a      	strh	r2, [r3, #0]
		break; // Small deceleration 
 8001a70:	e108      	b.n	8001c84 <User_PS2_Control+0x514>
	
	case PSB_L2:
		g_car_speed -= 100;
 8001a72:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b64      	subs	r3, #100	@ 0x64
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	4b8b      	ldr	r3, [pc, #556]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a82:	801a      	strh	r2, [r3, #0]
		if (g_car_speed < -1000)
 8001a84:	4b8a      	ldr	r3, [pc, #552]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001a8e:	f280 80fb 	bge.w	8001c88 <User_PS2_Control+0x518>
			g_car_speed = -1000;
 8001a92:	4b87      	ldr	r3, [pc, #540]	@ (8001cb0 <User_PS2_Control+0x540>)
 8001a94:	f64f 4218 	movw	r2, #64536	@ 0xfc18
 8001a98:	801a      	strh	r2, [r3, #0]
		break; // Small deceleration 
 8001a9a:	e0f5      	b.n	8001c88 <User_PS2_Control+0x518>
		// When the acceleration is negative, the direction of the joystick can be reversed
	
	case PSB_R1: //Color phare +1 / To do if need one more button : Loop on the color and L1 or R1 button will be free
		RGB_OFF_ALL;
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4884      	ldr	r0, [pc, #528]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001aa2:	f003 fcab 	bl	80053fc <HAL_GPIO_WritePin>
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2108      	movs	r1, #8
 8001aaa:	4882      	ldr	r0, [pc, #520]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001aac:	f003 fca6 	bl	80053fc <HAL_GPIO_WritePin>
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	487f      	ldr	r0, [pc, #508]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001ab6:	f003 fca1 	bl	80053fc <HAL_GPIO_WritePin>
 8001aba:	2200      	movs	r2, #0
 8001abc:	2102      	movs	r1, #2
 8001abe:	487e      	ldr	r0, [pc, #504]	@ (8001cb8 <User_PS2_Control+0x548>)
 8001ac0:	f003 fc9c 	bl	80053fc <HAL_GPIO_WritePin>
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	487a      	ldr	r0, [pc, #488]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001aca:	f003 fc97 	bl	80053fc <HAL_GPIO_WritePin>
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	4879      	ldr	r0, [pc, #484]	@ (8001cb8 <User_PS2_Control+0x548>)
 8001ad4:	f003 fc92 	bl	80053fc <HAL_GPIO_WritePin>
		if (g_color != Max_color)
 8001ad8:	4b78      	ldr	r3, [pc, #480]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b07      	cmp	r3, #7
 8001ade:	f000 80d5 	beq.w	8001c8c <User_PS2_Control+0x51c>
			g_color++;
 8001ae2:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b74      	ldr	r3, [pc, #464]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001aec:	701a      	strb	r2, [r3, #0]
		/*g_car_speed -= 250;
		if (g_car_speed < -1000)
			g_car_speed = -1000;*/
		break; // When the deceleration is negative, the direction of the joystick can be reversed
 8001aee:	e0cd      	b.n	8001c8c <User_PS2_Control+0x51c>

	case PSB_L1: //Color phare -1
		RGB_OFF_ALL;
 8001af0:	2200      	movs	r2, #0
 8001af2:	2104      	movs	r1, #4
 8001af4:	486f      	ldr	r0, [pc, #444]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001af6:	f003 fc81 	bl	80053fc <HAL_GPIO_WritePin>
 8001afa:	2200      	movs	r2, #0
 8001afc:	2108      	movs	r1, #8
 8001afe:	486d      	ldr	r0, [pc, #436]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001b00:	f003 fc7c 	bl	80053fc <HAL_GPIO_WritePin>
 8001b04:	2200      	movs	r2, #0
 8001b06:	2110      	movs	r1, #16
 8001b08:	486a      	ldr	r0, [pc, #424]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001b0a:	f003 fc77 	bl	80053fc <HAL_GPIO_WritePin>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2102      	movs	r1, #2
 8001b12:	4869      	ldr	r0, [pc, #420]	@ (8001cb8 <User_PS2_Control+0x548>)
 8001b14:	f003 fc72 	bl	80053fc <HAL_GPIO_WritePin>
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2180      	movs	r1, #128	@ 0x80
 8001b1c:	4865      	ldr	r0, [pc, #404]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001b1e:	f003 fc6d 	bl	80053fc <HAL_GPIO_WritePin>
 8001b22:	2200      	movs	r2, #0
 8001b24:	2104      	movs	r1, #4
 8001b26:	4864      	ldr	r0, [pc, #400]	@ (8001cb8 <User_PS2_Control+0x548>)
 8001b28:	f003 fc68 	bl	80053fc <HAL_GPIO_WritePin>
		if (g_color != red)
 8001b2c:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ad 	beq.w	8001c90 <User_PS2_Control+0x520>
			g_color--;
 8001b36:	4b61      	ldr	r3, [pc, #388]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001b40:	701a      	strb	r2, [r3, #0]
		/*g_car_speed += 250;
		if (g_car_speed > 1000)
			g_car_speed = 1000;*/
		break; // When the acceleration is negative, the direction of the joystick can be reversed
 8001b42:	e0a5      	b.n	8001c90 <User_PS2_Control+0x520>

	case PSB_PAD_UP:
		Offset_Wall = Offset_Wall + Pas_Wall;
 8001b44:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc0 <User_PS2_Control+0x550>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a5e      	ldr	r2, [pc, #376]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f87c 	bl	8000c4c <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b59      	ldr	r3, [pc, #356]	@ (8001cc0 <User_PS2_Control+0x550>)
 8001b5a:	601a      	str	r2, [r3, #0]
		break;
 8001b5c:	e09b      	b.n	8001c96 <User_PS2_Control+0x526>
	case PSB_PAD_DOWN:
		Offset_Wall = Offset_Wall - Pas_Wall;
 8001b5e:	4b58      	ldr	r3, [pc, #352]	@ (8001cc0 <User_PS2_Control+0x550>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a58      	ldr	r2, [pc, #352]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff f86d 	bl	8000c48 <__aeabi_fsub>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b53      	ldr	r3, [pc, #332]	@ (8001cc0 <User_PS2_Control+0x550>)
 8001b74:	601a      	str	r2, [r3, #0]
		break;
 8001b76:	e08e      	b.n	8001c96 <User_PS2_Control+0x526>

	case PSB_PAD_RIGHT:
		Pas_Wall = Pas_Wall + 1;
 8001b78:	4b52      	ldr	r3, [pc, #328]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f863 	bl	8000c4c <__addsf3>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001b8c:	601a      	str	r2, [r3, #0]
		break;
 8001b8e:	e082      	b.n	8001c96 <User_PS2_Control+0x526>
	case PSB_PAD_LEFT:
		Pas_Wall = Pas_Wall - 1;
 8001b90:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f855 	bl	8000c48 <__aeabi_fsub>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b48      	ldr	r3, [pc, #288]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001ba4:	601a      	str	r2, [r3, #0]
		if (Pas_Wall == 0)
 8001ba6:	4b47      	ldr	r3, [pc, #284]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f04f 0100 	mov.w	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fae8 	bl	8001184 <__aeabi_fcmpeq>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <User_PS2_Control+0x44c>
				Pas_Wall = 1;
		break;
 8001bba:	e06c      	b.n	8001c96 <User_PS2_Control+0x526>
				Pas_Wall = 1;
 8001bbc:	4b41      	ldr	r3, [pc, #260]	@ (8001cc4 <User_PS2_Control+0x554>)
 8001bbe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bc2:	601a      	str	r2, [r3, #0]
		break;
 8001bc4:	e067      	b.n	8001c96 <User_PS2_Control+0x526>

	case PSB_GREEN: // Triangle 
		Distance_Wall = Get_distance();
 8001bc6:	f001 fedd 	bl	8003984 <Get_distance>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc8 <User_PS2_Control+0x558>)
 8001bce:	6013      	str	r3, [r2, #0]
		// To do : Mettre le Klaxon
		break;
 8001bd0:	e061      	b.n	8001c96 <User_PS2_Control+0x526>
	case PSB_BLUE: // Cross
		// To do Start en Stop 
		RGB_OFF_ALL;
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2104      	movs	r1, #4
 8001bd6:	4837      	ldr	r0, [pc, #220]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001bd8:	f003 fc10 	bl	80053fc <HAL_GPIO_WritePin>
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2108      	movs	r1, #8
 8001be0:	4834      	ldr	r0, [pc, #208]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001be2:	f003 fc0b 	bl	80053fc <HAL_GPIO_WritePin>
 8001be6:	2200      	movs	r2, #0
 8001be8:	2110      	movs	r1, #16
 8001bea:	4832      	ldr	r0, [pc, #200]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001bec:	f003 fc06 	bl	80053fc <HAL_GPIO_WritePin>
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4830      	ldr	r0, [pc, #192]	@ (8001cb8 <User_PS2_Control+0x548>)
 8001bf6:	f003 fc01 	bl	80053fc <HAL_GPIO_WritePin>
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2180      	movs	r1, #128	@ 0x80
 8001bfe:	482d      	ldr	r0, [pc, #180]	@ (8001cb4 <User_PS2_Control+0x544>)
 8001c00:	f003 fbfc 	bl	80053fc <HAL_GPIO_WritePin>
 8001c04:	2200      	movs	r2, #0
 8001c06:	2104      	movs	r1, #4
 8001c08:	482b      	ldr	r0, [pc, #172]	@ (8001cb8 <User_PS2_Control+0x548>)
 8001c0a:	f003 fbf7 	bl	80053fc <HAL_GPIO_WritePin>
		if (g_color != red)
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03e      	beq.n	8001c94 <User_PS2_Control+0x524>
			g_color--;
 8001c16:	4b29      	ldr	r3, [pc, #164]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <User_PS2_Control+0x54c>)
 8001c20:	701a      	strb	r2, [r3, #0]
		break; // Turn off all headlights
 8001c22:	e037      	b.n	8001c94 <User_PS2_Control+0x524>
	case PSB_PINK: // Square
		g_Se_eff++; // Switch special effects
 8001c24:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c2e:	701a      	strb	r2, [r3, #0]
		if (g_Se_eff >= RGB_EFFCT_MAX)
 8001c30:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d902      	bls.n	8001c3e <User_PS2_Control+0x4ce>
		{
			g_Se_eff = CUT_RGB;
 8001c38:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	701a      	strb	r2, [r3, #0]
		}
		wheel_State(MOTION_STOP, 0); // Park the car and display the special effects again
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2000      	movs	r0, #0
 8001c42:	f001 f967 	bl	8002f14 <wheel_State>
		user_control(g_Se_eff);
 8001c46:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fbb6 	bl	80023bc <user_control>
		break;
 8001c50:	e021      	b.n	8001c96 <User_PS2_Control+0x526>
	case PSB_RED:  //Round
		g_Se_eff--; // Switch special effects
 8001c52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c5c:	701a      	strb	r2, [r3, #0]
		if (g_Se_eff < CUT_RGB)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <User_PS2_Control+0x4fc>
		{
			g_Se_eff = (Color_effect_t)(RGB_EFFCT_MAX - 1);
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c68:	2206      	movs	r2, #6
 8001c6a:	701a      	strb	r2, [r3, #0]
		}
		wheel_State(MOTION_STOP, 0); // Park the car and display the special effects again
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f001 f950 	bl	8002f14 <wheel_State>
		user_control(g_Se_eff);
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <User_PS2_Control+0x55c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fb9f 	bl	80023bc <user_control>
		break;
 8001c7e:	e00a      	b.n	8001c96 <User_PS2_Control+0x526>
	default:
		break;
 8001c80:	bf00      	nop
 8001c82:	e008      	b.n	8001c96 <User_PS2_Control+0x526>
		break; // Small deceleration 
 8001c84:	bf00      	nop
 8001c86:	e006      	b.n	8001c96 <User_PS2_Control+0x526>
		break; // Small deceleration 
 8001c88:	bf00      	nop
 8001c8a:	e004      	b.n	8001c96 <User_PS2_Control+0x526>
		break; // When the deceleration is negative, the direction of the joystick can be reversed
 8001c8c:	bf00      	nop
 8001c8e:	e002      	b.n	8001c96 <User_PS2_Control+0x526>
		break; // When the acceleration is negative, the direction of the joystick can be reversed
 8001c90:	bf00      	nop
 8001c92:	e000      	b.n	8001c96 <User_PS2_Control+0x526>
		break; // Turn off all headlights
 8001c94:	bf00      	nop
		wheel_State(MOTION_STOP, 0);
	}
	HAL_Delay(20); // Stay connected
 8001c96:	2014      	movs	r0, #20
 8001c98:	f002 ff9c 	bl	8004bd4 <HAL_Delay>
 8001c9c:	e004      	b.n	8001ca8 <User_PS2_Control+0x538>
		return;
 8001c9e:	bf00      	nop
 8001ca0:	e002      	b.n	8001ca8 <User_PS2_Control+0x538>
		return;
 8001ca2:	bf00      	nop
 8001ca4:	e000      	b.n	8001ca8 <User_PS2_Control+0x538>
		return;
 8001ca6:	bf00      	nop
}
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000045c 	.word	0x2000045c
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	40011800 	.word	0x40011800
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	20000464 	.word	0x20000464
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	20000460 	.word	0x20000460
 8001ccc:	20000012 	.word	0x20000012

08001cd0 <PS2_Cmd>:
Function function: Send commands to the handle
Entry parameter: CMD instruction
Return value: None
**************************************************************************/
void PS2_Cmd(uint8_t CMD)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	volatile uint16_t ref = 0x01;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	81fb      	strh	r3, [r7, #14]
	Data[1] = 0;
 8001cde:	4b25      	ldr	r3, [pc, #148]	@ (8001d74 <PS2_Cmd+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	705a      	strb	r2, [r3, #1]
	for (ref = 0x01; ref < 0x0100; ref <<= 1)
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	81fb      	strh	r3, [r7, #14]
 8001ce8:	e03b      	b.n	8001d62 <PS2_Cmd+0x92>
	{
		if (ref & CMD)
 8001cea:	89fb      	ldrh	r3, [r7, #14]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <PS2_Cmd+0x34>
		{
			DO_H; // Output one control bit 输出一位控制位
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2180      	movs	r1, #128	@ 0x80
 8001cfc:	481e      	ldr	r0, [pc, #120]	@ (8001d78 <PS2_Cmd+0xa8>)
 8001cfe:	f003 fb7d 	bl	80053fc <HAL_GPIO_WritePin>
 8001d02:	e004      	b.n	8001d0e <PS2_Cmd+0x3e>
		}
		else
			DO_L;
 8001d04:	2200      	movs	r2, #0
 8001d06:	2180      	movs	r1, #128	@ 0x80
 8001d08:	481b      	ldr	r0, [pc, #108]	@ (8001d78 <PS2_Cmd+0xa8>)
 8001d0a:	f003 fb77 	bl	80053fc <HAL_GPIO_WritePin>
		CLK_H; // Clock up 时钟拉高
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2120      	movs	r1, #32
 8001d12:	4819      	ldr	r0, [pc, #100]	@ (8001d78 <PS2_Cmd+0xa8>)
 8001d14:	f003 fb72 	bl	80053fc <HAL_GPIO_WritePin>
		DELAY_TIME;
 8001d18:	2005      	movs	r0, #5
 8001d1a:	f000 fe05 	bl	8002928 <Delay_Us>
		CLK_L;
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2120      	movs	r1, #32
 8001d22:	4815      	ldr	r0, [pc, #84]	@ (8001d78 <PS2_Cmd+0xa8>)
 8001d24:	f003 fb6a 	bl	80053fc <HAL_GPIO_WritePin>
		DELAY_TIME;
 8001d28:	2005      	movs	r0, #5
 8001d2a:	f000 fdfd 	bl	8002928 <Delay_Us>
		CLK_H;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2120      	movs	r1, #32
 8001d32:	4811      	ldr	r0, [pc, #68]	@ (8001d78 <PS2_Cmd+0xa8>)
 8001d34:	f003 fb62 	bl	80053fc <HAL_GPIO_WritePin>
		if (DI) // At high levels 为高电平的时候
 8001d38:	2140      	movs	r1, #64	@ 0x40
 8001d3a:	480f      	ldr	r0, [pc, #60]	@ (8001d78 <PS2_Cmd+0xa8>)
 8001d3c:	f003 fb3e 	bl	80053bc <HAL_GPIO_ReadPin>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <PS2_Cmd+0x88>
			Data[1] = ref | Data[1];
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <PS2_Cmd+0xa4>)
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <PS2_Cmd+0xa4>)
 8001d56:	705a      	strb	r2, [r3, #1]
	for (ref = 0x01; ref < 0x0100; ref <<= 1)
 8001d58:	89fb      	ldrh	r3, [r7, #14]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	81fb      	strh	r3, [r7, #14]
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2bff      	cmp	r3, #255	@ 0xff
 8001d68:	d9bf      	bls.n	8001cea <PS2_Cmd+0x1a>
	}
	(16);
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200004a8 	.word	0x200004a8
 8001d78:	40010800 	.word	0x40010800

08001d7c <PS2_ReadData>:
Function function: Read handle data
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ReadData(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
	volatile uint8_t byte = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	71fb      	strb	r3, [r7, #7]
	volatile uint16_t ref = 0x01;
 8001d86:	2301      	movs	r3, #1
 8001d88:	80bb      	strh	r3, [r7, #4]
	CS_L;
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	482c      	ldr	r0, [pc, #176]	@ (8001e40 <PS2_ReadData+0xc4>)
 8001d90:	f003 fb34 	bl	80053fc <HAL_GPIO_WritePin>
	PS2_Cmd(Comd[0]);				 // start command 开始命令
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <PS2_ReadData+0xc8>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff99 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(Comd[1]);				 // request data 请求数据
 8001d9e:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <PS2_ReadData+0xc8>)
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff94 	bl	8001cd0 <PS2_Cmd>
	for (byte = 2; byte < 9; byte++) // Start accepting data 开始接受数据
 8001da8:	2302      	movs	r3, #2
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	e03a      	b.n	8001e24 <PS2_ReadData+0xa8>
	{
		for (ref = 0x01; ref < 0x100; ref <<= 1)
 8001dae:	2301      	movs	r3, #1
 8001db0:	80bb      	strh	r3, [r7, #4]
 8001db2:	e02e      	b.n	8001e12 <PS2_ReadData+0x96>
		{
			CLK_H;
 8001db4:	2201      	movs	r2, #1
 8001db6:	2120      	movs	r1, #32
 8001db8:	4821      	ldr	r0, [pc, #132]	@ (8001e40 <PS2_ReadData+0xc4>)
 8001dba:	f003 fb1f 	bl	80053fc <HAL_GPIO_WritePin>
			DELAY_TIME;
 8001dbe:	2005      	movs	r0, #5
 8001dc0:	f000 fdb2 	bl	8002928 <Delay_Us>
			CLK_L;
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2120      	movs	r1, #32
 8001dc8:	481d      	ldr	r0, [pc, #116]	@ (8001e40 <PS2_ReadData+0xc4>)
 8001dca:	f003 fb17 	bl	80053fc <HAL_GPIO_WritePin>
			DELAY_TIME;
 8001dce:	2005      	movs	r0, #5
 8001dd0:	f000 fdaa 	bl	8002928 <Delay_Us>
			CLK_H;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	4819      	ldr	r0, [pc, #100]	@ (8001e40 <PS2_ReadData+0xc4>)
 8001dda:	f003 fb0f 	bl	80053fc <HAL_GPIO_WritePin>
			if (DI)
 8001dde:	2140      	movs	r1, #64	@ 0x40
 8001de0:	4817      	ldr	r0, [pc, #92]	@ (8001e40 <PS2_ReadData+0xc4>)
 8001de2:	f003 faeb 	bl	80053bc <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00d      	beq.n	8001e08 <PS2_ReadData+0x8c>
				Data[byte] = ref | Data[byte];
 8001dec:	88bb      	ldrh	r3, [r7, #4]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4619      	mov	r1, r3
 8001df8:	4b13      	ldr	r3, [pc, #76]	@ (8001e48 <PS2_ReadData+0xcc>)
 8001dfa:	5c5b      	ldrb	r3, [r3, r1]
 8001dfc:	79f9      	ldrb	r1, [r7, #7]
 8001dfe:	b2c9      	uxtb	r1, r1
 8001e00:	4313      	orrs	r3, r2
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b10      	ldr	r3, [pc, #64]	@ (8001e48 <PS2_ReadData+0xcc>)
 8001e06:	545a      	strb	r2, [r3, r1]
		for (ref = 0x01; ref < 0x100; ref <<= 1)
 8001e08:	88bb      	ldrh	r3, [r7, #4]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	80bb      	strh	r3, [r7, #4]
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2bff      	cmp	r3, #255	@ 0xff
 8001e18:	d9cc      	bls.n	8001db4 <PS2_ReadData+0x38>
	for (byte = 2; byte < 9; byte++) // Start accepting data 开始接受数据
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d9c0      	bls.n	8001dae <PS2_ReadData+0x32>
		}
		(16);
	}
	CS_H;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2110      	movs	r1, #16
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <PS2_ReadData+0xc4>)
 8001e32:	f003 fae3 	bl	80053fc <HAL_GPIO_WritePin>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40010800 	.word	0x40010800
 8001e44:	20000014 	.word	0x20000014
 8001e48:	200004a8 	.word	0x200004a8

08001e4c <PS2_DataKey>:
Entry parameter: CMD instruction
Return value: None
//0 when only one button is pressed, 1 when not pressed
**************************************************************************/
uint8_t PS2_DataKey()
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
	uint8_t index;
	PS2_ClearData();
 8001e52:	f000 f845 	bl	8001ee0 <PS2_ClearData>
	PS2_ReadData();
 8001e56:	f7ff ff91 	bl	8001d7c <PS2_ReadData>
	Handkey = (Data[4] << 8) | Data[3]; // These are 16 buttons that are pressed as 0 and not pressed as 1 这是16个按键  按下为0， 未按下为1
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <PS2_DataKey+0x68>)
 8001e5c:	791b      	ldrb	r3, [r3, #4]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <PS2_DataKey+0x68>)
 8001e64:	78db      	ldrb	r3, [r3, #3]
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <PS2_DataKey+0x6c>)
 8001e70:	801a      	strh	r2, [r3, #0]
	for (index = 0; index < 16; index++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e014      	b.n	8001ea2 <PS2_DataKey+0x56>
	{
		if ((Handkey & (1 << (MASK[index] - 1))) == 0)
 8001e78:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <PS2_DataKey+0x6c>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4a0e      	ldr	r2, [pc, #56]	@ (8001ebc <PS2_DataKey+0x70>)
 8001e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	fa41 f303 	asr.w	r3, r1, r3
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <PS2_DataKey+0x50>
			return index + 1;
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	3301      	adds	r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	e006      	b.n	8001eaa <PS2_DataKey+0x5e>
	for (index = 0; index < 16; index++)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	71fb      	strb	r3, [r7, #7]
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	2b0f      	cmp	r3, #15
 8001ea6:	d9e7      	bls.n	8001e78 <PS2_DataKey+0x2c>
	}
	return 0; // No buttons pressed 没有任何按键按下
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200004a8 	.word	0x200004a8
 8001eb8:	200004a4 	.word	0x200004a4
 8001ebc:	20000018 	.word	0x20000018

08001ec0 <PS2_AnologData>:
Function function: Send commands to the handle
Entry parameters: Obtain an analog range of 0-256 for a joystick
Return value: None
**************************************************************************/
uint8_t PS2_AnologData(uint8_t button)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	return Data[button];
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <PS2_AnologData+0x1c>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	200004a8 	.word	0x200004a8

08001ee0 <PS2_ClearData>:
// Clear data buffer 清除数据缓冲区
void PS2_ClearData()
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
	uint8_t a;
	for (a = 0; a < 9; a++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	e006      	b.n	8001efa <PS2_ClearData+0x1a>
		Data[a] = 0x00;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <PS2_ClearData+0x2c>)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	54d1      	strb	r1, [r2, r3]
	for (a = 0; a < 9; a++)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	71fb      	strb	r3, [r7, #7]
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d9f5      	bls.n	8001eec <PS2_ClearData+0xc>
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr
 8001f0c:	200004a8 	.word	0x200004a8

08001f10 <PS2_ShortPoll>:
Function function: short poll
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ShortPoll(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	CS_L;
 8001f14:	2200      	movs	r2, #0
 8001f16:	2110      	movs	r1, #16
 8001f18:	480f      	ldr	r0, [pc, #60]	@ (8001f58 <PS2_ShortPoll+0x48>)
 8001f1a:	f003 fa6f 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001f1e:	2010      	movs	r0, #16
 8001f20:	f000 fd02 	bl	8002928 <Delay_Us>
	PS2_Cmd(0x01);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fed3 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x42);
 8001f2a:	2042      	movs	r0, #66	@ 0x42
 8001f2c:	f7ff fed0 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff fecd 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff feca 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff fec7 	bl	8001cd0 <PS2_Cmd>
	CS_H;
 8001f42:	2201      	movs	r2, #1
 8001f44:	2110      	movs	r1, #16
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <PS2_ShortPoll+0x48>)
 8001f48:	f003 fa58 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001f4c:	2010      	movs	r0, #16
 8001f4e:	f000 fceb 	bl	8002928 <Delay_Us>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40010800 	.word	0x40010800

08001f5c <PS2_EnterConfing>:
Function Function: Enter Configuration
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_EnterConfing(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	CS_L;
 8001f60:	2200      	movs	r2, #0
 8001f62:	2110      	movs	r1, #16
 8001f64:	4815      	ldr	r0, [pc, #84]	@ (8001fbc <PS2_EnterConfing+0x60>)
 8001f66:	f003 fa49 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001f6a:	2010      	movs	r0, #16
 8001f6c:	f000 fcdc 	bl	8002928 <Delay_Us>
	PS2_Cmd(0x01);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fead 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x43);
 8001f76:	2043      	movs	r0, #67	@ 0x43
 8001f78:	f7ff feaa 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff fea7 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x01);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fea4 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fea1 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fe9e 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fe9b 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff fe98 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff fe95 	bl	8001cd0 <PS2_Cmd>
	CS_H;
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2110      	movs	r1, #16
 8001faa:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <PS2_EnterConfing+0x60>)
 8001fac:	f003 fa26 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001fb0:	2010      	movs	r0, #16
 8001fb2:	f000 fcb9 	bl	8002928 <Delay_Us>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40010800 	.word	0x40010800

08001fc0 <PS2_TurnOnAnalogMode>:
Function Function: Sending Mode Settings
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_TurnOnAnalogMode(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	CS_L;
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	4813      	ldr	r0, [pc, #76]	@ (8002018 <PS2_TurnOnAnalogMode+0x58>)
 8001fca:	f003 fa17 	bl	80053fc <HAL_GPIO_WritePin>
	PS2_Cmd(0x01);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff fe7e 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x44);
 8001fd4:	2044      	movs	r0, #68	@ 0x44
 8001fd6:	f7ff fe7b 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f7ff fe78 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x01); // analog=0x01;digital=0x00  Software settings sending mode 软件设置发送模式
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff fe75 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x03); // Ox03 latch setting, that is, the mode cannot be set by pressing the "MODE" button. Ox03锁存设置，即不可通过按键“MODE”设置模式。
 8001fe6:	2003      	movs	r0, #3
 8001fe8:	f7ff fe72 	bl	8001cd0 <PS2_Cmd>
				   // 0xEE does not lock software settings, and the mode can be set by pressing the "MODE" button. 0xEE不锁存软件设置，可通过按键“MODE”设置模式。
	PS2_Cmd(0X00);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff fe6f 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff fe6c 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f7ff fe69 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff fe66 	bl	8001cd0 <PS2_Cmd>
	CS_H;
 8002004:	2201      	movs	r2, #1
 8002006:	2110      	movs	r1, #16
 8002008:	4803      	ldr	r0, [pc, #12]	@ (8002018 <PS2_TurnOnAnalogMode+0x58>)
 800200a:	f003 f9f7 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 800200e:	2010      	movs	r0, #16
 8002010:	f000 fc8a 	bl	8002928 <Delay_Us>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010800 	.word	0x40010800

0800201c <PS2_ExitConfing>:
Function function: Complete and save configuration
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ExitConfing(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	CS_L;
 8002020:	2200      	movs	r2, #0
 8002022:	2110      	movs	r1, #16
 8002024:	4815      	ldr	r0, [pc, #84]	@ (800207c <PS2_ExitConfing+0x60>)
 8002026:	f003 f9e9 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 800202a:	2010      	movs	r0, #16
 800202c:	f000 fc7c 	bl	8002928 <Delay_Us>
	PS2_Cmd(0x01);
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff fe4d 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x43);
 8002036:	2043      	movs	r0, #67	@ 0x43
 8002038:	f7ff fe4a 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0X00);
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff fe47 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7ff fe44 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002048:	205a      	movs	r0, #90	@ 0x5a
 800204a:	f7ff fe41 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x5A);
 800204e:	205a      	movs	r0, #90	@ 0x5a
 8002050:	f7ff fe3e 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002054:	205a      	movs	r0, #90	@ 0x5a
 8002056:	f7ff fe3b 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x5A);
 800205a:	205a      	movs	r0, #90	@ 0x5a
 800205c:	f7ff fe38 	bl	8001cd0 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8002060:	205a      	movs	r0, #90	@ 0x5a
 8002062:	f7ff fe35 	bl	8001cd0 <PS2_Cmd>
	CS_H;
 8002066:	2201      	movs	r2, #1
 8002068:	2110      	movs	r1, #16
 800206a:	4804      	ldr	r0, [pc, #16]	@ (800207c <PS2_ExitConfing+0x60>)
 800206c:	f003 f9c6 	bl	80053fc <HAL_GPIO_WritePin>
	Delay_Us(16);
 8002070:	2010      	movs	r0, #16
 8002072:	f000 fc59 	bl	8002928 <Delay_Us>
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40010800 	.word	0x40010800

08002080 <PS2_SetInit>:
Function Function: Handle Configuration Initialization
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_SetInit(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	PS2_ShortPoll();
 8002084:	f7ff ff44 	bl	8001f10 <PS2_ShortPoll>
	PS2_ShortPoll();
 8002088:	f7ff ff42 	bl	8001f10 <PS2_ShortPoll>
	PS2_ShortPoll();
 800208c:	f7ff ff40 	bl	8001f10 <PS2_ShortPoll>
	PS2_EnterConfing();		// Entering configuration mode 进入配置模式
 8002090:	f7ff ff64 	bl	8001f5c <PS2_EnterConfing>
	PS2_TurnOnAnalogMode(); // Configure the "Traffic Light" mode and choose whether to save it “红绿灯”配置模式，并选择是否保存
 8002094:	f7ff ff94 	bl	8001fc0 <PS2_TurnOnAnalogMode>
	// PS2_VibrationMode();	//Enable vibration mode 开启震动模式
	PS2_ExitConfing(); // Complete and save the configuration 完成并保存配置
 8002098:	f7ff ffc0 	bl	800201c <PS2_ExitConfing>
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <RGB_color_ALL>:
#include "app_rgb.h"


//两个RGB灯同时切换7种颜色特效
void RGB_color_ALL(uint32_t times)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	for(RGB_Color i = red;i<Max_color;i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e00c      	b.n	80020c8 <RGB_color_ALL+0x28>
	{
		Set_RGB(RGB_Max,i);
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	4619      	mov	r1, r3
 80020b2:	2003      	movs	r0, #3
 80020b4:	f000 fa7a 	bl	80025ac <Set_RGB>
		Delay_Ms(times);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fc71 	bl	80029a4 <Delay_Ms>
	for(RGB_Color i = red;i<Max_color;i++)
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	3301      	adds	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b06      	cmp	r3, #6
 80020cc:	d9ef      	bls.n	80020ae <RGB_color_ALL+0xe>
	}

}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <RGB_color_follow>:

//RGB灯跟随效果
void RGB_color_follow(uint32_t times)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	for(RGB_Color i = red;i<=Max_color;i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e02a      	b.n	800213c <RGB_color_follow+0x64>
	{
		Set_RGB(RGB_R,(RGB_Color)(i%Max_color));
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	4b18      	ldr	r3, [pc, #96]	@ (800214c <RGB_color_follow+0x74>)
 80020ea:	fba3 1302 	umull	r1, r3, r3, r2
 80020ee:	1ad1      	subs	r1, r2, r3
 80020f0:	0849      	lsrs	r1, r1, #1
 80020f2:	440b      	add	r3, r1
 80020f4:	0899      	lsrs	r1, r3, #2
 80020f6:	460b      	mov	r3, r1
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a5b      	subs	r3, r3, r1
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4619      	mov	r1, r3
 8002102:	2001      	movs	r0, #1
 8002104:	f000 fa52 	bl	80025ac <Set_RGB>
		Set_RGB(RGB_L,(RGB_Color)((i+1)%Max_color));
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	1c5a      	adds	r2, r3, #1
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <RGB_color_follow+0x78>)
 800210e:	fb83 1302 	smull	r1, r3, r3, r2
 8002112:	4413      	add	r3, r2
 8002114:	1099      	asrs	r1, r3, #2
 8002116:	17d3      	asrs	r3, r2, #31
 8002118:	1ac9      	subs	r1, r1, r3
 800211a:	460b      	mov	r3, r1
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	1a5b      	subs	r3, r3, r1
 8002120:	1ad1      	subs	r1, r2, r3
 8002122:	b2cb      	uxtb	r3, r1
 8002124:	4619      	mov	r1, r3
 8002126:	2002      	movs	r0, #2
 8002128:	f000 fa40 	bl	80025ac <Set_RGB>
		Delay_Ms(times);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fc37 	bl	80029a4 <Delay_Ms>
	for(RGB_Color i = red;i<=Max_color;i++)
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	3301      	adds	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b07      	cmp	r3, #7
 8002140:	d9d1      	bls.n	80020e6 <RGB_color_follow+0xe>
	}

}
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24924925 	.word	0x24924925
 8002150:	92492493 	.word	0x92492493

08002154 <RGB_color_water>:
//RGB
//direction； 0 1
//times : 

void RGB_color_water(uint8_t direction,uint32_t times)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
	if(direction == 0)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d135      	bne.n	80021d2 <RGB_color_water+0x7e>
	{
		for(RGB_Color i=red;i<Max_color;i++)
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e02e      	b.n	80021ca <RGB_color_water+0x76>
		{
			Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	4b35      	ldr	r3, [pc, #212]	@ (8002244 <RGB_color_water+0xf0>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	1ad1      	subs	r1, r2, r3
 8002176:	0849      	lsrs	r1, r1, #1
 8002178:	440b      	add	r3, r1
 800217a:	0899      	lsrs	r1, r3, #2
 800217c:	460b      	mov	r3, r1
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	1a5b      	subs	r3, r3, r1
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4619      	mov	r1, r3
 8002188:	2002      	movs	r0, #2
 800218a:	f000 fa0f 	bl	80025ac <Set_RGB>
			Delay_Ms(times);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fc06 	bl	80029a4 <Delay_Ms>
			Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	4b2a      	ldr	r3, [pc, #168]	@ (8002244 <RGB_color_water+0xf0>)
 800219c:	fba3 1302 	umull	r1, r3, r3, r2
 80021a0:	1ad1      	subs	r1, r2, r3
 80021a2:	0849      	lsrs	r1, r1, #1
 80021a4:	440b      	add	r3, r1
 80021a6:	0899      	lsrs	r1, r3, #2
 80021a8:	460b      	mov	r3, r1
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a5b      	subs	r3, r3, r1
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4619      	mov	r1, r3
 80021b4:	2001      	movs	r0, #1
 80021b6:	f000 f9f9 	bl	80025ac <Set_RGB>
			Delay_Ms(times);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fbf0 	bl	80029a4 <Delay_Ms>
		for(RGB_Color i=red;i<Max_color;i++)
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	3301      	adds	r3, #1
 80021c8:	73fb      	strb	r3, [r7, #15]
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d9cd      	bls.n	800216c <RGB_color_water+0x18>
			Set_RGB(RGB_L,(RGB_Color)((i)%Max_color));
			Delay_Ms(times);
		}
	}

}
 80021d0:	e034      	b.n	800223c <RGB_color_water+0xe8>
		for(RGB_Color i=red;i<Max_color;i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	73bb      	strb	r3, [r7, #14]
 80021d6:	e02e      	b.n	8002236 <RGB_color_water+0xe2>
			Set_RGB(RGB_R,(RGB_Color)(i%Max_color));
 80021d8:	7bba      	ldrb	r2, [r7, #14]
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <RGB_color_water+0xf0>)
 80021dc:	fba3 1302 	umull	r1, r3, r3, r2
 80021e0:	1ad1      	subs	r1, r2, r3
 80021e2:	0849      	lsrs	r1, r1, #1
 80021e4:	440b      	add	r3, r1
 80021e6:	0899      	lsrs	r1, r3, #2
 80021e8:	460b      	mov	r3, r1
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	1a5b      	subs	r3, r3, r1
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4619      	mov	r1, r3
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 f9d9 	bl	80025ac <Set_RGB>
			Delay_Ms(times);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fbd0 	bl	80029a4 <Delay_Ms>
			Set_RGB(RGB_L,(RGB_Color)((i)%Max_color));
 8002204:	7bba      	ldrb	r2, [r7, #14]
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <RGB_color_water+0xf0>)
 8002208:	fba3 1302 	umull	r1, r3, r3, r2
 800220c:	1ad1      	subs	r1, r2, r3
 800220e:	0849      	lsrs	r1, r1, #1
 8002210:	440b      	add	r3, r1
 8002212:	0899      	lsrs	r1, r3, #2
 8002214:	460b      	mov	r3, r1
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	1a5b      	subs	r3, r3, r1
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	2002      	movs	r0, #2
 8002222:	f000 f9c3 	bl	80025ac <Set_RGB>
			Delay_Ms(times);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fbba 	bl	80029a4 <Delay_Ms>
		for(RGB_Color i=red;i<Max_color;i++)
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	3301      	adds	r3, #1
 8002234:	73bb      	strb	r3, [r7, #14]
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	2b06      	cmp	r3, #6
 800223a:	d9cd      	bls.n	80021d8 <RGB_color_water+0x84>
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	24924925 	.word	0x24924925

08002248 <RGB_one_light>:
//单灯轮播效果
void RGB_one_light(uint8_t direction,uint32_t times)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
	if(direction == 0)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d153      	bne.n	8002302 <RGB_one_light+0xba>
	{
			for(RGB_Color i=red;i<Max_color;i++)
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e04c      	b.n	80022fa <RGB_one_light+0xb2>
			{
				Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	4b53      	ldr	r3, [pc, #332]	@ (80023b0 <RGB_one_light+0x168>)
 8002264:	fba3 1302 	umull	r1, r3, r3, r2
 8002268:	1ad1      	subs	r1, r2, r3
 800226a:	0849      	lsrs	r1, r1, #1
 800226c:	440b      	add	r3, r1
 800226e:	0899      	lsrs	r1, r3, #2
 8002270:	460b      	mov	r3, r1
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a5b      	subs	r3, r3, r1
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	4619      	mov	r1, r3
 800227c:	2002      	movs	r0, #2
 800227e:	f000 f995 	bl	80025ac <Set_RGB>
				RGB_OFF_R;
 8002282:	2200      	movs	r2, #0
 8002284:	2104      	movs	r1, #4
 8002286:	484b      	ldr	r0, [pc, #300]	@ (80023b4 <RGB_one_light+0x16c>)
 8002288:	f003 f8b8 	bl	80053fc <HAL_GPIO_WritePin>
 800228c:	2200      	movs	r2, #0
 800228e:	2108      	movs	r1, #8
 8002290:	4848      	ldr	r0, [pc, #288]	@ (80023b4 <RGB_one_light+0x16c>)
 8002292:	f003 f8b3 	bl	80053fc <HAL_GPIO_WritePin>
 8002296:	2200      	movs	r2, #0
 8002298:	2110      	movs	r1, #16
 800229a:	4846      	ldr	r0, [pc, #280]	@ (80023b4 <RGB_one_light+0x16c>)
 800229c:	f003 f8ae 	bl	80053fc <HAL_GPIO_WritePin>
				Delay_Ms(times);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb7d 	bl	80029a4 <Delay_Ms>

				RGB_OFF_L;
 80022aa:	2200      	movs	r2, #0
 80022ac:	2102      	movs	r1, #2
 80022ae:	4842      	ldr	r0, [pc, #264]	@ (80023b8 <RGB_one_light+0x170>)
 80022b0:	f003 f8a4 	bl	80053fc <HAL_GPIO_WritePin>
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	@ 0x80
 80022b8:	483e      	ldr	r0, [pc, #248]	@ (80023b4 <RGB_one_light+0x16c>)
 80022ba:	f003 f89f 	bl	80053fc <HAL_GPIO_WritePin>
 80022be:	2200      	movs	r2, #0
 80022c0:	2104      	movs	r1, #4
 80022c2:	483d      	ldr	r0, [pc, #244]	@ (80023b8 <RGB_one_light+0x170>)
 80022c4:	f003 f89a 	bl	80053fc <HAL_GPIO_WritePin>
				Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	4b39      	ldr	r3, [pc, #228]	@ (80023b0 <RGB_one_light+0x168>)
 80022cc:	fba3 1302 	umull	r1, r3, r3, r2
 80022d0:	1ad1      	subs	r1, r2, r3
 80022d2:	0849      	lsrs	r1, r1, #1
 80022d4:	440b      	add	r3, r1
 80022d6:	0899      	lsrs	r1, r3, #2
 80022d8:	460b      	mov	r3, r1
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	1a5b      	subs	r3, r3, r1
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	4619      	mov	r1, r3
 80022e4:	2001      	movs	r0, #1
 80022e6:	f000 f961 	bl	80025ac <Set_RGB>
				Delay_Ms(times);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fb58 	bl	80029a4 <Delay_Ms>
			for(RGB_Color i=red;i<Max_color;i++)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	3301      	adds	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d9af      	bls.n	8002260 <RGB_one_light+0x18>
			RGB_OFF_R;
			Delay_Ms(times);
		}
	}

}
 8002300:	e052      	b.n	80023a8 <RGB_one_light+0x160>
		for(RGB_Color i=red;i<Max_color;i++)
 8002302:	2300      	movs	r3, #0
 8002304:	73bb      	strb	r3, [r7, #14]
 8002306:	e04c      	b.n	80023a2 <RGB_one_light+0x15a>
			RGB_OFF_L;
 8002308:	2200      	movs	r2, #0
 800230a:	2102      	movs	r1, #2
 800230c:	482a      	ldr	r0, [pc, #168]	@ (80023b8 <RGB_one_light+0x170>)
 800230e:	f003 f875 	bl	80053fc <HAL_GPIO_WritePin>
 8002312:	2200      	movs	r2, #0
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	4827      	ldr	r0, [pc, #156]	@ (80023b4 <RGB_one_light+0x16c>)
 8002318:	f003 f870 	bl	80053fc <HAL_GPIO_WritePin>
 800231c:	2200      	movs	r2, #0
 800231e:	2104      	movs	r1, #4
 8002320:	4825      	ldr	r0, [pc, #148]	@ (80023b8 <RGB_one_light+0x170>)
 8002322:	f003 f86b 	bl	80053fc <HAL_GPIO_WritePin>
			Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 8002326:	7bba      	ldrb	r2, [r7, #14]
 8002328:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <RGB_one_light+0x168>)
 800232a:	fba3 1302 	umull	r1, r3, r3, r2
 800232e:	1ad1      	subs	r1, r2, r3
 8002330:	0849      	lsrs	r1, r1, #1
 8002332:	440b      	add	r3, r1
 8002334:	0899      	lsrs	r1, r3, #2
 8002336:	460b      	mov	r3, r1
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a5b      	subs	r3, r3, r1
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4619      	mov	r1, r3
 8002342:	2001      	movs	r0, #1
 8002344:	f000 f932 	bl	80025ac <Set_RGB>
			Delay_Ms(times);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fb29 	bl	80029a4 <Delay_Ms>
			Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 8002352:	7bba      	ldrb	r2, [r7, #14]
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <RGB_one_light+0x168>)
 8002356:	fba3 1302 	umull	r1, r3, r3, r2
 800235a:	1ad1      	subs	r1, r2, r3
 800235c:	0849      	lsrs	r1, r1, #1
 800235e:	440b      	add	r3, r1
 8002360:	0899      	lsrs	r1, r3, #2
 8002362:	460b      	mov	r3, r1
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a5b      	subs	r3, r3, r1
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	2002      	movs	r0, #2
 8002370:	f000 f91c 	bl	80025ac <Set_RGB>
			RGB_OFF_R;
 8002374:	2200      	movs	r2, #0
 8002376:	2104      	movs	r1, #4
 8002378:	480e      	ldr	r0, [pc, #56]	@ (80023b4 <RGB_one_light+0x16c>)
 800237a:	f003 f83f 	bl	80053fc <HAL_GPIO_WritePin>
 800237e:	2200      	movs	r2, #0
 8002380:	2108      	movs	r1, #8
 8002382:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <RGB_one_light+0x16c>)
 8002384:	f003 f83a 	bl	80053fc <HAL_GPIO_WritePin>
 8002388:	2200      	movs	r2, #0
 800238a:	2110      	movs	r1, #16
 800238c:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <RGB_one_light+0x16c>)
 800238e:	f003 f835 	bl	80053fc <HAL_GPIO_WritePin>
			Delay_Ms(times);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fb04 	bl	80029a4 <Delay_Ms>
		for(RGB_Color i=red;i<Max_color;i++)
 800239c:	7bbb      	ldrb	r3, [r7, #14]
 800239e:	3301      	adds	r3, #1
 80023a0:	73bb      	strb	r3, [r7, #14]
 80023a2:	7bbb      	ldrb	r3, [r7, #14]
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d9af      	bls.n	8002308 <RGB_one_light+0xc0>
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	24924925 	.word	0x24924925
 80023b4:	40011800 	.word	0x40011800
 80023b8:	40012000 	.word	0x40012000

080023bc <user_control>:

void user_control(Color_effect_t effect)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
	switch((uint8_t)effect)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	2b05      	cmp	r3, #5
 80023cc:	f200 80e6 	bhi.w	800259c <user_control+0x1e0>
 80023d0:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <user_control+0x1c>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	080023f1 	.word	0x080023f1
 80023dc:	08002437 	.word	0x08002437
 80023e0:	0800247d 	.word	0x0800247d
 80023e4:	080024c5 	.word	0x080024c5
 80023e8:	0800250d 	.word	0x0800250d
 80023ec:	08002555 	.word	0x08002555
	{
		case CUT_RGB:			RGB_color_ALL(400); RGB_OFF_ALL;break;
 80023f0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80023f4:	f7ff fe54 	bl	80020a0 <RGB_color_ALL>
 80023f8:	2200      	movs	r2, #0
 80023fa:	2104      	movs	r1, #4
 80023fc:	4869      	ldr	r0, [pc, #420]	@ (80025a4 <user_control+0x1e8>)
 80023fe:	f002 fffd 	bl	80053fc <HAL_GPIO_WritePin>
 8002402:	2200      	movs	r2, #0
 8002404:	2108      	movs	r1, #8
 8002406:	4867      	ldr	r0, [pc, #412]	@ (80025a4 <user_control+0x1e8>)
 8002408:	f002 fff8 	bl	80053fc <HAL_GPIO_WritePin>
 800240c:	2200      	movs	r2, #0
 800240e:	2110      	movs	r1, #16
 8002410:	4864      	ldr	r0, [pc, #400]	@ (80025a4 <user_control+0x1e8>)
 8002412:	f002 fff3 	bl	80053fc <HAL_GPIO_WritePin>
 8002416:	2200      	movs	r2, #0
 8002418:	2102      	movs	r1, #2
 800241a:	4863      	ldr	r0, [pc, #396]	@ (80025a8 <user_control+0x1ec>)
 800241c:	f002 ffee 	bl	80053fc <HAL_GPIO_WritePin>
 8002420:	2200      	movs	r2, #0
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	485f      	ldr	r0, [pc, #380]	@ (80025a4 <user_control+0x1e8>)
 8002426:	f002 ffe9 	bl	80053fc <HAL_GPIO_WritePin>
 800242a:	2200      	movs	r2, #0
 800242c:	2104      	movs	r1, #4
 800242e:	485e      	ldr	r0, [pc, #376]	@ (80025a8 <user_control+0x1ec>)
 8002430:	f002 ffe4 	bl	80053fc <HAL_GPIO_WritePin>
 8002434:	e0b2      	b.n	800259c <user_control+0x1e0>
		case FOLLOE_RGB:		RGB_color_follow(350);RGB_OFF_ALL;break;
 8002436:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800243a:	f7ff fe4d 	bl	80020d8 <RGB_color_follow>
 800243e:	2200      	movs	r2, #0
 8002440:	2104      	movs	r1, #4
 8002442:	4858      	ldr	r0, [pc, #352]	@ (80025a4 <user_control+0x1e8>)
 8002444:	f002 ffda 	bl	80053fc <HAL_GPIO_WritePin>
 8002448:	2200      	movs	r2, #0
 800244a:	2108      	movs	r1, #8
 800244c:	4855      	ldr	r0, [pc, #340]	@ (80025a4 <user_control+0x1e8>)
 800244e:	f002 ffd5 	bl	80053fc <HAL_GPIO_WritePin>
 8002452:	2200      	movs	r2, #0
 8002454:	2110      	movs	r1, #16
 8002456:	4853      	ldr	r0, [pc, #332]	@ (80025a4 <user_control+0x1e8>)
 8002458:	f002 ffd0 	bl	80053fc <HAL_GPIO_WritePin>
 800245c:	2200      	movs	r2, #0
 800245e:	2102      	movs	r1, #2
 8002460:	4851      	ldr	r0, [pc, #324]	@ (80025a8 <user_control+0x1ec>)
 8002462:	f002 ffcb 	bl	80053fc <HAL_GPIO_WritePin>
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	@ 0x80
 800246a:	484e      	ldr	r0, [pc, #312]	@ (80025a4 <user_control+0x1e8>)
 800246c:	f002 ffc6 	bl	80053fc <HAL_GPIO_WritePin>
 8002470:	2200      	movs	r2, #0
 8002472:	2104      	movs	r1, #4
 8002474:	484c      	ldr	r0, [pc, #304]	@ (80025a8 <user_control+0x1ec>)
 8002476:	f002 ffc1 	bl	80053fc <HAL_GPIO_WritePin>
 800247a:	e08f      	b.n	800259c <user_control+0x1e0>
		case A_WATER:			RGB_color_water(0,500);RGB_OFF_ALL;break;
 800247c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff fe67 	bl	8002154 <RGB_color_water>
 8002486:	2200      	movs	r2, #0
 8002488:	2104      	movs	r1, #4
 800248a:	4846      	ldr	r0, [pc, #280]	@ (80025a4 <user_control+0x1e8>)
 800248c:	f002 ffb6 	bl	80053fc <HAL_GPIO_WritePin>
 8002490:	2200      	movs	r2, #0
 8002492:	2108      	movs	r1, #8
 8002494:	4843      	ldr	r0, [pc, #268]	@ (80025a4 <user_control+0x1e8>)
 8002496:	f002 ffb1 	bl	80053fc <HAL_GPIO_WritePin>
 800249a:	2200      	movs	r2, #0
 800249c:	2110      	movs	r1, #16
 800249e:	4841      	ldr	r0, [pc, #260]	@ (80025a4 <user_control+0x1e8>)
 80024a0:	f002 ffac 	bl	80053fc <HAL_GPIO_WritePin>
 80024a4:	2200      	movs	r2, #0
 80024a6:	2102      	movs	r1, #2
 80024a8:	483f      	ldr	r0, [pc, #252]	@ (80025a8 <user_control+0x1ec>)
 80024aa:	f002 ffa7 	bl	80053fc <HAL_GPIO_WritePin>
 80024ae:	2200      	movs	r2, #0
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	483c      	ldr	r0, [pc, #240]	@ (80025a4 <user_control+0x1e8>)
 80024b4:	f002 ffa2 	bl	80053fc <HAL_GPIO_WritePin>
 80024b8:	2200      	movs	r2, #0
 80024ba:	2104      	movs	r1, #4
 80024bc:	483a      	ldr	r0, [pc, #232]	@ (80025a8 <user_control+0x1ec>)
 80024be:	f002 ff9d 	bl	80053fc <HAL_GPIO_WritePin>
 80024c2:	e06b      	b.n	800259c <user_control+0x1e0>
		case B_WATER:			RGB_color_water(1,500);RGB_OFF_ALL;break;
 80024c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff fe43 	bl	8002154 <RGB_color_water>
 80024ce:	2200      	movs	r2, #0
 80024d0:	2104      	movs	r1, #4
 80024d2:	4834      	ldr	r0, [pc, #208]	@ (80025a4 <user_control+0x1e8>)
 80024d4:	f002 ff92 	bl	80053fc <HAL_GPIO_WritePin>
 80024d8:	2200      	movs	r2, #0
 80024da:	2108      	movs	r1, #8
 80024dc:	4831      	ldr	r0, [pc, #196]	@ (80025a4 <user_control+0x1e8>)
 80024de:	f002 ff8d 	bl	80053fc <HAL_GPIO_WritePin>
 80024e2:	2200      	movs	r2, #0
 80024e4:	2110      	movs	r1, #16
 80024e6:	482f      	ldr	r0, [pc, #188]	@ (80025a4 <user_control+0x1e8>)
 80024e8:	f002 ff88 	bl	80053fc <HAL_GPIO_WritePin>
 80024ec:	2200      	movs	r2, #0
 80024ee:	2102      	movs	r1, #2
 80024f0:	482d      	ldr	r0, [pc, #180]	@ (80025a8 <user_control+0x1ec>)
 80024f2:	f002 ff83 	bl	80053fc <HAL_GPIO_WritePin>
 80024f6:	2200      	movs	r2, #0
 80024f8:	2180      	movs	r1, #128	@ 0x80
 80024fa:	482a      	ldr	r0, [pc, #168]	@ (80025a4 <user_control+0x1e8>)
 80024fc:	f002 ff7e 	bl	80053fc <HAL_GPIO_WritePin>
 8002500:	2200      	movs	r2, #0
 8002502:	2104      	movs	r1, #4
 8002504:	4828      	ldr	r0, [pc, #160]	@ (80025a8 <user_control+0x1ec>)
 8002506:	f002 ff79 	bl	80053fc <HAL_GPIO_WritePin>
 800250a:	e047      	b.n	800259c <user_control+0x1e0>
		case A_ONE_LIHGRT:		RGB_one_light(0,400);RGB_OFF_ALL;break;
 800250c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002510:	2000      	movs	r0, #0
 8002512:	f7ff fe99 	bl	8002248 <RGB_one_light>
 8002516:	2200      	movs	r2, #0
 8002518:	2104      	movs	r1, #4
 800251a:	4822      	ldr	r0, [pc, #136]	@ (80025a4 <user_control+0x1e8>)
 800251c:	f002 ff6e 	bl	80053fc <HAL_GPIO_WritePin>
 8002520:	2200      	movs	r2, #0
 8002522:	2108      	movs	r1, #8
 8002524:	481f      	ldr	r0, [pc, #124]	@ (80025a4 <user_control+0x1e8>)
 8002526:	f002 ff69 	bl	80053fc <HAL_GPIO_WritePin>
 800252a:	2200      	movs	r2, #0
 800252c:	2110      	movs	r1, #16
 800252e:	481d      	ldr	r0, [pc, #116]	@ (80025a4 <user_control+0x1e8>)
 8002530:	f002 ff64 	bl	80053fc <HAL_GPIO_WritePin>
 8002534:	2200      	movs	r2, #0
 8002536:	2102      	movs	r1, #2
 8002538:	481b      	ldr	r0, [pc, #108]	@ (80025a8 <user_control+0x1ec>)
 800253a:	f002 ff5f 	bl	80053fc <HAL_GPIO_WritePin>
 800253e:	2200      	movs	r2, #0
 8002540:	2180      	movs	r1, #128	@ 0x80
 8002542:	4818      	ldr	r0, [pc, #96]	@ (80025a4 <user_control+0x1e8>)
 8002544:	f002 ff5a 	bl	80053fc <HAL_GPIO_WritePin>
 8002548:	2200      	movs	r2, #0
 800254a:	2104      	movs	r1, #4
 800254c:	4816      	ldr	r0, [pc, #88]	@ (80025a8 <user_control+0x1ec>)
 800254e:	f002 ff55 	bl	80053fc <HAL_GPIO_WritePin>
 8002552:	e023      	b.n	800259c <user_control+0x1e0>
		case B_ONE_LIHGRT:		RGB_one_light(1,400);RGB_OFF_ALL;break;
 8002554:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002558:	2001      	movs	r0, #1
 800255a:	f7ff fe75 	bl	8002248 <RGB_one_light>
 800255e:	2200      	movs	r2, #0
 8002560:	2104      	movs	r1, #4
 8002562:	4810      	ldr	r0, [pc, #64]	@ (80025a4 <user_control+0x1e8>)
 8002564:	f002 ff4a 	bl	80053fc <HAL_GPIO_WritePin>
 8002568:	2200      	movs	r2, #0
 800256a:	2108      	movs	r1, #8
 800256c:	480d      	ldr	r0, [pc, #52]	@ (80025a4 <user_control+0x1e8>)
 800256e:	f002 ff45 	bl	80053fc <HAL_GPIO_WritePin>
 8002572:	2200      	movs	r2, #0
 8002574:	2110      	movs	r1, #16
 8002576:	480b      	ldr	r0, [pc, #44]	@ (80025a4 <user_control+0x1e8>)
 8002578:	f002 ff40 	bl	80053fc <HAL_GPIO_WritePin>
 800257c:	2200      	movs	r2, #0
 800257e:	2102      	movs	r1, #2
 8002580:	4809      	ldr	r0, [pc, #36]	@ (80025a8 <user_control+0x1ec>)
 8002582:	f002 ff3b 	bl	80053fc <HAL_GPIO_WritePin>
 8002586:	2200      	movs	r2, #0
 8002588:	2180      	movs	r1, #128	@ 0x80
 800258a:	4806      	ldr	r0, [pc, #24]	@ (80025a4 <user_control+0x1e8>)
 800258c:	f002 ff36 	bl	80053fc <HAL_GPIO_WritePin>
 8002590:	2200      	movs	r2, #0
 8002592:	2104      	movs	r1, #4
 8002594:	4804      	ldr	r0, [pc, #16]	@ (80025a8 <user_control+0x1ec>)
 8002596:	f002 ff31 	bl	80053fc <HAL_GPIO_WritePin>
 800259a:	bf00      	nop
	}
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40011800 	.word	0x40011800
 80025a8:	40012000 	.word	0x40012000

080025ac <Set_RGB>:
 *color：选择需要显示的颜色 Choose the color you want to display
 *
 *
 * */
void Set_RGB(car_RGB light, RGB_Color color)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	460a      	mov	r2, r1
 80025b6:	71fb      	strb	r3, [r7, #7]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71bb      	strb	r3, [r7, #6]
	uint8_t Light_RGB = light;
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	73fb      	strb	r3, [r7, #15]
	switch (Light_RGB)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d010      	beq.n	80025e8 <Set_RGB+0x3c>
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	dc17      	bgt.n	80025fa <Set_RGB+0x4e>
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d002      	beq.n	80025d4 <Set_RGB+0x28>
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d005      	beq.n	80025de <Set_RGB+0x32>
 80025d2:	e012      	b.n	80025fa <Set_RGB+0x4e>
	{
	case RGB_R:
		Set_color_R(color);
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f836 	bl	8002648 <Set_color_R>
		break;
 80025dc:	e02c      	b.n	8002638 <Set_RGB+0x8c>
	case RGB_L:
		Set_color_L(color);
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f8d1 	bl	8002788 <Set_color_L>
		break;
 80025e6:	e027      	b.n	8002638 <Set_RGB+0x8c>
	case RGB_Max:
		Set_color_R(color);
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f82c 	bl	8002648 <Set_color_R>
		Set_color_L(color);
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8c8 	bl	8002788 <Set_color_L>
		break;
 80025f8:	e01e      	b.n	8002638 <Set_RGB+0x8c>
	default:
		RGB_OFF_ALL;
 80025fa:	2200      	movs	r2, #0
 80025fc:	2104      	movs	r1, #4
 80025fe:	4810      	ldr	r0, [pc, #64]	@ (8002640 <Set_RGB+0x94>)
 8002600:	f002 fefc 	bl	80053fc <HAL_GPIO_WritePin>
 8002604:	2200      	movs	r2, #0
 8002606:	2108      	movs	r1, #8
 8002608:	480d      	ldr	r0, [pc, #52]	@ (8002640 <Set_RGB+0x94>)
 800260a:	f002 fef7 	bl	80053fc <HAL_GPIO_WritePin>
 800260e:	2200      	movs	r2, #0
 8002610:	2110      	movs	r1, #16
 8002612:	480b      	ldr	r0, [pc, #44]	@ (8002640 <Set_RGB+0x94>)
 8002614:	f002 fef2 	bl	80053fc <HAL_GPIO_WritePin>
 8002618:	2200      	movs	r2, #0
 800261a:	2102      	movs	r1, #2
 800261c:	4809      	ldr	r0, [pc, #36]	@ (8002644 <Set_RGB+0x98>)
 800261e:	f002 feed 	bl	80053fc <HAL_GPIO_WritePin>
 8002622:	2200      	movs	r2, #0
 8002624:	2180      	movs	r1, #128	@ 0x80
 8002626:	4806      	ldr	r0, [pc, #24]	@ (8002640 <Set_RGB+0x94>)
 8002628:	f002 fee8 	bl	80053fc <HAL_GPIO_WritePin>
 800262c:	2200      	movs	r2, #0
 800262e:	2104      	movs	r1, #4
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <Set_RGB+0x98>)
 8002632:	f002 fee3 	bl	80053fc <HAL_GPIO_WritePin>
	}
}
 8002636:	bf00      	nop
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40011800 	.word	0x40011800
 8002644:	40012000 	.word	0x40012000

08002648 <Set_color_R>:
/*
 * 打开右边的探照灯并显示颜色 Turn on the searchlight on the right and show the color
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_R(RGB_Color color)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	switch (color)
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b06      	cmp	r3, #6
 8002656:	f200 8081 	bhi.w	800275c <Set_color_R+0x114>
 800265a:	a201      	add	r2, pc, #4	@ (adr r2, 8002660 <Set_color_R+0x18>)
 800265c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002660:	0800267d 	.word	0x0800267d
 8002664:	0800269d 	.word	0x0800269d
 8002668:	080026bd 	.word	0x080026bd
 800266c:	080026dd 	.word	0x080026dd
 8002670:	080026fd 	.word	0x080026fd
 8002674:	0800271d 	.word	0x0800271d
 8002678:	0800273d 	.word	0x0800273d
	{
	case red:
		RRGB_SET(set, reset, reset);
 800267c:	2201      	movs	r2, #1
 800267e:	2104      	movs	r1, #4
 8002680:	4840      	ldr	r0, [pc, #256]	@ (8002784 <Set_color_R+0x13c>)
 8002682:	f002 febb 	bl	80053fc <HAL_GPIO_WritePin>
 8002686:	2200      	movs	r2, #0
 8002688:	2108      	movs	r1, #8
 800268a:	483e      	ldr	r0, [pc, #248]	@ (8002784 <Set_color_R+0x13c>)
 800268c:	f002 feb6 	bl	80053fc <HAL_GPIO_WritePin>
 8002690:	2200      	movs	r2, #0
 8002692:	2110      	movs	r1, #16
 8002694:	483b      	ldr	r0, [pc, #236]	@ (8002784 <Set_color_R+0x13c>)
 8002696:	f002 feb1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800269a:	e06f      	b.n	800277c <Set_color_R+0x134>
	case green:
		RRGB_SET(reset, set, reset);
 800269c:	2200      	movs	r2, #0
 800269e:	2104      	movs	r1, #4
 80026a0:	4838      	ldr	r0, [pc, #224]	@ (8002784 <Set_color_R+0x13c>)
 80026a2:	f002 feab 	bl	80053fc <HAL_GPIO_WritePin>
 80026a6:	2201      	movs	r2, #1
 80026a8:	2108      	movs	r1, #8
 80026aa:	4836      	ldr	r0, [pc, #216]	@ (8002784 <Set_color_R+0x13c>)
 80026ac:	f002 fea6 	bl	80053fc <HAL_GPIO_WritePin>
 80026b0:	2200      	movs	r2, #0
 80026b2:	2110      	movs	r1, #16
 80026b4:	4833      	ldr	r0, [pc, #204]	@ (8002784 <Set_color_R+0x13c>)
 80026b6:	f002 fea1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 80026ba:	e05f      	b.n	800277c <Set_color_R+0x134>
	case blue:
		RRGB_SET(reset, reset, set);
 80026bc:	2200      	movs	r2, #0
 80026be:	2104      	movs	r1, #4
 80026c0:	4830      	ldr	r0, [pc, #192]	@ (8002784 <Set_color_R+0x13c>)
 80026c2:	f002 fe9b 	bl	80053fc <HAL_GPIO_WritePin>
 80026c6:	2200      	movs	r2, #0
 80026c8:	2108      	movs	r1, #8
 80026ca:	482e      	ldr	r0, [pc, #184]	@ (8002784 <Set_color_R+0x13c>)
 80026cc:	f002 fe96 	bl	80053fc <HAL_GPIO_WritePin>
 80026d0:	2201      	movs	r2, #1
 80026d2:	2110      	movs	r1, #16
 80026d4:	482b      	ldr	r0, [pc, #172]	@ (8002784 <Set_color_R+0x13c>)
 80026d6:	f002 fe91 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 80026da:	e04f      	b.n	800277c <Set_color_R+0x134>
	case yellow:
		RRGB_SET(set, set, reset);
 80026dc:	2201      	movs	r2, #1
 80026de:	2104      	movs	r1, #4
 80026e0:	4828      	ldr	r0, [pc, #160]	@ (8002784 <Set_color_R+0x13c>)
 80026e2:	f002 fe8b 	bl	80053fc <HAL_GPIO_WritePin>
 80026e6:	2201      	movs	r2, #1
 80026e8:	2108      	movs	r1, #8
 80026ea:	4826      	ldr	r0, [pc, #152]	@ (8002784 <Set_color_R+0x13c>)
 80026ec:	f002 fe86 	bl	80053fc <HAL_GPIO_WritePin>
 80026f0:	2200      	movs	r2, #0
 80026f2:	2110      	movs	r1, #16
 80026f4:	4823      	ldr	r0, [pc, #140]	@ (8002784 <Set_color_R+0x13c>)
 80026f6:	f002 fe81 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 80026fa:	e03f      	b.n	800277c <Set_color_R+0x134>
	case purple:
		RRGB_SET(set, reset, set);
 80026fc:	2201      	movs	r2, #1
 80026fe:	2104      	movs	r1, #4
 8002700:	4820      	ldr	r0, [pc, #128]	@ (8002784 <Set_color_R+0x13c>)
 8002702:	f002 fe7b 	bl	80053fc <HAL_GPIO_WritePin>
 8002706:	2200      	movs	r2, #0
 8002708:	2108      	movs	r1, #8
 800270a:	481e      	ldr	r0, [pc, #120]	@ (8002784 <Set_color_R+0x13c>)
 800270c:	f002 fe76 	bl	80053fc <HAL_GPIO_WritePin>
 8002710:	2201      	movs	r2, #1
 8002712:	2110      	movs	r1, #16
 8002714:	481b      	ldr	r0, [pc, #108]	@ (8002784 <Set_color_R+0x13c>)
 8002716:	f002 fe71 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800271a:	e02f      	b.n	800277c <Set_color_R+0x134>
	case lake:
		RRGB_SET(reset, set, set);
 800271c:	2200      	movs	r2, #0
 800271e:	2104      	movs	r1, #4
 8002720:	4818      	ldr	r0, [pc, #96]	@ (8002784 <Set_color_R+0x13c>)
 8002722:	f002 fe6b 	bl	80053fc <HAL_GPIO_WritePin>
 8002726:	2201      	movs	r2, #1
 8002728:	2108      	movs	r1, #8
 800272a:	4816      	ldr	r0, [pc, #88]	@ (8002784 <Set_color_R+0x13c>)
 800272c:	f002 fe66 	bl	80053fc <HAL_GPIO_WritePin>
 8002730:	2201      	movs	r2, #1
 8002732:	2110      	movs	r1, #16
 8002734:	4813      	ldr	r0, [pc, #76]	@ (8002784 <Set_color_R+0x13c>)
 8002736:	f002 fe61 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800273a:	e01f      	b.n	800277c <Set_color_R+0x134>
	case write:
		RRGB_SET(set, set, set);
 800273c:	2201      	movs	r2, #1
 800273e:	2104      	movs	r1, #4
 8002740:	4810      	ldr	r0, [pc, #64]	@ (8002784 <Set_color_R+0x13c>)
 8002742:	f002 fe5b 	bl	80053fc <HAL_GPIO_WritePin>
 8002746:	2201      	movs	r2, #1
 8002748:	2108      	movs	r1, #8
 800274a:	480e      	ldr	r0, [pc, #56]	@ (8002784 <Set_color_R+0x13c>)
 800274c:	f002 fe56 	bl	80053fc <HAL_GPIO_WritePin>
 8002750:	2201      	movs	r2, #1
 8002752:	2110      	movs	r1, #16
 8002754:	480b      	ldr	r0, [pc, #44]	@ (8002784 <Set_color_R+0x13c>)
 8002756:	f002 fe51 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800275a:	e00f      	b.n	800277c <Set_color_R+0x134>
	default:
		RGB_OFF_R;
 800275c:	2200      	movs	r2, #0
 800275e:	2104      	movs	r1, #4
 8002760:	4808      	ldr	r0, [pc, #32]	@ (8002784 <Set_color_R+0x13c>)
 8002762:	f002 fe4b 	bl	80053fc <HAL_GPIO_WritePin>
 8002766:	2200      	movs	r2, #0
 8002768:	2108      	movs	r1, #8
 800276a:	4806      	ldr	r0, [pc, #24]	@ (8002784 <Set_color_R+0x13c>)
 800276c:	f002 fe46 	bl	80053fc <HAL_GPIO_WritePin>
 8002770:	2200      	movs	r2, #0
 8002772:	2110      	movs	r1, #16
 8002774:	4803      	ldr	r0, [pc, #12]	@ (8002784 <Set_color_R+0x13c>)
 8002776:	f002 fe41 	bl	80053fc <HAL_GPIO_WritePin>
	}
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40011800 	.word	0x40011800

08002788 <Set_color_L>:
/*
 * 打开左边的探照灯并显示颜色 Turn on the left searchlight and show colors
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_L(RGB_Color color)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
	switch (color)
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b06      	cmp	r3, #6
 8002796:	f200 8081 	bhi.w	800289c <Set_color_L+0x114>
 800279a:	a201      	add	r2, pc, #4	@ (adr r2, 80027a0 <Set_color_L+0x18>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080027bd 	.word	0x080027bd
 80027a4:	080027dd 	.word	0x080027dd
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	0800281d 	.word	0x0800281d
 80027b0:	0800283d 	.word	0x0800283d
 80027b4:	0800285d 	.word	0x0800285d
 80027b8:	0800287d 	.word	0x0800287d
	{
	case red:
		LRGB_SET(set, reset, reset);
 80027bc:	2201      	movs	r2, #1
 80027be:	2102      	movs	r1, #2
 80027c0:	4840      	ldr	r0, [pc, #256]	@ (80028c4 <Set_color_L+0x13c>)
 80027c2:	f002 fe1b 	bl	80053fc <HAL_GPIO_WritePin>
 80027c6:	2200      	movs	r2, #0
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	483f      	ldr	r0, [pc, #252]	@ (80028c8 <Set_color_L+0x140>)
 80027cc:	f002 fe16 	bl	80053fc <HAL_GPIO_WritePin>
 80027d0:	2200      	movs	r2, #0
 80027d2:	2104      	movs	r1, #4
 80027d4:	483b      	ldr	r0, [pc, #236]	@ (80028c4 <Set_color_L+0x13c>)
 80027d6:	f002 fe11 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 80027da:	e06f      	b.n	80028bc <Set_color_L+0x134>
	case green:
		LRGB_SET(reset, set, reset);
 80027dc:	2200      	movs	r2, #0
 80027de:	2102      	movs	r1, #2
 80027e0:	4838      	ldr	r0, [pc, #224]	@ (80028c4 <Set_color_L+0x13c>)
 80027e2:	f002 fe0b 	bl	80053fc <HAL_GPIO_WritePin>
 80027e6:	2201      	movs	r2, #1
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	4837      	ldr	r0, [pc, #220]	@ (80028c8 <Set_color_L+0x140>)
 80027ec:	f002 fe06 	bl	80053fc <HAL_GPIO_WritePin>
 80027f0:	2200      	movs	r2, #0
 80027f2:	2104      	movs	r1, #4
 80027f4:	4833      	ldr	r0, [pc, #204]	@ (80028c4 <Set_color_L+0x13c>)
 80027f6:	f002 fe01 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 80027fa:	e05f      	b.n	80028bc <Set_color_L+0x134>
	case blue:
		LRGB_SET(reset, reset, set);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2102      	movs	r1, #2
 8002800:	4830      	ldr	r0, [pc, #192]	@ (80028c4 <Set_color_L+0x13c>)
 8002802:	f002 fdfb 	bl	80053fc <HAL_GPIO_WritePin>
 8002806:	2200      	movs	r2, #0
 8002808:	2180      	movs	r1, #128	@ 0x80
 800280a:	482f      	ldr	r0, [pc, #188]	@ (80028c8 <Set_color_L+0x140>)
 800280c:	f002 fdf6 	bl	80053fc <HAL_GPIO_WritePin>
 8002810:	2201      	movs	r2, #1
 8002812:	2104      	movs	r1, #4
 8002814:	482b      	ldr	r0, [pc, #172]	@ (80028c4 <Set_color_L+0x13c>)
 8002816:	f002 fdf1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800281a:	e04f      	b.n	80028bc <Set_color_L+0x134>
	case yellow:
		LRGB_SET(set, set, 0);
 800281c:	2201      	movs	r2, #1
 800281e:	2102      	movs	r1, #2
 8002820:	4828      	ldr	r0, [pc, #160]	@ (80028c4 <Set_color_L+0x13c>)
 8002822:	f002 fdeb 	bl	80053fc <HAL_GPIO_WritePin>
 8002826:	2201      	movs	r2, #1
 8002828:	2180      	movs	r1, #128	@ 0x80
 800282a:	4827      	ldr	r0, [pc, #156]	@ (80028c8 <Set_color_L+0x140>)
 800282c:	f002 fde6 	bl	80053fc <HAL_GPIO_WritePin>
 8002830:	2200      	movs	r2, #0
 8002832:	2104      	movs	r1, #4
 8002834:	4823      	ldr	r0, [pc, #140]	@ (80028c4 <Set_color_L+0x13c>)
 8002836:	f002 fde1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800283a:	e03f      	b.n	80028bc <Set_color_L+0x134>
	case purple:
		LRGB_SET(set, reset, set);
 800283c:	2201      	movs	r2, #1
 800283e:	2102      	movs	r1, #2
 8002840:	4820      	ldr	r0, [pc, #128]	@ (80028c4 <Set_color_L+0x13c>)
 8002842:	f002 fddb 	bl	80053fc <HAL_GPIO_WritePin>
 8002846:	2200      	movs	r2, #0
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	481f      	ldr	r0, [pc, #124]	@ (80028c8 <Set_color_L+0x140>)
 800284c:	f002 fdd6 	bl	80053fc <HAL_GPIO_WritePin>
 8002850:	2201      	movs	r2, #1
 8002852:	2104      	movs	r1, #4
 8002854:	481b      	ldr	r0, [pc, #108]	@ (80028c4 <Set_color_L+0x13c>)
 8002856:	f002 fdd1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800285a:	e02f      	b.n	80028bc <Set_color_L+0x134>
	case lake:
		LRGB_SET(reset, set, set);
 800285c:	2200      	movs	r2, #0
 800285e:	2102      	movs	r1, #2
 8002860:	4818      	ldr	r0, [pc, #96]	@ (80028c4 <Set_color_L+0x13c>)
 8002862:	f002 fdcb 	bl	80053fc <HAL_GPIO_WritePin>
 8002866:	2201      	movs	r2, #1
 8002868:	2180      	movs	r1, #128	@ 0x80
 800286a:	4817      	ldr	r0, [pc, #92]	@ (80028c8 <Set_color_L+0x140>)
 800286c:	f002 fdc6 	bl	80053fc <HAL_GPIO_WritePin>
 8002870:	2201      	movs	r2, #1
 8002872:	2104      	movs	r1, #4
 8002874:	4813      	ldr	r0, [pc, #76]	@ (80028c4 <Set_color_L+0x13c>)
 8002876:	f002 fdc1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800287a:	e01f      	b.n	80028bc <Set_color_L+0x134>
	case write:
		LRGB_SET(set, set, set);
 800287c:	2201      	movs	r2, #1
 800287e:	2102      	movs	r1, #2
 8002880:	4810      	ldr	r0, [pc, #64]	@ (80028c4 <Set_color_L+0x13c>)
 8002882:	f002 fdbb 	bl	80053fc <HAL_GPIO_WritePin>
 8002886:	2201      	movs	r2, #1
 8002888:	2180      	movs	r1, #128	@ 0x80
 800288a:	480f      	ldr	r0, [pc, #60]	@ (80028c8 <Set_color_L+0x140>)
 800288c:	f002 fdb6 	bl	80053fc <HAL_GPIO_WritePin>
 8002890:	2201      	movs	r2, #1
 8002892:	2104      	movs	r1, #4
 8002894:	480b      	ldr	r0, [pc, #44]	@ (80028c4 <Set_color_L+0x13c>)
 8002896:	f002 fdb1 	bl	80053fc <HAL_GPIO_WritePin>
		break;
 800289a:	e00f      	b.n	80028bc <Set_color_L+0x134>
	default:
		RGB_OFF_L;
 800289c:	2200      	movs	r2, #0
 800289e:	2102      	movs	r1, #2
 80028a0:	4808      	ldr	r0, [pc, #32]	@ (80028c4 <Set_color_L+0x13c>)
 80028a2:	f002 fdab 	bl	80053fc <HAL_GPIO_WritePin>
 80028a6:	2200      	movs	r2, #0
 80028a8:	2180      	movs	r1, #128	@ 0x80
 80028aa:	4807      	ldr	r0, [pc, #28]	@ (80028c8 <Set_color_L+0x140>)
 80028ac:	f002 fda6 	bl	80053fc <HAL_GPIO_WritePin>
 80028b0:	2200      	movs	r2, #0
 80028b2:	2104      	movs	r1, #4
 80028b4:	4803      	ldr	r0, [pc, #12]	@ (80028c4 <Set_color_L+0x13c>)
 80028b6:	f002 fda1 	bl	80053fc <HAL_GPIO_WritePin>
	}
}
 80028ba:	bf00      	nop
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40012000 	.word	0x40012000
 80028c8:	40011800 	.word	0x40011800

080028cc <BSP_Init>:
#include "bsp.h"

//Hardware Initialization
//Parameter:None
void BSP_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
	Delay_Init();
 80028d0:	f000 f81e 	bl	8002910 <Delay_Init>

	PID_Param_Init();//电机PID初始化 Motor PID initialization
 80028d4:	f000 fcd8 	bl	8003288 <PID_Param_Init>
	Bsp_Tim_Init();//电机相关定时器初始化 Motor related timer initialization
 80028d8:	f000 ffca 	bl	8003870 <Bsp_Tim_Init>

	OLED_Init();
 80028dc:	f7fe fcfc 	bl	80012d8 <OLED_Init>
	OLED_Draw_Line("PS2 control Car!",1,false,true);
 80028e0:	2301      	movs	r3, #1
 80028e2:	2200      	movs	r2, #0
 80028e4:	2101      	movs	r1, #1
 80028e6:	4806      	ldr	r0, [pc, #24]	@ (8002900 <BSP_Init+0x34>)
 80028e8:	f7fe ff1a 	bl	8001720 <OLED_Draw_Line>

	PS2_SetInit();//强制进入红绿模式 Forced entry into red green mode
 80028ec:	f7ff fbc8 	bl	8002080 <PS2_SetInit>

	Motion_Set_Speed(0,0,0,0);//小车停止 Car stop
 80028f0:	2300      	movs	r3, #0
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f000 f9ac 	bl	8002c54 <Motion_Set_Speed>

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	0800d2fc 	.word	0x0800d2fc

08002904 <BSP_Loop>:

//Loop Run Function
//Parameter:None
void BSP_Loop(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	User_PS2_Control();
 8002908:	f7fe ff32 	bl	8001770 <User_PS2_Control>
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <Delay_Init>:
// 函数功能:延迟初始化
// 传递参数:无
// Function function: Delay initialization
// Pass parameters: None
void Delay_Init(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
	// Because it is the main frequency of 72MHz 一般是72
	//  Due to the presence of_ The systick has been configured in Init, so there is no need to reconfigure it here
	g_fac_us = 72; /* 由于在HAL_Init中已对systick做了配置，所以这里无需重新配置 */
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <Delay_Init+0x14>)
 8002916:	2248      	movs	r2, #72	@ 0x48
 8002918:	601a      	str	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	200004b4 	.word	0x200004b4

08002928 <Delay_Us>:
**Function Description: Delay Nus, where Nus is the number of us to delay (using clock picking method to do us delay)
**Input parameter: nus
**Output parameter: None
***********************************************************/
void Delay_Us(uint32_t nus)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	@ 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	uint32_t told, tnow, tcnt = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
	uint32_t reload = SysTick->LOAD; /*The value of LOAD LOAD的值 */
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <Delay_Us+0x74>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	617b      	str	r3, [r7, #20]
	ticks = nus * g_fac_us;			 /*Number of beats required 需要的节拍数 */
 800293a:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <Delay_Us+0x78>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	613b      	str	r3, [r7, #16]
	told = SysTick->VAL;			 /*Counter value at the beginning of entry 刚进入时的计数器值 */
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <Delay_Us+0x74>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61fb      	str	r3, [r7, #28]
	while (1)
	{
		tnow = SysTick->VAL;
 800294c:	4b13      	ldr	r3, [pc, #76]	@ (800299c <Delay_Us+0x74>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	60fb      	str	r3, [r7, #12]
		if (tnow != told)
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	429a      	cmp	r2, r3
 8002958:	d0f8      	beq.n	800294c <Delay_Us+0x24>
		{
			if (tnow < told)
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	429a      	cmp	r2, r3
 8002960:	d206      	bcs.n	8002970 <Delay_Us+0x48>
			{
				tcnt += told - tnow; /*Please note that SYSTEM is a decreasing counter 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	e007      	b.n	8002980 <Delay_Us+0x58>
			}
			else
			{
				tcnt += reload - tnow + told;
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d200      	bcs.n	800298e <Delay_Us+0x66>
		tnow = SysTick->VAL;
 800298c:	e7de      	b.n	800294c <Delay_Us+0x24>
			{
				break; /*Exit if the time exceeds/equals the time to be delayed 时间超过/等于要延迟的时间,则退出 */
 800298e:	bf00      	nop
			}
		}
	}
}
 8002990:	bf00      	nop
 8002992:	3724      	adds	r7, #36	@ 0x24
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010
 80029a0:	200004b4 	.word	0x200004b4

080029a4 <Delay_Ms>:
**Function Description: Delay Nus, where Nus is the number of us to delay (using clock picking method to do us delay)
**Input parameter: nus
**Output parameter: None
***********************************************************/
void Delay_Ms(uint16_t nms)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
	Delay_Us((uint32_t)(nms * 1000)); /*Normal mode delay 普通方式延时 */
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ffb5 	bl	8002928 <Delay_Us>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d841      	bhi.n	8002a60 <Encoder_Read_CNT+0x98>
 80029dc:	a201      	add	r2, pc, #4	@ (adr r2, 80029e4 <Encoder_Read_CNT+0x1c>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	080029f5 	.word	0x080029f5
 80029e8:	08002a0f 	.word	0x08002a0f
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a47 	.word	0x08002a47
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 80029f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a70 <Encoder_Read_CNT+0xa8>)
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 80029fe:	337f      	adds	r3, #127	@ 0x7f
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 8002a04:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <Encoder_Read_CNT+0xa8>)
 8002a06:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002a0c:	e029      	b.n	8002a62 <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 8002a0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002a1a:	337f      	adds	r3, #127	@ 0x7f
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 8002a20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a28:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002a2a:	e01a      	b.n	8002a62 <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <Encoder_Read_CNT+0xac>)
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002a36:	337f      	adds	r3, #127	@ 0x7f
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <Encoder_Read_CNT+0xac>)
 8002a3e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a42:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002a44:	e00d      	b.n	8002a62 <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	@ (8002a78 <Encoder_Read_CNT+0xb0>)
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002a50:	337f      	adds	r3, #127	@ 0x7f
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 8002a56:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <Encoder_Read_CNT+0xb0>)
 8002a58:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a5c:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002a5e:	e000      	b.n	8002a62 <Encoder_Read_CNT+0x9a>
	default:
		break;
 8002a60:	bf00      	nop
	}
	return Encoder_TIM;
 8002a62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00
 8002a78:	40000400 	.word	0x40000400

08002a7c <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <Encoder_Get_ALL+0x38>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <Encoder_Get_ALL+0x3c>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3308      	adds	r3, #8
 8002a9a:	4a08      	ldr	r2, [pc, #32]	@ (8002abc <Encoder_Get_ALL+0x40>)
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	4a06      	ldr	r2, [pc, #24]	@ (8002ac0 <Encoder_Get_ALL+0x44>)
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	601a      	str	r2, [r3, #0]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	200004b8 	.word	0x200004b8
 8002ab8:	200004bc 	.word	0x200004bc
 8002abc:	200004c0 	.word	0x200004c0
 8002ac0:	200004c4 	.word	0x200004c4

08002ac4 <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7ff ff7d 	bl	80029c8 <Encoder_Read_CNT>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <Encoder_Update_Count+0x58>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <Encoder_Update_Count+0x58>)
 8002ada:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f7ff ff73 	bl	80029c8 <Encoder_Read_CNT>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <Encoder_Update_Count+0x5c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <Encoder_Update_Count+0x5c>)
 8002aee:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 8002af0:	2002      	movs	r0, #2
 8002af2:	f7ff ff69 	bl	80029c8 <Encoder_Read_CNT>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <Encoder_Update_Count+0x60>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <Encoder_Update_Count+0x60>)
 8002b02:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f7ff ff5f 	bl	80029c8 <Encoder_Read_CNT>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <Encoder_Update_Count+0x64>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4413      	add	r3, r2
 8002b14:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <Encoder_Update_Count+0x64>)
 8002b16:	6013      	str	r3, [r2, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200004b8 	.word	0x200004b8
 8002b20:	200004bc 	.word	0x200004bc
 8002b24:	200004c0 	.word	0x200004c0
 8002b28:	200004c4 	.word	0x200004c4

08002b2c <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 8002b30:	4b02      	ldr	r3, [pc, #8]	@ (8002b3c <Motion_Get_Circle_Pulse+0x10>)
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	44820000 	.word	0x44820000

08002b40 <Motion_Set_Yaw_Adjust>:
}

// 设置偏航角状态，如果使能则刷新target目标角度。
//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d103      	bne.n	8002b58 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 8002b50:	4b05      	ldr	r3, [pc, #20]	@ (8002b68 <Motion_Set_Yaw_Adjust+0x28>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e002      	b.n	8002b5e <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 8002b58:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <Motion_Set_Yaw_Adjust+0x28>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset(获取当前IMU偏航角-yaw);
    }
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	2000054c 	.word	0x2000054c

08002b6c <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	4611      	mov	r1, r2
 8002b78:	461a      	mov	r2, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	80fb      	strh	r3, [r7, #6]
 8002b7e:	4603      	mov	r3, r0
 8002b80:	80bb      	strh	r3, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]
 8002b86:	4613      	mov	r3, r2
 8002b88:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 8002b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8e:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002b92:	db0a      	blt.n	8002baa <Motion_Set_Pwm+0x3e>
 8002b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b98:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002b9c:	dc05      	bgt.n	8002baa <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8002b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f000 fdcf 	bl	8003748 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 8002baa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bae:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002bb2:	db0a      	blt.n	8002bca <Motion_Set_Pwm+0x5e>
 8002bb4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bb8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002bbc:	dc05      	bgt.n	8002bca <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8002bbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f000 fdbf 	bl	8003748 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8002bca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bce:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002bd2:	db0a      	blt.n	8002bea <Motion_Set_Pwm+0x7e>
 8002bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bd8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002bdc:	dc05      	bgt.n	8002bea <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8002bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002be2:	4619      	mov	r1, r3
 8002be4:	2002      	movs	r0, #2
 8002be6:	f000 fdaf 	bl	8003748 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8002bea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002bee:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002bf2:	db0a      	blt.n	8002c0a <Motion_Set_Pwm+0x9e>
 8002bf4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002bf8:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002bfc:	dc05      	bgt.n	8002c0a <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8002bfe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c02:	4619      	mov	r1, r3
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 fd9f 	bl	8003748 <Motor_Set_Pwm>
    }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}
	...

08002c14 <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2200      	movs	r2, #0
 8002c22:	2100      	movs	r1, #0
 8002c24:	2000      	movs	r0, #0
 8002c26:	f000 f815 	bl	8002c54 <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8002c2a:	2004      	movs	r0, #4
 8002c2c:	f000 fc64 	bl	80034f8 <PID_Clear_Motor>
    g_start_ctrl = 0;
 8002c30:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <Motion_Stop+0x38>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <Motion_Stop+0x3c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 8002c3c:	79fb      	ldrb	r3, [r7, #7]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fd36 	bl	80036b0 <Motor_Stop>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000518 	.word	0x20000518
 8002c50:	2000054c 	.word	0x2000054c

08002c54 <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	4611      	mov	r1, r2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	80fb      	strh	r3, [r7, #6]
 8002c66:	4603      	mov	r3, r0
 8002c68:	80bb      	strh	r3, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	807b      	strh	r3, [r7, #2]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8002c72:	4b18      	ldr	r3, [pc, #96]	@ (8002cd4 <Motion_Set_Speed+0x80>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <Motion_Set_Speed+0x84>)
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 8002c7e:	4a16      	ldr	r2, [pc, #88]	@ (8002cd8 <Motion_Set_Speed+0x84>)
 8002c80:	88bb      	ldrh	r3, [r7, #4]
 8002c82:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 8002c84:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <Motion_Set_Speed+0x84>)
 8002c86:	887b      	ldrh	r3, [r7, #2]
 8002c88:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 8002c8a:	4a13      	ldr	r2, [pc, #76]	@ (8002cd8 <Motion_Set_Speed+0x84>)
 8002c8c:	883b      	ldrh	r3, [r7, #0]
 8002c8e:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e016      	b.n	8002cc4 <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd8 <Motion_Set_Speed+0x84>)
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc1b 	bl	80004dc <__aeabi_i2d>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4610      	mov	r0, r2
 8002cac:	4619      	mov	r1, r3
 8002cae:	f7fd ff77 	bl	8000ba0 <__aeabi_d2f>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fca9 	bl	8003610 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d9e5      	bls.n	8002c96 <Motion_Set_Speed+0x42>
    }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd90      	pop	{r4, r7, pc}
 8002cd4:	20000518 	.word	0x20000518
 8002cd8:	20000524 	.word	0x20000524

08002cdc <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	@ 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    int i = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 8002cf6:	f000 f8d3 	bl	8002ea0 <Motion_Get_Circle_MM>
 8002cfa:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8002cfc:	f7ff ff16 	bl	8002b2c <Motion_Get_Circle_Pulse>
 8002d00:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 8002d02:	f000 f8c3 	bl	8002e8c <Motion_Get_APB>
 8002d06:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8002d08:	f000 f8d4 	bl	8002eb4 <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d10:	e01e      	b.n	8002d50 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 8002d12:	4a5a      	ldr	r2, [pc, #360]	@ (8002e7c <Motion_Get_Speed+0x1a0>)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1a:	2264      	movs	r2, #100	@ 0x64
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe f847 	bl	8000db4 <__aeabi_i2f>
 8002d26:	4603      	mov	r3, r0
 8002d28:	6a39      	ldr	r1, [r7, #32]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe f896 	bl	8000e5c <__aeabi_fmul>
 8002d30:	4603      	mov	r3, r0
 8002d32:	69f9      	ldr	r1, [r7, #28]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe f945 	bl	8000fc4 <__aeabi_fdiv>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	3328      	adds	r3, #40	@ 0x28
 8002d44:	443b      	add	r3, r7
 8002d46:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	dddd      	ble.n	8002d12 <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd ff75 	bl	8000c4c <__addsf3>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f7fd ff6e 	bl	8000c4c <__addsf3>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4610      	mov	r0, r2
 8002d7a:	f7fd ff67 	bl	8000c4c <__addsf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f91d 	bl	8000fc4 <__aeabi_fdiv>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe fa2b 	bl	80011e8 <__aeabi_f2iz>
 8002d92:	4603      	mov	r3, r0
 8002d94:	b21a      	sxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd ff51 	bl	8000c48 <__aeabi_fsub>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fd ff4a 	bl	8000c48 <__aeabi_fsub>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fd ff45 	bl	8000c4c <__addsf3>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002dc8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f8f9 	bl	8000fc4 <__aeabi_fdiv>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fe fa07 	bl	80011e8 <__aeabi_f2iz>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b21a      	sxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ff2f 	bl	8000c4c <__addsf3>
 8002dee:	4603      	mov	r3, r0
 8002df0:	461a      	mov	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fd ff26 	bl	8000c48 <__aeabi_fsub>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fd ff1f 	bl	8000c48 <__aeabi_fsub>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002e10:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe f8d5 	bl	8000fc4 <__aeabi_fdiv>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f8d0 	bl	8000fc4 <__aeabi_fdiv>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4916      	ldr	r1, [pc, #88]	@ (8002e80 <Motion_Get_Speed+0x1a4>)
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f817 	bl	8000e5c <__aeabi_fmul>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe f9d9 	bl	80011e8 <__aeabi_f2iz>
 8002e36:	4603      	mov	r3, r0
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8002e3e:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <Motion_Get_Speed+0x1a8>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	e00c      	b.n	8002e66 <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	3328      	adds	r3, #40	@ 0x28
 8002e52:	443b      	add	r3, r7
 8002e54:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002e58:	490b      	ldr	r1, [pc, #44]	@ (8002e88 <Motion_Get_Speed+0x1ac>)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	3301      	adds	r3, #1
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	ddef      	ble.n	8002e4c <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 8002e6c:	4806      	ldr	r0, [pc, #24]	@ (8002e88 <Motion_Get_Speed+0x1ac>)
 8002e6e:	f000 fb1b 	bl	80034a8 <PID_Calc_Motor>
    }
}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000508 	.word	0x20000508
 8002e80:	447a0000 	.word	0x447a0000
 8002e84:	20000518 	.word	0x20000518
 8002e88:	20000524 	.word	0x20000524

08002e8c <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8002e90:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <Motion_Get_APB+0x10>)
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	431f0000 	.word	0x431f0000

08002ea0 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	@ (8002eb0 <Motion_Get_Circle_MM+0x10>)
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	434c33f8 	.word	0x434c33f8

08002eb4 <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8002eba:	4813      	ldr	r0, [pc, #76]	@ (8002f08 <Motion_Get_Encoder+0x54>)
 8002ebc:	f7ff fdde 	bl	8002a7c <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	71fb      	strb	r3, [r7, #7]
 8002ec4:	e017      	b.n	8002ef6 <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f08 <Motion_Get_Encoder+0x54>)
 8002eca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	@ (8002f0c <Motion_Get_Encoder+0x58>)
 8002ed2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002ed6:	79fb      	ldrb	r3, [r7, #7]
 8002ed8:	1a8a      	subs	r2, r1, r2
 8002eda:	490d      	ldr	r1, [pc, #52]	@ (8002f10 <Motion_Get_Encoder+0x5c>)
 8002edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8002ee0:	79fa      	ldrb	r2, [r7, #7]
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	4908      	ldr	r1, [pc, #32]	@ (8002f08 <Motion_Get_Encoder+0x54>)
 8002ee6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002eea:	4908      	ldr	r1, [pc, #32]	@ (8002f0c <Motion_Get_Encoder+0x58>)
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d9e4      	bls.n	8002ec6 <Motion_Get_Encoder+0x12>
    }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200004e8 	.word	0x200004e8
 8002f0c:	200004f8 	.word	0x200004f8
 8002f10:	20000508 	.word	0x20000508

08002f14 <wheel_State>:
// 控制小车运动状态
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	71fb      	strb	r3, [r7, #7]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 8002f24:	4a3f      	ldr	r2, [pc, #252]	@ (8003024 <wheel_State+0x110>)
 8002f26:	88bb      	ldrh	r3, [r7, #4]
 8002f28:	8013      	strh	r3, [r2, #0]
    switch (state)
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b07      	cmp	r3, #7
 8002f2e:	d873      	bhi.n	8003018 <wheel_State+0x104>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <wheel_State+0x24>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f59 	.word	0x08002f59
 8002f3c:	08002f73 	.word	0x08002f73
 8002f40:	08002f83 	.word	0x08002f83
 8002f44:	08002f97 	.word	0x08002f97
 8002f48:	08002fb7 	.word	0x08002fb7
 8002f4c:	08002fd1 	.word	0x08002fd1
 8002f50:	08002fef 	.word	0x08002fef
 8002f54:	08003011 	.word	0x08003011
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 8002f58:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <wheel_State+0x110>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8002f5e:	88bb      	ldrh	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fe52 	bl	8002c14 <Motion_Stop>
        break;
 8002f70:	e053      	b.n	800301a <wheel_State+0x106>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8002f72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f854 	bl	8003028 <wheel_Ctrl>
        break;
 8002f80:	e04b      	b.n	800301a <wheel_State+0x106>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8002f82:	88bb      	ldrh	r3, [r7, #4]
 8002f84:	425b      	negs	r3, r3
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b21b      	sxth	r3, r3
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f84a 	bl	8003028 <wheel_Ctrl>
        break;
 8002f94:	e041      	b.n	800301a <wheel_State+0x106>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8002f96:	88bb      	ldrh	r3, [r7, #4]
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	b218      	sxth	r0, r3
 8002f9e:	88bb      	ldrh	r3, [r7, #4]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	03d2      	lsls	r2, r2, #15
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b21b      	sxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f000 f83a 	bl	8003028 <wheel_Ctrl>
        break;
 8002fb4:	e031      	b.n	800301a <wheel_State+0x106>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8002fb6:	88bb      	ldrh	r3, [r7, #4]
 8002fb8:	085b      	lsrs	r3, r3, #1
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	b218      	sxth	r0, r3
 8002fbe:	88bb      	ldrh	r3, [r7, #4]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	b21b      	sxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2100      	movs	r1, #0
 8002fca:	f000 f82d 	bl	8003028 <wheel_Ctrl>

        break;
 8002fce:	e024      	b.n	800301a <wheel_State+0x106>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	f7ff fdb5 	bl	8002b40 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8002fd6:	88bb      	ldrh	r3, [r7, #4]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	0092      	lsls	r2, r2, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f000 f81e 	bl	8003028 <wheel_Ctrl>
        break;
 8002fec:	e015      	b.n	800301a <wheel_State+0x106>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f7ff fda6 	bl	8002b40 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8002ff4:	88bb      	ldrh	r3, [r7, #4]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	0392      	lsls	r2, r2, #14
 8002ffa:	1ad2      	subs	r2, r2, r3
 8002ffc:	0092      	lsls	r2, r2, #2
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	b29b      	uxth	r3, r3
 8003002:	b21b      	sxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	2100      	movs	r1, #0
 8003008:	2000      	movs	r0, #0
 800300a:	f000 f80d 	bl	8003028 <wheel_Ctrl>
        break;
 800300e:	e004      	b.n	800301a <wheel_State+0x106>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8003010:	2001      	movs	r0, #1
 8003012:	f7ff fdff 	bl	8002c14 <Motion_Stop>
        break;
 8003016:	e000      	b.n	800301a <wheel_State+0x106>
    default:
        break;
 8003018:	bf00      	nop
    }
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200004e4 	.word	0x200004e4

08003028 <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
 8003032:	460b      	mov	r3, r1
 8003034:	80bb      	strh	r3, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 800303a:	f7ff ff27 	bl	8002e8c <Motion_Get_APB>
 800303e:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 8003040:	4b6f      	ldr	r3, [pc, #444]	@ (8003200 <wheel_Ctrl+0x1d8>)
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8003048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd feb1 	bl	8000db4 <__aeabi_i2f>
 8003052:	4603      	mov	r3, r0
 8003054:	4a6b      	ldr	r2, [pc, #428]	@ (8003204 <wheel_Ctrl+0x1dc>)
 8003056:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8003058:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fea9 	bl	8000db4 <__aeabi_i2f>
 8003062:	4603      	mov	r3, r0
 8003064:	4968      	ldr	r1, [pc, #416]	@ (8003208 <wheel_Ctrl+0x1e0>)
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd ffac 	bl	8000fc4 <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fef3 	bl	8000e5c <__aeabi_fmul>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	4b64      	ldr	r3, [pc, #400]	@ (800320c <wheel_Ctrl+0x1e4>)
 800307c:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 800307e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <wheel_Ctrl+0x76>
 8003086:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <wheel_Ctrl+0x76>
 800308e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d103      	bne.n	800309e <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8003096:	2001      	movs	r0, #1
 8003098:	f7ff fdbc 	bl	8002c14 <Motion_Stop>
        return;
 800309c:	e0ad      	b.n	80031fa <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 800309e:	4b59      	ldr	r3, [pc, #356]	@ (8003204 <wheel_Ctrl+0x1dc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a57      	ldr	r2, [pc, #348]	@ (8003200 <wheel_Ctrl+0x1d8>)
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd fdcf 	bl	8000c4c <__addsf3>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b56      	ldr	r3, [pc, #344]	@ (800320c <wheel_Ctrl+0x1e4>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fd fdc7 	bl	8000c4c <__addsf3>
 80030be:	4603      	mov	r3, r0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe f891 	bl	80011e8 <__aeabi_f2iz>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a51      	ldr	r2, [pc, #324]	@ (8003210 <wheel_Ctrl+0x1e8>)
 80030ca:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 80030cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003204 <wheel_Ctrl+0x1dc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003200 <wheel_Ctrl+0x1d8>)
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	4611      	mov	r1, r2
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fdb6 	bl	8000c48 <__aeabi_fsub>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <wheel_Ctrl+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	4610      	mov	r0, r2
 80030e8:	f7fd fdb0 	bl	8000c4c <__addsf3>
 80030ec:	4603      	mov	r3, r0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f87a 	bl	80011e8 <__aeabi_f2iz>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4a47      	ldr	r2, [pc, #284]	@ (8003214 <wheel_Ctrl+0x1ec>)
 80030f8:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 80030fa:	4b42      	ldr	r3, [pc, #264]	@ (8003204 <wheel_Ctrl+0x1dc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a40      	ldr	r2, [pc, #256]	@ (8003200 <wheel_Ctrl+0x1d8>)
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	4611      	mov	r1, r2
 8003104:	4618      	mov	r0, r3
 8003106:	f7fd fd9f 	bl	8000c48 <__aeabi_fsub>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4b3f      	ldr	r3, [pc, #252]	@ (800320c <wheel_Ctrl+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f7fd fd97 	bl	8000c48 <__aeabi_fsub>
 800311a:	4603      	mov	r3, r0
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f863 	bl	80011e8 <__aeabi_f2iz>
 8003122:	4603      	mov	r3, r0
 8003124:	4a3c      	ldr	r2, [pc, #240]	@ (8003218 <wheel_Ctrl+0x1f0>)
 8003126:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8003128:	4b36      	ldr	r3, [pc, #216]	@ (8003204 <wheel_Ctrl+0x1dc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a34      	ldr	r2, [pc, #208]	@ (8003200 <wheel_Ctrl+0x1d8>)
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fd8a 	bl	8000c4c <__addsf3>
 8003138:	4603      	mov	r3, r0
 800313a:	461a      	mov	r2, r3
 800313c:	4b33      	ldr	r3, [pc, #204]	@ (800320c <wheel_Ctrl+0x1e4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f7fd fd80 	bl	8000c48 <__aeabi_fsub>
 8003148:	4603      	mov	r3, r0
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe f84c 	bl	80011e8 <__aeabi_f2iz>
 8003150:	4603      	mov	r3, r0
 8003152:	4a32      	ldr	r2, [pc, #200]	@ (800321c <wheel_Ctrl+0x1f4>)
 8003154:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 8003156:	4b2e      	ldr	r3, [pc, #184]	@ (8003210 <wheel_Ctrl+0x1e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800315e:	dd03      	ble.n	8003168 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8003160:	4b2b      	ldr	r3, [pc, #172]	@ (8003210 <wheel_Ctrl+0x1e8>)
 8003162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003166:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8003168:	4b29      	ldr	r3, [pc, #164]	@ (8003210 <wheel_Ctrl+0x1e8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003170:	da02      	bge.n	8003178 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 8003172:	4b27      	ldr	r3, [pc, #156]	@ (8003210 <wheel_Ctrl+0x1e8>)
 8003174:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <wheel_Ctrl+0x1f8>)
 8003176:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8003178:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <wheel_Ctrl+0x1ec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003180:	dd03      	ble.n	800318a <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 8003182:	4b24      	ldr	r3, [pc, #144]	@ (8003214 <wheel_Ctrl+0x1ec>)
 8003184:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003188:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 800318a:	4b22      	ldr	r3, [pc, #136]	@ (8003214 <wheel_Ctrl+0x1ec>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003192:	da02      	bge.n	800319a <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 8003194:	4b1f      	ldr	r3, [pc, #124]	@ (8003214 <wheel_Ctrl+0x1ec>)
 8003196:	4a22      	ldr	r2, [pc, #136]	@ (8003220 <wheel_Ctrl+0x1f8>)
 8003198:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 800319a:	4b1f      	ldr	r3, [pc, #124]	@ (8003218 <wheel_Ctrl+0x1f0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031a2:	dd03      	ble.n	80031ac <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 80031a4:	4b1c      	ldr	r3, [pc, #112]	@ (8003218 <wheel_Ctrl+0x1f0>)
 80031a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031aa:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 80031ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <wheel_Ctrl+0x1f0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80031b4:	da02      	bge.n	80031bc <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <wheel_Ctrl+0x1f0>)
 80031b8:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <wheel_Ctrl+0x1f8>)
 80031ba:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <wheel_Ctrl+0x1f4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031c4:	dd03      	ble.n	80031ce <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <wheel_Ctrl+0x1f4>)
 80031c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031cc:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 80031ce:	4b13      	ldr	r3, [pc, #76]	@ (800321c <wheel_Ctrl+0x1f4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80031d6:	da02      	bge.n	80031de <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 80031d8:	4b10      	ldr	r3, [pc, #64]	@ (800321c <wheel_Ctrl+0x1f4>)
 80031da:	4a11      	ldr	r2, [pc, #68]	@ (8003220 <wheel_Ctrl+0x1f8>)
 80031dc:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 80031de:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <wheel_Ctrl+0x1e8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	b218      	sxth	r0, r3
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <wheel_Ctrl+0x1ec>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b219      	sxth	r1, r3
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <wheel_Ctrl+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <wheel_Ctrl+0x1f4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b21b      	sxth	r3, r3
 80031f6:	f7ff fd2d 	bl	8002c54 <Motion_Set_Speed>
}
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	200004c8 	.word	0x200004c8
 8003204:	200004cc 	.word	0x200004cc
 8003208:	447a0000 	.word	0x447a0000
 800320c:	200004d0 	.word	0x200004d0
 8003210:	200004d4 	.word	0x200004d4
 8003214:	200004d8 	.word	0x200004d8
 8003218:	200004dc 	.word	0x200004dc
 800321c:	200004e0 	.word	0x200004e0
 8003220:	fffffc18 	.word	0xfffffc18

08003224 <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8003228:	4814      	ldr	r0, [pc, #80]	@ (800327c <Motion_Handle+0x58>)
 800322a:	f7ff fd57 	bl	8002cdc <Motion_Get_Speed>

    if (g_start_ctrl)
 800322e:	4b14      	ldr	r3, [pc, #80]	@ (8003280 <Motion_Handle+0x5c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d020      	beq.n	8003278 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <Motion_Handle+0x60>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd ffd4 	bl	80011e8 <__aeabi_f2iz>
 8003240:	4603      	mov	r3, r0
 8003242:	b21c      	sxth	r4, r3
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <Motion_Handle+0x60>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fd ffcd 	bl	80011e8 <__aeabi_f2iz>
 800324e:	4603      	mov	r3, r0
 8003250:	b21d      	sxth	r5, r3
 8003252:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <Motion_Handle+0x60>)
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fd ffc6 	bl	80011e8 <__aeabi_f2iz>
 800325c:	4603      	mov	r3, r0
 800325e:	b21e      	sxth	r6, r3
 8003260:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <Motion_Handle+0x60>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd ffbf 	bl	80011e8 <__aeabi_f2iz>
 800326a:	4603      	mov	r3, r0
 800326c:	b21b      	sxth	r3, r3
 800326e:	4632      	mov	r2, r6
 8003270:	4629      	mov	r1, r5
 8003272:	4620      	mov	r0, r4
 8003274:	f7ff fc7a 	bl	8002b6c <Motion_Set_Pwm>
    }
}
 8003278:	bf00      	nop
 800327a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800327c:	2000051c 	.word	0x2000051c
 8003280:	20000518 	.word	0x20000518
 8003284:	20000524 	.word	0x20000524

08003288 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	e062      	b.n	800335a <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 8003294:	493a      	ldr	r1, [pc, #232]	@ (8003380 <PID_Param_Init+0xf8>)
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 80032a8:	4935      	ldr	r1, [pc, #212]	@ (8003380 <PID_Param_Init+0xf8>)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	440b      	add	r3, r1
 80032b6:	3308      	adds	r3, #8
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 80032be:	4930      	ldr	r1, [pc, #192]	@ (8003380 <PID_Param_Init+0xf8>)
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	00db      	lsls	r3, r3, #3
 80032ca:	440b      	add	r3, r1
 80032cc:	3318      	adds	r3, #24
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 80032d4:	492a      	ldr	r1, [pc, #168]	@ (8003380 <PID_Param_Init+0xf8>)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	331c      	adds	r3, #28
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 80032ea:	4925      	ldr	r1, [pc, #148]	@ (8003380 <PID_Param_Init+0xf8>)
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3320      	adds	r3, #32
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8003300:	491f      	ldr	r1, [pc, #124]	@ (8003380 <PID_Param_Init+0xf8>)
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	3324      	adds	r3, #36	@ 0x24
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 8003316:	491a      	ldr	r1, [pc, #104]	@ (8003380 <PID_Param_Init+0xf8>)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	330c      	adds	r3, #12
 8003326:	4a17      	ldr	r2, [pc, #92]	@ (8003384 <PID_Param_Init+0xfc>)
 8003328:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 800332a:	4915      	ldr	r1, [pc, #84]	@ (8003380 <PID_Param_Init+0xf8>)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	3310      	adds	r3, #16
 800333a:	4a13      	ldr	r2, [pc, #76]	@ (8003388 <PID_Param_Init+0x100>)
 800333c:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 800333e:	4910      	ldr	r1, [pc, #64]	@ (8003380 <PID_Param_Init+0xf8>)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	3314      	adds	r3, #20
 800334e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003352:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3301      	adds	r3, #1
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b03      	cmp	r3, #3
 800335e:	dd99      	ble.n	8003294 <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8003360:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <PID_Param_Init+0x104>)
 8003362:	4a0b      	ldr	r2, [pc, #44]	@ (8003390 <PID_Param_Init+0x108>)
 8003364:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 8003366:	4b09      	ldr	r3, [pc, #36]	@ (800338c <PID_Param_Init+0x104>)
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <PID_Param_Init+0x104>)
 8003370:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <PID_Param_Init+0x10c>)
 8003372:	60da      	str	r2, [r3, #12]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000550 	.word	0x20000550
 8003384:	3f4ccccd 	.word	0x3f4ccccd
 8003388:	3d75c28f 	.word	0x3d75c28f
 800338c:	20000038 	.word	0x20000038
 8003390:	3ecccccd 	.word	0x3ecccccd
 8003394:	3dcccccd 	.word	0x3dcccccd

08003398 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 8003398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fc4c 	bl	8000c48 <__aeabi_fsub>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689c      	ldr	r4, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68dd      	ldr	r5, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fd fc3c 	bl	8000c48 <__aeabi_fsub>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4619      	mov	r1, r3
 80033d4:	4628      	mov	r0, r5
 80033d6:	f7fd fd41 	bl	8000e5c <__aeabi_fmul>
 80033da:	4603      	mov	r3, r0
 80033dc:	461d      	mov	r5, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f7fd fd37 	bl	8000e5c <__aeabi_fmul>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4619      	mov	r1, r3
 80033f2:	4628      	mov	r0, r5
 80033f4:	f7fd fc2a 	bl	8000c4c <__addsf3>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4698      	mov	r8, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695d      	ldr	r5, [r3, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699e      	ldr	r6, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4619      	mov	r1, r3
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fc1e 	bl	8000c4c <__addsf3>
 8003410:	4603      	mov	r3, r0
 8003412:	4619      	mov	r1, r3
 8003414:	4630      	mov	r0, r6
 8003416:	f7fd fc17 	bl	8000c48 <__aeabi_fsub>
 800341a:	4603      	mov	r3, r0
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7fd fc11 	bl	8000c4c <__addsf3>
 800342a:	4603      	mov	r3, r0
 800342c:	4619      	mov	r1, r3
 800342e:	4628      	mov	r0, r5
 8003430:	f7fd fd14 	bl	8000e5c <__aeabi_fmul>
 8003434:	4603      	mov	r3, r0
 8003436:	4619      	mov	r1, r3
 8003438:	4640      	mov	r0, r8
 800343a:	f7fd fc07 	bl	8000c4c <__addsf3>
 800343e:	4603      	mov	r3, r0
 8003440:	4619      	mov	r1, r3
 8003442:	4620      	mov	r0, r4
 8003444:	f7fd fc02 	bl	8000c4c <__addsf3>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699a      	ldr	r2, [r3, #24]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	490e      	ldr	r1, [pc, #56]	@ (80034a0 <PID_Incre_Calc+0x108>)
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd feb4 	bl	80011d4 <__aeabi_fcmpgt>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <PID_Incre_Calc+0x108>)
 8003476:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4909      	ldr	r1, [pc, #36]	@ (80034a4 <PID_Incre_Calc+0x10c>)
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd fe8a 	bl	8001198 <__aeabi_fcmplt>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a05      	ldr	r2, [pc, #20]	@ (80034a4 <PID_Incre_Calc+0x10c>)
 800348e:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800349e:	bf00      	nop
 80034a0:	44c80000 	.word	0x44c80000
 80034a4:	c4c80000 	.word	0xc4c80000

080034a8 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e016      	b.n	80034e4 <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4a0c      	ldr	r2, [pc, #48]	@ (80034f4 <PID_Calc_Motor+0x4c>)
 80034c2:	1898      	adds	r0, r3, r2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	4619      	mov	r1, r3
 80034ce:	f7ff ff63 	bl	8003398 <PID_Incre_Calc>
 80034d2:	4601      	mov	r1, r0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	3204      	adds	r2, #4
 80034da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	dde5      	ble.n	80034b6 <PID_Calc_Motor+0xe>
    }
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000550 	.word	0x20000550

080034f8 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d87b      	bhi.n	8003600 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	2b04      	cmp	r3, #4
 800350c:	d140      	bne.n	8003590 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	e039      	b.n	8003588 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 8003514:	493d      	ldr	r1, [pc, #244]	@ (800360c <PID_Clear_Motor+0x114>)
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	3308      	adds	r3, #8
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 800352a:	4938      	ldr	r1, [pc, #224]	@ (800360c <PID_Clear_Motor+0x114>)
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	440b      	add	r3, r1
 8003538:	3318      	adds	r3, #24
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8003540:	4932      	ldr	r1, [pc, #200]	@ (800360c <PID_Clear_Motor+0x114>)
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	331c      	adds	r3, #28
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 8003556:	492d      	ldr	r1, [pc, #180]	@ (800360c <PID_Clear_Motor+0x114>)
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	3320      	adds	r3, #32
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 800356c:	4927      	ldr	r1, [pc, #156]	@ (800360c <PID_Clear_Motor+0x114>)
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	440b      	add	r3, r1
 800357a:	3324      	adds	r3, #36	@ 0x24
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b03      	cmp	r3, #3
 800358c:	ddc2      	ble.n	8003514 <PID_Clear_Motor+0x1c>
 800358e:	e038      	b.n	8003602 <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8003590:	79fa      	ldrb	r2, [r7, #7]
 8003592:	491e      	ldr	r1, [pc, #120]	@ (800360c <PID_Clear_Motor+0x114>)
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	3308      	adds	r3, #8
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 80035a6:	79fa      	ldrb	r2, [r7, #7]
 80035a8:	4918      	ldr	r1, [pc, #96]	@ (800360c <PID_Clear_Motor+0x114>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	440b      	add	r3, r1
 80035b4:	3318      	adds	r3, #24
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 80035bc:	79fa      	ldrb	r2, [r7, #7]
 80035be:	4913      	ldr	r1, [pc, #76]	@ (800360c <PID_Clear_Motor+0x114>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	440b      	add	r3, r1
 80035ca:	331c      	adds	r3, #28
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	490d      	ldr	r1, [pc, #52]	@ (800360c <PID_Clear_Motor+0x114>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	440b      	add	r3, r1
 80035e0:	3320      	adds	r3, #32
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 80035e8:	79fa      	ldrb	r2, [r7, #7]
 80035ea:	4908      	ldr	r1, [pc, #32]	@ (800360c <PID_Clear_Motor+0x114>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	3324      	adds	r3, #36	@ 0x24
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	e000      	b.n	8003602 <PID_Clear_Motor+0x10a>
        return;
 8003600:	bf00      	nop
    }
}
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000550 	.word	0x20000550

08003610 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 800361c:	79fb      	ldrb	r3, [r7, #7]
 800361e:	2b04      	cmp	r3, #4
 8003620:	d81f      	bhi.n	8003662 <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d112      	bne.n	800364e <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e00b      	b.n	8003646 <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 800362e:	490f      	ldr	r1, [pc, #60]	@ (800366c <PID_Set_Motor_Target+0x5c>)
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	440b      	add	r3, r1
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3301      	adds	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b03      	cmp	r3, #3
 800364a:	ddf0      	ble.n	800362e <PID_Set_Motor_Target+0x1e>
 800364c:	e00a      	b.n	8003664 <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 800364e:	79fa      	ldrb	r2, [r7, #7]
 8003650:	4906      	ldr	r1, [pc, #24]	@ (800366c <PID_Set_Motor_Target+0x5c>)
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	e000      	b.n	8003664 <PID_Set_Motor_Target+0x54>
        return;
 8003662:	bf00      	nop
    }
}
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	20000550 	.word	0x20000550

08003670 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 800367a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	dd05      	ble.n	800368e <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003688:	b29b      	uxth	r3, r3
 800368a:	b21b      	sxth	r3, r3
 800368c:	e00a      	b.n	80036a4 <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 800368e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da05      	bge.n	80036a2 <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800369c:	b29b      	uxth	r3, r3
 800369e:	b21b      	sxth	r3, r3
 80036a0:	e000      	b.n	80036a4 <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr
	...

080036b0 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <Motor_Stop+0x14>
        brake = 1;
 80036c0:	2301      	movs	r3, #1
 80036c2:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <Motor_Stop+0x90>)
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80036d8:	fb03 f202 	mul.w	r2, r3, r2
 80036dc:	4b18      	ldr	r3, [pc, #96]	@ (8003740 <Motor_Stop+0x90>)
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80036e6:	fb03 f202 	mul.w	r2, r3, r2
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <Motor_Stop+0x90>)
 80036ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80036f4:	fb03 f202 	mul.w	r2, r3, r2
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <Motor_Stop+0x90>)
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003702:	fb03 f202 	mul.w	r2, r3, r2
 8003706:	4b0f      	ldr	r3, [pc, #60]	@ (8003744 <Motor_Stop+0x94>)
 8003708:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003710:	fb03 f202 	mul.w	r2, r3, r2
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <Motor_Stop+0x94>)
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800371e:	fb03 f202 	mul.w	r2, r3, r2
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <Motor_Stop+0x94>)
 8003724:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800372c:	fb03 f202 	mul.w	r2, r3, r2
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <Motor_Stop+0x94>)
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40013400 	.word	0x40013400
 8003744:	40012c00 	.word	0x40012c00

08003748 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	460a      	mov	r2, r1
 8003752:	71fb      	strb	r3, [r7, #7]
 8003754:	4613      	mov	r3, r2
 8003756:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8003758:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff87 	bl	8003670 <Motor_Ignore_Dead_Zone>
 8003762:	4603      	mov	r3, r0
 8003764:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 8003766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800376a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 800376e:	db02      	blt.n	8003776 <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8003770:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003774:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 8003776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800377a:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 800377e:	dc02      	bgt.n	8003786 <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8003780:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 8003784:	81fb      	strh	r3, [r7, #14]

    switch (id)
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d867      	bhi.n	800385c <Motor_Set_Pwm+0x114>
 800378c:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <Motor_Set_Pwm+0x4c>)
 800378e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003792:	bf00      	nop
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037d7 	.word	0x080037d7
 800379c:	08003809 	.word	0x08003809
 80037a0:	08003833 	.word	0x08003833
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 80037a4:	89fb      	ldrh	r3, [r7, #14]
 80037a6:	425b      	negs	r3, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80037ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	db07      	blt.n	80037c4 <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 80037b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ba:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80037bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037be:	2200      	movs	r2, #0
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80037c2:	e04c      	b.n	800385e <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80037c4:	4b28      	ldr	r3, [pc, #160]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 80037ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ce:	425a      	negs	r2, r3
 80037d0:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037d2:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80037d4:	e043      	b.n	800385e <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	425b      	negs	r3, r3
 80037da:	b29b      	uxth	r3, r3
 80037dc:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80037de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	db07      	blt.n	80037f6 <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80037e6:	4a20      	ldr	r2, [pc, #128]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80037ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80037f4:	e033      	b.n	800385e <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80037f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <Motor_Set_Pwm+0x120>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 80037fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003800:	425a      	negs	r2, r3
 8003802:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <Motor_Set_Pwm+0x120>)
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003806:	e02a      	b.n	800385e <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 8003808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db07      	blt.n	8003820 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <Motor_Set_Pwm+0x124>)
 8003812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003816:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 8003818:	4b14      	ldr	r3, [pc, #80]	@ (800386c <Motor_Set_Pwm+0x124>)
 800381a:	2200      	movs	r2, #0
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 800381e:	e01e      	b.n	800385e <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8003820:	4b12      	ldr	r3, [pc, #72]	@ (800386c <Motor_Set_Pwm+0x124>)
 8003822:	2200      	movs	r2, #0
 8003824:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 8003826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800382a:	425a      	negs	r2, r3
 800382c:	4b0f      	ldr	r3, [pc, #60]	@ (800386c <Motor_Set_Pwm+0x124>)
 800382e:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003830:	e015      	b.n	800385e <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 8003832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003836:	2b00      	cmp	r3, #0
 8003838:	db07      	blt.n	800384a <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 800383a:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <Motor_Set_Pwm+0x124>)
 800383c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003840:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 8003842:	4b0a      	ldr	r3, [pc, #40]	@ (800386c <Motor_Set_Pwm+0x124>)
 8003844:	2200      	movs	r2, #0
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8003848:	e009      	b.n	800385e <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 800384a:	4b08      	ldr	r3, [pc, #32]	@ (800386c <Motor_Set_Pwm+0x124>)
 800384c:	2200      	movs	r2, #0
 800384e:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 8003850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003854:	425a      	negs	r2, r3
 8003856:	4b05      	ldr	r3, [pc, #20]	@ (800386c <Motor_Set_Pwm+0x124>)
 8003858:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800385a:	e000      	b.n	800385e <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 800385c:	bf00      	nop
    }
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40013400 	.word	0x40013400
 800386c:	40012c00 	.word	0x40012c00

08003870 <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003874:	2100      	movs	r1, #0
 8003876:	4824      	ldr	r0, [pc, #144]	@ (8003908 <Bsp_Tim_Init+0x98>)
 8003878:	f003 faf4 	bl	8006e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800387c:	2104      	movs	r1, #4
 800387e:	4822      	ldr	r0, [pc, #136]	@ (8003908 <Bsp_Tim_Init+0x98>)
 8003880:	f003 faf0 	bl	8006e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003884:	2108      	movs	r1, #8
 8003886:	4820      	ldr	r0, [pc, #128]	@ (8003908 <Bsp_Tim_Init+0x98>)
 8003888:	f003 faec 	bl	8006e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800388c:	210c      	movs	r1, #12
 800388e:	481e      	ldr	r0, [pc, #120]	@ (8003908 <Bsp_Tim_Init+0x98>)
 8003890:	f003 fae8 	bl	8006e64 <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003894:	2100      	movs	r1, #0
 8003896:	481d      	ldr	r0, [pc, #116]	@ (800390c <Bsp_Tim_Init+0x9c>)
 8003898:	f003 fae4 	bl	8006e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800389c:	2104      	movs	r1, #4
 800389e:	481b      	ldr	r0, [pc, #108]	@ (800390c <Bsp_Tim_Init+0x9c>)
 80038a0:	f003 fae0 	bl	8006e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80038a4:	2108      	movs	r1, #8
 80038a6:	4819      	ldr	r0, [pc, #100]	@ (800390c <Bsp_Tim_Init+0x9c>)
 80038a8:	f003 fadc 	bl	8006e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80038ac:	210c      	movs	r1, #12
 80038ae:	4817      	ldr	r0, [pc, #92]	@ (800390c <Bsp_Tim_Init+0x9c>)
 80038b0:	f003 fad8 	bl	8006e64 <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 80038b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038b8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80038be:	2104      	movs	r1, #4
 80038c0:	4813      	ldr	r0, [pc, #76]	@ (8003910 <Bsp_Tim_Init+0xa0>)
 80038c2:	f003 fd9b 	bl	80073fc <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 80038c6:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <Bsp_Tim_Init+0xa4>)
 80038c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80038cc:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80038ce:	2104      	movs	r1, #4
 80038d0:	4811      	ldr	r0, [pc, #68]	@ (8003918 <Bsp_Tim_Init+0xa8>)
 80038d2:	f003 fd93 	bl	80073fc <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 80038d6:	4b11      	ldr	r3, [pc, #68]	@ (800391c <Bsp_Tim_Init+0xac>)
 80038d8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80038dc:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80038de:	2104      	movs	r1, #4
 80038e0:	480f      	ldr	r0, [pc, #60]	@ (8003920 <Bsp_Tim_Init+0xb0>)
 80038e2:	f003 fd8b 	bl	80073fc <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <Bsp_Tim_Init+0xb4>)
 80038e8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80038ec:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80038ee:	2104      	movs	r1, #4
 80038f0:	480d      	ldr	r0, [pc, #52]	@ (8003928 <Bsp_Tim_Init+0xb8>)
 80038f2:	f003 fd83 	bl	80073fc <HAL_TIM_Encoder_Start>


	//启动定时6中断
	HAL_TIM_Base_Start_IT(&htim6);
 80038f6:	480d      	ldr	r0, [pc, #52]	@ (800392c <Bsp_Tim_Init+0xbc>)
 80038f8:	f003 f944 	bl	8006b84 <HAL_TIM_Base_Start_IT>

	//Init Timer 7 for Ultrason
	HAL_TIM_Base_Start_IT(&htim7);
 80038fc:	480c      	ldr	r0, [pc, #48]	@ (8003930 <Bsp_Tim_Init+0xc0>)
 80038fe:	f003 f941 	bl	8006b84 <HAL_TIM_Base_Start_IT>
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000650 	.word	0x20000650
 800390c:	20000848 	.word	0x20000848
 8003910:	20000698 	.word	0x20000698
 8003914:	40000400 	.word	0x40000400
 8003918:	200006e0 	.word	0x200006e0
 800391c:	40000800 	.word	0x40000800
 8003920:	20000728 	.word	0x20000728
 8003924:	40000c00 	.word	0x40000c00
 8003928:	20000770 	.word	0x20000770
 800392c:	200007b8 	.word	0x200007b8
 8003930:	20000800 	.word	0x20000800

08003934 <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0c      	ldr	r2, [pc, #48]	@ (8003974 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d103      	bne.n	800394e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速
 8003946:	f7ff f8bd 	bl	8002ac4 <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度
 800394a:	f7ff fc6b 	bl	8003224 <Motion_Handle>

	}


	if (htim->Instance == TIM7)//10us
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d108      	bne.n	800396a <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		if (ultrasonic_flag) // 开始测距--超声波
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			ultrasonic_num++;
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	4a06      	ldr	r2, [pc, #24]	@ (8003980 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003968:	6013      	str	r3, [r2, #0]
		}
	}
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40001000 	.word	0x40001000
 8003978:	40001400 	.word	0x40001400
 800397c:	200005f4 	.word	0x200005f4
 8003980:	200005f0 	.word	0x200005f0

08003984 <Get_distance>:
 * 得到测5次平均值
 *
 * Get the average of 5 measurements
 * */
float Get_distance(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
	float distance = 0, aveg = 0;
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	f04f 0300 	mov.w	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
	uint16_t tim, count;
	uint8_t i = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	72fb      	strb	r3, [r7, #11]

	while (i != 5)
 800399a:	e061      	b.n	8003a60 <Get_distance+0xdc>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800399c:	2201      	movs	r2, #1
 800399e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039a2:	4836      	ldr	r0, [pc, #216]	@ (8003a7c <Get_distance+0xf8>)
 80039a4:	f001 fd2a 	bl	80053fc <HAL_GPIO_WritePin>
		Delay_Us(20);
 80039a8:	2014      	movs	r0, #20
 80039aa:	f7fe ffbd 	bl	8002928 <Delay_Us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80039ae:	2200      	movs	r2, #0
 80039b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039b4:	4831      	ldr	r0, [pc, #196]	@ (8003a7c <Get_distance+0xf8>)
 80039b6:	f001 fd21 	bl	80053fc <HAL_GPIO_WritePin>

		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET)
 80039ba:	bf00      	nop
 80039bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80039c0:	482e      	ldr	r0, [pc, #184]	@ (8003a7c <Get_distance+0xf8>)
 80039c2:	f001 fcfb 	bl	80053bc <HAL_GPIO_ReadPin>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f7      	beq.n	80039bc <Get_distance+0x38>
			;
		ultrasonic_flag = 1;
 80039cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <Get_distance+0xfc>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]

		i += 1;
 80039d2:	7afb      	ldrb	r3, [r7, #11]
 80039d4:	3301      	adds	r3, #1
 80039d6:	72fb      	strb	r3, [r7, #11]
		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80039d8:	e010      	b.n	80039fc <Get_distance+0x78>
		{
			count = ultrasonic_num;
 80039da:	4b2a      	ldr	r3, [pc, #168]	@ (8003a84 <Get_distance+0x100>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	803b      	strh	r3, [r7, #0]
			if (count >= 10000)
 80039e0:	883b      	ldrh	r3, [r7, #0]
 80039e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d908      	bls.n	80039fc <Get_distance+0x78>
			{
				ultrasonic_flag = 0;
 80039ea:	4b25      	ldr	r3, [pc, #148]	@ (8003a80 <Get_distance+0xfc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
				ultrasonic_num = 0;
 80039f0:	4b24      	ldr	r3, [pc, #144]	@ (8003a84 <Get_distance+0x100>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
				return 0;
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e03b      	b.n	8003a74 <Get_distance+0xf0>
		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80039fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a00:	481e      	ldr	r0, [pc, #120]	@ (8003a7c <Get_distance+0xf8>)
 8003a02:	f001 fcdb 	bl	80053bc <HAL_GPIO_ReadPin>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d0e6      	beq.n	80039da <Get_distance+0x56>
			}
		}

		ultrasonic_flag = 0;
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a80 <Get_distance+0xfc>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
		tim = TIM7->CNT;
 8003a12:	4b1d      	ldr	r3, [pc, #116]	@ (8003a88 <Get_distance+0x104>)
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	807b      	strh	r3, [r7, #2]
		distance = (tim + ultrasonic_num * 10) / 58.5;
 8003a18:	8879      	ldrh	r1, [r7, #2]
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a84 <Get_distance+0x100>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	440b      	add	r3, r1
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fc fd47 	bl	80004bc <__aeabi_ui2d>
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <Get_distance+0x108>)
 8003a34:	f7fc fee6 	bl	8000804 <__aeabi_ddiv>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7fd f8ae 	bl	8000ba0 <__aeabi_d2f>
 8003a44:	4603      	mov	r3, r0
 8003a46:	607b      	str	r3, [r7, #4]
		aveg = distance + aveg;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7fd f8fe 	bl	8000c4c <__addsf3>
 8003a50:	4603      	mov	r3, r0
 8003a52:	60fb      	str	r3, [r7, #12]
		ultrasonic_num = 0;
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <Get_distance+0x100>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8003a5a:	200a      	movs	r0, #10
 8003a5c:	f001 f8ba 	bl	8004bd4 <HAL_Delay>
	while (i != 5)
 8003a60:	7afb      	ldrb	r3, [r7, #11]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d19a      	bne.n	800399c <Get_distance+0x18>
	}
	distance = aveg / 5;
 8003a66:	490a      	ldr	r1, [pc, #40]	@ (8003a90 <Get_distance+0x10c>)
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f7fd faab 	bl	8000fc4 <__aeabi_fdiv>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	607b      	str	r3, [r7, #4]
	return distance;
 8003a72:	687b      	ldr	r3, [r7, #4]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40011c00 	.word	0x40011c00
 8003a80:	200005f4 	.word	0x200005f4
 8003a84:	200005f0 	.word	0x200005f0
 8003a88:	40001400 	.word	0x40001400
 8003a8c:	404d4000 	.word	0x404d4000
 8003a90:	40a00000 	.word	0x40a00000

08003a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a9a:	f107 0320 	add.w	r3, r7, #32
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	605a      	str	r2, [r3, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
 8003aa6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	4a5e      	ldr	r2, [pc, #376]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ab2:	6193      	str	r3, [r2, #24]
 8003ab4:	4b5c      	ldr	r3, [pc, #368]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ac0:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	4a58      	ldr	r2, [pc, #352]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	6193      	str	r3, [r2, #24]
 8003acc:	4b56      	ldr	r3, [pc, #344]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ad8:	4b53      	ldr	r3, [pc, #332]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	4a52      	ldr	r2, [pc, #328]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ae2:	6193      	str	r3, [r2, #24]
 8003ae4:	4b50      	ldr	r3, [pc, #320]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003af0:	4b4d      	ldr	r3, [pc, #308]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a4c      	ldr	r2, [pc, #304]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b4a      	ldr	r3, [pc, #296]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b08:	4b47      	ldr	r3, [pc, #284]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4a46      	ldr	r2, [pc, #280]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b0e:	f043 0320 	orr.w	r3, r3, #32
 8003b12:	6193      	str	r3, [r2, #24]
 8003b14:	4b44      	ldr	r3, [pc, #272]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b20:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4a40      	ldr	r2, [pc, #256]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b26:	f043 0310 	orr.w	r3, r3, #16
 8003b2a:	6193      	str	r3, [r2, #24]
 8003b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b38:	4b3b      	ldr	r3, [pc, #236]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b3e:	f043 0308 	orr.w	r3, r3, #8
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <MX_GPIO_Init+0x194>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin, GPIO_PIN_RESET);
 8003b50:	2200      	movs	r2, #0
 8003b52:	219c      	movs	r1, #156	@ 0x9c
 8003b54:	4835      	ldr	r0, [pc, #212]	@ (8003c2c <MX_GPIO_Init+0x198>)
 8003b56:	f001 fc51 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PS2_CS_Pin|PS2_CLK_Pin|PS2_DO_Pin, GPIO_PIN_RESET);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	21b0      	movs	r1, #176	@ 0xb0
 8003b5e:	4834      	ldr	r0, [pc, #208]	@ (8003c30 <MX_GPIO_Init+0x19c>)
 8003b60:	f001 fc4c 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8003b64:	2201      	movs	r2, #1
 8003b66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003b6a:	4832      	ldr	r0, [pc, #200]	@ (8003c34 <MX_GPIO_Init+0x1a0>)
 8003b6c:	f001 fc46 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LRGB_R_Pin|LRGB_B_Pin, GPIO_PIN_RESET);
 8003b70:	2200      	movs	r2, #0
 8003b72:	2106      	movs	r1, #6
 8003b74:	4830      	ldr	r0, [pc, #192]	@ (8003c38 <MX_GPIO_Init+0x1a4>)
 8003b76:	f001 fc41 	bl	80053fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin;
 8003b7a:	239c      	movs	r3, #156	@ 0x9c
 8003b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b86:	2301      	movs	r3, #1
 8003b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b8a:	f107 0320 	add.w	r3, r7, #32
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4826      	ldr	r0, [pc, #152]	@ (8003c2c <MX_GPIO_Init+0x198>)
 8003b92:	f001 f97f 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS2_CS_Pin|PS2_CLK_Pin|PS2_DO_Pin;
 8003b96:	23b0      	movs	r3, #176	@ 0xb0
 8003b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba6:	f107 0320 	add.w	r3, r7, #32
 8003baa:	4619      	mov	r1, r3
 8003bac:	4820      	ldr	r0, [pc, #128]	@ (8003c30 <MX_GPIO_Init+0x19c>)
 8003bae:	f001 f971 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DI_Pin;
 8003bb2:	2340      	movs	r3, #64	@ 0x40
 8003bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PS2_DI_GPIO_Port, &GPIO_InitStruct);
 8003bbe:	f107 0320 	add.w	r3, r7, #32
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	481a      	ldr	r0, [pc, #104]	@ (8003c30 <MX_GPIO_Init+0x19c>)
 8003bc6:	f001 f965 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8003bca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8003bdc:	f107 0320 	add.w	r3, r7, #32
 8003be0:	4619      	mov	r1, r3
 8003be2:	4814      	ldr	r0, [pc, #80]	@ (8003c34 <MX_GPIO_Init+0x1a0>)
 8003be4:	f001 f956 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8003be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003bf6:	f107 0320 	add.w	r3, r7, #32
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	480d      	ldr	r0, [pc, #52]	@ (8003c34 <MX_GPIO_Init+0x1a0>)
 8003bfe:	f001 f949 	bl	8004e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LRGB_R_Pin|LRGB_B_Pin;
 8003c02:	2306      	movs	r3, #6
 8003c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c06:	2301      	movs	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c12:	f107 0320 	add.w	r3, r7, #32
 8003c16:	4619      	mov	r1, r3
 8003c18:	4807      	ldr	r0, [pc, #28]	@ (8003c38 <MX_GPIO_Init+0x1a4>)
 8003c1a:	f001 f93b 	bl	8004e94 <HAL_GPIO_Init>

}
 8003c1e:	bf00      	nop
 8003c20:	3730      	adds	r7, #48	@ 0x30
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40011800 	.word	0x40011800
 8003c30:	40010800 	.word	0x40010800
 8003c34:	40011c00 	.word	0x40011c00
 8003c38:	40012000 	.word	0x40012000

08003c3c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c40:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c42:	4a13      	ldr	r2, [pc, #76]	@ (8003c90 <MX_I2C1_Init+0x54>)
 8003c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c46:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c48:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <MX_I2C1_Init+0x58>)
 8003c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c52:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c60:	4b0a      	ldr	r3, [pc, #40]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c66:	4b09      	ldr	r3, [pc, #36]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c6c:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c78:	4804      	ldr	r0, [pc, #16]	@ (8003c8c <MX_I2C1_Init+0x50>)
 8003c7a:	f001 fbeb 	bl	8005454 <HAL_I2C_Init>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c84:	f000 f8aa 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	200005f8 	.word	0x200005f8
 8003c90:	40005400 	.word	0x40005400
 8003c94:	00061a80 	.word	0x00061a80

08003c98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 0310 	add.w	r3, r7, #16
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <HAL_I2C_MspInit+0x70>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d123      	bne.n	8003d00 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_I2C_MspInit+0x74>)
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <HAL_I2C_MspInit+0x74>)
 8003cbe:	f043 0308 	orr.w	r3, r3, #8
 8003cc2:	6193      	str	r3, [r2, #24]
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <HAL_I2C_MspInit+0x74>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8003cd0:	23c0      	movs	r3, #192	@ 0xc0
 8003cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd4:	2312      	movs	r3, #18
 8003cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	480b      	ldr	r0, [pc, #44]	@ (8003d10 <HAL_I2C_MspInit+0x78>)
 8003ce4:	f001 f8d6 	bl	8004e94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ce8:	4b08      	ldr	r3, [pc, #32]	@ (8003d0c <HAL_I2C_MspInit+0x74>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4a07      	ldr	r2, [pc, #28]	@ (8003d0c <HAL_I2C_MspInit+0x74>)
 8003cee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cf2:	61d3      	str	r3, [r2, #28]
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_I2C_MspInit+0x74>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d00:	bf00      	nop
 8003d02:	3720      	adds	r7, #32
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40005400 	.word	0x40005400
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40010c00 	.word	0x40010c00

08003d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d18:	f000 fefa 	bl	8004b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d1c:	f000 f819 	bl	8003d52 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d20:	f7ff feb8 	bl	8003a94 <MX_GPIO_Init>
  MX_TIM1_Init();
 8003d24:	f000 f9a6 	bl	8004074 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003d28:	f000 fa68 	bl	80041fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8003d2c:	f000 faba 	bl	80042a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003d30:	f000 fb0c 	bl	800434c <MX_TIM4_Init>
  MX_TIM5_Init();
 8003d34:	f000 fb5e 	bl	80043f4 <MX_TIM5_Init>
  MX_TIM6_Init();
 8003d38:	f000 fbb0 	bl	800449c <MX_TIM6_Init>
  MX_TIM8_Init();
 8003d3c:	f000 fc18 	bl	8004570 <MX_TIM8_Init>
  MX_I2C1_Init();
 8003d40:	f7ff ff7c 	bl	8003c3c <MX_I2C1_Init>
  MX_TIM7_Init();
 8003d44:	f000 fbe0 	bl	8004508 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 8003d48:	f7fe fdc0 	bl	80028cc <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 8003d4c:	f7fe fdda 	bl	8002904 <BSP_Loop>
 8003d50:	e7fc      	b.n	8003d4c <main+0x38>

08003d52 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b090      	sub	sp, #64	@ 0x40
 8003d56:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d58:	f107 0318 	add.w	r3, r7, #24
 8003d5c:	2228      	movs	r2, #40	@ 0x28
 8003d5e:	2100      	movs	r1, #0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f005 fed6 	bl	8009b12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d66:	1d3b      	adds	r3, r7, #4
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	605a      	str	r2, [r3, #4]
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	60da      	str	r2, [r3, #12]
 8003d72:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d74:	2301      	movs	r3, #1
 8003d76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d7c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d82:	2301      	movs	r3, #1
 8003d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d86:	2302      	movs	r3, #2
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003d90:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d96:	f107 0318 	add.w	r3, r7, #24
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 f890 	bl	8005ec0 <HAL_RCC_OscConfig>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003da6:	f000 f819 	bl	8003ddc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003daa:	230f      	movs	r3, #15
 8003dac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dae:	2302      	movs	r3, #2
 8003db0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dc0:	1d3b      	adds	r3, r7, #4
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f002 fbe9 	bl	800659c <HAL_RCC_ClockConfig>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003dd0:	f000 f804 	bl	8003ddc <Error_Handler>
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3740      	adds	r7, #64	@ 0x40
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003de0:	b672      	cpsid	i
}
 8003de2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <Error_Handler+0x8>

08003de8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003df2:	bf00      	nop
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003e02:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <HAL_MspInit+0x60>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	4a15      	ldr	r2, [pc, #84]	@ (8003e5c <HAL_MspInit+0x60>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6193      	str	r3, [r2, #24]
 8003e0e:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <HAL_MspInit+0x60>)
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <HAL_MspInit+0x60>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e5c <HAL_MspInit+0x60>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e24:	61d3      	str	r3, [r2, #28]
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <HAL_MspInit+0x60>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003e32:	2005      	movs	r0, #5
 8003e34:	f000 ffbe 	bl	8004db4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e38:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <HAL_MspInit+0x64>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4a04      	ldr	r2, [pc, #16]	@ (8003e60 <HAL_MspInit+0x64>)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40010000 	.word	0x40010000

08003e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e68:	bf00      	nop
 8003e6a:	e7fd      	b.n	8003e68 <NMI_Handler+0x4>

08003e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <HardFault_Handler+0x4>

08003e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <MemManage_Handler+0x4>

08003e7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e80:	bf00      	nop
 8003e82:	e7fd      	b.n	8003e80 <BusFault_Handler+0x4>

08003e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e88:	bf00      	nop
 8003e8a:	e7fd      	b.n	8003e88 <UsageFault_Handler+0x4>

08003e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e9c:	bf00      	nop
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb4:	f000 fe72 	bl	8004b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ec0:	4802      	ldr	r0, [pc, #8]	@ (8003ecc <TIM6_IRQHandler+0x10>)
 8003ec2:	f003 fb59 	bl	8007578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200007b8 	.word	0x200007b8

08003ed0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ed4:	4802      	ldr	r0, [pc, #8]	@ (8003ee0 <TIM7_IRQHandler+0x10>)
 8003ed6:	f003 fb4f 	bl	8007578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000800 	.word	0x20000800

08003ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	return 1;
 8003ee8:	2301      	movs	r3, #1
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <_kill>:

int _kill(int pid, int sig)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003efc:	f005 fe5c 	bl	8009bb8 <__errno>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2216      	movs	r2, #22
 8003f04:	601a      	str	r2, [r3, #0]
	return -1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_exit>:

void _exit (int status)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffe7 	bl	8003ef2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <_exit+0x12>

08003f28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e00a      	b.n	8003f50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f3a:	f3af 8000 	nop.w
 8003f3e:	4601      	mov	r1, r0
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	60ba      	str	r2, [r7, #8]
 8003f46:	b2ca      	uxtb	r2, r1
 8003f48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	dbf0      	blt.n	8003f3a <_read+0x12>
	}

return len;
 8003f58:	687b      	ldr	r3, [r7, #4]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e009      	b.n	8003f88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	60ba      	str	r2, [r7, #8]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	3301      	adds	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	dbf1      	blt.n	8003f74 <_write+0x12>
	}
	return len;
 8003f90:	687b      	ldr	r3, [r7, #4]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_close>:

int _close(int file)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	return -1;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fc0:	605a      	str	r2, [r3, #4]
	return 0;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bc80      	pop	{r7}
 8003fcc:	4770      	bx	lr

08003fce <_isatty>:

int _isatty(int file)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b085      	sub	sp, #20
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
	return 0;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr
	...

08003ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004004:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <_sbrk+0x5c>)
 8004006:	4b15      	ldr	r3, [pc, #84]	@ (800405c <_sbrk+0x60>)
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004010:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <_sbrk+0x64>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <_sbrk+0x64>)
 800401a:	4a12      	ldr	r2, [pc, #72]	@ (8004064 <_sbrk+0x68>)
 800401c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800401e:	4b10      	ldr	r3, [pc, #64]	@ (8004060 <_sbrk+0x64>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	429a      	cmp	r2, r3
 800402a:	d207      	bcs.n	800403c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800402c:	f005 fdc4 	bl	8009bb8 <__errno>
 8004030:	4603      	mov	r3, r0
 8004032:	220c      	movs	r2, #12
 8004034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004036:	f04f 33ff 	mov.w	r3, #4294967295
 800403a:	e009      	b.n	8004050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800403c:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <_sbrk+0x64>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004042:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <_sbrk+0x64>)
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4413      	add	r3, r2
 800404a:	4a05      	ldr	r2, [pc, #20]	@ (8004060 <_sbrk+0x64>)
 800404c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20010000 	.word	0x20010000
 800405c:	00000400 	.word	0x00000400
 8004060:	2000064c 	.word	0x2000064c
 8004064:	200009e0 	.word	0x200009e0

08004068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b096      	sub	sp, #88	@ 0x58
 8004078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800407a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
 8004084:	609a      	str	r2, [r3, #8]
 8004086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004088:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	611a      	str	r2, [r3, #16]
 80040a2:	615a      	str	r2, [r3, #20]
 80040a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	2220      	movs	r2, #32
 80040aa:	2100      	movs	r1, #0
 80040ac:	4618      	mov	r0, r3
 80040ae:	f005 fd30 	bl	8009b12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040b2:	4b50      	ldr	r3, [pc, #320]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040b4:	4a50      	ldr	r2, [pc, #320]	@ (80041f8 <MX_TIM1_Init+0x184>)
 80040b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80040b8:	4b4e      	ldr	r3, [pc, #312]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040be:	4b4d      	ldr	r3, [pc, #308]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 80040c4:	4b4b      	ldr	r3, [pc, #300]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040c6:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80040ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040cc:	4b49      	ldr	r3, [pc, #292]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040d2:	4b48      	ldr	r3, [pc, #288]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040d8:	4b46      	ldr	r3, [pc, #280]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040da:	2280      	movs	r2, #128	@ 0x80
 80040dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040de:	4845      	ldr	r0, [pc, #276]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040e0:	f002 fc7c 	bl	80069dc <HAL_TIM_Base_Init>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80040ea:	f7ff fe77 	bl	8003ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80040f8:	4619      	mov	r1, r3
 80040fa:	483e      	ldr	r0, [pc, #248]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80040fc:	f003 fce6 	bl	8007acc <HAL_TIM_ConfigClockSource>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004106:	f7ff fe69 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800410a:	483a      	ldr	r0, [pc, #232]	@ (80041f4 <MX_TIM1_Init+0x180>)
 800410c:	f002 fdcc 	bl	8006ca8 <HAL_TIM_PWM_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004116:	f7ff fe61 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800411a:	2300      	movs	r3, #0
 800411c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800411e:	2300      	movs	r3, #0
 8004120:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004122:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004126:	4619      	mov	r1, r3
 8004128:	4832      	ldr	r0, [pc, #200]	@ (80041f4 <MX_TIM1_Init+0x180>)
 800412a:	f004 fbb3 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004134:	f7ff fe52 	bl	8003ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004138:	2360      	movs	r3, #96	@ 0x60
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800413c:	2300      	movs	r3, #0
 800413e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004140:	2300      	movs	r3, #0
 8004142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004144:	2300      	movs	r3, #0
 8004146:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004148:	2300      	movs	r3, #0
 800414a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800414c:	2300      	movs	r3, #0
 800414e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004150:	2300      	movs	r3, #0
 8004152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004158:	2200      	movs	r2, #0
 800415a:	4619      	mov	r1, r3
 800415c:	4825      	ldr	r0, [pc, #148]	@ (80041f4 <MX_TIM1_Init+0x180>)
 800415e:	f003 fb13 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004168:	f7ff fe38 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800416c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004170:	2204      	movs	r2, #4
 8004172:	4619      	mov	r1, r3
 8004174:	481f      	ldr	r0, [pc, #124]	@ (80041f4 <MX_TIM1_Init+0x180>)
 8004176:	f003 fb07 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004180:	f7ff fe2c 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004188:	2208      	movs	r2, #8
 800418a:	4619      	mov	r1, r3
 800418c:	4819      	ldr	r0, [pc, #100]	@ (80041f4 <MX_TIM1_Init+0x180>)
 800418e:	f003 fafb 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004198:	f7ff fe20 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800419c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041a0:	220c      	movs	r2, #12
 80041a2:	4619      	mov	r1, r3
 80041a4:	4813      	ldr	r0, [pc, #76]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80041a6:	f003 faef 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80041b0:	f7ff fe14 	bl	8003ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	4807      	ldr	r0, [pc, #28]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80041d8:	f004 fc2c 	bl	8008a34 <HAL_TIMEx_ConfigBreakDeadTime>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80041e2:	f7ff fdfb 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80041e6:	4803      	ldr	r0, [pc, #12]	@ (80041f4 <MX_TIM1_Init+0x180>)
 80041e8:	f000 fc02 	bl	80049f0 <HAL_TIM_MspPostInit>

}
 80041ec:	bf00      	nop
 80041ee:	3758      	adds	r7, #88	@ 0x58
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000650 	.word	0x20000650
 80041f8:	40012c00 	.word	0x40012c00

080041fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08c      	sub	sp, #48	@ 0x30
 8004200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	2224      	movs	r2, #36	@ 0x24
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f005 fc81 	bl	8009b12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004218:	4b21      	ldr	r3, [pc, #132]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 800421a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800421e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004220:	4b1f      	ldr	r3, [pc, #124]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004226:	4b1e      	ldr	r3, [pc, #120]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800422c:	4b1c      	ldr	r3, [pc, #112]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 800422e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004234:	4b1a      	ldr	r3, [pc, #104]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800423a:	4b19      	ldr	r3, [pc, #100]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004240:	2303      	movs	r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004244:	2300      	movs	r3, #0
 8004246:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004248:	2301      	movs	r3, #1
 800424a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800424c:	2300      	movs	r3, #0
 800424e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004254:	2300      	movs	r3, #0
 8004256:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004258:	2301      	movs	r3, #1
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800425c:	2300      	movs	r3, #0
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	4619      	mov	r1, r3
 800426a:	480d      	ldr	r0, [pc, #52]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 800426c:	f002 ff22 	bl	80070b4 <HAL_TIM_Encoder_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004276:	f7ff fdb1 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4806      	ldr	r0, [pc, #24]	@ (80042a0 <MX_TIM2_Init+0xa4>)
 8004288:	f004 fb04 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004292:	f7ff fda3 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	3730      	adds	r7, #48	@ 0x30
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000698 	.word	0x20000698

080042a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b08c      	sub	sp, #48	@ 0x30
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042aa:	f107 030c 	add.w	r3, r7, #12
 80042ae:	2224      	movs	r2, #36	@ 0x24
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f005 fc2d 	bl	8009b12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042b8:	1d3b      	adds	r3, r7, #4
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80042c0:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <MX_TIM3_Init+0xa0>)
 80042c2:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <MX_TIM3_Init+0xa4>)
 80042c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80042c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004344 <MX_TIM3_Init+0xa0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <MX_TIM3_Init+0xa0>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80042d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004344 <MX_TIM3_Init+0xa0>)
 80042d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042da:	4b1a      	ldr	r3, [pc, #104]	@ (8004344 <MX_TIM3_Init+0xa0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e0:	4b18      	ldr	r3, [pc, #96]	@ (8004344 <MX_TIM3_Init+0xa0>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80042e6:	2303      	movs	r3, #3
 80042e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042ee:	2301      	movs	r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042fa:	2300      	movs	r3, #0
 80042fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042fe:	2301      	movs	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004302:	2300      	movs	r3, #0
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	4619      	mov	r1, r3
 8004310:	480c      	ldr	r0, [pc, #48]	@ (8004344 <MX_TIM3_Init+0xa0>)
 8004312:	f002 fecf 	bl	80070b4 <HAL_TIM_Encoder_Init>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800431c:	f7ff fd5e 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004320:	2300      	movs	r3, #0
 8004322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	4619      	mov	r1, r3
 800432c:	4805      	ldr	r0, [pc, #20]	@ (8004344 <MX_TIM3_Init+0xa0>)
 800432e:	f004 fab1 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004338:	f7ff fd50 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800433c:	bf00      	nop
 800433e:	3730      	adds	r7, #48	@ 0x30
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	200006e0 	.word	0x200006e0
 8004348:	40000400 	.word	0x40000400

0800434c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	@ 0x30
 8004350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	2224      	movs	r2, #36	@ 0x24
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f005 fbd9 	bl	8009b12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004360:	1d3b      	adds	r3, r7, #4
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004368:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <MX_TIM4_Init+0xa0>)
 800436a:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <MX_TIM4_Init+0xa4>)
 800436c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800436e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ec <MX_TIM4_Init+0xa0>)
 8004370:	2200      	movs	r2, #0
 8004372:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004374:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <MX_TIM4_Init+0xa0>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800437a:	4b1c      	ldr	r3, [pc, #112]	@ (80043ec <MX_TIM4_Init+0xa0>)
 800437c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004380:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <MX_TIM4_Init+0xa0>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004388:	4b18      	ldr	r3, [pc, #96]	@ (80043ec <MX_TIM4_Init+0xa0>)
 800438a:	2200      	movs	r2, #0
 800438c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800438e:	2303      	movs	r3, #3
 8004390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004396:	2301      	movs	r3, #1
 8004398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043a2:	2300      	movs	r3, #0
 80043a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043a6:	2301      	movs	r3, #1
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043aa:	2300      	movs	r3, #0
 80043ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80043b2:	f107 030c 	add.w	r3, r7, #12
 80043b6:	4619      	mov	r1, r3
 80043b8:	480c      	ldr	r0, [pc, #48]	@ (80043ec <MX_TIM4_Init+0xa0>)
 80043ba:	f002 fe7b 	bl	80070b4 <HAL_TIM_Encoder_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80043c4:	f7ff fd0a 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4805      	ldr	r0, [pc, #20]	@ (80043ec <MX_TIM4_Init+0xa0>)
 80043d6:	f004 fa5d 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80043e0:	f7ff fcfc 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	3730      	adds	r7, #48	@ 0x30
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000728 	.word	0x20000728
 80043f0:	40000800 	.word	0x40000800

080043f4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	@ 0x30
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043fa:	f107 030c 	add.w	r3, r7, #12
 80043fe:	2224      	movs	r2, #36	@ 0x24
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f005 fb85 	bl	8009b12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004408:	1d3b      	adds	r3, r7, #4
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004410:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <MX_TIM5_Init+0xa0>)
 8004412:	4a21      	ldr	r2, [pc, #132]	@ (8004498 <MX_TIM5_Init+0xa4>)
 8004414:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004416:	4b1f      	ldr	r3, [pc, #124]	@ (8004494 <MX_TIM5_Init+0xa0>)
 8004418:	2200      	movs	r2, #0
 800441a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800441c:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <MX_TIM5_Init+0xa0>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004422:	4b1c      	ldr	r3, [pc, #112]	@ (8004494 <MX_TIM5_Init+0xa0>)
 8004424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004428:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800442a:	4b1a      	ldr	r3, [pc, #104]	@ (8004494 <MX_TIM5_Init+0xa0>)
 800442c:	2200      	movs	r2, #0
 800442e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004430:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <MX_TIM5_Init+0xa0>)
 8004432:	2200      	movs	r2, #0
 8004434:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004436:	2303      	movs	r3, #3
 8004438:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800444a:	2300      	movs	r3, #0
 800444c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800444e:	2301      	movs	r3, #1
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004452:	2300      	movs	r3, #0
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	4619      	mov	r1, r3
 8004460:	480c      	ldr	r0, [pc, #48]	@ (8004494 <MX_TIM5_Init+0xa0>)
 8004462:	f002 fe27 	bl	80070b4 <HAL_TIM_Encoder_Init>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800446c:	f7ff fcb6 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004470:	2300      	movs	r3, #0
 8004472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004474:	2300      	movs	r3, #0
 8004476:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004478:	1d3b      	adds	r3, r7, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4805      	ldr	r0, [pc, #20]	@ (8004494 <MX_TIM5_Init+0xa0>)
 800447e:	f004 fa09 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004488:	f7ff fca8 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800448c:	bf00      	nop
 800448e:	3730      	adds	r7, #48	@ 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000770 	.word	0x20000770
 8004498:	40000c00 	.word	0x40000c00

0800449c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044a2:	463b      	mov	r3, r7
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80044aa:	4b15      	ldr	r3, [pc, #84]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044ac:	4a15      	ldr	r2, [pc, #84]	@ (8004504 <MX_TIM6_Init+0x68>)
 80044ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 80044b0:	4b13      	ldr	r3, [pc, #76]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044b2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80044b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044b8:	4b11      	ldr	r3, [pc, #68]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80044be:	4b10      	ldr	r3, [pc, #64]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044c0:	2263      	movs	r2, #99	@ 0x63
 80044c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80044ca:	480d      	ldr	r0, [pc, #52]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044cc:	f002 fa86 	bl	80069dc <HAL_TIM_Base_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80044d6:	f7ff fc81 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80044e2:	463b      	mov	r3, r7
 80044e4:	4619      	mov	r1, r3
 80044e6:	4806      	ldr	r0, [pc, #24]	@ (8004500 <MX_TIM6_Init+0x64>)
 80044e8:	f004 f9d4 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80044f2:	f7ff fc73 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200007b8 	.word	0x200007b8
 8004504:	40001000 	.word	0x40001000

08004508 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450e:	463b      	mov	r3, r7
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004516:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <MX_TIM7_Init+0x60>)
 8004518:	4a14      	ldr	r2, [pc, #80]	@ (800456c <MX_TIM7_Init+0x64>)
 800451a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 800451c:	4b12      	ldr	r3, [pc, #72]	@ (8004568 <MX_TIM7_Init+0x60>)
 800451e:	2247      	movs	r2, #71	@ 0x47
 8004520:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004522:	4b11      	ldr	r3, [pc, #68]	@ (8004568 <MX_TIM7_Init+0x60>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004528:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <MX_TIM7_Init+0x60>)
 800452a:	2209      	movs	r2, #9
 800452c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <MX_TIM7_Init+0x60>)
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004534:	480c      	ldr	r0, [pc, #48]	@ (8004568 <MX_TIM7_Init+0x60>)
 8004536:	f002 fa51 	bl	80069dc <HAL_TIM_Base_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004540:	f7ff fc4c 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800454c:	463b      	mov	r3, r7
 800454e:	4619      	mov	r1, r3
 8004550:	4805      	ldr	r0, [pc, #20]	@ (8004568 <MX_TIM7_Init+0x60>)
 8004552:	f004 f99f 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800455c:	f7ff fc3e 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	20000800 	.word	0x20000800
 800456c:	40001400 	.word	0x40001400

08004570 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b096      	sub	sp, #88	@ 0x58
 8004574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004576:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	605a      	str	r2, [r3, #4]
 8004580:	609a      	str	r2, [r3, #8]
 8004582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004584:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800458e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	60da      	str	r2, [r3, #12]
 800459c:	611a      	str	r2, [r3, #16]
 800459e:	615a      	str	r2, [r3, #20]
 80045a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	2220      	movs	r2, #32
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f005 fab2 	bl	8009b12 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80045ae:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045b0:	4a50      	ldr	r2, [pc, #320]	@ (80046f4 <MX_TIM8_Init+0x184>)
 80045b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80045b4:	4b4e      	ldr	r3, [pc, #312]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ba:	4b4d      	ldr	r3, [pc, #308]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 80045c0:	4b4b      	ldr	r3, [pc, #300]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045c2:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80045c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045c8:	4b49      	ldr	r3, [pc, #292]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80045ce:	4b48      	ldr	r3, [pc, #288]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045d4:	4b46      	ldr	r3, [pc, #280]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045d6:	2280      	movs	r2, #128	@ 0x80
 80045d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80045da:	4845      	ldr	r0, [pc, #276]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045dc:	f002 f9fe 	bl	80069dc <HAL_TIM_Base_Init>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80045e6:	f7ff fbf9 	bl	8003ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80045f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80045f4:	4619      	mov	r1, r3
 80045f6:	483e      	ldr	r0, [pc, #248]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80045f8:	f003 fa68 	bl	8007acc <HAL_TIM_ConfigClockSource>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004602:	f7ff fbeb 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004606:	483a      	ldr	r0, [pc, #232]	@ (80046f0 <MX_TIM8_Init+0x180>)
 8004608:	f002 fb4e 	bl	8006ca8 <HAL_TIM_PWM_Init>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8004612:	f7ff fbe3 	bl	8003ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461a:	2300      	movs	r3, #0
 800461c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800461e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004622:	4619      	mov	r1, r3
 8004624:	4832      	ldr	r0, [pc, #200]	@ (80046f0 <MX_TIM8_Init+0x180>)
 8004626:	f004 f935 	bl	8008894 <HAL_TIMEx_MasterConfigSynchronization>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004630:	f7ff fbd4 	bl	8003ddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004634:	2360      	movs	r3, #96	@ 0x60
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800463c:	2300      	movs	r3, #0
 800463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004640:	2300      	movs	r3, #0
 8004642:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004644:	2300      	movs	r3, #0
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004648:	2300      	movs	r3, #0
 800464a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800464c:	2300      	movs	r3, #0
 800464e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004650:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	4619      	mov	r1, r3
 8004658:	4825      	ldr	r0, [pc, #148]	@ (80046f0 <MX_TIM8_Init+0x180>)
 800465a:	f003 f895 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8004664:	f7ff fbba 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800466c:	2204      	movs	r2, #4
 800466e:	4619      	mov	r1, r3
 8004670:	481f      	ldr	r0, [pc, #124]	@ (80046f0 <MX_TIM8_Init+0x180>)
 8004672:	f003 f889 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800467c:	f7ff fbae 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004680:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004684:	2208      	movs	r2, #8
 8004686:	4619      	mov	r1, r3
 8004688:	4819      	ldr	r0, [pc, #100]	@ (80046f0 <MX_TIM8_Init+0x180>)
 800468a:	f003 f87d 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8004694:	f7ff fba2 	bl	8003ddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800469c:	220c      	movs	r2, #12
 800469e:	4619      	mov	r1, r3
 80046a0:	4813      	ldr	r0, [pc, #76]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80046a2:	f003 f871 	bl	8007788 <HAL_TIM_PWM_ConfigChannel>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80046ac:	f7ff fb96 	bl	8003ddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4807      	ldr	r0, [pc, #28]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80046d4:	f004 f9ae 	bl	8008a34 <HAL_TIMEx_ConfigBreakDeadTime>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80046de:	f7ff fb7d 	bl	8003ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80046e2:	4803      	ldr	r0, [pc, #12]	@ (80046f0 <MX_TIM8_Init+0x180>)
 80046e4:	f000 f984 	bl	80049f0 <HAL_TIM_MspPostInit>

}
 80046e8:	bf00      	nop
 80046ea:	3758      	adds	r7, #88	@ 0x58
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000848 	.word	0x20000848
 80046f4:	40013400 	.word	0x40013400

080046f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2c      	ldr	r2, [pc, #176]	@ (80047b8 <HAL_TIM_Base_MspInit+0xc0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10c      	bne.n	8004724 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800470a:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	4a2b      	ldr	r2, [pc, #172]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004710:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004714:	6193      	str	r3, [r2, #24]
 8004716:	4b29      	ldr	r3, [pc, #164]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004722:	e044      	b.n	80047ae <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	@ (80047c0 <HAL_TIM_Base_MspInit+0xc8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d114      	bne.n	8004758 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800472e:	4b23      	ldr	r3, [pc, #140]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	4a22      	ldr	r2, [pc, #136]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004734:	f043 0310 	orr.w	r3, r3, #16
 8004738:	61d3      	str	r3, [r2, #28]
 800473a:	4b20      	ldr	r3, [pc, #128]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 2);
 8004746:	2202      	movs	r2, #2
 8004748:	2102      	movs	r1, #2
 800474a:	2036      	movs	r0, #54	@ 0x36
 800474c:	f000 fb52 	bl	8004df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004750:	2036      	movs	r0, #54	@ 0x36
 8004752:	f000 fb7b 	bl	8004e4c <HAL_NVIC_EnableIRQ>
}
 8004756:	e02a      	b.n	80047ae <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a19      	ldr	r2, [pc, #100]	@ (80047c4 <HAL_TIM_Base_MspInit+0xcc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d114      	bne.n	800478c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004762:	4b16      	ldr	r3, [pc, #88]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004768:	f043 0320 	orr.w	r3, r3, #32
 800476c:	61d3      	str	r3, [r2, #28]
 800476e:	4b13      	ldr	r3, [pc, #76]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2101      	movs	r1, #1
 800477e:	2037      	movs	r0, #55	@ 0x37
 8004780:	f000 fb38 	bl	8004df4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004784:	2037      	movs	r0, #55	@ 0x37
 8004786:	f000 fb61 	bl	8004e4c <HAL_NVIC_EnableIRQ>
}
 800478a:	e010      	b.n	80047ae <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <HAL_TIM_Base_MspInit+0xd0>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10b      	bne.n	80047ae <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004796:	4b09      	ldr	r3, [pc, #36]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	4a08      	ldr	r2, [pc, #32]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 800479c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047a0:	6193      	str	r3, [r2, #24]
 80047a2:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <HAL_TIM_Base_MspInit+0xc4>)
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047aa:	60bb      	str	r3, [r7, #8]
 80047ac:	68bb      	ldr	r3, [r7, #8]
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40001000 	.word	0x40001000
 80047c4:	40001400 	.word	0x40001400
 80047c8:	40013400 	.word	0x40013400

080047cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b092      	sub	sp, #72	@ 0x48
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	609a      	str	r2, [r3, #8]
 80047e0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ea:	d14f      	bne.n	800488c <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047ec:	4b78      	ldr	r3, [pc, #480]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4a77      	ldr	r2, [pc, #476]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	61d3      	str	r3, [r2, #28]
 80047f8:	4b75      	ldr	r3, [pc, #468]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004804:	4b72      	ldr	r3, [pc, #456]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	4a71      	ldr	r2, [pc, #452]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	6193      	str	r3, [r2, #24]
 8004810:	4b6f      	ldr	r3, [pc, #444]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	627b      	str	r3, [r7, #36]	@ 0x24
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800481c:	4b6c      	ldr	r3, [pc, #432]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	4a6b      	ldr	r2, [pc, #428]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	6193      	str	r3, [r2, #24]
 8004828:	4b69      	ldr	r3, [pc, #420]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 8004834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800483a:	2300      	movs	r3, #0
 800483c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 8004842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004846:	4619      	mov	r1, r3
 8004848:	4862      	ldr	r0, [pc, #392]	@ (80049d4 <HAL_TIM_Encoder_MspInit+0x208>)
 800484a:	f000 fb23 	bl	8004e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 800484e:	2308      	movs	r3, #8
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004852:	2300      	movs	r3, #0
 8004854:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004856:	2300      	movs	r3, #0
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 800485a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800485e:	4619      	mov	r1, r3
 8004860:	485d      	ldr	r0, [pc, #372]	@ (80049d8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004862:	f000 fb17 	bl	8004e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004866:	4b5d      	ldr	r3, [pc, #372]	@ (80049dc <HAL_TIM_Encoder_MspInit+0x210>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800486c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004876:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800487a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004884:	4a55      	ldr	r2, [pc, #340]	@ (80049dc <HAL_TIM_Encoder_MspInit+0x210>)
 8004886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800488a:	e09d      	b.n	80049c8 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a53      	ldr	r2, [pc, #332]	@ (80049e0 <HAL_TIM_Encoder_MspInit+0x214>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d136      	bne.n	8004904 <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004896:	4b4e      	ldr	r3, [pc, #312]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4a4d      	ldr	r2, [pc, #308]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	61d3      	str	r3, [r2, #28]
 80048a2:	4b4b      	ldr	r3, [pc, #300]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ae:	4b48      	ldr	r3, [pc, #288]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	4a47      	ldr	r2, [pc, #284]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80048b4:	f043 0308 	orr.w	r3, r3, #8
 80048b8:	6193      	str	r3, [r2, #24]
 80048ba:	4b45      	ldr	r3, [pc, #276]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80048c6:	2330      	movs	r3, #48	@ 0x30
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ca:	2300      	movs	r3, #0
 80048cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048d6:	4619      	mov	r1, r3
 80048d8:	483f      	ldr	r0, [pc, #252]	@ (80049d8 <HAL_TIM_Encoder_MspInit+0x20c>)
 80048da:	f000 fadb 	bl	8004e94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80048de:	4b3f      	ldr	r3, [pc, #252]	@ (80049dc <HAL_TIM_Encoder_MspInit+0x210>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80048ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80048ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80048f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fc:	4a37      	ldr	r2, [pc, #220]	@ (80049dc <HAL_TIM_Encoder_MspInit+0x210>)
 80048fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004900:	6053      	str	r3, [r2, #4]
}
 8004902:	e061      	b.n	80049c8 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a36      	ldr	r2, [pc, #216]	@ (80049e4 <HAL_TIM_Encoder_MspInit+0x218>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d133      	bne.n	8004976 <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800490e:	4b30      	ldr	r3, [pc, #192]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4a2f      	ldr	r2, [pc, #188]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	61d3      	str	r3, [r2, #28]
 800491a:	4b2d      	ldr	r3, [pc, #180]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0304 	and.w	r3, r3, #4
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004926:	4b2a      	ldr	r3, [pc, #168]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	4a29      	ldr	r2, [pc, #164]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800492c:	f043 0320 	orr.w	r3, r3, #32
 8004930:	6193      	str	r3, [r2, #24]
 8004932:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 800493e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004944:	2300      	movs	r3, #0
 8004946:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800494c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004950:	4619      	mov	r1, r3
 8004952:	4825      	ldr	r0, [pc, #148]	@ (80049e8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8004954:	f000 fa9e 	bl	8004e94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8004958:	4b20      	ldr	r3, [pc, #128]	@ (80049dc <HAL_TIM_Encoder_MspInit+0x210>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
 800495e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004960:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004964:	647b      	str	r3, [r7, #68]	@ 0x44
 8004966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <HAL_TIM_Encoder_MspInit+0x210>)
 8004970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004972:	6053      	str	r3, [r2, #4]
}
 8004974:	e028      	b.n	80049c8 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	@ (80049ec <HAL_TIM_Encoder_MspInit+0x220>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d123      	bne.n	80049c8 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004980:	4b13      	ldr	r3, [pc, #76]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4a12      	ldr	r2, [pc, #72]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004986:	f043 0308 	orr.w	r3, r3, #8
 800498a:	61d3      	str	r3, [r2, #28]
 800498c:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004998:	4b0d      	ldr	r3, [pc, #52]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	4a0c      	ldr	r2, [pc, #48]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 800499e:	f043 0304 	orr.w	r3, r3, #4
 80049a2:	6193      	str	r3, [r2, #24]
 80049a4:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <HAL_TIM_Encoder_MspInit+0x204>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 80049b0:	2303      	movs	r3, #3
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049b4:	2300      	movs	r3, #0
 80049b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80049c0:	4619      	mov	r1, r3
 80049c2:	4804      	ldr	r0, [pc, #16]	@ (80049d4 <HAL_TIM_Encoder_MspInit+0x208>)
 80049c4:	f000 fa66 	bl	8004e94 <HAL_GPIO_Init>
}
 80049c8:	bf00      	nop
 80049ca:	3748      	adds	r7, #72	@ 0x48
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40010800 	.word	0x40010800
 80049d8:	40010c00 	.word	0x40010c00
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40011400 	.word	0x40011400
 80049ec:	40000c00 	.word	0x40000c00

080049f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	@ 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a28      	ldr	r2, [pc, #160]	@ (8004aac <HAL_TIM_MspPostInit+0xbc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d12b      	bne.n	8004a68 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a10:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_TIM_MspPostInit+0xc0>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	4a26      	ldr	r2, [pc, #152]	@ (8004ab0 <HAL_TIM_MspPostInit+0xc0>)
 8004a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a1a:	6193      	str	r3, [r2, #24]
 8004a1c:	4b24      	ldr	r3, [pc, #144]	@ (8004ab0 <HAL_TIM_MspPostInit+0xc0>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a24:	613b      	str	r3, [r7, #16]
 8004a26:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 8004a28:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a32:	2302      	movs	r3, #2
 8004a34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	481d      	ldr	r0, [pc, #116]	@ (8004ab4 <HAL_TIM_MspPostInit+0xc4>)
 8004a3e:	f000 fa29 	bl	8004e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <HAL_TIM_MspPostInit+0xc8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a60:	4a15      	ldr	r2, [pc, #84]	@ (8004ab8 <HAL_TIM_MspPostInit+0xc8>)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004a66:	e01d      	b.n	8004aa4 <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a13      	ldr	r2, [pc, #76]	@ (8004abc <HAL_TIM_MspPostInit+0xcc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d118      	bne.n	8004aa4 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a72:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab0 <HAL_TIM_MspPostInit+0xc0>)
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab0 <HAL_TIM_MspPostInit+0xc0>)
 8004a78:	f043 0310 	orr.w	r3, r3, #16
 8004a7c:	6193      	str	r3, [r2, #24]
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab0 <HAL_TIM_MspPostInit+0xc0>)
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 8004a8a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a94:	2302      	movs	r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4808      	ldr	r0, [pc, #32]	@ (8004ac0 <HAL_TIM_MspPostInit+0xd0>)
 8004aa0:	f000 f9f8 	bl	8004e94 <HAL_GPIO_Init>
}
 8004aa4:	bf00      	nop
 8004aa6:	3728      	adds	r7, #40	@ 0x28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40012c00 	.word	0x40012c00
 8004ab0:	40021000 	.word	0x40021000
 8004ab4:	40011800 	.word	0x40011800
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40011000 	.word	0x40011000

08004ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ac4:	f7ff fad0 	bl	8004068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ac8:	480b      	ldr	r0, [pc, #44]	@ (8004af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004aca:	490c      	ldr	r1, [pc, #48]	@ (8004afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004acc:	4a0c      	ldr	r2, [pc, #48]	@ (8004b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad0:	e002      	b.n	8004ad8 <LoopCopyDataInit>

08004ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ad6:	3304      	adds	r3, #4

08004ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004adc:	d3f9      	bcc.n	8004ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ade:	4a09      	ldr	r2, [pc, #36]	@ (8004b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004ae0:	4c09      	ldr	r4, [pc, #36]	@ (8004b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae4:	e001      	b.n	8004aea <LoopFillZerobss>

08004ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ae8:	3204      	adds	r2, #4

08004aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aec:	d3fb      	bcc.n	8004ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aee:	f005 f869 	bl	8009bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004af2:	f7ff f90f 	bl	8003d14 <main>
  bx lr
 8004af6:	4770      	bx	lr
  ldr r0, =_sdata
 8004af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004afc:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8004b00:	0800e040 	.word	0x0800e040
  ldr r2, =_sbss
 8004b04:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8004b08:	200009e0 	.word	0x200009e0

08004b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b0c:	e7fe      	b.n	8004b0c <ADC1_2_IRQHandler>
	...

08004b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b14:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <HAL_Init+0x28>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a07      	ldr	r2, [pc, #28]	@ (8004b38 <HAL_Init+0x28>)
 8004b1a:	f043 0310 	orr.w	r3, r3, #16
 8004b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b20:	2003      	movs	r0, #3
 8004b22:	f000 f947 	bl	8004db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b26:	2003      	movs	r0, #3
 8004b28:	f000 f808 	bl	8004b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b2c:	f7ff f966 	bl	8003dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40022000 	.word	0x40022000

08004b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b44:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <HAL_InitTick+0x54>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b12      	ldr	r3, [pc, #72]	@ (8004b94 <HAL_InitTick+0x58>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 f98e 	bl	8004e7c <HAL_SYSTICK_Config>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00e      	b.n	8004b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d80a      	bhi.n	8004b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b70:	2200      	movs	r2, #0
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	f04f 30ff 	mov.w	r0, #4294967295
 8004b78:	f000 f93c 	bl	8004df4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b7c:	4a06      	ldr	r2, [pc, #24]	@ (8004b98 <HAL_InitTick+0x5c>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000054 	.word	0x20000054
 8004b94:	2000005c 	.word	0x2000005c
 8004b98:	20000058 	.word	0x20000058

08004b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ba0:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_IncTick+0x1c>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_IncTick+0x20>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4413      	add	r3, r2
 8004bac:	4a03      	ldr	r2, [pc, #12]	@ (8004bbc <HAL_IncTick+0x20>)
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	2000005c 	.word	0x2000005c
 8004bbc:	20000890 	.word	0x20000890

08004bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bc4:	4b02      	ldr	r3, [pc, #8]	@ (8004bd0 <HAL_GetTick+0x10>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	20000890 	.word	0x20000890

08004bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bdc:	f7ff fff0 	bl	8004bc0 <HAL_GetTick>
 8004be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bec:	d005      	beq.n	8004bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bee:	4b0a      	ldr	r3, [pc, #40]	@ (8004c18 <HAL_Delay+0x44>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004bfa:	bf00      	nop
 8004bfc:	f7ff ffe0 	bl	8004bc0 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d8f7      	bhi.n	8004bfc <HAL_Delay+0x28>
  {
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	2000005c 	.word	0x2000005c

08004c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c60 <__NVIC_SetPriorityGrouping+0x44>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c38:	4013      	ands	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	@ (8004c60 <__NVIC_SetPriorityGrouping+0x44>)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	60d3      	str	r3, [r2, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000ed00 	.word	0xe000ed00

08004c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c68:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <__NVIC_GetPriorityGrouping+0x18>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	0a1b      	lsrs	r3, r3, #8
 8004c6e:	f003 0307 	and.w	r3, r3, #7
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	db0b      	blt.n	8004caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c92:	79fb      	ldrb	r3, [r7, #7]
 8004c94:	f003 021f 	and.w	r2, r3, #31
 8004c98:	4906      	ldr	r1, [pc, #24]	@ (8004cb4 <__NVIC_EnableIRQ+0x34>)
 8004c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr
 8004cb4:	e000e100 	.word	0xe000e100

08004cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	6039      	str	r1, [r7, #0]
 8004cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	db0a      	blt.n	8004ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	490c      	ldr	r1, [pc, #48]	@ (8004d04 <__NVIC_SetPriority+0x4c>)
 8004cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	b2d2      	uxtb	r2, r2
 8004cda:	440b      	add	r3, r1
 8004cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ce0:	e00a      	b.n	8004cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	4908      	ldr	r1, [pc, #32]	@ (8004d08 <__NVIC_SetPriority+0x50>)
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	3b04      	subs	r3, #4
 8004cf0:	0112      	lsls	r2, r2, #4
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	761a      	strb	r2, [r3, #24]
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	e000e100 	.word	0xe000e100
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	@ 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	f1c3 0307 	rsb	r3, r3, #7
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	bf28      	it	cs
 8004d2a:	2304      	movcs	r3, #4
 8004d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	3304      	adds	r3, #4
 8004d32:	2b06      	cmp	r3, #6
 8004d34:	d902      	bls.n	8004d3c <NVIC_EncodePriority+0x30>
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3b03      	subs	r3, #3
 8004d3a:	e000      	b.n	8004d3e <NVIC_EncodePriority+0x32>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43da      	mvns	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	401a      	ands	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d54:	f04f 31ff 	mov.w	r1, #4294967295
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	43d9      	mvns	r1, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d64:	4313      	orrs	r3, r2
         );
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3724      	adds	r7, #36	@ 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d80:	d301      	bcc.n	8004d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d82:	2301      	movs	r3, #1
 8004d84:	e00f      	b.n	8004da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d86:	4a0a      	ldr	r2, [pc, #40]	@ (8004db0 <SysTick_Config+0x40>)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d8e:	210f      	movs	r1, #15
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295
 8004d94:	f7ff ff90 	bl	8004cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <SysTick_Config+0x40>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d9e:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <SysTick_Config+0x40>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010

08004db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b07      	cmp	r3, #7
 8004dc0:	d00f      	beq.n	8004de2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b06      	cmp	r3, #6
 8004dc6:	d00c      	beq.n	8004de2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b05      	cmp	r3, #5
 8004dcc:	d009      	beq.n	8004de2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d006      	beq.n	8004de2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d003      	beq.n	8004de2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004dda:	2191      	movs	r1, #145	@ 0x91
 8004ddc:	4804      	ldr	r0, [pc, #16]	@ (8004df0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004dde:	f7ff f803 	bl	8003de8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff ff1a 	bl	8004c1c <__NVIC_SetPriorityGrouping>
}
 8004de8:	bf00      	nop
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	0800d310 	.word	0x0800d310

08004df4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d903      	bls.n	8004e14 <HAL_NVIC_SetPriority+0x20>
 8004e0c:	21a9      	movs	r1, #169	@ 0xa9
 8004e0e:	480e      	ldr	r0, [pc, #56]	@ (8004e48 <HAL_NVIC_SetPriority+0x54>)
 8004e10:	f7fe ffea 	bl	8003de8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	d903      	bls.n	8004e22 <HAL_NVIC_SetPriority+0x2e>
 8004e1a:	21aa      	movs	r1, #170	@ 0xaa
 8004e1c:	480a      	ldr	r0, [pc, #40]	@ (8004e48 <HAL_NVIC_SetPriority+0x54>)
 8004e1e:	f7fe ffe3 	bl	8003de8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e22:	f7ff ff1f 	bl	8004c64 <__NVIC_GetPriorityGrouping>
 8004e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7ff ff6d 	bl	8004d0c <NVIC_EncodePriority>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ff3c 	bl	8004cb8 <__NVIC_SetPriority>
}
 8004e40:	bf00      	nop
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	0800d310 	.word	0x0800d310

08004e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	da03      	bge.n	8004e66 <HAL_NVIC_EnableIRQ+0x1a>
 8004e5e:	21bd      	movs	r1, #189	@ 0xbd
 8004e60:	4805      	ldr	r0, [pc, #20]	@ (8004e78 <HAL_NVIC_EnableIRQ+0x2c>)
 8004e62:	f7fe ffc1 	bl	8003de8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ff08 	bl	8004c80 <__NVIC_EnableIRQ>
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	0800d310 	.word	0x0800d310

08004e7c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7ff ff73 	bl	8004d70 <SysTick_Config>
 8004e8a:	4603      	mov	r3, r0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	@ 0x28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a94      	ldr	r2, [pc, #592]	@ (80050fc <HAL_GPIO_Init+0x268>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01b      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a93      	ldr	r2, [pc, #588]	@ (8005100 <HAL_GPIO_Init+0x26c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d017      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a92      	ldr	r2, [pc, #584]	@ (8005104 <HAL_GPIO_Init+0x270>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a91      	ldr	r2, [pc, #580]	@ (8005108 <HAL_GPIO_Init+0x274>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00f      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a90      	ldr	r2, [pc, #576]	@ (800510c <HAL_GPIO_Init+0x278>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a8f      	ldr	r2, [pc, #572]	@ (8005110 <HAL_GPIO_Init+0x27c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8005114 <HAL_GPIO_Init+0x280>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <HAL_GPIO_Init+0x52>
 8004ede:	21bd      	movs	r1, #189	@ 0xbd
 8004ee0:	488d      	ldr	r0, [pc, #564]	@ (8005118 <HAL_GPIO_Init+0x284>)
 8004ee2:	f7fe ff81 	bl	8003de8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <HAL_GPIO_Init+0x66>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef8:	d303      	bcc.n	8004f02 <HAL_GPIO_Init+0x6e>
 8004efa:	21be      	movs	r1, #190	@ 0xbe
 8004efc:	4886      	ldr	r0, [pc, #536]	@ (8005118 <HAL_GPIO_Init+0x284>)
 8004efe:	f7fe ff73 	bl	8003de8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 8236 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	f000 8231 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b11      	cmp	r3, #17
 8004f1c:	f000 822c 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	f000 8227 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b12      	cmp	r3, #18
 8004f30:	f000 8222 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a78      	ldr	r2, [pc, #480]	@ (800511c <HAL_GPIO_Init+0x288>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	f000 821c 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4a76      	ldr	r2, [pc, #472]	@ (8005120 <HAL_GPIO_Init+0x28c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f000 8216 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4a74      	ldr	r2, [pc, #464]	@ (8005124 <HAL_GPIO_Init+0x290>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f000 8210 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a72      	ldr	r2, [pc, #456]	@ (8005128 <HAL_GPIO_Init+0x294>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f000 820a 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4a70      	ldr	r2, [pc, #448]	@ (800512c <HAL_GPIO_Init+0x298>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	f000 8204 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a6e      	ldr	r2, [pc, #440]	@ (8005130 <HAL_GPIO_Init+0x29c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f000 81fe 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	f000 81f9 	beq.w	8005378 <HAL_GPIO_Init+0x4e4>
 8004f86:	21bf      	movs	r1, #191	@ 0xbf
 8004f88:	4863      	ldr	r0, [pc, #396]	@ (8005118 <HAL_GPIO_Init+0x284>)
 8004f8a:	f7fe ff2d 	bl	8003de8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f8e:	e1f3      	b.n	8005378 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004f90:	2201      	movs	r2, #1
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	f040 81e2 	bne.w	8005372 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a52      	ldr	r2, [pc, #328]	@ (80050fc <HAL_GPIO_Init+0x268>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01b      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a51      	ldr	r2, [pc, #324]	@ (8005100 <HAL_GPIO_Init+0x26c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d017      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a50      	ldr	r2, [pc, #320]	@ (8005104 <HAL_GPIO_Init+0x270>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8005108 <HAL_GPIO_Init+0x274>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00f      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a4e      	ldr	r2, [pc, #312]	@ (800510c <HAL_GPIO_Init+0x278>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00b      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a4d      	ldr	r2, [pc, #308]	@ (8005110 <HAL_GPIO_Init+0x27c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d007      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a4c      	ldr	r2, [pc, #304]	@ (8005114 <HAL_GPIO_Init+0x280>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d003      	beq.n	8004fee <HAL_GPIO_Init+0x15a>
 8004fe6:	21cd      	movs	r1, #205	@ 0xcd
 8004fe8:	484b      	ldr	r0, [pc, #300]	@ (8005118 <HAL_GPIO_Init+0x284>)
 8004fea:	f7fe fefd 	bl	8003de8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8005130 <HAL_GPIO_Init+0x29c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	f000 80c7 	beq.w	8005188 <HAL_GPIO_Init+0x2f4>
 8004ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8005130 <HAL_GPIO_Init+0x29c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	f200 80ed 	bhi.w	80051dc <HAL_GPIO_Init+0x348>
 8005002:	4a48      	ldr	r2, [pc, #288]	@ (8005124 <HAL_GPIO_Init+0x290>)
 8005004:	4293      	cmp	r3, r2
 8005006:	f000 80bf 	beq.w	8005188 <HAL_GPIO_Init+0x2f4>
 800500a:	4a46      	ldr	r2, [pc, #280]	@ (8005124 <HAL_GPIO_Init+0x290>)
 800500c:	4293      	cmp	r3, r2
 800500e:	f200 80e5 	bhi.w	80051dc <HAL_GPIO_Init+0x348>
 8005012:	4a46      	ldr	r2, [pc, #280]	@ (800512c <HAL_GPIO_Init+0x298>)
 8005014:	4293      	cmp	r3, r2
 8005016:	f000 80b7 	beq.w	8005188 <HAL_GPIO_Init+0x2f4>
 800501a:	4a44      	ldr	r2, [pc, #272]	@ (800512c <HAL_GPIO_Init+0x298>)
 800501c:	4293      	cmp	r3, r2
 800501e:	f200 80dd 	bhi.w	80051dc <HAL_GPIO_Init+0x348>
 8005022:	4a3f      	ldr	r2, [pc, #252]	@ (8005120 <HAL_GPIO_Init+0x28c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	f000 80af 	beq.w	8005188 <HAL_GPIO_Init+0x2f4>
 800502a:	4a3d      	ldr	r2, [pc, #244]	@ (8005120 <HAL_GPIO_Init+0x28c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f200 80d5 	bhi.w	80051dc <HAL_GPIO_Init+0x348>
 8005032:	4a3d      	ldr	r2, [pc, #244]	@ (8005128 <HAL_GPIO_Init+0x294>)
 8005034:	4293      	cmp	r3, r2
 8005036:	f000 80a7 	beq.w	8005188 <HAL_GPIO_Init+0x2f4>
 800503a:	4a3b      	ldr	r2, [pc, #236]	@ (8005128 <HAL_GPIO_Init+0x294>)
 800503c:	4293      	cmp	r3, r2
 800503e:	f200 80cd 	bhi.w	80051dc <HAL_GPIO_Init+0x348>
 8005042:	2b12      	cmp	r3, #18
 8005044:	d82c      	bhi.n	80050a0 <HAL_GPIO_Init+0x20c>
 8005046:	2b12      	cmp	r3, #18
 8005048:	f200 80c8 	bhi.w	80051dc <HAL_GPIO_Init+0x348>
 800504c:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <HAL_GPIO_Init+0x1c0>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	08005189 	.word	0x08005189
 8005058:	080050a9 	.word	0x080050a9
 800505c:	08005135 	.word	0x08005135
 8005060:	080051d7 	.word	0x080051d7
 8005064:	080051dd 	.word	0x080051dd
 8005068:	080051dd 	.word	0x080051dd
 800506c:	080051dd 	.word	0x080051dd
 8005070:	080051dd 	.word	0x080051dd
 8005074:	080051dd 	.word	0x080051dd
 8005078:	080051dd 	.word	0x080051dd
 800507c:	080051dd 	.word	0x080051dd
 8005080:	080051dd 	.word	0x080051dd
 8005084:	080051dd 	.word	0x080051dd
 8005088:	080051dd 	.word	0x080051dd
 800508c:	080051dd 	.word	0x080051dd
 8005090:	080051dd 	.word	0x080051dd
 8005094:	080051dd 	.word	0x080051dd
 8005098:	080050d1 	.word	0x080050d1
 800509c:	0800515f 	.word	0x0800515f
 80050a0:	4a1e      	ldr	r2, [pc, #120]	@ (800511c <HAL_GPIO_Init+0x288>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d070      	beq.n	8005188 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80050a6:	e099      	b.n	80051dc <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d00b      	beq.n	80050c8 <HAL_GPIO_Init+0x234>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d007      	beq.n	80050c8 <HAL_GPIO_Init+0x234>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d003      	beq.n	80050c8 <HAL_GPIO_Init+0x234>
 80050c0:	21d5      	movs	r1, #213	@ 0xd5
 80050c2:	4815      	ldr	r0, [pc, #84]	@ (8005118 <HAL_GPIO_Init+0x284>)
 80050c4:	f7fe fe90 	bl	8003de8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	623b      	str	r3, [r7, #32]
          break;
 80050ce:	e086      	b.n	80051de <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d00b      	beq.n	80050f0 <HAL_GPIO_Init+0x25c>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d007      	beq.n	80050f0 <HAL_GPIO_Init+0x25c>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d003      	beq.n	80050f0 <HAL_GPIO_Init+0x25c>
 80050e8:	21dc      	movs	r1, #220	@ 0xdc
 80050ea:	480b      	ldr	r0, [pc, #44]	@ (8005118 <HAL_GPIO_Init+0x284>)
 80050ec:	f7fe fe7c 	bl	8003de8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	3304      	adds	r3, #4
 80050f6:	623b      	str	r3, [r7, #32]
          break;
 80050f8:	e071      	b.n	80051de <HAL_GPIO_Init+0x34a>
 80050fa:	bf00      	nop
 80050fc:	40010800 	.word	0x40010800
 8005100:	40010c00 	.word	0x40010c00
 8005104:	40011000 	.word	0x40011000
 8005108:	40011400 	.word	0x40011400
 800510c:	40011800 	.word	0x40011800
 8005110:	40011c00 	.word	0x40011c00
 8005114:	40012000 	.word	0x40012000
 8005118:	0800d34c 	.word	0x0800d34c
 800511c:	10110000 	.word	0x10110000
 8005120:	10210000 	.word	0x10210000
 8005124:	10310000 	.word	0x10310000
 8005128:	10120000 	.word	0x10120000
 800512c:	10220000 	.word	0x10220000
 8005130:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b02      	cmp	r3, #2
 800513a:	d00b      	beq.n	8005154 <HAL_GPIO_Init+0x2c0>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d007      	beq.n	8005154 <HAL_GPIO_Init+0x2c0>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b03      	cmp	r3, #3
 800514a:	d003      	beq.n	8005154 <HAL_GPIO_Init+0x2c0>
 800514c:	21e3      	movs	r1, #227	@ 0xe3
 800514e:	4891      	ldr	r0, [pc, #580]	@ (8005394 <HAL_GPIO_Init+0x500>)
 8005150:	f7fe fe4a 	bl	8003de8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	3308      	adds	r3, #8
 800515a:	623b      	str	r3, [r7, #32]
          break;
 800515c:	e03f      	b.n	80051de <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d00b      	beq.n	800517e <HAL_GPIO_Init+0x2ea>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d007      	beq.n	800517e <HAL_GPIO_Init+0x2ea>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b03      	cmp	r3, #3
 8005174:	d003      	beq.n	800517e <HAL_GPIO_Init+0x2ea>
 8005176:	21ea      	movs	r1, #234	@ 0xea
 8005178:	4886      	ldr	r0, [pc, #536]	@ (8005394 <HAL_GPIO_Init+0x500>)
 800517a:	f7fe fe35 	bl	8003de8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	330c      	adds	r3, #12
 8005184:	623b      	str	r3, [r7, #32]
          break;
 8005186:	e02a      	b.n	80051de <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <HAL_GPIO_Init+0x314>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d007      	beq.n	80051a8 <HAL_GPIO_Init+0x314>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d003      	beq.n	80051a8 <HAL_GPIO_Init+0x314>
 80051a0:	21f7      	movs	r1, #247	@ 0xf7
 80051a2:	487c      	ldr	r0, [pc, #496]	@ (8005394 <HAL_GPIO_Init+0x500>)
 80051a4:	f7fe fe20 	bl	8003de8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80051b0:	2304      	movs	r3, #4
 80051b2:	623b      	str	r3, [r7, #32]
          break;
 80051b4:	e013      	b.n	80051de <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d105      	bne.n	80051ca <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051be:	2308      	movs	r3, #8
 80051c0:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	611a      	str	r2, [r3, #16]
          break;
 80051c8:	e009      	b.n	80051de <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80051ca:	2308      	movs	r3, #8
 80051cc:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	615a      	str	r2, [r3, #20]
          break;
 80051d4:	e003      	b.n	80051de <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80051d6:	2300      	movs	r3, #0
 80051d8:	623b      	str	r3, [r7, #32]
          break;
 80051da:	e000      	b.n	80051de <HAL_GPIO_Init+0x34a>
          break;
 80051dc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	2bff      	cmp	r3, #255	@ 0xff
 80051e2:	d801      	bhi.n	80051e8 <HAL_GPIO_Init+0x354>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	e001      	b.n	80051ec <HAL_GPIO_Init+0x358>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	2bff      	cmp	r3, #255	@ 0xff
 80051f2:	d802      	bhi.n	80051fa <HAL_GPIO_Init+0x366>
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	e002      	b.n	8005200 <HAL_GPIO_Init+0x36c>
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	3b08      	subs	r3, #8
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	210f      	movs	r1, #15
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	fa01 f303 	lsl.w	r3, r1, r3
 800520e:	43db      	mvns	r3, r3
 8005210:	401a      	ands	r2, r3
 8005212:	6a39      	ldr	r1, [r7, #32]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	fa01 f303 	lsl.w	r3, r1, r3
 800521a:	431a      	orrs	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a2 	beq.w	8005372 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800522e:	4b5a      	ldr	r3, [pc, #360]	@ (8005398 <HAL_GPIO_Init+0x504>)
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	4a59      	ldr	r2, [pc, #356]	@ (8005398 <HAL_GPIO_Init+0x504>)
 8005234:	f043 0301 	orr.w	r3, r3, #1
 8005238:	6193      	str	r3, [r2, #24]
 800523a:	4b57      	ldr	r3, [pc, #348]	@ (8005398 <HAL_GPIO_Init+0x504>)
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005246:	4a55      	ldr	r2, [pc, #340]	@ (800539c <HAL_GPIO_Init+0x508>)
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	089b      	lsrs	r3, r3, #2
 800524c:	3302      	adds	r3, #2
 800524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005252:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	220f      	movs	r2, #15
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4013      	ands	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a4c      	ldr	r2, [pc, #304]	@ (80053a0 <HAL_GPIO_Init+0x50c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d01f      	beq.n	80052b2 <HAL_GPIO_Init+0x41e>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a4b      	ldr	r2, [pc, #300]	@ (80053a4 <HAL_GPIO_Init+0x510>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d019      	beq.n	80052ae <HAL_GPIO_Init+0x41a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a4a      	ldr	r2, [pc, #296]	@ (80053a8 <HAL_GPIO_Init+0x514>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_GPIO_Init+0x416>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a49      	ldr	r2, [pc, #292]	@ (80053ac <HAL_GPIO_Init+0x518>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00d      	beq.n	80052a6 <HAL_GPIO_Init+0x412>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a48      	ldr	r2, [pc, #288]	@ (80053b0 <HAL_GPIO_Init+0x51c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <HAL_GPIO_Init+0x40e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a47      	ldr	r2, [pc, #284]	@ (80053b4 <HAL_GPIO_Init+0x520>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d101      	bne.n	800529e <HAL_GPIO_Init+0x40a>
 800529a:	2305      	movs	r3, #5
 800529c:	e00a      	b.n	80052b4 <HAL_GPIO_Init+0x420>
 800529e:	2306      	movs	r3, #6
 80052a0:	e008      	b.n	80052b4 <HAL_GPIO_Init+0x420>
 80052a2:	2304      	movs	r3, #4
 80052a4:	e006      	b.n	80052b4 <HAL_GPIO_Init+0x420>
 80052a6:	2303      	movs	r3, #3
 80052a8:	e004      	b.n	80052b4 <HAL_GPIO_Init+0x420>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e002      	b.n	80052b4 <HAL_GPIO_Init+0x420>
 80052ae:	2301      	movs	r3, #1
 80052b0:	e000      	b.n	80052b4 <HAL_GPIO_Init+0x420>
 80052b2:	2300      	movs	r3, #0
 80052b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b6:	f002 0203 	and.w	r2, r2, #3
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	4093      	lsls	r3, r2
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80052c4:	4935      	ldr	r1, [pc, #212]	@ (800539c <HAL_GPIO_Init+0x508>)
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	3302      	adds	r3, #2
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d006      	beq.n	80052ec <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80052de:	4b36      	ldr	r3, [pc, #216]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	4935      	ldr	r1, [pc, #212]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
 80052ea:	e006      	b.n	80052fa <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80052ec:	4b32      	ldr	r3, [pc, #200]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	43db      	mvns	r3, r3
 80052f4:	4930      	ldr	r1, [pc, #192]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 80052f6:	4013      	ands	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d006      	beq.n	8005314 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005306:	4b2c      	ldr	r3, [pc, #176]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	492b      	ldr	r1, [pc, #172]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	60cb      	str	r3, [r1, #12]
 8005312:	e006      	b.n	8005322 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005314:	4b28      	ldr	r3, [pc, #160]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	43db      	mvns	r3, r3
 800531c:	4926      	ldr	r1, [pc, #152]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 800531e:	4013      	ands	r3, r2
 8005320:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d006      	beq.n	800533c <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800532e:	4b22      	ldr	r3, [pc, #136]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4921      	ldr	r1, [pc, #132]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
 800533a:	e006      	b.n	800534a <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	43db      	mvns	r3, r3
 8005344:	491c      	ldr	r1, [pc, #112]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005346:	4013      	ands	r3, r2
 8005348:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d006      	beq.n	8005364 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005356:	4b18      	ldr	r3, [pc, #96]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4917      	ldr	r1, [pc, #92]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
 8005362:	e006      	b.n	8005372 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005364:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	43db      	mvns	r3, r3
 800536c:	4912      	ldr	r1, [pc, #72]	@ (80053b8 <HAL_GPIO_Init+0x524>)
 800536e:	4013      	ands	r3, r2
 8005370:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	3301      	adds	r3, #1
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	fa22 f303 	lsr.w	r3, r2, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f ae04 	bne.w	8004f90 <HAL_GPIO_Init+0xfc>
  }
}
 8005388:	bf00      	nop
 800538a:	bf00      	nop
 800538c:	3728      	adds	r7, #40	@ 0x28
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	0800d34c 	.word	0x0800d34c
 8005398:	40021000 	.word	0x40021000
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010800 	.word	0x40010800
 80053a4:	40010c00 	.word	0x40010c00
 80053a8:	40011000 	.word	0x40011000
 80053ac:	40011400 	.word	0x40011400
 80053b0:	40011800 	.word	0x40011800
 80053b4:	40011c00 	.word	0x40011c00
 80053b8:	40010400 	.word	0x40010400

080053bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80053c8:	887b      	ldrh	r3, [r7, #2]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d104      	bne.n	80053d8 <HAL_GPIO_ReadPin+0x1c>
 80053ce:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 80053d2:	4809      	ldr	r0, [pc, #36]	@ (80053f8 <HAL_GPIO_ReadPin+0x3c>)
 80053d4:	f7fe fd08 	bl	8003de8 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	887b      	ldrh	r3, [r7, #2]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
 80053e8:	e001      	b.n	80053ee <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	0800d34c 	.word	0x0800d34c

080053fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	807b      	strh	r3, [r7, #2]
 8005408:	4613      	mov	r3, r2
 800540a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800540c:	887b      	ldrh	r3, [r7, #2]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d104      	bne.n	800541c <HAL_GPIO_WritePin+0x20>
 8005412:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8005416:	480e      	ldr	r0, [pc, #56]	@ (8005450 <HAL_GPIO_WritePin+0x54>)
 8005418:	f7fe fce6 	bl	8003de8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800541c:	787b      	ldrb	r3, [r7, #1]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_GPIO_WritePin+0x36>
 8005422:	787b      	ldrb	r3, [r7, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d004      	beq.n	8005432 <HAL_GPIO_WritePin+0x36>
 8005428:	f240 11d5 	movw	r1, #469	@ 0x1d5
 800542c:	4808      	ldr	r0, [pc, #32]	@ (8005450 <HAL_GPIO_WritePin+0x54>)
 800542e:	f7fe fcdb 	bl	8003de8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8005432:	787b      	ldrb	r3, [r7, #1]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005438:	887a      	ldrh	r2, [r7, #2]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800543e:	e003      	b.n	8005448 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005440:	887b      	ldrh	r3, [r7, #2]
 8005442:	041a      	lsls	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	611a      	str	r2, [r3, #16]
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	0800d34c 	.word	0x0800d34c

08005454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e1b4      	b.n	80057d0 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a9b      	ldr	r2, [pc, #620]	@ (80056d8 <HAL_I2C_Init+0x284>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_I2C_Init+0x30>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a99      	ldr	r2, [pc, #612]	@ (80056dc <HAL_I2C_Init+0x288>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_I2C_Init+0x30>
 800547a:	f240 11db 	movw	r1, #475	@ 0x1db
 800547e:	4898      	ldr	r0, [pc, #608]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 8005480:	f7fe fcb2 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <HAL_I2C_Init+0x42>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a94      	ldr	r2, [pc, #592]	@ (80056e4 <HAL_I2C_Init+0x290>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d904      	bls.n	80054a0 <HAL_I2C_Init+0x4c>
 8005496:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800549a:	4891      	ldr	r0, [pc, #580]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 800549c:	f7fe fca4 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <HAL_I2C_Init+0x68>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054b0:	d004      	beq.n	80054bc <HAL_I2C_Init+0x68>
 80054b2:	f240 11dd 	movw	r1, #477	@ 0x1dd
 80054b6:	488a      	ldr	r0, [pc, #552]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 80054b8:	f7fe fc96 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054c4:	d304      	bcc.n	80054d0 <HAL_I2C_Init+0x7c>
 80054c6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80054ca:	4885      	ldr	r0, [pc, #532]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 80054cc:	f7fe fc8c 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d8:	d009      	beq.n	80054ee <HAL_I2C_Init+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80054e2:	d004      	beq.n	80054ee <HAL_I2C_Init+0x9a>
 80054e4:	f240 11df 	movw	r1, #479	@ 0x1df
 80054e8:	487d      	ldr	r0, [pc, #500]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 80054ea:	f7fe fc7d 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d008      	beq.n	8005508 <HAL_I2C_Init+0xb4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d004      	beq.n	8005508 <HAL_I2C_Init+0xb4>
 80054fe:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8005502:	4877      	ldr	r0, [pc, #476]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 8005504:	f7fe fc70 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_I2C_Init+0xca>
 8005514:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8005518:	4871      	ldr	r0, [pc, #452]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 800551a:	f7fe fc65 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_I2C_Init+0xe4>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2b40      	cmp	r3, #64	@ 0x40
 800552c:	d004      	beq.n	8005538 <HAL_I2C_Init+0xe4>
 800552e:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8005532:	486b      	ldr	r0, [pc, #428]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 8005534:	f7fe fc58 	bl	8003de8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d008      	beq.n	8005552 <HAL_I2C_Init+0xfe>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	2b80      	cmp	r3, #128	@ 0x80
 8005546:	d004      	beq.n	8005552 <HAL_I2C_Init+0xfe>
 8005548:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800554c:	4864      	ldr	r0, [pc, #400]	@ (80056e0 <HAL_I2C_Init+0x28c>)
 800554e:	f7fe fc4b 	bl	8003de8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fe fb96 	bl	8003c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2224      	movs	r2, #36	@ 0x24
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055a4:	f001 f9e8 	bl	8006978 <HAL_RCC_GetPCLK1Freq>
 80055a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	@ (80056e8 <HAL_I2C_Init+0x294>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d807      	bhi.n	80055c4 <HAL_I2C_Init+0x170>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a4d      	ldr	r2, [pc, #308]	@ (80056ec <HAL_I2C_Init+0x298>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e006      	b.n	80055d2 <HAL_I2C_Init+0x17e>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a4a      	ldr	r2, [pc, #296]	@ (80056f0 <HAL_I2C_Init+0x29c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	bf94      	ite	ls
 80055cc:	2301      	movls	r3, #1
 80055ce:	2300      	movhi	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e0fa      	b.n	80057d0 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a45      	ldr	r2, [pc, #276]	@ (80056f4 <HAL_I2C_Init+0x2a0>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	0c9b      	lsrs	r3, r3, #18
 80055e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4a37      	ldr	r2, [pc, #220]	@ (80056e8 <HAL_I2C_Init+0x294>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d802      	bhi.n	8005614 <HAL_I2C_Init+0x1c0>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	3301      	adds	r3, #1
 8005612:	e009      	b.n	8005628 <HAL_I2C_Init+0x1d4>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800561a:	fb02 f303 	mul.w	r3, r2, r3
 800561e:	4a36      	ldr	r2, [pc, #216]	@ (80056f8 <HAL_I2C_Init+0x2a4>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	099b      	lsrs	r3, r3, #6
 8005626:	3301      	adds	r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6812      	ldr	r2, [r2, #0]
 800562c:	430b      	orrs	r3, r1
 800562e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800563a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4929      	ldr	r1, [pc, #164]	@ (80056e8 <HAL_I2C_Init+0x294>)
 8005644:	428b      	cmp	r3, r1
 8005646:	d819      	bhi.n	800567c <HAL_I2C_Init+0x228>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e59      	subs	r1, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	fbb1 f3f3 	udiv	r3, r1, r3
 8005656:	1c59      	adds	r1, r3, #1
 8005658:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800565c:	400b      	ands	r3, r1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_I2C_Init+0x224>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1e59      	subs	r1, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	e064      	b.n	8005742 <HAL_I2C_Init+0x2ee>
 8005678:	2304      	movs	r3, #4
 800567a:	e062      	b.n	8005742 <HAL_I2C_Init+0x2ee>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d111      	bne.n	80056a8 <HAL_I2C_Init+0x254>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1e58      	subs	r0, r3, #1
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	440b      	add	r3, r1
 8005692:	fbb0 f3f3 	udiv	r3, r0, r3
 8005696:	3301      	adds	r3, #1
 8005698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569c:	2b00      	cmp	r3, #0
 800569e:	bf0c      	ite	eq
 80056a0:	2301      	moveq	r3, #1
 80056a2:	2300      	movne	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e012      	b.n	80056ce <HAL_I2C_Init+0x27a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	1e58      	subs	r0, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6859      	ldr	r1, [r3, #4]
 80056b0:	460b      	mov	r3, r1
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	0099      	lsls	r1, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80056be:	3301      	adds	r3, #1
 80056c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d014      	beq.n	80056fc <HAL_I2C_Init+0x2a8>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e035      	b.n	8005742 <HAL_I2C_Init+0x2ee>
 80056d6:	bf00      	nop
 80056d8:	40005400 	.word	0x40005400
 80056dc:	40005800 	.word	0x40005800
 80056e0:	0800d388 	.word	0x0800d388
 80056e4:	00061a80 	.word	0x00061a80
 80056e8:	000186a0 	.word	0x000186a0
 80056ec:	001e847f 	.word	0x001e847f
 80056f0:	003d08ff 	.word	0x003d08ff
 80056f4:	431bde83 	.word	0x431bde83
 80056f8:	10624dd3 	.word	0x10624dd3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10e      	bne.n	8005722 <HAL_I2C_Init+0x2ce>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1e58      	subs	r0, r3, #1
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	440b      	add	r3, r1
 8005712:	fbb0 f3f3 	udiv	r3, r0, r3
 8005716:	3301      	adds	r3, #1
 8005718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005720:	e00f      	b.n	8005742 <HAL_I2C_Init+0x2ee>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1e58      	subs	r0, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6859      	ldr	r1, [r3, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	0099      	lsls	r1, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	fbb0 f3f3 	udiv	r3, r0, r3
 8005738:	3301      	adds	r3, #1
 800573a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	6809      	ldr	r1, [r1, #0]
 8005746:	4313      	orrs	r3, r2
 8005748:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69da      	ldr	r2, [r3, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005770:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6911      	ldr	r1, [r2, #16]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	68d2      	ldr	r2, [r2, #12]
 800577c:	4311      	orrs	r1, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	430b      	orrs	r3, r1
 8005784:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 0201 	orr.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	4608      	mov	r0, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	461a      	mov	r2, r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	817b      	strh	r3, [r7, #10]
 80057ea:	460b      	mov	r3, r1
 80057ec:	813b      	strh	r3, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057f2:	f7ff f9e5 	bl	8004bc0 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d007      	beq.n	800580e <HAL_I2C_Mem_Write+0x36>
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b10      	cmp	r3, #16
 8005802:	d004      	beq.n	800580e <HAL_I2C_Mem_Write+0x36>
 8005804:	f640 2106 	movw	r1, #2566	@ 0xa06
 8005808:	4873      	ldr	r0, [pc, #460]	@ (80059d8 <HAL_I2C_Mem_Write+0x200>)
 800580a:	f7fe faed 	bl	8003de8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b20      	cmp	r3, #32
 8005818:	f040 80d9 	bne.w	80059ce <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2319      	movs	r3, #25
 8005822:	2201      	movs	r2, #1
 8005824:	496d      	ldr	r1, [pc, #436]	@ (80059dc <HAL_I2C_Mem_Write+0x204>)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f972 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
 8005834:	e0cc      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_I2C_Mem_Write+0x6c>
 8005840:	2302      	movs	r3, #2
 8005842:	e0c5      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1f8>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b01      	cmp	r3, #1
 8005858:	d007      	beq.n	800586a <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005878:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2221      	movs	r2, #33	@ 0x21
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2240      	movs	r2, #64	@ 0x40
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a3a      	ldr	r2, [r7, #32]
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800589a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4a4d      	ldr	r2, [pc, #308]	@ (80059e0 <HAL_I2C_Mem_Write+0x208>)
 80058aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058ac:	88f8      	ldrh	r0, [r7, #6]
 80058ae:	893a      	ldrh	r2, [r7, #8]
 80058b0:	8979      	ldrh	r1, [r7, #10]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	4603      	mov	r3, r0
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f891 	bl	80059e4 <I2C_RequestMemoryWrite>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d052      	beq.n	800596e <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e081      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fa37 	bl	8005d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d107      	bne.n	80058f4 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e06b      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	781a      	ldrb	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b04      	cmp	r3, #4
 8005934:	d11b      	bne.n	800596e <HAL_I2C_Mem_Write+0x196>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d017      	beq.n	800596e <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1aa      	bne.n	80058cc <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fa2a 	bl	8005dd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	2b04      	cmp	r3, #4
 800598c:	d107      	bne.n	800599e <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800599c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e016      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e000      	b.n	80059d0 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80059ce:	2302      	movs	r3, #2
  }
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	0800d388 	.word	0x0800d388
 80059dc:	00100002 	.word	0x00100002
 80059e0:	ffff0000 	.word	0xffff0000

080059e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f878 	bl	8005b10 <I2C_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a34:	d103      	bne.n	8005a3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e05f      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a42:	897b      	ldrh	r3, [r7, #10]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	6a3a      	ldr	r2, [r7, #32]
 8005a56:	492d      	ldr	r1, [pc, #180]	@ (8005b0c <I2C_RequestMemoryWrite+0x128>)
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f8d3 	bl	8005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e04c      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 f95e 	bl	8005d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d107      	bne.n	8005aa6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e02b      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aaa:	88fb      	ldrh	r3, [r7, #6]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ab0:	893b      	ldrh	r3, [r7, #8]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e021      	b.n	8005b00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005aca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005acc:	6a39      	ldr	r1, [r7, #32]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f000 f938 	bl	8005d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00d      	beq.n	8005af6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d107      	bne.n	8005af2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005af0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e005      	b.n	8005b02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005af6:	893b      	ldrh	r3, [r7, #8]
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	00010002 	.word	0x00010002

08005b10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b20:	e048      	b.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d044      	beq.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7ff f849 	bl	8004bc0 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d139      	bne.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	0c1b      	lsrs	r3, r3, #16
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d10d      	bne.n	8005b66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	43da      	mvns	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	4013      	ands	r3, r2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	461a      	mov	r2, r3
 8005b64:	e00c      	b.n	8005b80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	43da      	mvns	r2, r3
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d116      	bne.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e023      	b.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d10d      	bne.n	8005bda <I2C_WaitOnFlagUntilTimeout+0xca>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	43da      	mvns	r2, r3
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	e00c      	b.n	8005bf4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	43da      	mvns	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d093      	beq.n	8005b22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c12:	e071      	b.n	8005cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c22:	d123      	bne.n	8005c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c58:	f043 0204 	orr.w	r2, r3, #4
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e067      	b.n	8005d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c72:	d041      	beq.n	8005cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c74:	f7fe ffa4 	bl	8004bc0 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d302      	bcc.n	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d136      	bne.n	8005cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	0c1b      	lsrs	r3, r3, #16
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10c      	bne.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	43da      	mvns	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bf14      	ite	ne
 8005ca6:	2301      	movne	r3, #1
 8005ca8:	2300      	moveq	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	e00b      	b.n	8005cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	43da      	mvns	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce4:	f043 0220 	orr.w	r2, r3, #32
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e021      	b.n	8005d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	0c1b      	lsrs	r3, r3, #16
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10c      	bne.n	8005d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	43da      	mvns	r2, r3
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bf14      	ite	ne
 8005d14:	2301      	movne	r3, #1
 8005d16:	2300      	moveq	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	e00b      	b.n	8005d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf14      	ite	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	2300      	moveq	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f47f af6d 	bne.w	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d50:	e034      	b.n	8005dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f886 	bl	8005e64 <I2C_IsAcknowledgeFailed>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e034      	b.n	8005dcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d028      	beq.n	8005dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d6a:	f7fe ff29 	bl	8004bc0 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d302      	bcc.n	8005d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d11d      	bne.n	8005dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d8a:	2b80      	cmp	r3, #128	@ 0x80
 8005d8c:	d016      	beq.n	8005dbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e007      	b.n	8005dcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc6:	2b80      	cmp	r3, #128	@ 0x80
 8005dc8:	d1c3      	bne.n	8005d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de0:	e034      	b.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f83e 	bl	8005e64 <I2C_IsAcknowledgeFailed>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e034      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d028      	beq.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fe fee1 	bl	8004bc0 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11d      	bne.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d016      	beq.n	8005e4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e38:	f043 0220 	orr.w	r2, r3, #32
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e007      	b.n	8005e5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d1c3      	bne.n	8005de2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7a:	d11b      	bne.n	8005eb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	f043 0204 	orr.w	r2, r3, #4
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e35a      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01c      	beq.n	8005f14 <HAL_RCC_OscConfig+0x54>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d116      	bne.n	8005f14 <HAL_RCC_OscConfig+0x54>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d110      	bne.n	8005f14 <HAL_RCC_OscConfig+0x54>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <HAL_RCC_OscConfig+0x54>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_RCC_OscConfig+0x54>
 8005f0a:	f240 1165 	movw	r1, #357	@ 0x165
 8005f0e:	488f      	ldr	r0, [pc, #572]	@ (800614c <HAL_RCC_OscConfig+0x28c>)
 8005f10:	f7fd ff6a 	bl	8003de8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 809a 	beq.w	8006056 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <HAL_RCC_OscConfig+0x88>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f32:	d009      	beq.n	8005f48 <HAL_RCC_OscConfig+0x88>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCC_OscConfig+0x88>
 8005f3e:	f240 116b 	movw	r1, #363	@ 0x16b
 8005f42:	4882      	ldr	r0, [pc, #520]	@ (800614c <HAL_RCC_OscConfig+0x28c>)
 8005f44:	f7fd ff50 	bl	8003de8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f48:	4b81      	ldr	r3, [pc, #516]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 030c 	and.w	r3, r3, #12
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	d00c      	beq.n	8005f6e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f54:	4b7e      	ldr	r3, [pc, #504]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 030c 	and.w	r3, r3, #12
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d112      	bne.n	8005f86 <HAL_RCC_OscConfig+0xc6>
 8005f60:	4b7b      	ldr	r3, [pc, #492]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f6c:	d10b      	bne.n	8005f86 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6e:	4b78      	ldr	r3, [pc, #480]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d06c      	beq.n	8006054 <HAL_RCC_OscConfig+0x194>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d168      	bne.n	8006054 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e300      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f8e:	d106      	bne.n	8005f9e <HAL_RCC_OscConfig+0xde>
 8005f90:	4b6f      	ldr	r3, [pc, #444]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a6e      	ldr	r2, [pc, #440]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e02e      	b.n	8005ffc <HAL_RCC_OscConfig+0x13c>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x100>
 8005fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a69      	ldr	r2, [pc, #420]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4b67      	ldr	r3, [pc, #412]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a66      	ldr	r2, [pc, #408]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	e01d      	b.n	8005ffc <HAL_RCC_OscConfig+0x13c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005fc8:	d10c      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x124>
 8005fca:	4b61      	ldr	r3, [pc, #388]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a60      	ldr	r2, [pc, #384]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a5d      	ldr	r2, [pc, #372]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e00b      	b.n	8005ffc <HAL_RCC_OscConfig+0x13c>
 8005fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a59      	ldr	r2, [pc, #356]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005fea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4b57      	ldr	r3, [pc, #348]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a56      	ldr	r2, [pc, #344]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8005ff6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ffa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d013      	beq.n	800602c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fe fddc 	bl	8004bc0 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800600c:	f7fe fdd8 	bl	8004bc0 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	@ 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e2b4      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601e:	4b4c      	ldr	r3, [pc, #304]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x14c>
 800602a:	e014      	b.n	8006056 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7fe fdc8 	bl	8004bc0 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006034:	f7fe fdc4 	bl	8004bc0 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	@ 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e2a0      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006046:	4b42      	ldr	r3, [pc, #264]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f0      	bne.n	8006034 <HAL_RCC_OscConfig+0x174>
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8080 	beq.w	8006164 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d008      	beq.n	800607e <HAL_RCC_OscConfig+0x1be>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d004      	beq.n	800607e <HAL_RCC_OscConfig+0x1be>
 8006074:	f240 119f 	movw	r1, #415	@ 0x19f
 8006078:	4834      	ldr	r0, [pc, #208]	@ (800614c <HAL_RCC_OscConfig+0x28c>)
 800607a:	f7fd feb5 	bl	8003de8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b1f      	cmp	r3, #31
 8006084:	d904      	bls.n	8006090 <HAL_RCC_OscConfig+0x1d0>
 8006086:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800608a:	4830      	ldr	r0, [pc, #192]	@ (800614c <HAL_RCC_OscConfig+0x28c>)
 800608c:	f7fd feac 	bl	8003de8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006090:	4b2f      	ldr	r3, [pc, #188]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f003 030c 	and.w	r3, r3, #12
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800609c:	4b2c      	ldr	r3, [pc, #176]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d11c      	bne.n	80060e2 <HAL_RCC_OscConfig+0x222>
 80060a8:	4b29      	ldr	r3, [pc, #164]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060b4:	4b26      	ldr	r3, [pc, #152]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_OscConfig+0x20c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d001      	beq.n	80060cc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e25d      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060cc:	4b20      	ldr	r3, [pc, #128]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	491d      	ldr	r1, [pc, #116]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e0:	e040      	b.n	8006164 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d020      	beq.n	800612c <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ea:	4b1a      	ldr	r3, [pc, #104]	@ (8006154 <HAL_RCC_OscConfig+0x294>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f0:	f7fe fd66 	bl	8004bc0 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f8:	f7fe fd62 	bl	8004bc0 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e23e      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610a:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006116:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	490a      	ldr	r1, [pc, #40]	@ (8006150 <HAL_RCC_OscConfig+0x290>)
 8006126:	4313      	orrs	r3, r2
 8006128:	600b      	str	r3, [r1, #0]
 800612a:	e01b      	b.n	8006164 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800612c:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <HAL_RCC_OscConfig+0x294>)
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006132:	f7fe fd45 	bl	8004bc0 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006138:	e00e      	b.n	8006158 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800613a:	f7fe fd41 	bl	8004bc0 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b02      	cmp	r3, #2
 8006146:	d907      	bls.n	8006158 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e21d      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
 800614c:	0800d3c0 	.word	0x0800d3c0
 8006150:	40021000 	.word	0x40021000
 8006154:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006158:	4b7d      	ldr	r3, [pc, #500]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1ea      	bne.n	800613a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d040      	beq.n	80061f2 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d008      	beq.n	800618a <HAL_RCC_OscConfig+0x2ca>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d004      	beq.n	800618a <HAL_RCC_OscConfig+0x2ca>
 8006180:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8006184:	4873      	ldr	r0, [pc, #460]	@ (8006354 <HAL_RCC_OscConfig+0x494>)
 8006186:	f7fd fe2f 	bl	8003de8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d019      	beq.n	80061c6 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006192:	4b71      	ldr	r3, [pc, #452]	@ (8006358 <HAL_RCC_OscConfig+0x498>)
 8006194:	2201      	movs	r2, #1
 8006196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006198:	f7fe fd12 	bl	8004bc0 <HAL_GetTick>
 800619c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619e:	e008      	b.n	80061b2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a0:	f7fe fd0e 	bl	8004bc0 <HAL_GetTick>
 80061a4:	4602      	mov	r2, r0
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d901      	bls.n	80061b2 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e1ea      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	4b67      	ldr	r3, [pc, #412]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80061b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f0      	beq.n	80061a0 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80061be:	2001      	movs	r0, #1
 80061c0:	f000 fbee 	bl	80069a0 <RCC_Delay>
 80061c4:	e015      	b.n	80061f2 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c6:	4b64      	ldr	r3, [pc, #400]	@ (8006358 <HAL_RCC_OscConfig+0x498>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061cc:	f7fe fcf8 	bl	8004bc0 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fe fcf4 	bl	8004bc0 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e1d0      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1f0      	bne.n	80061d4 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 80bf 	beq.w	800637e <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006200:	2300      	movs	r3, #0
 8006202:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00c      	beq.n	8006226 <HAL_RCC_OscConfig+0x366>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d008      	beq.n	8006226 <HAL_RCC_OscConfig+0x366>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b05      	cmp	r3, #5
 800621a:	d004      	beq.n	8006226 <HAL_RCC_OscConfig+0x366>
 800621c:	f240 210f 	movw	r1, #527	@ 0x20f
 8006220:	484c      	ldr	r0, [pc, #304]	@ (8006354 <HAL_RCC_OscConfig+0x494>)
 8006222:	f7fd fde1 	bl	8003de8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006226:	4b4a      	ldr	r3, [pc, #296]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10d      	bne.n	800624e <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006232:	4b47      	ldr	r3, [pc, #284]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	4a46      	ldr	r2, [pc, #280]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 8006238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800623c:	61d3      	str	r3, [r2, #28]
 800623e:	4b44      	ldr	r3, [pc, #272]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624e:	4b43      	ldr	r3, [pc, #268]	@ (800635c <HAL_RCC_OscConfig+0x49c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006256:	2b00      	cmp	r3, #0
 8006258:	d118      	bne.n	800628c <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800625a:	4b40      	ldr	r3, [pc, #256]	@ (800635c <HAL_RCC_OscConfig+0x49c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a3f      	ldr	r2, [pc, #252]	@ (800635c <HAL_RCC_OscConfig+0x49c>)
 8006260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006266:	f7fe fcab 	bl	8004bc0 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626e:	f7fe fca7 	bl	8004bc0 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b64      	cmp	r3, #100	@ 0x64
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e183      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006280:	4b36      	ldr	r3, [pc, #216]	@ (800635c <HAL_RCC_OscConfig+0x49c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d106      	bne.n	80062a2 <HAL_RCC_OscConfig+0x3e2>
 8006294:	4b2e      	ldr	r3, [pc, #184]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	4a2d      	ldr	r2, [pc, #180]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 800629a:	f043 0301 	orr.w	r3, r3, #1
 800629e:	6213      	str	r3, [r2, #32]
 80062a0:	e02d      	b.n	80062fe <HAL_RCC_OscConfig+0x43e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x404>
 80062aa:	4b29      	ldr	r3, [pc, #164]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	4a28      	ldr	r2, [pc, #160]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062b0:	f023 0301 	bic.w	r3, r3, #1
 80062b4:	6213      	str	r3, [r2, #32]
 80062b6:	4b26      	ldr	r3, [pc, #152]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	4a25      	ldr	r2, [pc, #148]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062bc:	f023 0304 	bic.w	r3, r3, #4
 80062c0:	6213      	str	r3, [r2, #32]
 80062c2:	e01c      	b.n	80062fe <HAL_RCC_OscConfig+0x43e>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b05      	cmp	r3, #5
 80062ca:	d10c      	bne.n	80062e6 <HAL_RCC_OscConfig+0x426>
 80062cc:	4b20      	ldr	r3, [pc, #128]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	6213      	str	r3, [r2, #32]
 80062d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	6213      	str	r3, [r2, #32]
 80062e4:	e00b      	b.n	80062fe <HAL_RCC_OscConfig+0x43e>
 80062e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	4a19      	ldr	r2, [pc, #100]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	6213      	str	r3, [r2, #32]
 80062f2:	4b17      	ldr	r3, [pc, #92]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	4a16      	ldr	r2, [pc, #88]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d015      	beq.n	8006332 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006306:	f7fe fc5b 	bl	8004bc0 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	e00a      	b.n	8006324 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f7fe fc57 	bl	8004bc0 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e131      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006324:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <HAL_RCC_OscConfig+0x490>)
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ee      	beq.n	800630e <HAL_RCC_OscConfig+0x44e>
 8006330:	e01c      	b.n	800636c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006332:	f7fe fc45 	bl	8004bc0 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006338:	e012      	b.n	8006360 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800633a:	f7fe fc41 	bl	8004bc0 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006348:	4293      	cmp	r3, r2
 800634a:	d909      	bls.n	8006360 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e11b      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
 8006350:	40021000 	.word	0x40021000
 8006354:	0800d3c0 	.word	0x0800d3c0
 8006358:	42420480 	.word	0x42420480
 800635c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006360:	4b8b      	ldr	r3, [pc, #556]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d105      	bne.n	800637e <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006372:	4b87      	ldr	r3, [pc, #540]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	4a86      	ldr	r2, [pc, #536]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 8006378:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800637c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00c      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4e0>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d008      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4e0>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d004      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4e0>
 8006396:	f240 21ad 	movw	r1, #685	@ 0x2ad
 800639a:	487e      	ldr	r0, [pc, #504]	@ (8006594 <HAL_RCC_OscConfig+0x6d4>)
 800639c:	f7fd fd24 	bl	8003de8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80ee 	beq.w	8006586 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063aa:	4b79      	ldr	r3, [pc, #484]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	f000 80ce 	beq.w	8006554 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	f040 80b2 	bne.w	8006526 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_RCC_OscConfig+0x51e>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063d2:	d004      	beq.n	80063de <HAL_RCC_OscConfig+0x51e>
 80063d4:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80063d8:	486e      	ldr	r0, [pc, #440]	@ (8006594 <HAL_RCC_OscConfig+0x6d4>)
 80063da:	f7fd fd05 	bl	8003de8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d04a      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063ee:	d045      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063f8:	d040      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006402:	d03b      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800640c:	d036      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006416:	d031      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006420:	d02c      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800642a:	d027      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006434:	d022      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800643e:	d01d      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006448:	d018      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006452:	d013      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800645c:	d00e      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8006466:	d009      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8006470:	d004      	beq.n	800647c <HAL_RCC_OscConfig+0x5bc>
 8006472:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8006476:	4847      	ldr	r0, [pc, #284]	@ (8006594 <HAL_RCC_OscConfig+0x6d4>)
 8006478:	f7fd fcb6 	bl	8003de8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800647c:	4b46      	ldr	r3, [pc, #280]	@ (8006598 <HAL_RCC_OscConfig+0x6d8>)
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006482:	f7fe fb9d 	bl	8004bc0 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800648a:	f7fe fb99 	bl	8004bc0 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b02      	cmp	r3, #2
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e075      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800649c:	4b3c      	ldr	r3, [pc, #240]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f0      	bne.n	800648a <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b0:	d116      	bne.n	80064e0 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCC_OscConfig+0x60e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064c2:	d004      	beq.n	80064ce <HAL_RCC_OscConfig+0x60e>
 80064c4:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80064c8:	4832      	ldr	r0, [pc, #200]	@ (8006594 <HAL_RCC_OscConfig+0x6d4>)
 80064ca:	f7fd fc8d 	bl	8003de8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80064ce:	4b30      	ldr	r3, [pc, #192]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	492d      	ldr	r1, [pc, #180]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a19      	ldr	r1, [r3, #32]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	430b      	orrs	r3, r1
 80064f2:	4927      	ldr	r1, [pc, #156]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064f8:	4b27      	ldr	r3, [pc, #156]	@ (8006598 <HAL_RCC_OscConfig+0x6d8>)
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fe:	f7fe fb5f 	bl	8004bc0 <HAL_GetTick>
 8006502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006506:	f7fe fb5b 	bl	8004bc0 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e037      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006518:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x646>
 8006524:	e02f      	b.n	8006586 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006526:	4b1c      	ldr	r3, [pc, #112]	@ (8006598 <HAL_RCC_OscConfig+0x6d8>)
 8006528:	2200      	movs	r2, #0
 800652a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fe fb48 	bl	8004bc0 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006534:	f7fe fb44 	bl	8004bc0 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e020      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006546:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f0      	bne.n	8006534 <HAL_RCC_OscConfig+0x674>
 8006552:	e018      	b.n	8006586 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e013      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006560:	4b0b      	ldr	r3, [pc, #44]	@ (8006590 <HAL_RCC_OscConfig+0x6d0>)
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	429a      	cmp	r2, r3
 8006572:	d106      	bne.n	8006582 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d001      	beq.n	8006586 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000
 8006594:	0800d3c0 	.word	0x0800d3c0
 8006598:	42420060 	.word	0x42420060

0800659c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e176      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d116      	bne.n	80065ea <HAL_RCC_ClockConfig+0x4e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d110      	bne.n	80065ea <HAL_RCC_ClockConfig+0x4e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0304 	and.w	r3, r3, #4
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <HAL_RCC_ClockConfig+0x4e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <HAL_RCC_ClockConfig+0x4e>
 80065e0:	f240 3136 	movw	r1, #822	@ 0x336
 80065e4:	4874      	ldr	r0, [pc, #464]	@ (80067b8 <HAL_RCC_ClockConfig+0x21c>)
 80065e6:	f7fd fbff 	bl	8003de8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_RCC_ClockConfig+0x6a>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d007      	beq.n	8006606 <HAL_RCC_ClockConfig+0x6a>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d004      	beq.n	8006606 <HAL_RCC_ClockConfig+0x6a>
 80065fc:	f240 3137 	movw	r1, #823	@ 0x337
 8006600:	486d      	ldr	r0, [pc, #436]	@ (80067b8 <HAL_RCC_ClockConfig+0x21c>)
 8006602:	f7fd fbf1 	bl	8003de8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006606:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d910      	bls.n	8006636 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006614:	4b69      	ldr	r3, [pc, #420]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f023 0207 	bic.w	r2, r3, #7
 800661c:	4967      	ldr	r1, [pc, #412]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	4313      	orrs	r3, r2
 8006622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006624:	4b65      	ldr	r3, [pc, #404]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d001      	beq.n	8006636 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e133      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d049      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800664e:	4b5c      	ldr	r3, [pc, #368]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4a5b      	ldr	r2, [pc, #364]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006654:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006658:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006666:	4b56      	ldr	r3, [pc, #344]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	4a55      	ldr	r2, [pc, #340]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 800666c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006670:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d024      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b80      	cmp	r3, #128	@ 0x80
 8006680:	d020      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b90      	cmp	r3, #144	@ 0x90
 8006688:	d01c      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006690:	d018      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2bb0      	cmp	r3, #176	@ 0xb0
 8006698:	d014      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	2bc0      	cmp	r3, #192	@ 0xc0
 80066a0:	d010      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	2bd0      	cmp	r3, #208	@ 0xd0
 80066a8:	d00c      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2be0      	cmp	r3, #224	@ 0xe0
 80066b0:	d008      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80066b8:	d004      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x128>
 80066ba:	f240 315d 	movw	r1, #861	@ 0x35d
 80066be:	483e      	ldr	r0, [pc, #248]	@ (80067b8 <HAL_RCC_ClockConfig+0x21c>)
 80066c0:	f7fd fb92 	bl	8003de8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c4:	4b3e      	ldr	r3, [pc, #248]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	493b      	ldr	r1, [pc, #236]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d051      	beq.n	8006786 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00c      	beq.n	8006704 <HAL_RCC_ClockConfig+0x168>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d008      	beq.n	8006704 <HAL_RCC_ClockConfig+0x168>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d004      	beq.n	8006704 <HAL_RCC_ClockConfig+0x168>
 80066fa:	f44f 7159 	mov.w	r1, #868	@ 0x364
 80066fe:	482e      	ldr	r0, [pc, #184]	@ (80067b8 <HAL_RCC_ClockConfig+0x21c>)
 8006700:	f7fd fb72 	bl	8003de8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d107      	bne.n	800671c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670c:	4b2c      	ldr	r3, [pc, #176]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d115      	bne.n	8006744 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0c0      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d107      	bne.n	8006734 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006724:	4b26      	ldr	r3, [pc, #152]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d109      	bne.n	8006744 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0b4      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006734:	4b22      	ldr	r3, [pc, #136]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0ac      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006744:	4b1e      	ldr	r3, [pc, #120]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 0203 	bic.w	r2, r3, #3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	491b      	ldr	r1, [pc, #108]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006752:	4313      	orrs	r3, r2
 8006754:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006756:	f7fe fa33 	bl	8004bc0 <HAL_GetTick>
 800675a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800675c:	e00a      	b.n	8006774 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800675e:	f7fe fa2f 	bl	8004bc0 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676c:	4293      	cmp	r3, r2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e094      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006774:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <HAL_RCC_ClockConfig+0x224>)
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f003 020c 	and.w	r2, r3, #12
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	429a      	cmp	r2, r3
 8006784:	d1eb      	bne.n	800675e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006786:	4b0d      	ldr	r3, [pc, #52]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d217      	bcs.n	80067c4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006794:	4b09      	ldr	r3, [pc, #36]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f023 0207 	bic.w	r2, r3, #7
 800679c:	4907      	ldr	r1, [pc, #28]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a4:	4b05      	ldr	r3, [pc, #20]	@ (80067bc <HAL_RCC_ClockConfig+0x220>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0307 	and.w	r3, r3, #7
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d008      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e073      	b.n	800689e <HAL_RCC_ClockConfig+0x302>
 80067b6:	bf00      	nop
 80067b8:	0800d3c0 	.word	0x0800d3c0
 80067bc:	40022000 	.word	0x40022000
 80067c0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d025      	beq.n	800681c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d018      	beq.n	800680a <HAL_RCC_ClockConfig+0x26e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e0:	d013      	beq.n	800680a <HAL_RCC_ClockConfig+0x26e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80067ea:	d00e      	beq.n	800680a <HAL_RCC_ClockConfig+0x26e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80067f4:	d009      	beq.n	800680a <HAL_RCC_ClockConfig+0x26e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80067fe:	d004      	beq.n	800680a <HAL_RCC_ClockConfig+0x26e>
 8006800:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8006804:	4828      	ldr	r0, [pc, #160]	@ (80068a8 <HAL_RCC_ClockConfig+0x30c>)
 8006806:	f7fd faef 	bl	8003de8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800680a:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <HAL_RCC_ClockConfig+0x310>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	4925      	ldr	r1, [pc, #148]	@ (80068ac <HAL_RCC_ClockConfig+0x310>)
 8006818:	4313      	orrs	r3, r2
 800681a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d026      	beq.n	8006876 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d018      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2c6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006838:	d013      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2c6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006842:	d00e      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2c6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800684c:	d009      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2c6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006856:	d004      	beq.n	8006862 <HAL_RCC_ClockConfig+0x2c6>
 8006858:	f240 31a9 	movw	r1, #937	@ 0x3a9
 800685c:	4812      	ldr	r0, [pc, #72]	@ (80068a8 <HAL_RCC_ClockConfig+0x30c>)
 800685e:	f7fd fac3 	bl	8003de8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006862:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <HAL_RCC_ClockConfig+0x310>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	@ (80068ac <HAL_RCC_ClockConfig+0x310>)
 8006872:	4313      	orrs	r3, r2
 8006874:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <HAL_RCC_ClockConfig+0x310>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490a      	ldr	r1, [pc, #40]	@ (80068b0 <HAL_RCC_ClockConfig+0x314>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	@ (80068b4 <HAL_RCC_ClockConfig+0x318>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <HAL_RCC_ClockConfig+0x31c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fe f950 	bl	8004b3c <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	0800d3c0 	.word	0x0800d3c0
 80068ac:	40021000 	.word	0x40021000
 80068b0:	0800dbd8 	.word	0x0800dbd8
 80068b4:	20000054 	.word	0x20000054
 80068b8:	20000058 	.word	0x20000058

080068bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	2300      	movs	r3, #0
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	2300      	movs	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006950 <HAL_RCC_GetSysClockFreq+0x94>)
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 030c 	and.w	r3, r3, #12
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d002      	beq.n	80068ec <HAL_RCC_GetSysClockFreq+0x30>
 80068e6:	2b08      	cmp	r3, #8
 80068e8:	d003      	beq.n	80068f2 <HAL_RCC_GetSysClockFreq+0x36>
 80068ea:	e027      	b.n	800693c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068ec:	4b19      	ldr	r3, [pc, #100]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x98>)
 80068ee:	613b      	str	r3, [r7, #16]
      break;
 80068f0:	e027      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	0c9b      	lsrs	r3, r3, #18
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80068fc:	5cd3      	ldrb	r3, [r2, r3]
 80068fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d010      	beq.n	800692c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800690a:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <HAL_RCC_GetSysClockFreq+0x94>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	0c5b      	lsrs	r3, r3, #17
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	4a11      	ldr	r2, [pc, #68]	@ (800695c <HAL_RCC_GetSysClockFreq+0xa0>)
 8006916:	5cd3      	ldrb	r3, [r2, r3]
 8006918:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a0d      	ldr	r2, [pc, #52]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x98>)
 800691e:	fb03 f202 	mul.w	r2, r3, r2
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	fbb2 f3f3 	udiv	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e004      	b.n	8006936 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a0c      	ldr	r2, [pc, #48]	@ (8006960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	613b      	str	r3, [r7, #16]
      break;
 800693a:	e002      	b.n	8006942 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800693c:	4b05      	ldr	r3, [pc, #20]	@ (8006954 <HAL_RCC_GetSysClockFreq+0x98>)
 800693e:	613b      	str	r3, [r7, #16]
      break;
 8006940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006942:	693b      	ldr	r3, [r7, #16]
}
 8006944:	4618      	mov	r0, r3
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40021000 	.word	0x40021000
 8006954:	007a1200 	.word	0x007a1200
 8006958:	0800dbf0 	.word	0x0800dbf0
 800695c:	0800dc00 	.word	0x0800dc00
 8006960:	003d0900 	.word	0x003d0900

08006964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006968:	4b02      	ldr	r3, [pc, #8]	@ (8006974 <HAL_RCC_GetHCLKFreq+0x10>)
 800696a:	681b      	ldr	r3, [r3, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr
 8006974:	20000054 	.word	0x20000054

08006978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800697c:	f7ff fff2 	bl	8006964 <HAL_RCC_GetHCLKFreq>
 8006980:	4602      	mov	r2, r0
 8006982:	4b05      	ldr	r3, [pc, #20]	@ (8006998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	4903      	ldr	r1, [pc, #12]	@ (800699c <HAL_RCC_GetPCLK1Freq+0x24>)
 800698e:	5ccb      	ldrb	r3, [r1, r3]
 8006990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006994:	4618      	mov	r0, r3
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40021000 	.word	0x40021000
 800699c:	0800dbe8 	.word	0x0800dbe8

080069a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069a8:	4b0a      	ldr	r3, [pc, #40]	@ (80069d4 <RCC_Delay+0x34>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a0a      	ldr	r2, [pc, #40]	@ (80069d8 <RCC_Delay+0x38>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	0a5b      	lsrs	r3, r3, #9
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069bc:	bf00      	nop
  }
  while (Delay --);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1e5a      	subs	r2, r3, #1
 80069c2:	60fa      	str	r2, [r7, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1f9      	bne.n	80069bc <RCC_Delay+0x1c>
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	20000054 	.word	0x20000054
 80069d8:	10624dd3 	.word	0x10624dd3

080069dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e0b5      	b.n	8006b5a <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006b64 <HAL_TIM_Base_Init+0x188>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d027      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006b68 <HAL_TIM_Base_Init+0x18c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d022      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0a:	d01d      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a56      	ldr	r2, [pc, #344]	@ (8006b6c <HAL_TIM_Base_Init+0x190>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d018      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a55      	ldr	r2, [pc, #340]	@ (8006b70 <HAL_TIM_Base_Init+0x194>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d013      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a53      	ldr	r2, [pc, #332]	@ (8006b74 <HAL_TIM_Base_Init+0x198>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00e      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a52      	ldr	r2, [pc, #328]	@ (8006b78 <HAL_TIM_Base_Init+0x19c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d009      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a50      	ldr	r2, [pc, #320]	@ (8006b7c <HAL_TIM_Base_Init+0x1a0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_Base_Init+0x6c>
 8006a3e:	f240 1113 	movw	r1, #275	@ 0x113
 8006a42:	484f      	ldr	r0, [pc, #316]	@ (8006b80 <HAL_TIM_Base_Init+0x1a4>)
 8006a44:	f7fd f9d0 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d014      	beq.n	8006a7a <HAL_TIM_Base_Init+0x9e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d010      	beq.n	8006a7a <HAL_TIM_Base_Init+0x9e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d00c      	beq.n	8006a7a <HAL_TIM_Base_Init+0x9e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	2b40      	cmp	r3, #64	@ 0x40
 8006a66:	d008      	beq.n	8006a7a <HAL_TIM_Base_Init+0x9e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b60      	cmp	r3, #96	@ 0x60
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIM_Base_Init+0x9e>
 8006a70:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8006a74:	4842      	ldr	r0, [pc, #264]	@ (8006b80 <HAL_TIM_Base_Init+0x1a4>)
 8006a76:	f7fd f9b7 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <HAL_TIM_Base_Init+0xc4>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a8a:	d009      	beq.n	8006aa0 <HAL_TIM_Base_Init+0xc4>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a94:	d004      	beq.n	8006aa0 <HAL_TIM_Base_Init+0xc4>
 8006a96:	f240 1115 	movw	r1, #277	@ 0x115
 8006a9a:	4839      	ldr	r0, [pc, #228]	@ (8006b80 <HAL_TIM_Base_Init+0x1a4>)
 8006a9c:	f7fd f9a4 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d004      	beq.n	8006ab2 <HAL_TIM_Base_Init+0xd6>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ab0:	d304      	bcc.n	8006abc <HAL_TIM_Base_Init+0xe0>
 8006ab2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006ab6:	4832      	ldr	r0, [pc, #200]	@ (8006b80 <HAL_TIM_Base_Init+0x1a4>)
 8006ab8:	f7fd f996 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_TIM_Base_Init+0xfa>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	2b80      	cmp	r3, #128	@ 0x80
 8006aca:	d004      	beq.n	8006ad6 <HAL_TIM_Base_Init+0xfa>
 8006acc:	f240 1117 	movw	r1, #279	@ 0x117
 8006ad0:	482b      	ldr	r0, [pc, #172]	@ (8006b80 <HAL_TIM_Base_Init+0x1a4>)
 8006ad2:	f7fd f989 	bl	8003de8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7fd fe04 	bl	80046f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f001 fb1c 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40013400 	.word	0x40013400
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00
 8006b78:	40001000 	.word	0x40001000
 8006b7c:	40001400 	.word	0x40001400
 8006b80:	0800d3f8 	.word	0x0800d3f8

08006b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3d      	ldr	r2, [pc, #244]	@ (8006c88 <HAL_TIM_Base_Start_IT+0x104>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d027      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c8c <HAL_TIM_Base_Start_IT+0x108>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba8:	d01d      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a38      	ldr	r2, [pc, #224]	@ (8006c90 <HAL_TIM_Base_Start_IT+0x10c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a36      	ldr	r2, [pc, #216]	@ (8006c94 <HAL_TIM_Base_Start_IT+0x110>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a35      	ldr	r2, [pc, #212]	@ (8006c98 <HAL_TIM_Base_Start_IT+0x114>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a33      	ldr	r2, [pc, #204]	@ (8006c9c <HAL_TIM_Base_Start_IT+0x118>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a32      	ldr	r2, [pc, #200]	@ (8006ca0 <HAL_TIM_Base_Start_IT+0x11c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x62>
 8006bdc:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8006be0:	4830      	ldr	r0, [pc, #192]	@ (8006ca4 <HAL_TIM_Base_Start_IT+0x120>)
 8006be2:	f7fd f901 	bl	8003de8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d001      	beq.n	8006bf6 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e044      	b.n	8006c80 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f042 0201 	orr.w	r2, r2, #1
 8006c0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <HAL_TIM_Base_Start_IT+0x104>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d018      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0xc6>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c8c <HAL_TIM_Base_Start_IT+0x108>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d013      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0xc6>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c2a:	d00e      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0xc6>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a17      	ldr	r2, [pc, #92]	@ (8006c90 <HAL_TIM_Base_Start_IT+0x10c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0xc6>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a16      	ldr	r2, [pc, #88]	@ (8006c94 <HAL_TIM_Base_Start_IT+0x110>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d004      	beq.n	8006c4a <HAL_TIM_Base_Start_IT+0xc6>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a14      	ldr	r2, [pc, #80]	@ (8006c98 <HAL_TIM_Base_Start_IT+0x114>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d111      	bne.n	8006c6e <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0307 	and.w	r3, r3, #7
 8006c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b06      	cmp	r3, #6
 8006c5a:	d010      	beq.n	8006c7e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c6c:	e007      	b.n	8006c7e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0201 	orr.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	40012c00 	.word	0x40012c00
 8006c8c:	40013400 	.word	0x40013400
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40001000 	.word	0x40001000
 8006ca0:	40001400 	.word	0x40001400
 8006ca4:	0800d3f8 	.word	0x0800d3f8

08006ca8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e0b5      	b.n	8006e26 <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8006e30 <HAL_TIM_PWM_Init+0x188>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d027      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a5a      	ldr	r2, [pc, #360]	@ (8006e34 <HAL_TIM_PWM_Init+0x18c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d022      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd6:	d01d      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a56      	ldr	r2, [pc, #344]	@ (8006e38 <HAL_TIM_PWM_Init+0x190>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d018      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a55      	ldr	r2, [pc, #340]	@ (8006e3c <HAL_TIM_PWM_Init+0x194>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a53      	ldr	r2, [pc, #332]	@ (8006e40 <HAL_TIM_PWM_Init+0x198>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00e      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a52      	ldr	r2, [pc, #328]	@ (8006e44 <HAL_TIM_PWM_Init+0x19c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d009      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a50      	ldr	r2, [pc, #320]	@ (8006e48 <HAL_TIM_PWM_Init+0x1a0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_TIM_PWM_Init+0x6c>
 8006d0a:	f240 512c 	movw	r1, #1324	@ 0x52c
 8006d0e:	484f      	ldr	r0, [pc, #316]	@ (8006e4c <HAL_TIM_PWM_Init+0x1a4>)
 8006d10:	f7fd f86a 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d014      	beq.n	8006d46 <HAL_TIM_PWM_Init+0x9e>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d010      	beq.n	8006d46 <HAL_TIM_PWM_Init+0x9e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d00c      	beq.n	8006d46 <HAL_TIM_PWM_Init+0x9e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	d008      	beq.n	8006d46 <HAL_TIM_PWM_Init+0x9e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b60      	cmp	r3, #96	@ 0x60
 8006d3a:	d004      	beq.n	8006d46 <HAL_TIM_PWM_Init+0x9e>
 8006d3c:	f240 512d 	movw	r1, #1325	@ 0x52d
 8006d40:	4842      	ldr	r0, [pc, #264]	@ (8006e4c <HAL_TIM_PWM_Init+0x1a4>)
 8006d42:	f7fd f851 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00e      	beq.n	8006d6c <HAL_TIM_PWM_Init+0xc4>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d56:	d009      	beq.n	8006d6c <HAL_TIM_PWM_Init+0xc4>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d60:	d004      	beq.n	8006d6c <HAL_TIM_PWM_Init+0xc4>
 8006d62:	f240 512e 	movw	r1, #1326	@ 0x52e
 8006d66:	4839      	ldr	r0, [pc, #228]	@ (8006e4c <HAL_TIM_PWM_Init+0x1a4>)
 8006d68:	f7fd f83e 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_PWM_Init+0xd6>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d7c:	d304      	bcc.n	8006d88 <HAL_TIM_PWM_Init+0xe0>
 8006d7e:	f240 512f 	movw	r1, #1327	@ 0x52f
 8006d82:	4832      	ldr	r0, [pc, #200]	@ (8006e4c <HAL_TIM_PWM_Init+0x1a4>)
 8006d84:	f7fd f830 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d008      	beq.n	8006da2 <HAL_TIM_PWM_Init+0xfa>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	2b80      	cmp	r3, #128	@ 0x80
 8006d96:	d004      	beq.n	8006da2 <HAL_TIM_PWM_Init+0xfa>
 8006d98:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8006d9c:	482b      	ldr	r0, [pc, #172]	@ (8006e4c <HAL_TIM_PWM_Init+0x1a4>)
 8006d9e:	f7fd f823 	bl	8003de8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f84a 	bl	8006e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3304      	adds	r3, #4
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f001 f9b6 	bl	8008140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	40012c00 	.word	0x40012c00
 8006e34:	40013400 	.word	0x40013400
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40000c00 	.word	0x40000c00
 8006e44:	40001000 	.word	0x40001000
 8006e48:	40001400 	.word	0x40001400
 8006e4c:	0800d3f8 	.word	0x0800d3f8

08006e50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr
	...

08006e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a8a      	ldr	r2, [pc, #552]	@ (800709c <HAL_TIM_PWM_Start+0x238>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d10b      	bne.n	8006e90 <HAL_TIM_PWM_Start+0x2c>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d062      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	d05f      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d05c      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	d059      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a82      	ldr	r2, [pc, #520]	@ (80070a0 <HAL_TIM_PWM_Start+0x23c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d10b      	bne.n	8006eb2 <HAL_TIM_PWM_Start+0x4e>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d051      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d04e      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d04b      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b0c      	cmp	r3, #12
 8006eb0:	d048      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eba:	d10b      	bne.n	8006ed4 <HAL_TIM_PWM_Start+0x70>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d040      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b04      	cmp	r3, #4
 8006ec6:	d03d      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d03a      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d037      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a72      	ldr	r2, [pc, #456]	@ (80070a4 <HAL_TIM_PWM_Start+0x240>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10b      	bne.n	8006ef6 <HAL_TIM_PWM_Start+0x92>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d02f      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d02c      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d029      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	2b0c      	cmp	r3, #12
 8006ef4:	d026      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a6b      	ldr	r2, [pc, #428]	@ (80070a8 <HAL_TIM_PWM_Start+0x244>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10b      	bne.n	8006f18 <HAL_TIM_PWM_Start+0xb4>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01e      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d01b      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d018      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b0c      	cmp	r3, #12
 8006f16:	d015      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a63      	ldr	r2, [pc, #396]	@ (80070ac <HAL_TIM_PWM_Start+0x248>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10b      	bne.n	8006f3a <HAL_TIM_PWM_Start+0xd6>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00d      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d00a      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d007      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b0c      	cmp	r3, #12
 8006f38:	d004      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xe0>
 8006f3a:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8006f3e:	485c      	ldr	r0, [pc, #368]	@ (80070b0 <HAL_TIM_PWM_Start+0x24c>)
 8006f40:	f7fc ff52 	bl	8003de8 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <HAL_TIM_PWM_Start+0xfa>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	bf14      	ite	ne
 8006f56:	2301      	movne	r3, #1
 8006f58:	2300      	moveq	r3, #0
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	e022      	b.n	8006fa4 <HAL_TIM_PWM_Start+0x140>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d109      	bne.n	8006f78 <HAL_TIM_PWM_Start+0x114>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	bf14      	ite	ne
 8006f70:	2301      	movne	r3, #1
 8006f72:	2300      	moveq	r3, #0
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	e015      	b.n	8006fa4 <HAL_TIM_PWM_Start+0x140>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b08      	cmp	r3, #8
 8006f7c:	d109      	bne.n	8006f92 <HAL_TIM_PWM_Start+0x12e>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	bf14      	ite	ne
 8006f8a:	2301      	movne	r3, #1
 8006f8c:	2300      	moveq	r3, #0
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	e008      	b.n	8006fa4 <HAL_TIM_PWM_Start+0x140>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	bf14      	ite	ne
 8006f9e:	2301      	movne	r3, #1
 8006fa0:	2300      	moveq	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e072      	b.n	8007092 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d104      	bne.n	8006fbc <HAL_TIM_PWM_Start+0x158>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fba:	e013      	b.n	8006fe4 <HAL_TIM_PWM_Start+0x180>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d104      	bne.n	8006fcc <HAL_TIM_PWM_Start+0x168>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fca:	e00b      	b.n	8006fe4 <HAL_TIM_PWM_Start+0x180>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b08      	cmp	r3, #8
 8006fd0:	d104      	bne.n	8006fdc <HAL_TIM_PWM_Start+0x178>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fda:	e003      	b.n	8006fe4 <HAL_TIM_PWM_Start+0x180>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 fbf1 	bl	80087d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a29      	ldr	r2, [pc, #164]	@ (800709c <HAL_TIM_PWM_Start+0x238>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d004      	beq.n	8007006 <HAL_TIM_PWM_Start+0x1a2>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a27      	ldr	r2, [pc, #156]	@ (80070a0 <HAL_TIM_PWM_Start+0x23c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d101      	bne.n	800700a <HAL_TIM_PWM_Start+0x1a6>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <HAL_TIM_PWM_Start+0x1a8>
 800700a:	2300      	movs	r3, #0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d007      	beq.n	8007020 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800701e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a1d      	ldr	r2, [pc, #116]	@ (800709c <HAL_TIM_PWM_Start+0x238>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d018      	beq.n	800705c <HAL_TIM_PWM_Start+0x1f8>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a1c      	ldr	r2, [pc, #112]	@ (80070a0 <HAL_TIM_PWM_Start+0x23c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d013      	beq.n	800705c <HAL_TIM_PWM_Start+0x1f8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800703c:	d00e      	beq.n	800705c <HAL_TIM_PWM_Start+0x1f8>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a18      	ldr	r2, [pc, #96]	@ (80070a4 <HAL_TIM_PWM_Start+0x240>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d009      	beq.n	800705c <HAL_TIM_PWM_Start+0x1f8>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <HAL_TIM_PWM_Start+0x244>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d004      	beq.n	800705c <HAL_TIM_PWM_Start+0x1f8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <HAL_TIM_PWM_Start+0x248>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d111      	bne.n	8007080 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b06      	cmp	r3, #6
 800706c:	d010      	beq.n	8007090 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0201 	orr.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707e:	e007      	b.n	8007090 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40013400 	.word	0x40013400
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	0800d3f8 	.word	0x0800d3f8

080070b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e194      	b.n	80073f2 <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a7f      	ldr	r2, [pc, #508]	@ (80072cc <HAL_TIM_Encoder_Init+0x218>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01d      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a7e      	ldr	r2, [pc, #504]	@ (80072d0 <HAL_TIM_Encoder_Init+0x21c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d018      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e4:	d013      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a7a      	ldr	r2, [pc, #488]	@ (80072d4 <HAL_TIM_Encoder_Init+0x220>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00e      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a78      	ldr	r2, [pc, #480]	@ (80072d8 <HAL_TIM_Encoder_Init+0x224>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a77      	ldr	r2, [pc, #476]	@ (80072dc <HAL_TIM_Encoder_Init+0x228>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <HAL_TIM_Encoder_Init+0x5a>
 8007104:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8007108:	4875      	ldr	r0, [pc, #468]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800710a:	f7fc fe6d 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d014      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b10      	cmp	r3, #16
 800711c:	d010      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b20      	cmp	r3, #32
 8007124:	d00c      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b40      	cmp	r3, #64	@ 0x40
 800712c:	d008      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b60      	cmp	r3, #96	@ 0x60
 8007134:	d004      	beq.n	8007140 <HAL_TIM_Encoder_Init+0x8c>
 8007136:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 800713a:	4869      	ldr	r0, [pc, #420]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800713c:	f7fc fe54 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00e      	beq.n	8007166 <HAL_TIM_Encoder_Init+0xb2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007150:	d009      	beq.n	8007166 <HAL_TIM_Encoder_Init+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800715a:	d004      	beq.n	8007166 <HAL_TIM_Encoder_Init+0xb2>
 800715c:	f640 31da 	movw	r1, #3034	@ 0xbda
 8007160:	485f      	ldr	r0, [pc, #380]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 8007162:	f7fc fe41 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <HAL_TIM_Encoder_Init+0xcc>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b80      	cmp	r3, #128	@ 0x80
 8007174:	d004      	beq.n	8007180 <HAL_TIM_Encoder_Init+0xcc>
 8007176:	f640 31db 	movw	r1, #3035	@ 0xbdb
 800717a:	4859      	ldr	r0, [pc, #356]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800717c:	f7fc fe34 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d00c      	beq.n	80071a2 <HAL_TIM_Encoder_Init+0xee>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d008      	beq.n	80071a2 <HAL_TIM_Encoder_Init+0xee>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d004      	beq.n	80071a2 <HAL_TIM_Encoder_Init+0xee>
 8007198:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 800719c:	4850      	ldr	r0, [pc, #320]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800719e:	f7fc fe23 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d00c      	beq.n	80071c4 <HAL_TIM_Encoder_Init+0x110>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d008      	beq.n	80071c4 <HAL_TIM_Encoder_Init+0x110>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d004      	beq.n	80071c4 <HAL_TIM_Encoder_Init+0x110>
 80071ba:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 80071be:	4848      	ldr	r0, [pc, #288]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 80071c0:	f7fc fe12 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d00c      	beq.n	80071e6 <HAL_TIM_Encoder_Init+0x132>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d008      	beq.n	80071e6 <HAL_TIM_Encoder_Init+0x132>
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d004      	beq.n	80071e6 <HAL_TIM_Encoder_Init+0x132>
 80071dc:	f640 31de 	movw	r1, #3038	@ 0xbde
 80071e0:	483f      	ldr	r0, [pc, #252]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 80071e2:	f7fc fe01 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <HAL_TIM_Encoder_Init+0x14c>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d004      	beq.n	8007200 <HAL_TIM_Encoder_Init+0x14c>
 80071f6:	f640 31df 	movw	r1, #3039	@ 0xbdf
 80071fa:	4839      	ldr	r0, [pc, #228]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 80071fc:	f7fc fdf4 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <HAL_TIM_Encoder_Init+0x166>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	2b02      	cmp	r3, #2
 800720e:	d004      	beq.n	800721a <HAL_TIM_Encoder_Init+0x166>
 8007210:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 8007214:	4832      	ldr	r0, [pc, #200]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 8007216:	f7fc fde7 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d010      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	2b04      	cmp	r3, #4
 8007228:	d00c      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b08      	cmp	r3, #8
 8007230:	d008      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b0c      	cmp	r3, #12
 8007238:	d004      	beq.n	8007244 <HAL_TIM_Encoder_Init+0x190>
 800723a:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 800723e:	4828      	ldr	r0, [pc, #160]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 8007240:	f7fc fdd2 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d010      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	2b04      	cmp	r3, #4
 8007252:	d00c      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d008      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	2b0c      	cmp	r3, #12
 8007262:	d004      	beq.n	800726e <HAL_TIM_Encoder_Init+0x1ba>
 8007264:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8007268:	481d      	ldr	r0, [pc, #116]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800726a:	f7fc fdbd 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	d904      	bls.n	8007280 <HAL_TIM_Encoder_Init+0x1cc>
 8007276:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 800727a:	4819      	ldr	r0, [pc, #100]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800727c:	f7fc fdb4 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	2b0f      	cmp	r3, #15
 8007286:	d904      	bls.n	8007292 <HAL_TIM_Encoder_Init+0x1de>
 8007288:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800728c:	4814      	ldr	r0, [pc, #80]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 800728e:	f7fc fdab 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <HAL_TIM_Encoder_Init+0x1f0>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072a2:	d304      	bcc.n	80072ae <HAL_TIM_Encoder_Init+0x1fa>
 80072a4:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80072a8:	480d      	ldr	r0, [pc, #52]	@ (80072e0 <HAL_TIM_Encoder_Init+0x22c>)
 80072aa:	f7fc fd9d 	bl	8003de8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d114      	bne.n	80072e4 <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7fd fa82 	bl	80047cc <HAL_TIM_Encoder_MspInit>
 80072c8:	e00c      	b.n	80072e4 <HAL_TIM_Encoder_Init+0x230>
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40000c00 	.word	0x40000c00
 80072e0:	0800d3f8 	.word	0x0800d3f8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3304      	adds	r3, #4
 8007308:	4619      	mov	r1, r3
 800730a:	4610      	mov	r0, r2
 800730c:	f000 ff18 	bl	8008140 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007338:	f023 0303 	bic.w	r3, r3, #3
 800733c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	021b      	lsls	r3, r3, #8
 8007348:	4313      	orrs	r3, r2
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007356:	f023 030c 	bic.w	r3, r3, #12
 800735a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	021b      	lsls	r3, r3, #8
 8007372:	4313      	orrs	r3, r2
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	011a      	lsls	r2, r3, #4
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	6a1b      	ldr	r3, [r3, #32]
 8007384:	031b      	lsls	r3, r3, #12
 8007386:	4313      	orrs	r3, r2
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007394:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4313      	orrs	r3, r2
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop

080073fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800740c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007414:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800741c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007424:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a4d      	ldr	r2, [pc, #308]	@ (8007560 <HAL_TIM_Encoder_Start+0x164>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d01d      	beq.n	800746c <HAL_TIM_Encoder_Start+0x70>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a4b      	ldr	r2, [pc, #300]	@ (8007564 <HAL_TIM_Encoder_Start+0x168>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d018      	beq.n	800746c <HAL_TIM_Encoder_Start+0x70>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007442:	d013      	beq.n	800746c <HAL_TIM_Encoder_Start+0x70>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a47      	ldr	r2, [pc, #284]	@ (8007568 <HAL_TIM_Encoder_Start+0x16c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00e      	beq.n	800746c <HAL_TIM_Encoder_Start+0x70>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a46      	ldr	r2, [pc, #280]	@ (800756c <HAL_TIM_Encoder_Start+0x170>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d009      	beq.n	800746c <HAL_TIM_Encoder_Start+0x70>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a44      	ldr	r2, [pc, #272]	@ (8007570 <HAL_TIM_Encoder_Start+0x174>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d004      	beq.n	800746c <HAL_TIM_Encoder_Start+0x70>
 8007462:	f640 4195 	movw	r1, #3221	@ 0xc95
 8007466:	4843      	ldr	r0, [pc, #268]	@ (8007574 <HAL_TIM_Encoder_Start+0x178>)
 8007468:	f7fc fcbe 	bl	8003de8 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d110      	bne.n	8007494 <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d102      	bne.n	800747e <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007478:	7b7b      	ldrb	r3, [r7, #13]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d001      	beq.n	8007482 <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e069      	b.n	8007556 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007492:	e031      	b.n	80074f8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b04      	cmp	r3, #4
 8007498:	d110      	bne.n	80074bc <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d102      	bne.n	80074a6 <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074a0:	7b3b      	ldrb	r3, [r7, #12]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d001      	beq.n	80074aa <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e055      	b.n	8007556 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074ba:	e01d      	b.n	80074f8 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d108      	bne.n	80074d4 <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074c2:	7bbb      	ldrb	r3, [r7, #14]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d105      	bne.n	80074d4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074c8:	7b7b      	ldrb	r3, [r7, #13]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d102      	bne.n	80074d4 <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074ce:	7b3b      	ldrb	r3, [r7, #12]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d001      	beq.n	80074d8 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e03e      	b.n	8007556 <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2202      	movs	r2, #2
 80074f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_Encoder_Start+0x10a>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b04      	cmp	r3, #4
 8007502:	d008      	beq.n	8007516 <HAL_TIM_Encoder_Start+0x11a>
 8007504:	e00f      	b.n	8007526 <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	2100      	movs	r1, #0
 800750e:	4618      	mov	r0, r3
 8007510:	f001 f960 	bl	80087d4 <TIM_CCxChannelCmd>
      break;
 8007514:	e016      	b.n	8007544 <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2201      	movs	r2, #1
 800751c:	2104      	movs	r1, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f001 f958 	bl	80087d4 <TIM_CCxChannelCmd>
      break;
 8007524:	e00e      	b.n	8007544 <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	2100      	movs	r1, #0
 800752e:	4618      	mov	r0, r3
 8007530:	f001 f950 	bl	80087d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2201      	movs	r2, #1
 800753a:	2104      	movs	r1, #4
 800753c:	4618      	mov	r0, r3
 800753e:	f001 f949 	bl	80087d4 <TIM_CCxChannelCmd>
      break;
 8007542:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40013400 	.word	0x40013400
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	0800d3f8 	.word	0x0800d3f8

08007578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b02      	cmp	r3, #2
 800758c:	d122      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b02      	cmp	r3, #2
 800759a:	d11b      	bne.n	80075d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0202 	mvn.w	r2, #2
 80075a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fda5 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 80075c0:	e005      	b.n	80075ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fd98 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fda7 	bl	800811c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b04      	cmp	r3, #4
 80075e0:	d122      	bne.n	8007628 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d11b      	bne.n	8007628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f06f 0204 	mvn.w	r2, #4
 80075f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fd7b 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 8007614:	e005      	b.n	8007622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fd6e 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fd7d 	bl	800811c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b08      	cmp	r3, #8
 8007634:	d122      	bne.n	800767c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0308 	and.w	r3, r3, #8
 8007640:	2b08      	cmp	r3, #8
 8007642:	d11b      	bne.n	800767c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0208 	mvn.w	r2, #8
 800764c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2204      	movs	r2, #4
 8007652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fd51 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 8007668:	e005      	b.n	8007676 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fd44 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fd53 	bl	800811c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b10      	cmp	r3, #16
 8007688:	d122      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b10      	cmp	r3, #16
 8007696:	d11b      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f06f 0210 	mvn.w	r2, #16
 80076a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2208      	movs	r2, #8
 80076a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fd27 	bl	800810a <HAL_TIM_IC_CaptureCallback>
 80076bc:	e005      	b.n	80076ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fd1a 	bl	80080f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd29 	bl	800811c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10e      	bne.n	80076fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f003 0301 	and.w	r3, r3, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d107      	bne.n	80076fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f06f 0201 	mvn.w	r2, #1
 80076f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7fc f91c 	bl	8003934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007706:	2b80      	cmp	r3, #128	@ 0x80
 8007708:	d10e      	bne.n	8007728 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007714:	2b80      	cmp	r3, #128	@ 0x80
 8007716:	d107      	bne.n	8007728 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f001 fa5b 	bl	8008bde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007732:	2b40      	cmp	r3, #64	@ 0x40
 8007734:	d10e      	bne.n	8007754 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007740:	2b40      	cmp	r3, #64	@ 0x40
 8007742:	d107      	bne.n	8007754 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800774c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fced 	bl	800812e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b20      	cmp	r3, #32
 8007760:	d10e      	bne.n	8007780 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b20      	cmp	r3, #32
 800776e:	d107      	bne.n	8007780 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f06f 0220 	mvn.w	r2, #32
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fa26 	bl	8008bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d010      	beq.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d00d      	beq.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b08      	cmp	r3, #8
 80077a8:	d00a      	beq.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b0c      	cmp	r3, #12
 80077ae:	d007      	beq.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b3c      	cmp	r3, #60	@ 0x3c
 80077b4:	d004      	beq.n	80077c0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80077b6:	f241 017e 	movw	r1, #4222	@ 0x107e
 80077ba:	4890      	ldr	r0, [pc, #576]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80077bc:	f7fc fb14 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b60      	cmp	r3, #96	@ 0x60
 80077c6:	d008      	beq.n	80077da <HAL_TIM_PWM_ConfigChannel+0x52>
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2b70      	cmp	r3, #112	@ 0x70
 80077ce:	d004      	beq.n	80077da <HAL_TIM_PWM_ConfigChannel+0x52>
 80077d0:	f241 017f 	movw	r1, #4223	@ 0x107f
 80077d4:	4889      	ldr	r0, [pc, #548]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80077d6:	f7fc fb07 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d004      	beq.n	80077f4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80077ea:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 80077ee:	4883      	ldr	r0, [pc, #524]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80077f0:	f7fc fafa 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d008      	beq.n	800780e <HAL_TIM_PWM_ConfigChannel+0x86>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d004      	beq.n	800780e <HAL_TIM_PWM_ConfigChannel+0x86>
 8007804:	f241 0181 	movw	r1, #4225	@ 0x1081
 8007808:	487c      	ldr	r0, [pc, #496]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 800780a:	f7fc faed 	bl	8003de8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIM_PWM_ConfigChannel+0x94>
 8007818:	2302      	movs	r3, #2
 800781a:	e147      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x324>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	f200 8138 	bhi.w	8007a9c <HAL_TIM_PWM_ConfigChannel+0x314>
 800782c:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800782e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007832:	bf00      	nop
 8007834:	08007869 	.word	0x08007869
 8007838:	08007a9d 	.word	0x08007a9d
 800783c:	08007a9d 	.word	0x08007a9d
 8007840:	08007a9d 	.word	0x08007a9d
 8007844:	080078ef 	.word	0x080078ef
 8007848:	08007a9d 	.word	0x08007a9d
 800784c:	08007a9d 	.word	0x08007a9d
 8007850:	08007a9d 	.word	0x08007a9d
 8007854:	08007977 	.word	0x08007977
 8007858:	08007a9d 	.word	0x08007a9d
 800785c:	08007a9d 	.word	0x08007a9d
 8007860:	08007a9d 	.word	0x08007a9d
 8007864:	08007a15 	.word	0x08007a15
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a64      	ldr	r2, [pc, #400]	@ (8007a00 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d01d      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x126>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a63      	ldr	r2, [pc, #396]	@ (8007a04 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d018      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x126>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007884:	d013      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x126>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a5f      	ldr	r2, [pc, #380]	@ (8007a08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x126>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a5d      	ldr	r2, [pc, #372]	@ (8007a0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d009      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x126>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a5c      	ldr	r2, [pc, #368]	@ (8007a10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_TIM_PWM_ConfigChannel+0x126>
 80078a4:	f241 018b 	movw	r1, #4235	@ 0x108b
 80078a8:	4854      	ldr	r0, [pc, #336]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80078aa:	f7fc fa9d 	bl	8003de8 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fcbd 	bl	8008234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f042 0208 	orr.w	r2, r2, #8
 80078c8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0204 	bic.w	r2, r2, #4
 80078d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6999      	ldr	r1, [r3, #24]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	619a      	str	r2, [r3, #24]
      break;
 80078ec:	e0d9      	b.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a43      	ldr	r2, [pc, #268]	@ (8007a00 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d01d      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a41      	ldr	r2, [pc, #260]	@ (8007a04 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d018      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800790a:	d013      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a3d      	ldr	r2, [pc, #244]	@ (8007a08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a3c      	ldr	r2, [pc, #240]	@ (8007a0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a3a      	ldr	r2, [pc, #232]	@ (8007a10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800792a:	f241 019c 	movw	r1, #4252	@ 0x109c
 800792e:	4833      	ldr	r0, [pc, #204]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007930:	f7fc fa5a 	bl	8003de8 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fd14 	bl	8008368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800794e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800795e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6999      	ldr	r1, [r3, #24]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]
      break;
 8007974:	e095      	b.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a21      	ldr	r2, [pc, #132]	@ (8007a00 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d01d      	beq.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x234>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a1f      	ldr	r2, [pc, #124]	@ (8007a04 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d018      	beq.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x234>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007992:	d013      	beq.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x234>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1b      	ldr	r2, [pc, #108]	@ (8007a08 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00e      	beq.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x234>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a0c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d009      	beq.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x234>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a18      	ldr	r2, [pc, #96]	@ (8007a10 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x234>
 80079b2:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 80079b6:	4811      	ldr	r0, [pc, #68]	@ (80079fc <HAL_TIM_PWM_ConfigChannel+0x274>)
 80079b8:	f7fc fa16 	bl	8003de8 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fd6e 	bl	80084a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69da      	ldr	r2, [r3, #28]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0208 	orr.w	r2, r2, #8
 80079d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69da      	ldr	r2, [r3, #28]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0204 	bic.w	r2, r2, #4
 80079e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69d9      	ldr	r1, [r3, #28]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	61da      	str	r2, [r3, #28]
      break;
 80079fa:	e052      	b.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x31a>
 80079fc:	0800d3f8 	.word	0x0800d3f8
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a26      	ldr	r2, [pc, #152]	@ (8007ab4 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d01d      	beq.n	8007a5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a25      	ldr	r2, [pc, #148]	@ (8007ab8 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d018      	beq.n	8007a5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a30:	d013      	beq.n	8007a5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a21      	ldr	r2, [pc, #132]	@ (8007abc <HAL_TIM_PWM_ConfigChannel+0x334>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00e      	beq.n	8007a5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac0 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d009      	beq.n	8007a5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac4 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007a50:	f241 01be 	movw	r1, #4286	@ 0x10be
 8007a54:	481c      	ldr	r0, [pc, #112]	@ (8007ac8 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8007a56:	f7fc f9c7 	bl	8003de8 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 fdbd 	bl	80085e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69d9      	ldr	r1, [r3, #28]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	021a      	lsls	r2, r3, #8
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	430a      	orrs	r2, r1
 8007a98:	61da      	str	r2, [r3, #28]
      break;
 8007a9a:	e002      	b.n	8007aa2 <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40012c00 	.word	0x40012c00
 8007ab8:	40013400 	.word	0x40013400
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40000c00 	.word	0x40000c00
 8007ac8:	0800d3f8 	.word	0x0800d3f8

08007acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e2f6      	b.n	80080d6 <HAL_TIM_ConfigClockSource+0x60a>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b00:	d029      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b70      	cmp	r3, #112	@ 0x70
 8007b08:	d025      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b12:	d020      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b40      	cmp	r3, #64	@ 0x40
 8007b1a:	d01c      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b50      	cmp	r3, #80	@ 0x50
 8007b22:	d018      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2b60      	cmp	r3, #96	@ 0x60
 8007b2a:	d014      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d010      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d00c      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d008      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b30      	cmp	r3, #48	@ 0x30
 8007b4a:	d004      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x8a>
 8007b4c:	f241 41be 	movw	r1, #5310	@ 0x14be
 8007b50:	487c      	ldr	r0, [pc, #496]	@ (8007d44 <HAL_TIM_ConfigClockSource+0x278>)
 8007b52:	f7fc f949 	bl	8003de8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b6c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7e:	f000 80f1 	beq.w	8007d64 <HAL_TIM_ConfigClockSource+0x298>
 8007b82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b86:	f200 8299 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8e:	d02d      	beq.n	8007bec <HAL_TIM_ConfigClockSource+0x120>
 8007b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b94:	f200 8292 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007b98:	2b70      	cmp	r3, #112	@ 0x70
 8007b9a:	d05d      	beq.n	8007c58 <HAL_TIM_ConfigClockSource+0x18c>
 8007b9c:	2b70      	cmp	r3, #112	@ 0x70
 8007b9e:	f200 828d 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007ba2:	2b60      	cmp	r3, #96	@ 0x60
 8007ba4:	f000 81a5 	beq.w	8007ef2 <HAL_TIM_ConfigClockSource+0x426>
 8007ba8:	2b60      	cmp	r3, #96	@ 0x60
 8007baa:	f200 8287 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007bae:	2b50      	cmp	r3, #80	@ 0x50
 8007bb0:	f000 8149 	beq.w	8007e46 <HAL_TIM_ConfigClockSource+0x37a>
 8007bb4:	2b50      	cmp	r3, #80	@ 0x50
 8007bb6:	f200 8281 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007bba:	2b40      	cmp	r3, #64	@ 0x40
 8007bbc:	f000 81fc 	beq.w	8007fb8 <HAL_TIM_ConfigClockSource+0x4ec>
 8007bc0:	2b40      	cmp	r3, #64	@ 0x40
 8007bc2:	f200 827b 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007bc6:	2b30      	cmp	r3, #48	@ 0x30
 8007bc8:	f000 824c 	beq.w	8008064 <HAL_TIM_ConfigClockSource+0x598>
 8007bcc:	2b30      	cmp	r3, #48	@ 0x30
 8007bce:	f200 8275 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	f000 8246 	beq.w	8008064 <HAL_TIM_ConfigClockSource+0x598>
 8007bd8:	2b20      	cmp	r3, #32
 8007bda:	f200 826f 	bhi.w	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 8240 	beq.w	8008064 <HAL_TIM_ConfigClockSource+0x598>
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	f000 823d 	beq.w	8008064 <HAL_TIM_ConfigClockSource+0x598>
 8007bea:	e267      	b.n	80080bc <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a55      	ldr	r2, [pc, #340]	@ (8007d48 <HAL_TIM_ConfigClockSource+0x27c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	f000 8265 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a53      	ldr	r2, [pc, #332]	@ (8007d4c <HAL_TIM_ConfigClockSource+0x280>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	f000 825f 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0c:	f000 8259 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a4e      	ldr	r2, [pc, #312]	@ (8007d50 <HAL_TIM_ConfigClockSource+0x284>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	f000 8253 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a4c      	ldr	r2, [pc, #304]	@ (8007d54 <HAL_TIM_ConfigClockSource+0x288>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	f000 824d 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8007d58 <HAL_TIM_ConfigClockSource+0x28c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	f000 8247 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a48      	ldr	r2, [pc, #288]	@ (8007d5c <HAL_TIM_ConfigClockSource+0x290>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	f000 8241 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a46      	ldr	r2, [pc, #280]	@ (8007d60 <HAL_TIM_ConfigClockSource+0x294>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	f000 823b 	beq.w	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
 8007c4c:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8007c50:	483c      	ldr	r0, [pc, #240]	@ (8007d44 <HAL_TIM_ConfigClockSource+0x278>)
 8007c52:	f7fc f8c9 	bl	8003de8 <assert_failed>
      break;
 8007c56:	e234      	b.n	80080c2 <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8007d48 <HAL_TIM_ConfigClockSource+0x27c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d01d      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a39      	ldr	r2, [pc, #228]	@ (8007d4c <HAL_TIM_ConfigClockSource+0x280>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d018      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c74:	d013      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a35      	ldr	r2, [pc, #212]	@ (8007d50 <HAL_TIM_ConfigClockSource+0x284>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d00e      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a33      	ldr	r2, [pc, #204]	@ (8007d54 <HAL_TIM_ConfigClockSource+0x288>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d009      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a32      	ldr	r2, [pc, #200]	@ (8007d58 <HAL_TIM_ConfigClockSource+0x28c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d004      	beq.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d2>
 8007c94:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8007c98:	482a      	ldr	r0, [pc, #168]	@ (8007d44 <HAL_TIM_ConfigClockSource+0x278>)
 8007c9a:	f7fc f8a5 	bl	8003de8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x202>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cae:	d00e      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x202>
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cb8:	d009      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x202>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cc2:	d004      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x202>
 8007cc4:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8007cc8:	481e      	ldr	r0, [pc, #120]	@ (8007d44 <HAL_TIM_ConfigClockSource+0x278>)
 8007cca:	f7fc f88d 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd6:	d014      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x236>
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d010      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x236>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00c      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x236>
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d008      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x236>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	2b0a      	cmp	r3, #10
 8007cf6:	d004      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x236>
 8007cf8:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8007cfc:	4811      	ldr	r0, [pc, #68]	@ (8007d44 <HAL_TIM_ConfigClockSource+0x278>)
 8007cfe:	f7fc f873 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	2b0f      	cmp	r3, #15
 8007d08:	d904      	bls.n	8007d14 <HAL_TIM_ConfigClockSource+0x248>
 8007d0a:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8007d0e:	480d      	ldr	r0, [pc, #52]	@ (8007d44 <HAL_TIM_ConfigClockSource+0x278>)
 8007d10:	f7fc f86a 	bl	8003de8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d24:	f000 fd37 	bl	8008796 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	609a      	str	r2, [r3, #8]
      break;
 8007d40:	e1c0      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
 8007d42:	bf00      	nop
 8007d44:	0800d3f8 	.word	0x0800d3f8
 8007d48:	40012c00 	.word	0x40012c00
 8007d4c:	40013400 	.word	0x40013400
 8007d50:	40000400 	.word	0x40000400
 8007d54:	40000800 	.word	0x40000800
 8007d58:	40000c00 	.word	0x40000c00
 8007d5c:	40001000 	.word	0x40001000
 8007d60:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a8d      	ldr	r2, [pc, #564]	@ (8007fa0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01d      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x2de>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a8c      	ldr	r2, [pc, #560]	@ (8007fa4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x2de>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d80:	d013      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x2de>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a88      	ldr	r2, [pc, #544]	@ (8007fa8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x2de>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a86      	ldr	r2, [pc, #536]	@ (8007fac <HAL_TIM_ConfigClockSource+0x4e0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x2de>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a85      	ldr	r2, [pc, #532]	@ (8007fb0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_TIM_ConfigClockSource+0x2de>
 8007da0:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8007da4:	4883      	ldr	r0, [pc, #524]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007da6:	f7fc f81f 	bl	8003de8 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d013      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x30e>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dba:	d00e      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x30e>
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc4:	d009      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x30e>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007dce:	d004      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x30e>
 8007dd0:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8007dd4:	4877      	ldr	r0, [pc, #476]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007dd6:	f7fc f807 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007de2:	d014      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x342>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d010      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x342>
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00c      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x342>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d008      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x342>
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b0a      	cmp	r3, #10
 8007e02:	d004      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0x342>
 8007e04:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8007e08:	486a      	ldr	r0, [pc, #424]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007e0a:	f7fb ffed 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b0f      	cmp	r3, #15
 8007e14:	d904      	bls.n	8007e20 <HAL_TIM_ConfigClockSource+0x354>
 8007e16:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8007e1a:	4866      	ldr	r0, [pc, #408]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007e1c:	f7fb ffe4 	bl	8003de8 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e30:	f000 fcb1 	bl	8008796 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689a      	ldr	r2, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e42:	609a      	str	r2, [r3, #8]
      break;
 8007e44:	e13e      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a55      	ldr	r2, [pc, #340]	@ (8007fa0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d01d      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0x3c0>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a53      	ldr	r2, [pc, #332]	@ (8007fa4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d018      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0x3c0>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e62:	d013      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0x3c0>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a4f      	ldr	r2, [pc, #316]	@ (8007fa8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00e      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0x3c0>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a4e      	ldr	r2, [pc, #312]	@ (8007fac <HAL_TIM_ConfigClockSource+0x4e0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d009      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0x3c0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8007fb0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d004      	beq.n	8007e8c <HAL_TIM_ConfigClockSource+0x3c0>
 8007e82:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8007e86:	484b      	ldr	r0, [pc, #300]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007e88:	f7fb ffae 	bl	8003de8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e94:	d014      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x3f4>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d010      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x3f4>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00c      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x3f4>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d008      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x3f4>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2b0a      	cmp	r3, #10
 8007eb4:	d004      	beq.n	8007ec0 <HAL_TIM_ConfigClockSource+0x3f4>
 8007eb6:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8007eba:	483e      	ldr	r0, [pc, #248]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007ebc:	f7fb ff94 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2b0f      	cmp	r3, #15
 8007ec6:	d904      	bls.n	8007ed2 <HAL_TIM_ConfigClockSource+0x406>
 8007ec8:	f241 5101 	movw	r1, #5377	@ 0x1501
 8007ecc:	4839      	ldr	r0, [pc, #228]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007ece:	f7fb ff8b 	bl	8003de8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f000 fbe2 	bl	80086a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2150      	movs	r1, #80	@ 0x50
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fc39 	bl	8008762 <TIM_ITRx_SetConfig>
      break;
 8007ef0:	e0e8      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa0 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d01d      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0x46c>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a28      	ldr	r2, [pc, #160]	@ (8007fa4 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d018      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0x46c>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f0e:	d013      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0x46c>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a24      	ldr	r2, [pc, #144]	@ (8007fa8 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d00e      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0x46c>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a23      	ldr	r2, [pc, #140]	@ (8007fac <HAL_TIM_ConfigClockSource+0x4e0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d009      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0x46c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a21      	ldr	r2, [pc, #132]	@ (8007fb0 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d004      	beq.n	8007f38 <HAL_TIM_ConfigClockSource+0x46c>
 8007f2e:	f241 510d 	movw	r1, #5389	@ 0x150d
 8007f32:	4820      	ldr	r0, [pc, #128]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007f34:	f7fb ff58 	bl	8003de8 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f40:	d014      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0x4a0>
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d010      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0x4a0>
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0x4a0>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d008      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0x4a0>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b0a      	cmp	r3, #10
 8007f60:	d004      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0x4a0>
 8007f62:	f241 5110 	movw	r1, #5392	@ 0x1510
 8007f66:	4813      	ldr	r0, [pc, #76]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007f68:	f7fb ff3e 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b0f      	cmp	r3, #15
 8007f72:	d904      	bls.n	8007f7e <HAL_TIM_ConfigClockSource+0x4b2>
 8007f74:	f241 5111 	movw	r1, #5393	@ 0x1511
 8007f78:	480e      	ldr	r0, [pc, #56]	@ (8007fb4 <HAL_TIM_ConfigClockSource+0x4e8>)
 8007f7a:	f7fb ff35 	bl	8003de8 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f000 fbba 	bl	8008704 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2160      	movs	r1, #96	@ 0x60
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fbe3 	bl	8008762 <TIM_ITRx_SetConfig>
      break;
 8007f9c:	e092      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
 8007f9e:	bf00      	nop
 8007fa0:	40012c00 	.word	0x40012c00
 8007fa4:	40013400 	.word	0x40013400
 8007fa8:	40000400 	.word	0x40000400
 8007fac:	40000800 	.word	0x40000800
 8007fb0:	40000c00 	.word	0x40000c00
 8007fb4:	0800d3f8 	.word	0x0800d3f8
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a48      	ldr	r2, [pc, #288]	@ (80080e0 <HAL_TIM_ConfigClockSource+0x614>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01d      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x532>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a47      	ldr	r2, [pc, #284]	@ (80080e4 <HAL_TIM_ConfigClockSource+0x618>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d018      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x532>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fd4:	d013      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x532>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a43      	ldr	r2, [pc, #268]	@ (80080e8 <HAL_TIM_ConfigClockSource+0x61c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00e      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x532>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a41      	ldr	r2, [pc, #260]	@ (80080ec <HAL_TIM_ConfigClockSource+0x620>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x532>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a40      	ldr	r2, [pc, #256]	@ (80080f0 <HAL_TIM_ConfigClockSource+0x624>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d004      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0x532>
 8007ff4:	f241 511d 	movw	r1, #5405	@ 0x151d
 8007ff8:	483e      	ldr	r0, [pc, #248]	@ (80080f4 <HAL_TIM_ConfigClockSource+0x628>)
 8007ffa:	f7fb fef5 	bl	8003de8 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008006:	d014      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x566>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d010      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x566>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x566>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d008      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x566>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	2b0a      	cmp	r3, #10
 8008026:	d004      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x566>
 8008028:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800802c:	4831      	ldr	r0, [pc, #196]	@ (80080f4 <HAL_TIM_ConfigClockSource+0x628>)
 800802e:	f7fb fedb 	bl	8003de8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b0f      	cmp	r3, #15
 8008038:	d904      	bls.n	8008044 <HAL_TIM_ConfigClockSource+0x578>
 800803a:	f241 5121 	movw	r1, #5409	@ 0x1521
 800803e:	482d      	ldr	r0, [pc, #180]	@ (80080f4 <HAL_TIM_ConfigClockSource+0x628>)
 8008040:	f7fb fed2 	bl	8003de8 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008050:	461a      	mov	r2, r3
 8008052:	f000 fb29 	bl	80086a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2140      	movs	r1, #64	@ 0x40
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fb80 	bl	8008762 <TIM_ITRx_SetConfig>
      break;
 8008062:	e02f      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1d      	ldr	r2, [pc, #116]	@ (80080e0 <HAL_TIM_ConfigClockSource+0x614>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d01d      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x5de>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1c      	ldr	r2, [pc, #112]	@ (80080e4 <HAL_TIM_ConfigClockSource+0x618>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d018      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x5de>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008080:	d013      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x5de>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a18      	ldr	r2, [pc, #96]	@ (80080e8 <HAL_TIM_ConfigClockSource+0x61c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00e      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x5de>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a16      	ldr	r2, [pc, #88]	@ (80080ec <HAL_TIM_ConfigClockSource+0x620>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d009      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x5de>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a15      	ldr	r2, [pc, #84]	@ (80080f0 <HAL_TIM_ConfigClockSource+0x624>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d004      	beq.n	80080aa <HAL_TIM_ConfigClockSource+0x5de>
 80080a0:	f241 5130 	movw	r1, #5424	@ 0x1530
 80080a4:	4813      	ldr	r0, [pc, #76]	@ (80080f4 <HAL_TIM_ConfigClockSource+0x628>)
 80080a6:	f7fb fe9f 	bl	8003de8 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f000 fb54 	bl	8008762 <TIM_ITRx_SetConfig>
      break;
 80080ba:	e003      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	73fb      	strb	r3, [r7, #15]
      break;
 80080c0:	e000      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 80080c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40012c00 	.word	0x40012c00
 80080e4:	40013400 	.word	0x40013400
 80080e8:	40000400 	.word	0x40000400
 80080ec:	40000800 	.word	0x40000800
 80080f0:	40000c00 	.word	0x40000c00
 80080f4:	0800d3f8 	.word	0x0800d3f8

080080f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr

0800810a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	bc80      	pop	{r7}
 800811a:	4770      	bx	lr

0800811c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr

0800812e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a33      	ldr	r2, [pc, #204]	@ (8008220 <TIM_Base_SetConfig+0xe0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d013      	beq.n	8008180 <TIM_Base_SetConfig+0x40>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a32      	ldr	r2, [pc, #200]	@ (8008224 <TIM_Base_SetConfig+0xe4>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d00f      	beq.n	8008180 <TIM_Base_SetConfig+0x40>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008166:	d00b      	beq.n	8008180 <TIM_Base_SetConfig+0x40>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a2f      	ldr	r2, [pc, #188]	@ (8008228 <TIM_Base_SetConfig+0xe8>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d007      	beq.n	8008180 <TIM_Base_SetConfig+0x40>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a2e      	ldr	r2, [pc, #184]	@ (800822c <TIM_Base_SetConfig+0xec>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d003      	beq.n	8008180 <TIM_Base_SetConfig+0x40>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a2d      	ldr	r2, [pc, #180]	@ (8008230 <TIM_Base_SetConfig+0xf0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d108      	bne.n	8008192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a22      	ldr	r2, [pc, #136]	@ (8008220 <TIM_Base_SetConfig+0xe0>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <TIM_Base_SetConfig+0x82>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a21      	ldr	r2, [pc, #132]	@ (8008224 <TIM_Base_SetConfig+0xe4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00f      	beq.n	80081c2 <TIM_Base_SetConfig+0x82>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081a8:	d00b      	beq.n	80081c2 <TIM_Base_SetConfig+0x82>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a1e      	ldr	r2, [pc, #120]	@ (8008228 <TIM_Base_SetConfig+0xe8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d007      	beq.n	80081c2 <TIM_Base_SetConfig+0x82>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a1d      	ldr	r2, [pc, #116]	@ (800822c <TIM_Base_SetConfig+0xec>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d003      	beq.n	80081c2 <TIM_Base_SetConfig+0x82>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a1c      	ldr	r2, [pc, #112]	@ (8008230 <TIM_Base_SetConfig+0xf0>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d108      	bne.n	80081d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a09      	ldr	r2, [pc, #36]	@ (8008220 <TIM_Base_SetConfig+0xe0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0xc8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a08      	ldr	r2, [pc, #32]	@ (8008224 <TIM_Base_SetConfig+0xe4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d103      	bne.n	8008210 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	615a      	str	r2, [r3, #20]
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40013400 	.word	0x40013400
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800
 8008230:	40000c00 	.word	0x40000c00

08008234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	f023 0201 	bic.w	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f023 0302 	bic.w	r3, r3, #2
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a34      	ldr	r2, [pc, #208]	@ (800835c <TIM_OC1_SetConfig+0x128>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC1_SetConfig+0x64>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a33      	ldr	r2, [pc, #204]	@ (8008360 <TIM_OC1_SetConfig+0x12c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d119      	bne.n	80082cc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <TIM_OC1_SetConfig+0x7e>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d004      	beq.n	80082b2 <TIM_OC1_SetConfig+0x7e>
 80082a8:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 80082ac:	482d      	ldr	r0, [pc, #180]	@ (8008364 <TIM_OC1_SetConfig+0x130>)
 80082ae:	f7fb fd9b 	bl	8003de8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	f023 0308 	bic.w	r3, r3, #8
 80082b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f023 0304 	bic.w	r3, r3, #4
 80082ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a23      	ldr	r2, [pc, #140]	@ (800835c <TIM_OC1_SetConfig+0x128>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d003      	beq.n	80082dc <TIM_OC1_SetConfig+0xa8>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a22      	ldr	r2, [pc, #136]	@ (8008360 <TIM_OC1_SetConfig+0x12c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d12d      	bne.n	8008338 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e4:	d008      	beq.n	80082f8 <TIM_OC1_SetConfig+0xc4>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <TIM_OC1_SetConfig+0xc4>
 80082ee:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 80082f2:	481c      	ldr	r0, [pc, #112]	@ (8008364 <TIM_OC1_SetConfig+0x130>)
 80082f4:	f7fb fd78 	bl	8003de8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008300:	d008      	beq.n	8008314 <TIM_OC1_SetConfig+0xe0>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <TIM_OC1_SetConfig+0xe0>
 800830a:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 800830e:	4815      	ldr	r0, [pc, #84]	@ (8008364 <TIM_OC1_SetConfig+0x130>)
 8008310:	f7fb fd6a 	bl	8003de8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800831a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	621a      	str	r2, [r3, #32]
}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40013400 	.word	0x40013400
 8008364:	0800d3f8 	.word	0x0800d3f8

08008368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f023 0210 	bic.w	r2, r3, #16
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800839e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f023 0320 	bic.w	r3, r3, #32
 80083b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a35      	ldr	r2, [pc, #212]	@ (8008498 <TIM_OC2_SetConfig+0x130>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_OC2_SetConfig+0x68>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a34      	ldr	r2, [pc, #208]	@ (800849c <TIM_OC2_SetConfig+0x134>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d11a      	bne.n	8008406 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d008      	beq.n	80083ea <TIM_OC2_SetConfig+0x82>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d004      	beq.n	80083ea <TIM_OC2_SetConfig+0x82>
 80083e0:	f641 3110 	movw	r1, #6928	@ 0x1b10
 80083e4:	482e      	ldr	r0, [pc, #184]	@ (80084a0 <TIM_OC2_SetConfig+0x138>)
 80083e6:	f7fb fcff 	bl	8003de8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008404:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a23      	ldr	r2, [pc, #140]	@ (8008498 <TIM_OC2_SetConfig+0x130>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <TIM_OC2_SetConfig+0xae>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a22      	ldr	r2, [pc, #136]	@ (800849c <TIM_OC2_SetConfig+0x134>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d12f      	bne.n	8008476 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841e:	d008      	beq.n	8008432 <TIM_OC2_SetConfig+0xca>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d004      	beq.n	8008432 <TIM_OC2_SetConfig+0xca>
 8008428:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 800842c:	481c      	ldr	r0, [pc, #112]	@ (80084a0 <TIM_OC2_SetConfig+0x138>)
 800842e:	f7fb fcdb 	bl	8003de8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843a:	d008      	beq.n	800844e <TIM_OC2_SetConfig+0xe6>
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <TIM_OC2_SetConfig+0xe6>
 8008444:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 8008448:	4815      	ldr	r0, [pc, #84]	@ (80084a0 <TIM_OC2_SetConfig+0x138>)
 800844a:	f7fb fccd 	bl	8003de8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800845c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	695b      	ldr	r3, [r3, #20]
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4313      	orrs	r3, r2
 8008474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	621a      	str	r2, [r3, #32]
}
 8008490:	bf00      	nop
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40012c00 	.word	0x40012c00
 800849c:	40013400 	.word	0x40013400
 80084a0:	0800d3f8 	.word	0x0800d3f8

080084a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a35      	ldr	r2, [pc, #212]	@ (80085d4 <TIM_OC3_SetConfig+0x130>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <TIM_OC3_SetConfig+0x66>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a34      	ldr	r2, [pc, #208]	@ (80085d8 <TIM_OC3_SetConfig+0x134>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d11a      	bne.n	8008540 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <TIM_OC3_SetConfig+0x80>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	2b08      	cmp	r3, #8
 8008518:	d004      	beq.n	8008524 <TIM_OC3_SetConfig+0x80>
 800851a:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 800851e:	482f      	ldr	r0, [pc, #188]	@ (80085dc <TIM_OC3_SetConfig+0x138>)
 8008520:	f7fb fc62 	bl	8003de8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800852a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800853e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a24      	ldr	r2, [pc, #144]	@ (80085d4 <TIM_OC3_SetConfig+0x130>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC3_SetConfig+0xac>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a23      	ldr	r2, [pc, #140]	@ (80085d8 <TIM_OC3_SetConfig+0x134>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d12f      	bne.n	80085b0 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	699b      	ldr	r3, [r3, #24]
 8008554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008558:	d008      	beq.n	800856c <TIM_OC3_SetConfig+0xc8>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <TIM_OC3_SetConfig+0xc8>
 8008562:	f641 3169 	movw	r1, #7017	@ 0x1b69
 8008566:	481d      	ldr	r0, [pc, #116]	@ (80085dc <TIM_OC3_SetConfig+0x138>)
 8008568:	f7fb fc3e 	bl	8003de8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008574:	d008      	beq.n	8008588 <TIM_OC3_SetConfig+0xe4>
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d004      	beq.n	8008588 <TIM_OC3_SetConfig+0xe4>
 800857e:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 8008582:	4816      	ldr	r0, [pc, #88]	@ (80085dc <TIM_OC3_SetConfig+0x138>)
 8008584:	f7fb fc30 	bl	8003de8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800858e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400
 80085dc:	0800d3f8 	.word	0x0800d3f8

080085e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800860e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	021b      	lsls	r3, r3, #8
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800862a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	031b      	lsls	r3, r3, #12
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a18      	ldr	r2, [pc, #96]	@ (800869c <TIM_OC4_SetConfig+0xbc>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_OC4_SetConfig+0x68>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a17      	ldr	r2, [pc, #92]	@ (80086a0 <TIM_OC4_SetConfig+0xc0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d117      	bne.n	8008678 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008650:	d008      	beq.n	8008664 <TIM_OC4_SetConfig+0x84>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <TIM_OC4_SetConfig+0x84>
 800865a:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 800865e:	4811      	ldr	r0, [pc, #68]	@ (80086a4 <TIM_OC4_SetConfig+0xc4>)
 8008660:	f7fb fbc2 	bl	8003de8 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800866a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	019b      	lsls	r3, r3, #6
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	40012c00 	.word	0x40012c00
 80086a0:	40013400 	.word	0x40013400
 80086a4:	0800d3f8 	.word	0x0800d3f8

080086a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f023 0201 	bic.w	r2, r3, #1
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	4313      	orrs	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f023 030a 	bic.w	r3, r3, #10
 80086e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc80      	pop	{r7}
 8008702:	4770      	bx	lr

08008704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	f023 0210 	bic.w	r2, r3, #16
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800872e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	031b      	lsls	r3, r3, #12
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	4313      	orrs	r3, r2
 8008738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4313      	orrs	r3, r2
 800874a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	697a      	ldr	r2, [r7, #20]
 8008756:	621a      	str	r2, [r3, #32]
}
 8008758:	bf00      	nop
 800875a:	371c      	adds	r7, #28
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr

08008762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008762:	b480      	push	{r7}
 8008764:	b085      	sub	sp, #20
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
 800876a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	f043 0307 	orr.w	r3, r3, #7
 8008784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	609a      	str	r2, [r3, #8]
}
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	bc80      	pop	{r7}
 8008794:	4770      	bx	lr

08008796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008796:	b480      	push	{r7}
 8008798:	b087      	sub	sp, #28
 800879a:	af00      	add	r7, sp, #0
 800879c:	60f8      	str	r0, [r7, #12]
 800879e:	60b9      	str	r1, [r7, #8]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	021a      	lsls	r2, r3, #8
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	431a      	orrs	r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	4313      	orrs	r3, r2
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	697a      	ldr	r2, [r7, #20]
 80087c8:	609a      	str	r2, [r3, #8]
}
 80087ca:	bf00      	nop
 80087cc:	371c      	adds	r7, #28
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4a26      	ldr	r2, [pc, #152]	@ (800887c <TIM_CCxChannelCmd+0xa8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d018      	beq.n	800881a <TIM_CCxChannelCmd+0x46>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4a25      	ldr	r2, [pc, #148]	@ (8008880 <TIM_CCxChannelCmd+0xac>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d014      	beq.n	800881a <TIM_CCxChannelCmd+0x46>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087f6:	d010      	beq.n	800881a <TIM_CCxChannelCmd+0x46>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4a22      	ldr	r2, [pc, #136]	@ (8008884 <TIM_CCxChannelCmd+0xb0>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00c      	beq.n	800881a <TIM_CCxChannelCmd+0x46>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4a21      	ldr	r2, [pc, #132]	@ (8008888 <TIM_CCxChannelCmd+0xb4>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d008      	beq.n	800881a <TIM_CCxChannelCmd+0x46>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a20      	ldr	r2, [pc, #128]	@ (800888c <TIM_CCxChannelCmd+0xb8>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d004      	beq.n	800881a <TIM_CCxChannelCmd+0x46>
 8008810:	f641 5192 	movw	r1, #7570	@ 0x1d92
 8008814:	481e      	ldr	r0, [pc, #120]	@ (8008890 <TIM_CCxChannelCmd+0xbc>)
 8008816:	f7fb fae7 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d010      	beq.n	8008842 <TIM_CCxChannelCmd+0x6e>
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b04      	cmp	r3, #4
 8008824:	d00d      	beq.n	8008842 <TIM_CCxChannelCmd+0x6e>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b08      	cmp	r3, #8
 800882a:	d00a      	beq.n	8008842 <TIM_CCxChannelCmd+0x6e>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b0c      	cmp	r3, #12
 8008830:	d007      	beq.n	8008842 <TIM_CCxChannelCmd+0x6e>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b3c      	cmp	r3, #60	@ 0x3c
 8008836:	d004      	beq.n	8008842 <TIM_CCxChannelCmd+0x6e>
 8008838:	f641 5193 	movw	r1, #7571	@ 0x1d93
 800883c:	4814      	ldr	r0, [pc, #80]	@ (8008890 <TIM_CCxChannelCmd+0xbc>)
 800883e:	f7fb fad3 	bl	8003de8 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f003 031f 	and.w	r3, r3, #31
 8008848:	2201      	movs	r2, #1
 800884a:	fa02 f303 	lsl.w	r3, r2, r3
 800884e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1a      	ldr	r2, [r3, #32]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	43db      	mvns	r3, r3
 8008858:	401a      	ands	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6a1a      	ldr	r2, [r3, #32]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f003 031f 	and.w	r3, r3, #31
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	fa01 f303 	lsl.w	r3, r1, r3
 800886e:	431a      	orrs	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	621a      	str	r2, [r3, #32]
}
 8008874:	bf00      	nop
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40012c00 	.word	0x40012c00
 8008880:	40013400 	.word	0x40013400
 8008884:	40000400 	.word	0x40000400
 8008888:	40000800 	.word	0x40000800
 800888c:	40000c00 	.word	0x40000c00
 8008890:	0800d3f8 	.word	0x0800d3f8

08008894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a5c      	ldr	r2, [pc, #368]	@ (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d027      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5a      	ldr	r2, [pc, #360]	@ (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d022      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	d01d      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a56      	ldr	r2, [pc, #344]	@ (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d018      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a55      	ldr	r2, [pc, #340]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d013      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a53      	ldr	r2, [pc, #332]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00e      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a52      	ldr	r2, [pc, #328]	@ (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d009      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a50      	ldr	r2, [pc, #320]	@ (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d004      	beq.n	80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80088ee:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 80088f2:	484f      	ldr	r0, [pc, #316]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80088f4:	f7fb fa78 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d020      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b10      	cmp	r3, #16
 8008906:	d01c      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b20      	cmp	r3, #32
 800890e:	d018      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b30      	cmp	r3, #48	@ 0x30
 8008916:	d014      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b40      	cmp	r3, #64	@ 0x40
 800891e:	d010      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b50      	cmp	r3, #80	@ 0x50
 8008926:	d00c      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b60      	cmp	r3, #96	@ 0x60
 800892e:	d008      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b70      	cmp	r3, #112	@ 0x70
 8008936:	d004      	beq.n	8008942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008938:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 800893c:	483c      	ldr	r0, [pc, #240]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800893e:	f7fb fa53 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b80      	cmp	r3, #128	@ 0x80
 8008948:	d008      	beq.n	800895c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d004      	beq.n	800895c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008952:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8008956:	4836      	ldr	r0, [pc, #216]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008958:	f7fb fa46 	bl	8003de8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008962:	2b01      	cmp	r3, #1
 8008964:	d101      	bne.n	800896a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008966:	2302      	movs	r3, #2
 8008968:	e050      	b.n	8008a0c <HAL_TIMEx_MasterConfigSynchronization+0x178>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2202      	movs	r2, #2
 8008976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008990:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	4313      	orrs	r3, r2
 800899a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008a14 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d018      	beq.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a19      	ldr	r2, [pc, #100]	@ (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d013      	beq.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089c0:	d00e      	beq.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a15      	ldr	r2, [pc, #84]	@ (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d009      	beq.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a13      	ldr	r2, [pc, #76]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d004      	beq.n	80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a12      	ldr	r2, [pc, #72]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d10c      	bne.n	80089fa <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40013400 	.word	0x40013400
 8008a1c:	40000400 	.word	0x40000400
 8008a20:	40000800 	.word	0x40000800
 8008a24:	40000c00 	.word	0x40000c00
 8008a28:	40001000 	.word	0x40001000
 8008a2c:	40001400 	.word	0x40001400
 8008a30:	0800d430 	.word	0x0800d430

08008a34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a5e      	ldr	r2, [pc, #376]	@ (8008bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d009      	beq.n	8008a60 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a5c      	ldr	r2, [pc, #368]	@ (8008bc4 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008a56:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8008a5a:	485b      	ldr	r0, [pc, #364]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008a5c:	f7fb f9c4 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a68:	d008      	beq.n	8008a7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d004      	beq.n	8008a7c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8008a72:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 8008a76:	4854      	ldr	r0, [pc, #336]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008a78:	f7fb f9b6 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a84:	d008      	beq.n	8008a98 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8008a8e:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 8008a92:	484d      	ldr	r0, [pc, #308]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008a94:	f7fb f9a8 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d013      	beq.n	8008ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab2:	d009      	beq.n	8008ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008abc:	d004      	beq.n	8008ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008abe:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 8008ac2:	4841      	ldr	r0, [pc, #260]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008ac4:	f7fb f990 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	2bff      	cmp	r3, #255	@ 0xff
 8008ace:	d904      	bls.n	8008ada <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008ad0:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 8008ad4:	483c      	ldr	r0, [pc, #240]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008ad6:	f7fb f987 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ae2:	d008      	beq.n	8008af6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008aec:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 8008af0:	4835      	ldr	r0, [pc, #212]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008af2:	f7fb f979 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d009      	beq.n	8008b12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b06:	d004      	beq.n	8008b12 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008b08:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8008b0c:	482e      	ldr	r0, [pc, #184]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008b0e:	f7fb f96b 	bl	8003de8 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b1a:	d008      	beq.n	8008b2e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008b24:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8008b28:	4827      	ldr	r0, [pc, #156]	@ (8008bc8 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008b2a:	f7fb f95d 	bl	8003de8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e03d      	b.n	8008bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40012c00 	.word	0x40012c00
 8008bc4:	40013400 	.word	0x40013400
 8008bc8:	0800d430 	.word	0x0800d430

08008bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bc80      	pop	{r7}
 8008bdc:	4770      	bx	lr

08008bde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <__cvt>:
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf6:	461d      	mov	r5, r3
 8008bf8:	bfbb      	ittet	lt
 8008bfa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008bfe:	461d      	movlt	r5, r3
 8008c00:	2300      	movge	r3, #0
 8008c02:	232d      	movlt	r3, #45	@ 0x2d
 8008c04:	b088      	sub	sp, #32
 8008c06:	4614      	mov	r4, r2
 8008c08:	bfb8      	it	lt
 8008c0a:	4614      	movlt	r4, r2
 8008c0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c0e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008c10:	7013      	strb	r3, [r2, #0]
 8008c12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008c14:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008c18:	f023 0820 	bic.w	r8, r3, #32
 8008c1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c20:	d005      	beq.n	8008c2e <__cvt+0x3e>
 8008c22:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c26:	d100      	bne.n	8008c2a <__cvt+0x3a>
 8008c28:	3601      	adds	r6, #1
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e000      	b.n	8008c30 <__cvt+0x40>
 8008c2e:	2303      	movs	r3, #3
 8008c30:	aa07      	add	r2, sp, #28
 8008c32:	9204      	str	r2, [sp, #16]
 8008c34:	aa06      	add	r2, sp, #24
 8008c36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c3a:	e9cd 3600 	strd	r3, r6, [sp]
 8008c3e:	4622      	mov	r2, r4
 8008c40:	462b      	mov	r3, r5
 8008c42:	f001 f881 	bl	8009d48 <_dtoa_r>
 8008c46:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c4a:	4607      	mov	r7, r0
 8008c4c:	d119      	bne.n	8008c82 <__cvt+0x92>
 8008c4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c50:	07db      	lsls	r3, r3, #31
 8008c52:	d50e      	bpl.n	8008c72 <__cvt+0x82>
 8008c54:	eb00 0906 	add.w	r9, r0, r6
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	f7f7 ff0e 	bl	8000a80 <__aeabi_dcmpeq>
 8008c64:	b108      	cbz	r0, 8008c6a <__cvt+0x7a>
 8008c66:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c6a:	2230      	movs	r2, #48	@ 0x30
 8008c6c:	9b07      	ldr	r3, [sp, #28]
 8008c6e:	454b      	cmp	r3, r9
 8008c70:	d31e      	bcc.n	8008cb0 <__cvt+0xc0>
 8008c72:	4638      	mov	r0, r7
 8008c74:	9b07      	ldr	r3, [sp, #28]
 8008c76:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c78:	1bdb      	subs	r3, r3, r7
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	b008      	add	sp, #32
 8008c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c86:	eb00 0906 	add.w	r9, r0, r6
 8008c8a:	d1e5      	bne.n	8008c58 <__cvt+0x68>
 8008c8c:	7803      	ldrb	r3, [r0, #0]
 8008c8e:	2b30      	cmp	r3, #48	@ 0x30
 8008c90:	d10a      	bne.n	8008ca8 <__cvt+0xb8>
 8008c92:	2200      	movs	r2, #0
 8008c94:	2300      	movs	r3, #0
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fef1 	bl	8000a80 <__aeabi_dcmpeq>
 8008c9e:	b918      	cbnz	r0, 8008ca8 <__cvt+0xb8>
 8008ca0:	f1c6 0601 	rsb	r6, r6, #1
 8008ca4:	f8ca 6000 	str.w	r6, [sl]
 8008ca8:	f8da 3000 	ldr.w	r3, [sl]
 8008cac:	4499      	add	r9, r3
 8008cae:	e7d3      	b.n	8008c58 <__cvt+0x68>
 8008cb0:	1c59      	adds	r1, r3, #1
 8008cb2:	9107      	str	r1, [sp, #28]
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	e7d9      	b.n	8008c6c <__cvt+0x7c>

08008cb8 <__exponent>:
 8008cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	bfb6      	itet	lt
 8008cbe:	232d      	movlt	r3, #45	@ 0x2d
 8008cc0:	232b      	movge	r3, #43	@ 0x2b
 8008cc2:	4249      	neglt	r1, r1
 8008cc4:	2909      	cmp	r1, #9
 8008cc6:	7002      	strb	r2, [r0, #0]
 8008cc8:	7043      	strb	r3, [r0, #1]
 8008cca:	dd29      	ble.n	8008d20 <__exponent+0x68>
 8008ccc:	f10d 0307 	add.w	r3, sp, #7
 8008cd0:	461d      	mov	r5, r3
 8008cd2:	270a      	movs	r7, #10
 8008cd4:	fbb1 f6f7 	udiv	r6, r1, r7
 8008cd8:	461a      	mov	r2, r3
 8008cda:	fb07 1416 	mls	r4, r7, r6, r1
 8008cde:	3430      	adds	r4, #48	@ 0x30
 8008ce0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008ce4:	460c      	mov	r4, r1
 8008ce6:	2c63      	cmp	r4, #99	@ 0x63
 8008ce8:	4631      	mov	r1, r6
 8008cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cee:	dcf1      	bgt.n	8008cd4 <__exponent+0x1c>
 8008cf0:	3130      	adds	r1, #48	@ 0x30
 8008cf2:	1e94      	subs	r4, r2, #2
 8008cf4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	1c41      	adds	r1, r0, #1
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	d30a      	bcc.n	8008d16 <__exponent+0x5e>
 8008d00:	f10d 0309 	add.w	r3, sp, #9
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	42ac      	cmp	r4, r5
 8008d08:	bf88      	it	hi
 8008d0a:	2300      	movhi	r3, #0
 8008d0c:	3302      	adds	r3, #2
 8008d0e:	4403      	add	r3, r0
 8008d10:	1a18      	subs	r0, r3, r0
 8008d12:	b003      	add	sp, #12
 8008d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d16:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d1a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d1e:	e7ed      	b.n	8008cfc <__exponent+0x44>
 8008d20:	2330      	movs	r3, #48	@ 0x30
 8008d22:	3130      	adds	r1, #48	@ 0x30
 8008d24:	7083      	strb	r3, [r0, #2]
 8008d26:	70c1      	strb	r1, [r0, #3]
 8008d28:	1d03      	adds	r3, r0, #4
 8008d2a:	e7f1      	b.n	8008d10 <__exponent+0x58>

08008d2c <_printf_float>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	b091      	sub	sp, #68	@ 0x44
 8008d32:	460c      	mov	r4, r1
 8008d34:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008d38:	4616      	mov	r6, r2
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	f000 fef1 	bl	8009b24 <_localeconv_r>
 8008d42:	6803      	ldr	r3, [r0, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	9308      	str	r3, [sp, #32]
 8008d48:	f7f7 fa6e 	bl	8000228 <strlen>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d50:	f8d8 3000 	ldr.w	r3, [r8]
 8008d54:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d56:	3307      	adds	r3, #7
 8008d58:	f023 0307 	bic.w	r3, r3, #7
 8008d5c:	f103 0208 	add.w	r2, r3, #8
 8008d60:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d64:	f8d4 b000 	ldr.w	fp, [r4]
 8008d68:	f8c8 2000 	str.w	r2, [r8]
 8008d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d70:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d76:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d86:	4b9c      	ldr	r3, [pc, #624]	@ (8008ff8 <_printf_float+0x2cc>)
 8008d88:	f7f7 feac 	bl	8000ae4 <__aeabi_dcmpun>
 8008d8c:	bb70      	cbnz	r0, 8008dec <_printf_float+0xc0>
 8008d8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d92:	f04f 32ff 	mov.w	r2, #4294967295
 8008d96:	4b98      	ldr	r3, [pc, #608]	@ (8008ff8 <_printf_float+0x2cc>)
 8008d98:	f7f7 fe86 	bl	8000aa8 <__aeabi_dcmple>
 8008d9c:	bb30      	cbnz	r0, 8008dec <_printf_float+0xc0>
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2300      	movs	r3, #0
 8008da2:	4640      	mov	r0, r8
 8008da4:	4649      	mov	r1, r9
 8008da6:	f7f7 fe75 	bl	8000a94 <__aeabi_dcmplt>
 8008daa:	b110      	cbz	r0, 8008db2 <_printf_float+0x86>
 8008dac:	232d      	movs	r3, #45	@ 0x2d
 8008dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008db2:	4a92      	ldr	r2, [pc, #584]	@ (8008ffc <_printf_float+0x2d0>)
 8008db4:	4b92      	ldr	r3, [pc, #584]	@ (8009000 <_printf_float+0x2d4>)
 8008db6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008dba:	bf94      	ite	ls
 8008dbc:	4690      	movls	r8, r2
 8008dbe:	4698      	movhi	r8, r3
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	f04f 0900 	mov.w	r9, #0
 8008dc6:	6123      	str	r3, [r4, #16]
 8008dc8:	f02b 0304 	bic.w	r3, fp, #4
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	4633      	mov	r3, r6
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	9700      	str	r7, [sp, #0]
 8008dd6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008dd8:	f000 f9d4 	bl	8009184 <_printf_common>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	f040 8090 	bne.w	8008f02 <_printf_float+0x1d6>
 8008de2:	f04f 30ff 	mov.w	r0, #4294967295
 8008de6:	b011      	add	sp, #68	@ 0x44
 8008de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dec:	4642      	mov	r2, r8
 8008dee:	464b      	mov	r3, r9
 8008df0:	4640      	mov	r0, r8
 8008df2:	4649      	mov	r1, r9
 8008df4:	f7f7 fe76 	bl	8000ae4 <__aeabi_dcmpun>
 8008df8:	b148      	cbz	r0, 8008e0e <_printf_float+0xe2>
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bfb8      	it	lt
 8008e00:	232d      	movlt	r3, #45	@ 0x2d
 8008e02:	4a80      	ldr	r2, [pc, #512]	@ (8009004 <_printf_float+0x2d8>)
 8008e04:	bfb8      	it	lt
 8008e06:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8009008 <_printf_float+0x2dc>)
 8008e0c:	e7d3      	b.n	8008db6 <_printf_float+0x8a>
 8008e0e:	6863      	ldr	r3, [r4, #4]
 8008e10:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008e14:	1c5a      	adds	r2, r3, #1
 8008e16:	d13f      	bne.n	8008e98 <_printf_float+0x16c>
 8008e18:	2306      	movs	r3, #6
 8008e1a:	6063      	str	r3, [r4, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008e22:	6023      	str	r3, [r4, #0]
 8008e24:	9206      	str	r2, [sp, #24]
 8008e26:	aa0e      	add	r2, sp, #56	@ 0x38
 8008e28:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008e2c:	aa0d      	add	r2, sp, #52	@ 0x34
 8008e2e:	9203      	str	r2, [sp, #12]
 8008e30:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008e34:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e38:	6863      	ldr	r3, [r4, #4]
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4628      	mov	r0, r5
 8008e40:	464b      	mov	r3, r9
 8008e42:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e44:	f7ff fed4 	bl	8008bf0 <__cvt>
 8008e48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	2947      	cmp	r1, #71	@ 0x47
 8008e4e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008e50:	d128      	bne.n	8008ea4 <_printf_float+0x178>
 8008e52:	1cc8      	adds	r0, r1, #3
 8008e54:	db02      	blt.n	8008e5c <_printf_float+0x130>
 8008e56:	6863      	ldr	r3, [r4, #4]
 8008e58:	4299      	cmp	r1, r3
 8008e5a:	dd40      	ble.n	8008ede <_printf_float+0x1b2>
 8008e5c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e60:	fa5f fa8a 	uxtb.w	sl, sl
 8008e64:	4652      	mov	r2, sl
 8008e66:	3901      	subs	r1, #1
 8008e68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e6c:	910d      	str	r1, [sp, #52]	@ 0x34
 8008e6e:	f7ff ff23 	bl	8008cb8 <__exponent>
 8008e72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e74:	4681      	mov	r9, r0
 8008e76:	1813      	adds	r3, r2, r0
 8008e78:	2a01      	cmp	r2, #1
 8008e7a:	6123      	str	r3, [r4, #16]
 8008e7c:	dc02      	bgt.n	8008e84 <_printf_float+0x158>
 8008e7e:	6822      	ldr	r2, [r4, #0]
 8008e80:	07d2      	lsls	r2, r2, #31
 8008e82:	d501      	bpl.n	8008e88 <_printf_float+0x15c>
 8008e84:	3301      	adds	r3, #1
 8008e86:	6123      	str	r3, [r4, #16]
 8008e88:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d09e      	beq.n	8008dce <_printf_float+0xa2>
 8008e90:	232d      	movs	r3, #45	@ 0x2d
 8008e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e96:	e79a      	b.n	8008dce <_printf_float+0xa2>
 8008e98:	2947      	cmp	r1, #71	@ 0x47
 8008e9a:	d1bf      	bne.n	8008e1c <_printf_float+0xf0>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1bd      	bne.n	8008e1c <_printf_float+0xf0>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e7ba      	b.n	8008e1a <_printf_float+0xee>
 8008ea4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ea8:	d9dc      	bls.n	8008e64 <_printf_float+0x138>
 8008eaa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008eae:	d118      	bne.n	8008ee2 <_printf_float+0x1b6>
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	6863      	ldr	r3, [r4, #4]
 8008eb4:	dd0b      	ble.n	8008ece <_printf_float+0x1a2>
 8008eb6:	6121      	str	r1, [r4, #16]
 8008eb8:	b913      	cbnz	r3, 8008ec0 <_printf_float+0x194>
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	07d0      	lsls	r0, r2, #31
 8008ebe:	d502      	bpl.n	8008ec6 <_printf_float+0x19a>
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	440b      	add	r3, r1
 8008ec4:	6123      	str	r3, [r4, #16]
 8008ec6:	f04f 0900 	mov.w	r9, #0
 8008eca:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008ecc:	e7dc      	b.n	8008e88 <_printf_float+0x15c>
 8008ece:	b913      	cbnz	r3, 8008ed6 <_printf_float+0x1aa>
 8008ed0:	6822      	ldr	r2, [r4, #0]
 8008ed2:	07d2      	lsls	r2, r2, #31
 8008ed4:	d501      	bpl.n	8008eda <_printf_float+0x1ae>
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	e7f4      	b.n	8008ec4 <_printf_float+0x198>
 8008eda:	2301      	movs	r3, #1
 8008edc:	e7f2      	b.n	8008ec4 <_printf_float+0x198>
 8008ede:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ee2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ee4:	4299      	cmp	r1, r3
 8008ee6:	db05      	blt.n	8008ef4 <_printf_float+0x1c8>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	6121      	str	r1, [r4, #16]
 8008eec:	07d8      	lsls	r0, r3, #31
 8008eee:	d5ea      	bpl.n	8008ec6 <_printf_float+0x19a>
 8008ef0:	1c4b      	adds	r3, r1, #1
 8008ef2:	e7e7      	b.n	8008ec4 <_printf_float+0x198>
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	bfcc      	ite	gt
 8008ef8:	2201      	movgt	r2, #1
 8008efa:	f1c1 0202 	rsble	r2, r1, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	e7e0      	b.n	8008ec4 <_printf_float+0x198>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	055a      	lsls	r2, r3, #21
 8008f06:	d407      	bmi.n	8008f18 <_printf_float+0x1ec>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	4642      	mov	r2, r8
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b8      	blx	r7
 8008f12:	3001      	adds	r0, #1
 8008f14:	d12b      	bne.n	8008f6e <_printf_float+0x242>
 8008f16:	e764      	b.n	8008de2 <_printf_float+0xb6>
 8008f18:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f1c:	f240 80dc 	bls.w	80090d8 <_printf_float+0x3ac>
 8008f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f24:	2200      	movs	r2, #0
 8008f26:	2300      	movs	r3, #0
 8008f28:	f7f7 fdaa 	bl	8000a80 <__aeabi_dcmpeq>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d033      	beq.n	8008f98 <_printf_float+0x26c>
 8008f30:	2301      	movs	r3, #1
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	4a35      	ldr	r2, [pc, #212]	@ (800900c <_printf_float+0x2e0>)
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f43f af51 	beq.w	8008de2 <_printf_float+0xb6>
 8008f40:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008f44:	4543      	cmp	r3, r8
 8008f46:	db02      	blt.n	8008f4e <_printf_float+0x222>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	07d8      	lsls	r0, r3, #31
 8008f4c:	d50f      	bpl.n	8008f6e <_printf_float+0x242>
 8008f4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f43f af42 	beq.w	8008de2 <_printf_float+0xb6>
 8008f5e:	f04f 0900 	mov.w	r9, #0
 8008f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f66:	f104 0a1a 	add.w	sl, r4, #26
 8008f6a:	45c8      	cmp	r8, r9
 8008f6c:	dc09      	bgt.n	8008f82 <_printf_float+0x256>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	079b      	lsls	r3, r3, #30
 8008f72:	f100 8102 	bmi.w	800917a <_printf_float+0x44e>
 8008f76:	68e0      	ldr	r0, [r4, #12]
 8008f78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f7a:	4298      	cmp	r0, r3
 8008f7c:	bfb8      	it	lt
 8008f7e:	4618      	movlt	r0, r3
 8008f80:	e731      	b.n	8008de6 <_printf_float+0xba>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4652      	mov	r2, sl
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f af28 	beq.w	8008de2 <_printf_float+0xb6>
 8008f92:	f109 0901 	add.w	r9, r9, #1
 8008f96:	e7e8      	b.n	8008f6a <_printf_float+0x23e>
 8008f98:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dc38      	bgt.n	8009010 <_printf_float+0x2e4>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	4a19      	ldr	r2, [pc, #100]	@ (800900c <_printf_float+0x2e0>)
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	f43f af1a 	beq.w	8008de2 <_printf_float+0xb6>
 8008fae:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008fb2:	ea59 0303 	orrs.w	r3, r9, r3
 8008fb6:	d102      	bne.n	8008fbe <_printf_float+0x292>
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	d5d7      	bpl.n	8008f6e <_printf_float+0x242>
 8008fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	f43f af0a 	beq.w	8008de2 <_printf_float+0xb6>
 8008fce:	f04f 0a00 	mov.w	sl, #0
 8008fd2:	f104 0b1a 	add.w	fp, r4, #26
 8008fd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fd8:	425b      	negs	r3, r3
 8008fda:	4553      	cmp	r3, sl
 8008fdc:	dc01      	bgt.n	8008fe2 <_printf_float+0x2b6>
 8008fde:	464b      	mov	r3, r9
 8008fe0:	e793      	b.n	8008f0a <_printf_float+0x1de>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	465a      	mov	r2, fp
 8008fe6:	4631      	mov	r1, r6
 8008fe8:	4628      	mov	r0, r5
 8008fea:	47b8      	blx	r7
 8008fec:	3001      	adds	r0, #1
 8008fee:	f43f aef8 	beq.w	8008de2 <_printf_float+0xb6>
 8008ff2:	f10a 0a01 	add.w	sl, sl, #1
 8008ff6:	e7ee      	b.n	8008fd6 <_printf_float+0x2aa>
 8008ff8:	7fefffff 	.word	0x7fefffff
 8008ffc:	0800dc02 	.word	0x0800dc02
 8009000:	0800dc06 	.word	0x0800dc06
 8009004:	0800dc0a 	.word	0x0800dc0a
 8009008:	0800dc0e 	.word	0x0800dc0e
 800900c:	0800dc12 	.word	0x0800dc12
 8009010:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009012:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009016:	4553      	cmp	r3, sl
 8009018:	bfa8      	it	ge
 800901a:	4653      	movge	r3, sl
 800901c:	2b00      	cmp	r3, #0
 800901e:	4699      	mov	r9, r3
 8009020:	dc36      	bgt.n	8009090 <_printf_float+0x364>
 8009022:	f04f 0b00 	mov.w	fp, #0
 8009026:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800902a:	f104 021a 	add.w	r2, r4, #26
 800902e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009030:	930a      	str	r3, [sp, #40]	@ 0x28
 8009032:	eba3 0309 	sub.w	r3, r3, r9
 8009036:	455b      	cmp	r3, fp
 8009038:	dc31      	bgt.n	800909e <_printf_float+0x372>
 800903a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800903c:	459a      	cmp	sl, r3
 800903e:	dc3a      	bgt.n	80090b6 <_printf_float+0x38a>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	07da      	lsls	r2, r3, #31
 8009044:	d437      	bmi.n	80090b6 <_printf_float+0x38a>
 8009046:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009048:	ebaa 0903 	sub.w	r9, sl, r3
 800904c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800904e:	ebaa 0303 	sub.w	r3, sl, r3
 8009052:	4599      	cmp	r9, r3
 8009054:	bfa8      	it	ge
 8009056:	4699      	movge	r9, r3
 8009058:	f1b9 0f00 	cmp.w	r9, #0
 800905c:	dc33      	bgt.n	80090c6 <_printf_float+0x39a>
 800905e:	f04f 0800 	mov.w	r8, #0
 8009062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009066:	f104 0b1a 	add.w	fp, r4, #26
 800906a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800906c:	ebaa 0303 	sub.w	r3, sl, r3
 8009070:	eba3 0309 	sub.w	r3, r3, r9
 8009074:	4543      	cmp	r3, r8
 8009076:	f77f af7a 	ble.w	8008f6e <_printf_float+0x242>
 800907a:	2301      	movs	r3, #1
 800907c:	465a      	mov	r2, fp
 800907e:	4631      	mov	r1, r6
 8009080:	4628      	mov	r0, r5
 8009082:	47b8      	blx	r7
 8009084:	3001      	adds	r0, #1
 8009086:	f43f aeac 	beq.w	8008de2 <_printf_float+0xb6>
 800908a:	f108 0801 	add.w	r8, r8, #1
 800908e:	e7ec      	b.n	800906a <_printf_float+0x33e>
 8009090:	4642      	mov	r2, r8
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	47b8      	blx	r7
 8009098:	3001      	adds	r0, #1
 800909a:	d1c2      	bne.n	8009022 <_printf_float+0x2f6>
 800909c:	e6a1      	b.n	8008de2 <_printf_float+0xb6>
 800909e:	2301      	movs	r3, #1
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	920a      	str	r2, [sp, #40]	@ 0x28
 80090a6:	47b8      	blx	r7
 80090a8:	3001      	adds	r0, #1
 80090aa:	f43f ae9a 	beq.w	8008de2 <_printf_float+0xb6>
 80090ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090b0:	f10b 0b01 	add.w	fp, fp, #1
 80090b4:	e7bb      	b.n	800902e <_printf_float+0x302>
 80090b6:	4631      	mov	r1, r6
 80090b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090bc:	4628      	mov	r0, r5
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	d1c0      	bne.n	8009046 <_printf_float+0x31a>
 80090c4:	e68d      	b.n	8008de2 <_printf_float+0xb6>
 80090c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090c8:	464b      	mov	r3, r9
 80090ca:	4631      	mov	r1, r6
 80090cc:	4628      	mov	r0, r5
 80090ce:	4442      	add	r2, r8
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	d1c3      	bne.n	800905e <_printf_float+0x332>
 80090d6:	e684      	b.n	8008de2 <_printf_float+0xb6>
 80090d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80090dc:	f1ba 0f01 	cmp.w	sl, #1
 80090e0:	dc01      	bgt.n	80090e6 <_printf_float+0x3ba>
 80090e2:	07db      	lsls	r3, r3, #31
 80090e4:	d536      	bpl.n	8009154 <_printf_float+0x428>
 80090e6:	2301      	movs	r3, #1
 80090e8:	4642      	mov	r2, r8
 80090ea:	4631      	mov	r1, r6
 80090ec:	4628      	mov	r0, r5
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	f43f ae76 	beq.w	8008de2 <_printf_float+0xb6>
 80090f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090fa:	4631      	mov	r1, r6
 80090fc:	4628      	mov	r0, r5
 80090fe:	47b8      	blx	r7
 8009100:	3001      	adds	r0, #1
 8009102:	f43f ae6e 	beq.w	8008de2 <_printf_float+0xb6>
 8009106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800910a:	2200      	movs	r2, #0
 800910c:	2300      	movs	r3, #0
 800910e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009112:	f7f7 fcb5 	bl	8000a80 <__aeabi_dcmpeq>
 8009116:	b9c0      	cbnz	r0, 800914a <_printf_float+0x41e>
 8009118:	4653      	mov	r3, sl
 800911a:	f108 0201 	add.w	r2, r8, #1
 800911e:	4631      	mov	r1, r6
 8009120:	4628      	mov	r0, r5
 8009122:	47b8      	blx	r7
 8009124:	3001      	adds	r0, #1
 8009126:	d10c      	bne.n	8009142 <_printf_float+0x416>
 8009128:	e65b      	b.n	8008de2 <_printf_float+0xb6>
 800912a:	2301      	movs	r3, #1
 800912c:	465a      	mov	r2, fp
 800912e:	4631      	mov	r1, r6
 8009130:	4628      	mov	r0, r5
 8009132:	47b8      	blx	r7
 8009134:	3001      	adds	r0, #1
 8009136:	f43f ae54 	beq.w	8008de2 <_printf_float+0xb6>
 800913a:	f108 0801 	add.w	r8, r8, #1
 800913e:	45d0      	cmp	r8, sl
 8009140:	dbf3      	blt.n	800912a <_printf_float+0x3fe>
 8009142:	464b      	mov	r3, r9
 8009144:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009148:	e6e0      	b.n	8008f0c <_printf_float+0x1e0>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	f104 0b1a 	add.w	fp, r4, #26
 8009152:	e7f4      	b.n	800913e <_printf_float+0x412>
 8009154:	2301      	movs	r3, #1
 8009156:	4642      	mov	r2, r8
 8009158:	e7e1      	b.n	800911e <_printf_float+0x3f2>
 800915a:	2301      	movs	r3, #1
 800915c:	464a      	mov	r2, r9
 800915e:	4631      	mov	r1, r6
 8009160:	4628      	mov	r0, r5
 8009162:	47b8      	blx	r7
 8009164:	3001      	adds	r0, #1
 8009166:	f43f ae3c 	beq.w	8008de2 <_printf_float+0xb6>
 800916a:	f108 0801 	add.w	r8, r8, #1
 800916e:	68e3      	ldr	r3, [r4, #12]
 8009170:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009172:	1a5b      	subs	r3, r3, r1
 8009174:	4543      	cmp	r3, r8
 8009176:	dcf0      	bgt.n	800915a <_printf_float+0x42e>
 8009178:	e6fd      	b.n	8008f76 <_printf_float+0x24a>
 800917a:	f04f 0800 	mov.w	r8, #0
 800917e:	f104 0919 	add.w	r9, r4, #25
 8009182:	e7f4      	b.n	800916e <_printf_float+0x442>

08009184 <_printf_common>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	4616      	mov	r6, r2
 800918a:	4698      	mov	r8, r3
 800918c:	688a      	ldr	r2, [r1, #8]
 800918e:	690b      	ldr	r3, [r1, #16]
 8009190:	4607      	mov	r7, r0
 8009192:	4293      	cmp	r3, r2
 8009194:	bfb8      	it	lt
 8009196:	4613      	movlt	r3, r2
 8009198:	6033      	str	r3, [r6, #0]
 800919a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800919e:	460c      	mov	r4, r1
 80091a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091a4:	b10a      	cbz	r2, 80091aa <_printf_common+0x26>
 80091a6:	3301      	adds	r3, #1
 80091a8:	6033      	str	r3, [r6, #0]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	0699      	lsls	r1, r3, #26
 80091ae:	bf42      	ittt	mi
 80091b0:	6833      	ldrmi	r3, [r6, #0]
 80091b2:	3302      	addmi	r3, #2
 80091b4:	6033      	strmi	r3, [r6, #0]
 80091b6:	6825      	ldr	r5, [r4, #0]
 80091b8:	f015 0506 	ands.w	r5, r5, #6
 80091bc:	d106      	bne.n	80091cc <_printf_common+0x48>
 80091be:	f104 0a19 	add.w	sl, r4, #25
 80091c2:	68e3      	ldr	r3, [r4, #12]
 80091c4:	6832      	ldr	r2, [r6, #0]
 80091c6:	1a9b      	subs	r3, r3, r2
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dc2b      	bgt.n	8009224 <_printf_common+0xa0>
 80091cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	3b00      	subs	r3, #0
 80091d4:	bf18      	it	ne
 80091d6:	2301      	movne	r3, #1
 80091d8:	0692      	lsls	r2, r2, #26
 80091da:	d430      	bmi.n	800923e <_printf_common+0xba>
 80091dc:	4641      	mov	r1, r8
 80091de:	4638      	mov	r0, r7
 80091e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091e4:	47c8      	blx	r9
 80091e6:	3001      	adds	r0, #1
 80091e8:	d023      	beq.n	8009232 <_printf_common+0xae>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	f003 0306 	and.w	r3, r3, #6
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	bf14      	ite	ne
 80091f6:	2500      	movne	r5, #0
 80091f8:	6833      	ldreq	r3, [r6, #0]
 80091fa:	f04f 0600 	mov.w	r6, #0
 80091fe:	bf08      	it	eq
 8009200:	68e5      	ldreq	r5, [r4, #12]
 8009202:	f104 041a 	add.w	r4, r4, #26
 8009206:	bf08      	it	eq
 8009208:	1aed      	subeq	r5, r5, r3
 800920a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800920e:	bf08      	it	eq
 8009210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009214:	4293      	cmp	r3, r2
 8009216:	bfc4      	itt	gt
 8009218:	1a9b      	subgt	r3, r3, r2
 800921a:	18ed      	addgt	r5, r5, r3
 800921c:	42b5      	cmp	r5, r6
 800921e:	d11a      	bne.n	8009256 <_printf_common+0xd2>
 8009220:	2000      	movs	r0, #0
 8009222:	e008      	b.n	8009236 <_printf_common+0xb2>
 8009224:	2301      	movs	r3, #1
 8009226:	4652      	mov	r2, sl
 8009228:	4641      	mov	r1, r8
 800922a:	4638      	mov	r0, r7
 800922c:	47c8      	blx	r9
 800922e:	3001      	adds	r0, #1
 8009230:	d103      	bne.n	800923a <_printf_common+0xb6>
 8009232:	f04f 30ff 	mov.w	r0, #4294967295
 8009236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923a:	3501      	adds	r5, #1
 800923c:	e7c1      	b.n	80091c2 <_printf_common+0x3e>
 800923e:	2030      	movs	r0, #48	@ 0x30
 8009240:	18e1      	adds	r1, r4, r3
 8009242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800924c:	4422      	add	r2, r4
 800924e:	3302      	adds	r3, #2
 8009250:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009254:	e7c2      	b.n	80091dc <_printf_common+0x58>
 8009256:	2301      	movs	r3, #1
 8009258:	4622      	mov	r2, r4
 800925a:	4641      	mov	r1, r8
 800925c:	4638      	mov	r0, r7
 800925e:	47c8      	blx	r9
 8009260:	3001      	adds	r0, #1
 8009262:	d0e6      	beq.n	8009232 <_printf_common+0xae>
 8009264:	3601      	adds	r6, #1
 8009266:	e7d9      	b.n	800921c <_printf_common+0x98>

08009268 <_printf_i>:
 8009268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	7e0f      	ldrb	r7, [r1, #24]
 800926e:	4691      	mov	r9, r2
 8009270:	2f78      	cmp	r7, #120	@ 0x78
 8009272:	4680      	mov	r8, r0
 8009274:	460c      	mov	r4, r1
 8009276:	469a      	mov	sl, r3
 8009278:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800927a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800927e:	d807      	bhi.n	8009290 <_printf_i+0x28>
 8009280:	2f62      	cmp	r7, #98	@ 0x62
 8009282:	d80a      	bhi.n	800929a <_printf_i+0x32>
 8009284:	2f00      	cmp	r7, #0
 8009286:	f000 80d3 	beq.w	8009430 <_printf_i+0x1c8>
 800928a:	2f58      	cmp	r7, #88	@ 0x58
 800928c:	f000 80ba 	beq.w	8009404 <_printf_i+0x19c>
 8009290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009298:	e03a      	b.n	8009310 <_printf_i+0xa8>
 800929a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800929e:	2b15      	cmp	r3, #21
 80092a0:	d8f6      	bhi.n	8009290 <_printf_i+0x28>
 80092a2:	a101      	add	r1, pc, #4	@ (adr r1, 80092a8 <_printf_i+0x40>)
 80092a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a8:	08009301 	.word	0x08009301
 80092ac:	08009315 	.word	0x08009315
 80092b0:	08009291 	.word	0x08009291
 80092b4:	08009291 	.word	0x08009291
 80092b8:	08009291 	.word	0x08009291
 80092bc:	08009291 	.word	0x08009291
 80092c0:	08009315 	.word	0x08009315
 80092c4:	08009291 	.word	0x08009291
 80092c8:	08009291 	.word	0x08009291
 80092cc:	08009291 	.word	0x08009291
 80092d0:	08009291 	.word	0x08009291
 80092d4:	08009417 	.word	0x08009417
 80092d8:	0800933f 	.word	0x0800933f
 80092dc:	080093d1 	.word	0x080093d1
 80092e0:	08009291 	.word	0x08009291
 80092e4:	08009291 	.word	0x08009291
 80092e8:	08009439 	.word	0x08009439
 80092ec:	08009291 	.word	0x08009291
 80092f0:	0800933f 	.word	0x0800933f
 80092f4:	08009291 	.word	0x08009291
 80092f8:	08009291 	.word	0x08009291
 80092fc:	080093d9 	.word	0x080093d9
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6032      	str	r2, [r6, #0]
 8009308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800930c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009310:	2301      	movs	r3, #1
 8009312:	e09e      	b.n	8009452 <_printf_i+0x1ea>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	6820      	ldr	r0, [r4, #0]
 8009318:	1d19      	adds	r1, r3, #4
 800931a:	6031      	str	r1, [r6, #0]
 800931c:	0606      	lsls	r6, r0, #24
 800931e:	d501      	bpl.n	8009324 <_printf_i+0xbc>
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	e003      	b.n	800932c <_printf_i+0xc4>
 8009324:	0645      	lsls	r5, r0, #25
 8009326:	d5fb      	bpl.n	8009320 <_printf_i+0xb8>
 8009328:	f9b3 5000 	ldrsh.w	r5, [r3]
 800932c:	2d00      	cmp	r5, #0
 800932e:	da03      	bge.n	8009338 <_printf_i+0xd0>
 8009330:	232d      	movs	r3, #45	@ 0x2d
 8009332:	426d      	negs	r5, r5
 8009334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009338:	230a      	movs	r3, #10
 800933a:	4859      	ldr	r0, [pc, #356]	@ (80094a0 <_printf_i+0x238>)
 800933c:	e011      	b.n	8009362 <_printf_i+0xfa>
 800933e:	6821      	ldr	r1, [r4, #0]
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	0608      	lsls	r0, r1, #24
 8009344:	f853 5b04 	ldr.w	r5, [r3], #4
 8009348:	d402      	bmi.n	8009350 <_printf_i+0xe8>
 800934a:	0649      	lsls	r1, r1, #25
 800934c:	bf48      	it	mi
 800934e:	b2ad      	uxthmi	r5, r5
 8009350:	2f6f      	cmp	r7, #111	@ 0x6f
 8009352:	6033      	str	r3, [r6, #0]
 8009354:	bf14      	ite	ne
 8009356:	230a      	movne	r3, #10
 8009358:	2308      	moveq	r3, #8
 800935a:	4851      	ldr	r0, [pc, #324]	@ (80094a0 <_printf_i+0x238>)
 800935c:	2100      	movs	r1, #0
 800935e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009362:	6866      	ldr	r6, [r4, #4]
 8009364:	2e00      	cmp	r6, #0
 8009366:	bfa8      	it	ge
 8009368:	6821      	ldrge	r1, [r4, #0]
 800936a:	60a6      	str	r6, [r4, #8]
 800936c:	bfa4      	itt	ge
 800936e:	f021 0104 	bicge.w	r1, r1, #4
 8009372:	6021      	strge	r1, [r4, #0]
 8009374:	b90d      	cbnz	r5, 800937a <_printf_i+0x112>
 8009376:	2e00      	cmp	r6, #0
 8009378:	d04b      	beq.n	8009412 <_printf_i+0x1aa>
 800937a:	4616      	mov	r6, r2
 800937c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009380:	fb03 5711 	mls	r7, r3, r1, r5
 8009384:	5dc7      	ldrb	r7, [r0, r7]
 8009386:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800938a:	462f      	mov	r7, r5
 800938c:	42bb      	cmp	r3, r7
 800938e:	460d      	mov	r5, r1
 8009390:	d9f4      	bls.n	800937c <_printf_i+0x114>
 8009392:	2b08      	cmp	r3, #8
 8009394:	d10b      	bne.n	80093ae <_printf_i+0x146>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	07df      	lsls	r7, r3, #31
 800939a:	d508      	bpl.n	80093ae <_printf_i+0x146>
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	6861      	ldr	r1, [r4, #4]
 80093a0:	4299      	cmp	r1, r3
 80093a2:	bfde      	ittt	le
 80093a4:	2330      	movle	r3, #48	@ 0x30
 80093a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093ae:	1b92      	subs	r2, r2, r6
 80093b0:	6122      	str	r2, [r4, #16]
 80093b2:	464b      	mov	r3, r9
 80093b4:	4621      	mov	r1, r4
 80093b6:	4640      	mov	r0, r8
 80093b8:	f8cd a000 	str.w	sl, [sp]
 80093bc:	aa03      	add	r2, sp, #12
 80093be:	f7ff fee1 	bl	8009184 <_printf_common>
 80093c2:	3001      	adds	r0, #1
 80093c4:	d14a      	bne.n	800945c <_printf_i+0x1f4>
 80093c6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ca:	b004      	add	sp, #16
 80093cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	f043 0320 	orr.w	r3, r3, #32
 80093d6:	6023      	str	r3, [r4, #0]
 80093d8:	2778      	movs	r7, #120	@ 0x78
 80093da:	4832      	ldr	r0, [pc, #200]	@ (80094a4 <_printf_i+0x23c>)
 80093dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	6831      	ldr	r1, [r6, #0]
 80093e4:	061f      	lsls	r7, r3, #24
 80093e6:	f851 5b04 	ldr.w	r5, [r1], #4
 80093ea:	d402      	bmi.n	80093f2 <_printf_i+0x18a>
 80093ec:	065f      	lsls	r7, r3, #25
 80093ee:	bf48      	it	mi
 80093f0:	b2ad      	uxthmi	r5, r5
 80093f2:	6031      	str	r1, [r6, #0]
 80093f4:	07d9      	lsls	r1, r3, #31
 80093f6:	bf44      	itt	mi
 80093f8:	f043 0320 	orrmi.w	r3, r3, #32
 80093fc:	6023      	strmi	r3, [r4, #0]
 80093fe:	b11d      	cbz	r5, 8009408 <_printf_i+0x1a0>
 8009400:	2310      	movs	r3, #16
 8009402:	e7ab      	b.n	800935c <_printf_i+0xf4>
 8009404:	4826      	ldr	r0, [pc, #152]	@ (80094a0 <_printf_i+0x238>)
 8009406:	e7e9      	b.n	80093dc <_printf_i+0x174>
 8009408:	6823      	ldr	r3, [r4, #0]
 800940a:	f023 0320 	bic.w	r3, r3, #32
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	e7f6      	b.n	8009400 <_printf_i+0x198>
 8009412:	4616      	mov	r6, r2
 8009414:	e7bd      	b.n	8009392 <_printf_i+0x12a>
 8009416:	6833      	ldr	r3, [r6, #0]
 8009418:	6825      	ldr	r5, [r4, #0]
 800941a:	1d18      	adds	r0, r3, #4
 800941c:	6961      	ldr	r1, [r4, #20]
 800941e:	6030      	str	r0, [r6, #0]
 8009420:	062e      	lsls	r6, r5, #24
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	d501      	bpl.n	800942a <_printf_i+0x1c2>
 8009426:	6019      	str	r1, [r3, #0]
 8009428:	e002      	b.n	8009430 <_printf_i+0x1c8>
 800942a:	0668      	lsls	r0, r5, #25
 800942c:	d5fb      	bpl.n	8009426 <_printf_i+0x1be>
 800942e:	8019      	strh	r1, [r3, #0]
 8009430:	2300      	movs	r3, #0
 8009432:	4616      	mov	r6, r2
 8009434:	6123      	str	r3, [r4, #16]
 8009436:	e7bc      	b.n	80093b2 <_printf_i+0x14a>
 8009438:	6833      	ldr	r3, [r6, #0]
 800943a:	2100      	movs	r1, #0
 800943c:	1d1a      	adds	r2, r3, #4
 800943e:	6032      	str	r2, [r6, #0]
 8009440:	681e      	ldr	r6, [r3, #0]
 8009442:	6862      	ldr	r2, [r4, #4]
 8009444:	4630      	mov	r0, r6
 8009446:	f000 fbe4 	bl	8009c12 <memchr>
 800944a:	b108      	cbz	r0, 8009450 <_printf_i+0x1e8>
 800944c:	1b80      	subs	r0, r0, r6
 800944e:	6060      	str	r0, [r4, #4]
 8009450:	6863      	ldr	r3, [r4, #4]
 8009452:	6123      	str	r3, [r4, #16]
 8009454:	2300      	movs	r3, #0
 8009456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800945a:	e7aa      	b.n	80093b2 <_printf_i+0x14a>
 800945c:	4632      	mov	r2, r6
 800945e:	4649      	mov	r1, r9
 8009460:	4640      	mov	r0, r8
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	47d0      	blx	sl
 8009466:	3001      	adds	r0, #1
 8009468:	d0ad      	beq.n	80093c6 <_printf_i+0x15e>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	079b      	lsls	r3, r3, #30
 800946e:	d413      	bmi.n	8009498 <_printf_i+0x230>
 8009470:	68e0      	ldr	r0, [r4, #12]
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	4298      	cmp	r0, r3
 8009476:	bfb8      	it	lt
 8009478:	4618      	movlt	r0, r3
 800947a:	e7a6      	b.n	80093ca <_printf_i+0x162>
 800947c:	2301      	movs	r3, #1
 800947e:	4632      	mov	r2, r6
 8009480:	4649      	mov	r1, r9
 8009482:	4640      	mov	r0, r8
 8009484:	47d0      	blx	sl
 8009486:	3001      	adds	r0, #1
 8009488:	d09d      	beq.n	80093c6 <_printf_i+0x15e>
 800948a:	3501      	adds	r5, #1
 800948c:	68e3      	ldr	r3, [r4, #12]
 800948e:	9903      	ldr	r1, [sp, #12]
 8009490:	1a5b      	subs	r3, r3, r1
 8009492:	42ab      	cmp	r3, r5
 8009494:	dcf2      	bgt.n	800947c <_printf_i+0x214>
 8009496:	e7eb      	b.n	8009470 <_printf_i+0x208>
 8009498:	2500      	movs	r5, #0
 800949a:	f104 0619 	add.w	r6, r4, #25
 800949e:	e7f5      	b.n	800948c <_printf_i+0x224>
 80094a0:	0800dc14 	.word	0x0800dc14
 80094a4:	0800dc25 	.word	0x0800dc25

080094a8 <_scanf_float>:
 80094a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ac:	b087      	sub	sp, #28
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	688b      	ldr	r3, [r1, #8]
 80094b2:	4617      	mov	r7, r2
 80094b4:	1e5a      	subs	r2, r3, #1
 80094b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80094ba:	bf82      	ittt	hi
 80094bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80094c0:	eb03 0b05 	addhi.w	fp, r3, r5
 80094c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80094c8:	460a      	mov	r2, r1
 80094ca:	f04f 0500 	mov.w	r5, #0
 80094ce:	bf88      	it	hi
 80094d0:	608b      	strhi	r3, [r1, #8]
 80094d2:	680b      	ldr	r3, [r1, #0]
 80094d4:	4680      	mov	r8, r0
 80094d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80094da:	f842 3b1c 	str.w	r3, [r2], #28
 80094de:	460c      	mov	r4, r1
 80094e0:	bf98      	it	ls
 80094e2:	f04f 0b00 	movls.w	fp, #0
 80094e6:	4616      	mov	r6, r2
 80094e8:	46aa      	mov	sl, r5
 80094ea:	46a9      	mov	r9, r5
 80094ec:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094f0:	9201      	str	r2, [sp, #4]
 80094f2:	9502      	str	r5, [sp, #8]
 80094f4:	68a2      	ldr	r2, [r4, #8]
 80094f6:	b152      	cbz	r2, 800950e <_scanf_float+0x66>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b4e      	cmp	r3, #78	@ 0x4e
 80094fe:	d865      	bhi.n	80095cc <_scanf_float+0x124>
 8009500:	2b40      	cmp	r3, #64	@ 0x40
 8009502:	d83d      	bhi.n	8009580 <_scanf_float+0xd8>
 8009504:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009508:	b2c8      	uxtb	r0, r1
 800950a:	280e      	cmp	r0, #14
 800950c:	d93b      	bls.n	8009586 <_scanf_float+0xde>
 800950e:	f1b9 0f00 	cmp.w	r9, #0
 8009512:	d003      	beq.n	800951c <_scanf_float+0x74>
 8009514:	6823      	ldr	r3, [r4, #0]
 8009516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009520:	f1ba 0f01 	cmp.w	sl, #1
 8009524:	f200 8118 	bhi.w	8009758 <_scanf_float+0x2b0>
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	429e      	cmp	r6, r3
 800952c:	f200 8109 	bhi.w	8009742 <_scanf_float+0x29a>
 8009530:	2001      	movs	r0, #1
 8009532:	b007      	add	sp, #28
 8009534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009538:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800953c:	2a0d      	cmp	r2, #13
 800953e:	d8e6      	bhi.n	800950e <_scanf_float+0x66>
 8009540:	a101      	add	r1, pc, #4	@ (adr r1, 8009548 <_scanf_float+0xa0>)
 8009542:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009546:	bf00      	nop
 8009548:	0800968f 	.word	0x0800968f
 800954c:	0800950f 	.word	0x0800950f
 8009550:	0800950f 	.word	0x0800950f
 8009554:	0800950f 	.word	0x0800950f
 8009558:	080096ef 	.word	0x080096ef
 800955c:	080096c7 	.word	0x080096c7
 8009560:	0800950f 	.word	0x0800950f
 8009564:	0800950f 	.word	0x0800950f
 8009568:	0800969d 	.word	0x0800969d
 800956c:	0800950f 	.word	0x0800950f
 8009570:	0800950f 	.word	0x0800950f
 8009574:	0800950f 	.word	0x0800950f
 8009578:	0800950f 	.word	0x0800950f
 800957c:	08009655 	.word	0x08009655
 8009580:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009584:	e7da      	b.n	800953c <_scanf_float+0x94>
 8009586:	290e      	cmp	r1, #14
 8009588:	d8c1      	bhi.n	800950e <_scanf_float+0x66>
 800958a:	a001      	add	r0, pc, #4	@ (adr r0, 8009590 <_scanf_float+0xe8>)
 800958c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009590:	08009645 	.word	0x08009645
 8009594:	0800950f 	.word	0x0800950f
 8009598:	08009645 	.word	0x08009645
 800959c:	080096db 	.word	0x080096db
 80095a0:	0800950f 	.word	0x0800950f
 80095a4:	080095ed 	.word	0x080095ed
 80095a8:	0800962b 	.word	0x0800962b
 80095ac:	0800962b 	.word	0x0800962b
 80095b0:	0800962b 	.word	0x0800962b
 80095b4:	0800962b 	.word	0x0800962b
 80095b8:	0800962b 	.word	0x0800962b
 80095bc:	0800962b 	.word	0x0800962b
 80095c0:	0800962b 	.word	0x0800962b
 80095c4:	0800962b 	.word	0x0800962b
 80095c8:	0800962b 	.word	0x0800962b
 80095cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80095ce:	d809      	bhi.n	80095e4 <_scanf_float+0x13c>
 80095d0:	2b60      	cmp	r3, #96	@ 0x60
 80095d2:	d8b1      	bhi.n	8009538 <_scanf_float+0x90>
 80095d4:	2b54      	cmp	r3, #84	@ 0x54
 80095d6:	d07b      	beq.n	80096d0 <_scanf_float+0x228>
 80095d8:	2b59      	cmp	r3, #89	@ 0x59
 80095da:	d198      	bne.n	800950e <_scanf_float+0x66>
 80095dc:	2d07      	cmp	r5, #7
 80095de:	d196      	bne.n	800950e <_scanf_float+0x66>
 80095e0:	2508      	movs	r5, #8
 80095e2:	e02c      	b.n	800963e <_scanf_float+0x196>
 80095e4:	2b74      	cmp	r3, #116	@ 0x74
 80095e6:	d073      	beq.n	80096d0 <_scanf_float+0x228>
 80095e8:	2b79      	cmp	r3, #121	@ 0x79
 80095ea:	e7f6      	b.n	80095da <_scanf_float+0x132>
 80095ec:	6821      	ldr	r1, [r4, #0]
 80095ee:	05c8      	lsls	r0, r1, #23
 80095f0:	d51b      	bpl.n	800962a <_scanf_float+0x182>
 80095f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80095f6:	6021      	str	r1, [r4, #0]
 80095f8:	f109 0901 	add.w	r9, r9, #1
 80095fc:	f1bb 0f00 	cmp.w	fp, #0
 8009600:	d003      	beq.n	800960a <_scanf_float+0x162>
 8009602:	3201      	adds	r2, #1
 8009604:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009608:	60a2      	str	r2, [r4, #8]
 800960a:	68a3      	ldr	r3, [r4, #8]
 800960c:	3b01      	subs	r3, #1
 800960e:	60a3      	str	r3, [r4, #8]
 8009610:	6923      	ldr	r3, [r4, #16]
 8009612:	3301      	adds	r3, #1
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	3b01      	subs	r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
 800961e:	f340 8087 	ble.w	8009730 <_scanf_float+0x288>
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	e764      	b.n	80094f4 <_scanf_float+0x4c>
 800962a:	eb1a 0105 	adds.w	r1, sl, r5
 800962e:	f47f af6e 	bne.w	800950e <_scanf_float+0x66>
 8009632:	460d      	mov	r5, r1
 8009634:	468a      	mov	sl, r1
 8009636:	6822      	ldr	r2, [r4, #0]
 8009638:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800963c:	6022      	str	r2, [r4, #0]
 800963e:	f806 3b01 	strb.w	r3, [r6], #1
 8009642:	e7e2      	b.n	800960a <_scanf_float+0x162>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	0610      	lsls	r0, r2, #24
 8009648:	f57f af61 	bpl.w	800950e <_scanf_float+0x66>
 800964c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	e7f4      	b.n	800963e <_scanf_float+0x196>
 8009654:	f1ba 0f00 	cmp.w	sl, #0
 8009658:	d10e      	bne.n	8009678 <_scanf_float+0x1d0>
 800965a:	f1b9 0f00 	cmp.w	r9, #0
 800965e:	d10e      	bne.n	800967e <_scanf_float+0x1d6>
 8009660:	6822      	ldr	r2, [r4, #0]
 8009662:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009666:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800966a:	d108      	bne.n	800967e <_scanf_float+0x1d6>
 800966c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009670:	f04f 0a01 	mov.w	sl, #1
 8009674:	6022      	str	r2, [r4, #0]
 8009676:	e7e2      	b.n	800963e <_scanf_float+0x196>
 8009678:	f1ba 0f02 	cmp.w	sl, #2
 800967c:	d055      	beq.n	800972a <_scanf_float+0x282>
 800967e:	2d01      	cmp	r5, #1
 8009680:	d002      	beq.n	8009688 <_scanf_float+0x1e0>
 8009682:	2d04      	cmp	r5, #4
 8009684:	f47f af43 	bne.w	800950e <_scanf_float+0x66>
 8009688:	3501      	adds	r5, #1
 800968a:	b2ed      	uxtb	r5, r5
 800968c:	e7d7      	b.n	800963e <_scanf_float+0x196>
 800968e:	f1ba 0f01 	cmp.w	sl, #1
 8009692:	f47f af3c 	bne.w	800950e <_scanf_float+0x66>
 8009696:	f04f 0a02 	mov.w	sl, #2
 800969a:	e7d0      	b.n	800963e <_scanf_float+0x196>
 800969c:	b97d      	cbnz	r5, 80096be <_scanf_float+0x216>
 800969e:	f1b9 0f00 	cmp.w	r9, #0
 80096a2:	f47f af37 	bne.w	8009514 <_scanf_float+0x6c>
 80096a6:	6822      	ldr	r2, [r4, #0]
 80096a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80096ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096b0:	f040 8103 	bne.w	80098ba <_scanf_float+0x412>
 80096b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096b8:	2501      	movs	r5, #1
 80096ba:	6022      	str	r2, [r4, #0]
 80096bc:	e7bf      	b.n	800963e <_scanf_float+0x196>
 80096be:	2d03      	cmp	r5, #3
 80096c0:	d0e2      	beq.n	8009688 <_scanf_float+0x1e0>
 80096c2:	2d05      	cmp	r5, #5
 80096c4:	e7de      	b.n	8009684 <_scanf_float+0x1dc>
 80096c6:	2d02      	cmp	r5, #2
 80096c8:	f47f af21 	bne.w	800950e <_scanf_float+0x66>
 80096cc:	2503      	movs	r5, #3
 80096ce:	e7b6      	b.n	800963e <_scanf_float+0x196>
 80096d0:	2d06      	cmp	r5, #6
 80096d2:	f47f af1c 	bne.w	800950e <_scanf_float+0x66>
 80096d6:	2507      	movs	r5, #7
 80096d8:	e7b1      	b.n	800963e <_scanf_float+0x196>
 80096da:	6822      	ldr	r2, [r4, #0]
 80096dc:	0591      	lsls	r1, r2, #22
 80096de:	f57f af16 	bpl.w	800950e <_scanf_float+0x66>
 80096e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80096e6:	6022      	str	r2, [r4, #0]
 80096e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80096ec:	e7a7      	b.n	800963e <_scanf_float+0x196>
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80096f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80096f8:	d006      	beq.n	8009708 <_scanf_float+0x260>
 80096fa:	0550      	lsls	r0, r2, #21
 80096fc:	f57f af07 	bpl.w	800950e <_scanf_float+0x66>
 8009700:	f1b9 0f00 	cmp.w	r9, #0
 8009704:	f000 80d9 	beq.w	80098ba <_scanf_float+0x412>
 8009708:	0591      	lsls	r1, r2, #22
 800970a:	bf58      	it	pl
 800970c:	9902      	ldrpl	r1, [sp, #8]
 800970e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009712:	bf58      	it	pl
 8009714:	eba9 0101 	subpl.w	r1, r9, r1
 8009718:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800971c:	f04f 0900 	mov.w	r9, #0
 8009720:	bf58      	it	pl
 8009722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	e789      	b.n	800963e <_scanf_float+0x196>
 800972a:	f04f 0a03 	mov.w	sl, #3
 800972e:	e786      	b.n	800963e <_scanf_float+0x196>
 8009730:	4639      	mov	r1, r7
 8009732:	4640      	mov	r0, r8
 8009734:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009738:	4798      	blx	r3
 800973a:	2800      	cmp	r0, #0
 800973c:	f43f aeda 	beq.w	80094f4 <_scanf_float+0x4c>
 8009740:	e6e5      	b.n	800950e <_scanf_float+0x66>
 8009742:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009746:	463a      	mov	r2, r7
 8009748:	4640      	mov	r0, r8
 800974a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800974e:	4798      	blx	r3
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	3b01      	subs	r3, #1
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	e6e7      	b.n	8009528 <_scanf_float+0x80>
 8009758:	1e6b      	subs	r3, r5, #1
 800975a:	2b06      	cmp	r3, #6
 800975c:	d824      	bhi.n	80097a8 <_scanf_float+0x300>
 800975e:	2d02      	cmp	r5, #2
 8009760:	d836      	bhi.n	80097d0 <_scanf_float+0x328>
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	429e      	cmp	r6, r3
 8009766:	f67f aee3 	bls.w	8009530 <_scanf_float+0x88>
 800976a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800976e:	463a      	mov	r2, r7
 8009770:	4640      	mov	r0, r8
 8009772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009776:	4798      	blx	r3
 8009778:	6923      	ldr	r3, [r4, #16]
 800977a:	3b01      	subs	r3, #1
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	e7f0      	b.n	8009762 <_scanf_float+0x2ba>
 8009780:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009784:	463a      	mov	r2, r7
 8009786:	4640      	mov	r0, r8
 8009788:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800978c:	4798      	blx	r3
 800978e:	6923      	ldr	r3, [r4, #16]
 8009790:	3b01      	subs	r3, #1
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009798:	fa5f fa8a 	uxtb.w	sl, sl
 800979c:	f1ba 0f02 	cmp.w	sl, #2
 80097a0:	d1ee      	bne.n	8009780 <_scanf_float+0x2d8>
 80097a2:	3d03      	subs	r5, #3
 80097a4:	b2ed      	uxtb	r5, r5
 80097a6:	1b76      	subs	r6, r6, r5
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	05da      	lsls	r2, r3, #23
 80097ac:	d530      	bpl.n	8009810 <_scanf_float+0x368>
 80097ae:	055b      	lsls	r3, r3, #21
 80097b0:	d511      	bpl.n	80097d6 <_scanf_float+0x32e>
 80097b2:	9b01      	ldr	r3, [sp, #4]
 80097b4:	429e      	cmp	r6, r3
 80097b6:	f67f aebb 	bls.w	8009530 <_scanf_float+0x88>
 80097ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097be:	463a      	mov	r2, r7
 80097c0:	4640      	mov	r0, r8
 80097c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097c6:	4798      	blx	r3
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	6123      	str	r3, [r4, #16]
 80097ce:	e7f0      	b.n	80097b2 <_scanf_float+0x30a>
 80097d0:	46aa      	mov	sl, r5
 80097d2:	46b3      	mov	fp, r6
 80097d4:	e7de      	b.n	8009794 <_scanf_float+0x2ec>
 80097d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	2965      	cmp	r1, #101	@ 0x65
 80097de:	f103 33ff 	add.w	r3, r3, #4294967295
 80097e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80097e6:	6123      	str	r3, [r4, #16]
 80097e8:	d00c      	beq.n	8009804 <_scanf_float+0x35c>
 80097ea:	2945      	cmp	r1, #69	@ 0x45
 80097ec:	d00a      	beq.n	8009804 <_scanf_float+0x35c>
 80097ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097f2:	463a      	mov	r2, r7
 80097f4:	4640      	mov	r0, r8
 80097f6:	4798      	blx	r3
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80097fe:	3b01      	subs	r3, #1
 8009800:	1eb5      	subs	r5, r6, #2
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	463a      	mov	r2, r7
 8009806:	4640      	mov	r0, r8
 8009808:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800980c:	4798      	blx	r3
 800980e:	462e      	mov	r6, r5
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	f012 0210 	ands.w	r2, r2, #16
 8009816:	d001      	beq.n	800981c <_scanf_float+0x374>
 8009818:	2000      	movs	r0, #0
 800981a:	e68a      	b.n	8009532 <_scanf_float+0x8a>
 800981c:	7032      	strb	r2, [r6, #0]
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009828:	d11c      	bne.n	8009864 <_scanf_float+0x3bc>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	454b      	cmp	r3, r9
 800982e:	eba3 0209 	sub.w	r2, r3, r9
 8009832:	d123      	bne.n	800987c <_scanf_float+0x3d4>
 8009834:	2200      	movs	r2, #0
 8009836:	4640      	mov	r0, r8
 8009838:	9901      	ldr	r1, [sp, #4]
 800983a:	f002 fbed 	bl	800c018 <_strtod_r>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	6825      	ldr	r5, [r4, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f015 0f02 	tst.w	r5, #2
 8009848:	4606      	mov	r6, r0
 800984a:	460f      	mov	r7, r1
 800984c:	f103 0204 	add.w	r2, r3, #4
 8009850:	d01f      	beq.n	8009892 <_scanf_float+0x3ea>
 8009852:	9903      	ldr	r1, [sp, #12]
 8009854:	600a      	str	r2, [r1, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	e9c3 6700 	strd	r6, r7, [r3]
 800985c:	68e3      	ldr	r3, [r4, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60e3      	str	r3, [r4, #12]
 8009862:	e7d9      	b.n	8009818 <_scanf_float+0x370>
 8009864:	9b04      	ldr	r3, [sp, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0e4      	beq.n	8009834 <_scanf_float+0x38c>
 800986a:	9905      	ldr	r1, [sp, #20]
 800986c:	230a      	movs	r3, #10
 800986e:	4640      	mov	r0, r8
 8009870:	3101      	adds	r1, #1
 8009872:	f002 fc51 	bl	800c118 <_strtol_r>
 8009876:	9b04      	ldr	r3, [sp, #16]
 8009878:	9e05      	ldr	r6, [sp, #20]
 800987a:	1ac2      	subs	r2, r0, r3
 800987c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009880:	429e      	cmp	r6, r3
 8009882:	bf28      	it	cs
 8009884:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009888:	4630      	mov	r0, r6
 800988a:	490d      	ldr	r1, [pc, #52]	@ (80098c0 <_scanf_float+0x418>)
 800988c:	f000 f8de 	bl	8009a4c <siprintf>
 8009890:	e7d0      	b.n	8009834 <_scanf_float+0x38c>
 8009892:	076d      	lsls	r5, r5, #29
 8009894:	d4dd      	bmi.n	8009852 <_scanf_float+0x3aa>
 8009896:	9d03      	ldr	r5, [sp, #12]
 8009898:	602a      	str	r2, [r5, #0]
 800989a:	681d      	ldr	r5, [r3, #0]
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	f7f7 f920 	bl	8000ae4 <__aeabi_dcmpun>
 80098a4:	b120      	cbz	r0, 80098b0 <_scanf_float+0x408>
 80098a6:	4807      	ldr	r0, [pc, #28]	@ (80098c4 <_scanf_float+0x41c>)
 80098a8:	f000 f9c2 	bl	8009c30 <nanf>
 80098ac:	6028      	str	r0, [r5, #0]
 80098ae:	e7d5      	b.n	800985c <_scanf_float+0x3b4>
 80098b0:	4630      	mov	r0, r6
 80098b2:	4639      	mov	r1, r7
 80098b4:	f7f7 f974 	bl	8000ba0 <__aeabi_d2f>
 80098b8:	e7f8      	b.n	80098ac <_scanf_float+0x404>
 80098ba:	f04f 0900 	mov.w	r9, #0
 80098be:	e62d      	b.n	800951c <_scanf_float+0x74>
 80098c0:	0800dc36 	.word	0x0800dc36
 80098c4:	0800dfcd 	.word	0x0800dfcd

080098c8 <std>:
 80098c8:	2300      	movs	r3, #0
 80098ca:	b510      	push	{r4, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	e9c0 3300 	strd	r3, r3, [r0]
 80098d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098d6:	6083      	str	r3, [r0, #8]
 80098d8:	8181      	strh	r1, [r0, #12]
 80098da:	6643      	str	r3, [r0, #100]	@ 0x64
 80098dc:	81c2      	strh	r2, [r0, #14]
 80098de:	6183      	str	r3, [r0, #24]
 80098e0:	4619      	mov	r1, r3
 80098e2:	2208      	movs	r2, #8
 80098e4:	305c      	adds	r0, #92	@ 0x5c
 80098e6:	f000 f914 	bl	8009b12 <memset>
 80098ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <std+0x58>)
 80098ec:	6224      	str	r4, [r4, #32]
 80098ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80098f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009924 <std+0x5c>)
 80098f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009928 <std+0x60>)
 80098f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098f8:	4b0c      	ldr	r3, [pc, #48]	@ (800992c <std+0x64>)
 80098fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80098fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009930 <std+0x68>)
 80098fe:	429c      	cmp	r4, r3
 8009900:	d006      	beq.n	8009910 <std+0x48>
 8009902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009906:	4294      	cmp	r4, r2
 8009908:	d002      	beq.n	8009910 <std+0x48>
 800990a:	33d0      	adds	r3, #208	@ 0xd0
 800990c:	429c      	cmp	r4, r3
 800990e:	d105      	bne.n	800991c <std+0x54>
 8009910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	f000 b978 	b.w	8009c0c <__retarget_lock_init_recursive>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	08009a8d 	.word	0x08009a8d
 8009924:	08009aaf 	.word	0x08009aaf
 8009928:	08009ae7 	.word	0x08009ae7
 800992c:	08009b0b 	.word	0x08009b0b
 8009930:	20000894 	.word	0x20000894

08009934 <stdio_exit_handler>:
 8009934:	4a02      	ldr	r2, [pc, #8]	@ (8009940 <stdio_exit_handler+0xc>)
 8009936:	4903      	ldr	r1, [pc, #12]	@ (8009944 <stdio_exit_handler+0x10>)
 8009938:	4803      	ldr	r0, [pc, #12]	@ (8009948 <stdio_exit_handler+0x14>)
 800993a:	f000 b869 	b.w	8009a10 <_fwalk_sglue>
 800993e:	bf00      	nop
 8009940:	20000060 	.word	0x20000060
 8009944:	0800c4cd 	.word	0x0800c4cd
 8009948:	20000070 	.word	0x20000070

0800994c <cleanup_stdio>:
 800994c:	6841      	ldr	r1, [r0, #4]
 800994e:	4b0c      	ldr	r3, [pc, #48]	@ (8009980 <cleanup_stdio+0x34>)
 8009950:	b510      	push	{r4, lr}
 8009952:	4299      	cmp	r1, r3
 8009954:	4604      	mov	r4, r0
 8009956:	d001      	beq.n	800995c <cleanup_stdio+0x10>
 8009958:	f002 fdb8 	bl	800c4cc <_fflush_r>
 800995c:	68a1      	ldr	r1, [r4, #8]
 800995e:	4b09      	ldr	r3, [pc, #36]	@ (8009984 <cleanup_stdio+0x38>)
 8009960:	4299      	cmp	r1, r3
 8009962:	d002      	beq.n	800996a <cleanup_stdio+0x1e>
 8009964:	4620      	mov	r0, r4
 8009966:	f002 fdb1 	bl	800c4cc <_fflush_r>
 800996a:	68e1      	ldr	r1, [r4, #12]
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <cleanup_stdio+0x3c>)
 800996e:	4299      	cmp	r1, r3
 8009970:	d004      	beq.n	800997c <cleanup_stdio+0x30>
 8009972:	4620      	mov	r0, r4
 8009974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009978:	f002 bda8 	b.w	800c4cc <_fflush_r>
 800997c:	bd10      	pop	{r4, pc}
 800997e:	bf00      	nop
 8009980:	20000894 	.word	0x20000894
 8009984:	200008fc 	.word	0x200008fc
 8009988:	20000964 	.word	0x20000964

0800998c <global_stdio_init.part.0>:
 800998c:	b510      	push	{r4, lr}
 800998e:	4b0b      	ldr	r3, [pc, #44]	@ (80099bc <global_stdio_init.part.0+0x30>)
 8009990:	4c0b      	ldr	r4, [pc, #44]	@ (80099c0 <global_stdio_init.part.0+0x34>)
 8009992:	4a0c      	ldr	r2, [pc, #48]	@ (80099c4 <global_stdio_init.part.0+0x38>)
 8009994:	4620      	mov	r0, r4
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	2104      	movs	r1, #4
 800999a:	2200      	movs	r2, #0
 800999c:	f7ff ff94 	bl	80098c8 <std>
 80099a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099a4:	2201      	movs	r2, #1
 80099a6:	2109      	movs	r1, #9
 80099a8:	f7ff ff8e 	bl	80098c8 <std>
 80099ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099b0:	2202      	movs	r2, #2
 80099b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b6:	2112      	movs	r1, #18
 80099b8:	f7ff bf86 	b.w	80098c8 <std>
 80099bc:	200009cc 	.word	0x200009cc
 80099c0:	20000894 	.word	0x20000894
 80099c4:	08009935 	.word	0x08009935

080099c8 <__sfp_lock_acquire>:
 80099c8:	4801      	ldr	r0, [pc, #4]	@ (80099d0 <__sfp_lock_acquire+0x8>)
 80099ca:	f000 b920 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	200009d5 	.word	0x200009d5

080099d4 <__sfp_lock_release>:
 80099d4:	4801      	ldr	r0, [pc, #4]	@ (80099dc <__sfp_lock_release+0x8>)
 80099d6:	f000 b91b 	b.w	8009c10 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	200009d5 	.word	0x200009d5

080099e0 <__sinit>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	4604      	mov	r4, r0
 80099e4:	f7ff fff0 	bl	80099c8 <__sfp_lock_acquire>
 80099e8:	6a23      	ldr	r3, [r4, #32]
 80099ea:	b11b      	cbz	r3, 80099f4 <__sinit+0x14>
 80099ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f0:	f7ff bff0 	b.w	80099d4 <__sfp_lock_release>
 80099f4:	4b04      	ldr	r3, [pc, #16]	@ (8009a08 <__sinit+0x28>)
 80099f6:	6223      	str	r3, [r4, #32]
 80099f8:	4b04      	ldr	r3, [pc, #16]	@ (8009a0c <__sinit+0x2c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1f5      	bne.n	80099ec <__sinit+0xc>
 8009a00:	f7ff ffc4 	bl	800998c <global_stdio_init.part.0>
 8009a04:	e7f2      	b.n	80099ec <__sinit+0xc>
 8009a06:	bf00      	nop
 8009a08:	0800994d 	.word	0x0800994d
 8009a0c:	200009cc 	.word	0x200009cc

08009a10 <_fwalk_sglue>:
 8009a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a14:	4607      	mov	r7, r0
 8009a16:	4688      	mov	r8, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a20:	f1b9 0901 	subs.w	r9, r9, #1
 8009a24:	d505      	bpl.n	8009a32 <_fwalk_sglue+0x22>
 8009a26:	6824      	ldr	r4, [r4, #0]
 8009a28:	2c00      	cmp	r4, #0
 8009a2a:	d1f7      	bne.n	8009a1c <_fwalk_sglue+0xc>
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d907      	bls.n	8009a48 <_fwalk_sglue+0x38>
 8009a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	d003      	beq.n	8009a48 <_fwalk_sglue+0x38>
 8009a40:	4629      	mov	r1, r5
 8009a42:	4638      	mov	r0, r7
 8009a44:	47c0      	blx	r8
 8009a46:	4306      	orrs	r6, r0
 8009a48:	3568      	adds	r5, #104	@ 0x68
 8009a4a:	e7e9      	b.n	8009a20 <_fwalk_sglue+0x10>

08009a4c <siprintf>:
 8009a4c:	b40e      	push	{r1, r2, r3}
 8009a4e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a52:	b500      	push	{lr}
 8009a54:	b09c      	sub	sp, #112	@ 0x70
 8009a56:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a58:	9002      	str	r0, [sp, #8]
 8009a5a:	9006      	str	r0, [sp, #24]
 8009a5c:	9107      	str	r1, [sp, #28]
 8009a5e:	9104      	str	r1, [sp, #16]
 8009a60:	4808      	ldr	r0, [pc, #32]	@ (8009a84 <siprintf+0x38>)
 8009a62:	4909      	ldr	r1, [pc, #36]	@ (8009a88 <siprintf+0x3c>)
 8009a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	6800      	ldr	r0, [r0, #0]
 8009a6c:	a902      	add	r1, sp, #8
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	f002 fbb0 	bl	800c1d4 <_svfiprintf_r>
 8009a74:	2200      	movs	r2, #0
 8009a76:	9b02      	ldr	r3, [sp, #8]
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	b01c      	add	sp, #112	@ 0x70
 8009a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a80:	b003      	add	sp, #12
 8009a82:	4770      	bx	lr
 8009a84:	2000006c 	.word	0x2000006c
 8009a88:	ffff0208 	.word	0xffff0208

08009a8c <__sread>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	460c      	mov	r4, r1
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	f000 f86c 	bl	8009b70 <_read_r>
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	bfab      	itete	ge
 8009a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8009aa0:	181b      	addge	r3, r3, r0
 8009aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009aa6:	bfac      	ite	ge
 8009aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009aaa:	81a3      	strhlt	r3, [r4, #12]
 8009aac:	bd10      	pop	{r4, pc}

08009aae <__swrite>:
 8009aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	898b      	ldrh	r3, [r1, #12]
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	05db      	lsls	r3, r3, #23
 8009aba:	460c      	mov	r4, r1
 8009abc:	4616      	mov	r6, r2
 8009abe:	d505      	bpl.n	8009acc <__swrite+0x1e>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac8:	f000 f840 	bl	8009b4c <_lseek_r>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	4632      	mov	r2, r6
 8009ad0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	463b      	mov	r3, r7
 8009ada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae2:	f000 b857 	b.w	8009b94 <_write_r>

08009ae6 <__sseek>:
 8009ae6:	b510      	push	{r4, lr}
 8009ae8:	460c      	mov	r4, r1
 8009aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aee:	f000 f82d 	bl	8009b4c <_lseek_r>
 8009af2:	1c43      	adds	r3, r0, #1
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	bf15      	itete	ne
 8009af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b02:	81a3      	strheq	r3, [r4, #12]
 8009b04:	bf18      	it	ne
 8009b06:	81a3      	strhne	r3, [r4, #12]
 8009b08:	bd10      	pop	{r4, pc}

08009b0a <__sclose>:
 8009b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b0e:	f000 b80d 	b.w	8009b2c <_close_r>

08009b12 <memset>:
 8009b12:	4603      	mov	r3, r0
 8009b14:	4402      	add	r2, r0
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d100      	bne.n	8009b1c <memset+0xa>
 8009b1a:	4770      	bx	lr
 8009b1c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b20:	e7f9      	b.n	8009b16 <memset+0x4>
	...

08009b24 <_localeconv_r>:
 8009b24:	4800      	ldr	r0, [pc, #0]	@ (8009b28 <_localeconv_r+0x4>)
 8009b26:	4770      	bx	lr
 8009b28:	200001ac 	.word	0x200001ac

08009b2c <_close_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4d05      	ldr	r5, [pc, #20]	@ (8009b48 <_close_r+0x1c>)
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7fa fa2f 	bl	8003f9a <_close>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_close_r+0x1a>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_close_r+0x1a>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	200009d0 	.word	0x200009d0

08009b4c <_lseek_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4608      	mov	r0, r1
 8009b52:	4611      	mov	r1, r2
 8009b54:	2200      	movs	r2, #0
 8009b56:	4d05      	ldr	r5, [pc, #20]	@ (8009b6c <_lseek_r+0x20>)
 8009b58:	602a      	str	r2, [r5, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f7fa fa41 	bl	8003fe2 <_lseek>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_lseek_r+0x1e>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_lseek_r+0x1e>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	200009d0 	.word	0x200009d0

08009b70 <_read_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4604      	mov	r4, r0
 8009b74:	4608      	mov	r0, r1
 8009b76:	4611      	mov	r1, r2
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4d05      	ldr	r5, [pc, #20]	@ (8009b90 <_read_r+0x20>)
 8009b7c:	602a      	str	r2, [r5, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f7fa f9d2 	bl	8003f28 <_read>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_read_r+0x1e>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_read_r+0x1e>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	200009d0 	.word	0x200009d0

08009b94 <_write_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4604      	mov	r4, r0
 8009b98:	4608      	mov	r0, r1
 8009b9a:	4611      	mov	r1, r2
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	4d05      	ldr	r5, [pc, #20]	@ (8009bb4 <_write_r+0x20>)
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7fa f9dd 	bl	8003f62 <_write>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_write_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_write_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	200009d0 	.word	0x200009d0

08009bb8 <__errno>:
 8009bb8:	4b01      	ldr	r3, [pc, #4]	@ (8009bc0 <__errno+0x8>)
 8009bba:	6818      	ldr	r0, [r3, #0]
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	2000006c 	.word	0x2000006c

08009bc4 <__libc_init_array>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	2600      	movs	r6, #0
 8009bc8:	4d0c      	ldr	r5, [pc, #48]	@ (8009bfc <__libc_init_array+0x38>)
 8009bca:	4c0d      	ldr	r4, [pc, #52]	@ (8009c00 <__libc_init_array+0x3c>)
 8009bcc:	1b64      	subs	r4, r4, r5
 8009bce:	10a4      	asrs	r4, r4, #2
 8009bd0:	42a6      	cmp	r6, r4
 8009bd2:	d109      	bne.n	8009be8 <__libc_init_array+0x24>
 8009bd4:	f003 fb66 	bl	800d2a4 <_init>
 8009bd8:	2600      	movs	r6, #0
 8009bda:	4d0a      	ldr	r5, [pc, #40]	@ (8009c04 <__libc_init_array+0x40>)
 8009bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8009c08 <__libc_init_array+0x44>)
 8009bde:	1b64      	subs	r4, r4, r5
 8009be0:	10a4      	asrs	r4, r4, #2
 8009be2:	42a6      	cmp	r6, r4
 8009be4:	d105      	bne.n	8009bf2 <__libc_init_array+0x2e>
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bec:	4798      	blx	r3
 8009bee:	3601      	adds	r6, #1
 8009bf0:	e7ee      	b.n	8009bd0 <__libc_init_array+0xc>
 8009bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf6:	4798      	blx	r3
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	e7f2      	b.n	8009be2 <__libc_init_array+0x1e>
 8009bfc:	0800e038 	.word	0x0800e038
 8009c00:	0800e038 	.word	0x0800e038
 8009c04:	0800e038 	.word	0x0800e038
 8009c08:	0800e03c 	.word	0x0800e03c

08009c0c <__retarget_lock_init_recursive>:
 8009c0c:	4770      	bx	lr

08009c0e <__retarget_lock_acquire_recursive>:
 8009c0e:	4770      	bx	lr

08009c10 <__retarget_lock_release_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <memchr>:
 8009c12:	4603      	mov	r3, r0
 8009c14:	b510      	push	{r4, lr}
 8009c16:	b2c9      	uxtb	r1, r1
 8009c18:	4402      	add	r2, r0
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	d101      	bne.n	8009c24 <memchr+0x12>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e003      	b.n	8009c2c <memchr+0x1a>
 8009c24:	7804      	ldrb	r4, [r0, #0]
 8009c26:	3301      	adds	r3, #1
 8009c28:	428c      	cmp	r4, r1
 8009c2a:	d1f6      	bne.n	8009c1a <memchr+0x8>
 8009c2c:	bd10      	pop	{r4, pc}
	...

08009c30 <nanf>:
 8009c30:	4800      	ldr	r0, [pc, #0]	@ (8009c34 <nanf+0x4>)
 8009c32:	4770      	bx	lr
 8009c34:	7fc00000 	.word	0x7fc00000

08009c38 <quorem>:
 8009c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	6903      	ldr	r3, [r0, #16]
 8009c3e:	690c      	ldr	r4, [r1, #16]
 8009c40:	4607      	mov	r7, r0
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	db7e      	blt.n	8009d44 <quorem+0x10c>
 8009c46:	3c01      	subs	r4, #1
 8009c48:	00a3      	lsls	r3, r4, #2
 8009c4a:	f100 0514 	add.w	r5, r0, #20
 8009c4e:	f101 0814 	add.w	r8, r1, #20
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c62:	3301      	adds	r3, #1
 8009c64:	429a      	cmp	r2, r3
 8009c66:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c6e:	d32e      	bcc.n	8009cce <quorem+0x96>
 8009c70:	f04f 0a00 	mov.w	sl, #0
 8009c74:	46c4      	mov	ip, r8
 8009c76:	46ae      	mov	lr, r5
 8009c78:	46d3      	mov	fp, sl
 8009c7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c7e:	b298      	uxth	r0, r3
 8009c80:	fb06 a000 	mla	r0, r6, r0, sl
 8009c84:	0c1b      	lsrs	r3, r3, #16
 8009c86:	0c02      	lsrs	r2, r0, #16
 8009c88:	fb06 2303 	mla	r3, r6, r3, r2
 8009c8c:	f8de 2000 	ldr.w	r2, [lr]
 8009c90:	b280      	uxth	r0, r0
 8009c92:	b292      	uxth	r2, r2
 8009c94:	1a12      	subs	r2, r2, r0
 8009c96:	445a      	add	r2, fp
 8009c98:	f8de 0000 	ldr.w	r0, [lr]
 8009c9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ca6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009caa:	b292      	uxth	r2, r2
 8009cac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009cb0:	45e1      	cmp	r9, ip
 8009cb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cb6:	f84e 2b04 	str.w	r2, [lr], #4
 8009cba:	d2de      	bcs.n	8009c7a <quorem+0x42>
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	58eb      	ldr	r3, [r5, r3]
 8009cc0:	b92b      	cbnz	r3, 8009cce <quorem+0x96>
 8009cc2:	9b01      	ldr	r3, [sp, #4]
 8009cc4:	3b04      	subs	r3, #4
 8009cc6:	429d      	cmp	r5, r3
 8009cc8:	461a      	mov	r2, r3
 8009cca:	d32f      	bcc.n	8009d2c <quorem+0xf4>
 8009ccc:	613c      	str	r4, [r7, #16]
 8009cce:	4638      	mov	r0, r7
 8009cd0:	f001 f9c2 	bl	800b058 <__mcmp>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	db25      	blt.n	8009d24 <quorem+0xec>
 8009cd8:	4629      	mov	r1, r5
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ce0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ce4:	fa1f fe82 	uxth.w	lr, r2
 8009ce8:	fa1f f38c 	uxth.w	r3, ip
 8009cec:	eba3 030e 	sub.w	r3, r3, lr
 8009cf0:	4403      	add	r3, r0
 8009cf2:	0c12      	lsrs	r2, r2, #16
 8009cf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d02:	45c1      	cmp	r9, r8
 8009d04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d08:	f841 3b04 	str.w	r3, [r1], #4
 8009d0c:	d2e6      	bcs.n	8009cdc <quorem+0xa4>
 8009d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d16:	b922      	cbnz	r2, 8009d22 <quorem+0xea>
 8009d18:	3b04      	subs	r3, #4
 8009d1a:	429d      	cmp	r5, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	d30b      	bcc.n	8009d38 <quorem+0x100>
 8009d20:	613c      	str	r4, [r7, #16]
 8009d22:	3601      	adds	r6, #1
 8009d24:	4630      	mov	r0, r6
 8009d26:	b003      	add	sp, #12
 8009d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2c:	6812      	ldr	r2, [r2, #0]
 8009d2e:	3b04      	subs	r3, #4
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d1cb      	bne.n	8009ccc <quorem+0x94>
 8009d34:	3c01      	subs	r4, #1
 8009d36:	e7c6      	b.n	8009cc6 <quorem+0x8e>
 8009d38:	6812      	ldr	r2, [r2, #0]
 8009d3a:	3b04      	subs	r3, #4
 8009d3c:	2a00      	cmp	r2, #0
 8009d3e:	d1ef      	bne.n	8009d20 <quorem+0xe8>
 8009d40:	3c01      	subs	r4, #1
 8009d42:	e7ea      	b.n	8009d1a <quorem+0xe2>
 8009d44:	2000      	movs	r0, #0
 8009d46:	e7ee      	b.n	8009d26 <quorem+0xee>

08009d48 <_dtoa_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	461d      	mov	r5, r3
 8009d50:	69c7      	ldr	r7, [r0, #28]
 8009d52:	b097      	sub	sp, #92	@ 0x5c
 8009d54:	4683      	mov	fp, r0
 8009d56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009d5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009d5c:	b97f      	cbnz	r7, 8009d7e <_dtoa_r+0x36>
 8009d5e:	2010      	movs	r0, #16
 8009d60:	f000 fe02 	bl	800a968 <malloc>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d6a:	b920      	cbnz	r0, 8009d76 <_dtoa_r+0x2e>
 8009d6c:	21ef      	movs	r1, #239	@ 0xef
 8009d6e:	4ba8      	ldr	r3, [pc, #672]	@ (800a010 <_dtoa_r+0x2c8>)
 8009d70:	48a8      	ldr	r0, [pc, #672]	@ (800a014 <_dtoa_r+0x2cc>)
 8009d72:	f002 fc23 	bl	800c5bc <__assert_func>
 8009d76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d7a:	6007      	str	r7, [r0, #0]
 8009d7c:	60c7      	str	r7, [r0, #12]
 8009d7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	b159      	cbz	r1, 8009d9e <_dtoa_r+0x56>
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4093      	lsls	r3, r2
 8009d8c:	604a      	str	r2, [r1, #4]
 8009d8e:	608b      	str	r3, [r1, #8]
 8009d90:	4658      	mov	r0, fp
 8009d92:	f000 fedf 	bl	800ab54 <_Bfree>
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	1e2b      	subs	r3, r5, #0
 8009da0:	bfaf      	iteee	ge
 8009da2:	2300      	movge	r3, #0
 8009da4:	2201      	movlt	r2, #1
 8009da6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009daa:	9303      	strlt	r3, [sp, #12]
 8009dac:	bfa8      	it	ge
 8009dae:	6033      	strge	r3, [r6, #0]
 8009db0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009db4:	4b98      	ldr	r3, [pc, #608]	@ (800a018 <_dtoa_r+0x2d0>)
 8009db6:	bfb8      	it	lt
 8009db8:	6032      	strlt	r2, [r6, #0]
 8009dba:	ea33 0308 	bics.w	r3, r3, r8
 8009dbe:	d112      	bne.n	8009de6 <_dtoa_r+0x9e>
 8009dc0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009dc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009dcc:	4323      	orrs	r3, r4
 8009dce:	f000 8550 	beq.w	800a872 <_dtoa_r+0xb2a>
 8009dd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009dd4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a01c <_dtoa_r+0x2d4>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8552 	beq.w	800a882 <_dtoa_r+0xb3a>
 8009dde:	f10a 0303 	add.w	r3, sl, #3
 8009de2:	f000 bd4c 	b.w	800a87e <_dtoa_r+0xb36>
 8009de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	f7f6 fe43 	bl	8000a80 <__aeabi_dcmpeq>
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	b158      	cbz	r0, 8009e16 <_dtoa_r+0xce>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e06:	b113      	cbz	r3, 8009e0e <_dtoa_r+0xc6>
 8009e08:	4b85      	ldr	r3, [pc, #532]	@ (800a020 <_dtoa_r+0x2d8>)
 8009e0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a024 <_dtoa_r+0x2dc>
 8009e12:	f000 bd36 	b.w	800a882 <_dtoa_r+0xb3a>
 8009e16:	ab14      	add	r3, sp, #80	@ 0x50
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	ab15      	add	r3, sp, #84	@ 0x54
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	4658      	mov	r0, fp
 8009e20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e24:	f001 fa30 	bl	800b288 <__d2b>
 8009e28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	2e00      	cmp	r6, #0
 8009e30:	d077      	beq.n	8009f22 <_dtoa_r+0x1da>
 8009e32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e48:	9712      	str	r7, [sp, #72]	@ 0x48
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4b76      	ldr	r3, [pc, #472]	@ (800a028 <_dtoa_r+0x2e0>)
 8009e50:	f7f6 f9f6 	bl	8000240 <__aeabi_dsub>
 8009e54:	a368      	add	r3, pc, #416	@ (adr r3, 8009ff8 <_dtoa_r+0x2b0>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f7f6 fba9 	bl	80005b0 <__aeabi_dmul>
 8009e5e:	a368      	add	r3, pc, #416	@ (adr r3, 800a000 <_dtoa_r+0x2b8>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 f9ee 	bl	8000244 <__adddf3>
 8009e68:	4604      	mov	r4, r0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f7f6 fb35 	bl	80004dc <__aeabi_i2d>
 8009e72:	a365      	add	r3, pc, #404	@ (adr r3, 800a008 <_dtoa_r+0x2c0>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fb9a 	bl	80005b0 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 f9de 	bl	8000244 <__adddf3>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	f7f6 fe40 	bl	8000b10 <__aeabi_d2iz>
 8009e90:	2200      	movs	r2, #0
 8009e92:	4607      	mov	r7, r0
 8009e94:	2300      	movs	r3, #0
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fdfb 	bl	8000a94 <__aeabi_dcmplt>
 8009e9e:	b140      	cbz	r0, 8009eb2 <_dtoa_r+0x16a>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7f6 fb1b 	bl	80004dc <__aeabi_i2d>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	f7f6 fde9 	bl	8000a80 <__aeabi_dcmpeq>
 8009eae:	b900      	cbnz	r0, 8009eb2 <_dtoa_r+0x16a>
 8009eb0:	3f01      	subs	r7, #1
 8009eb2:	2f16      	cmp	r7, #22
 8009eb4:	d853      	bhi.n	8009f5e <_dtoa_r+0x216>
 8009eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eba:	4b5c      	ldr	r3, [pc, #368]	@ (800a02c <_dtoa_r+0x2e4>)
 8009ebc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fde6 	bl	8000a94 <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d04a      	beq.n	8009f62 <_dtoa_r+0x21a>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	3f01      	subs	r7, #1
 8009ed0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ed2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ed4:	1b9b      	subs	r3, r3, r6
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	bf46      	itte	mi
 8009eda:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ede:	2300      	movmi	r3, #0
 8009ee0:	f04f 0800 	movpl.w	r8, #0
 8009ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ee6:	bf48      	it	mi
 8009ee8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009eea:	2f00      	cmp	r7, #0
 8009eec:	db3b      	blt.n	8009f66 <_dtoa_r+0x21e>
 8009eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef0:	970e      	str	r7, [sp, #56]	@ 0x38
 8009ef2:	443b      	add	r3, r7
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d866      	bhi.n	8009fce <_dtoa_r+0x286>
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	bfc4      	itt	gt
 8009f04:	3b04      	subgt	r3, #4
 8009f06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009f08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f0a:	bfc8      	it	gt
 8009f0c:	2400      	movgt	r4, #0
 8009f0e:	f1a3 0302 	sub.w	r3, r3, #2
 8009f12:	bfd8      	it	le
 8009f14:	2401      	movle	r4, #1
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d864      	bhi.n	8009fe4 <_dtoa_r+0x29c>
 8009f1a:	e8df f003 	tbb	[pc, r3]
 8009f1e:	382b      	.short	0x382b
 8009f20:	5636      	.short	0x5636
 8009f22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f26:	441e      	add	r6, r3
 8009f28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	bfc1      	itttt	gt
 8009f30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f34:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f40:	bfd6      	itet	le
 8009f42:	f1c3 0320 	rsble	r3, r3, #32
 8009f46:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f4a:	fa04 f003 	lslle.w	r0, r4, r3
 8009f4e:	f7f6 fab5 	bl	80004bc <__aeabi_ui2d>
 8009f52:	2201      	movs	r2, #1
 8009f54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f58:	3e01      	subs	r6, #1
 8009f5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f5c:	e775      	b.n	8009e4a <_dtoa_r+0x102>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7b6      	b.n	8009ed0 <_dtoa_r+0x188>
 8009f62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009f64:	e7b5      	b.n	8009ed2 <_dtoa_r+0x18a>
 8009f66:	427b      	negs	r3, r7
 8009f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	eba8 0807 	sub.w	r8, r8, r7
 8009f70:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f72:	e7c2      	b.n	8009efa <_dtoa_r+0x1b2>
 8009f74:	2300      	movs	r3, #0
 8009f76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc35      	bgt.n	8009fea <_dtoa_r+0x2a2>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	461a      	mov	r2, r3
 8009f82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009f86:	9221      	str	r2, [sp, #132]	@ 0x84
 8009f88:	e00b      	b.n	8009fa2 <_dtoa_r+0x25a>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7f3      	b.n	8009f76 <_dtoa_r+0x22e>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f94:	18fb      	adds	r3, r7, r3
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	9307      	str	r3, [sp, #28]
 8009f9e:	bfb8      	it	lt
 8009fa0:	2301      	movlt	r3, #1
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009faa:	f102 0514 	add.w	r5, r2, #20
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	d91f      	bls.n	8009ff2 <_dtoa_r+0x2aa>
 8009fb2:	6041      	str	r1, [r0, #4]
 8009fb4:	4658      	mov	r0, fp
 8009fb6:	f000 fd8d 	bl	800aad4 <_Balloc>
 8009fba:	4682      	mov	sl, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d139      	bne.n	800a034 <_dtoa_r+0x2ec>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fc6:	4b1a      	ldr	r3, [pc, #104]	@ (800a030 <_dtoa_r+0x2e8>)
 8009fc8:	e6d2      	b.n	8009d70 <_dtoa_r+0x28>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e7e0      	b.n	8009f90 <_dtoa_r+0x248>
 8009fce:	2401      	movs	r4, #1
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009fd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	2200      	movs	r2, #0
 8009fdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009fe0:	2312      	movs	r3, #18
 8009fe2:	e7d0      	b.n	8009f86 <_dtoa_r+0x23e>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe8:	e7f5      	b.n	8009fd6 <_dtoa_r+0x28e>
 8009fea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ff0:	e7d7      	b.n	8009fa2 <_dtoa_r+0x25a>
 8009ff2:	3101      	adds	r1, #1
 8009ff4:	0052      	lsls	r2, r2, #1
 8009ff6:	e7d8      	b.n	8009faa <_dtoa_r+0x262>
 8009ff8:	636f4361 	.word	0x636f4361
 8009ffc:	3fd287a7 	.word	0x3fd287a7
 800a000:	8b60c8b3 	.word	0x8b60c8b3
 800a004:	3fc68a28 	.word	0x3fc68a28
 800a008:	509f79fb 	.word	0x509f79fb
 800a00c:	3fd34413 	.word	0x3fd34413
 800a010:	0800dc48 	.word	0x0800dc48
 800a014:	0800dc5f 	.word	0x0800dc5f
 800a018:	7ff00000 	.word	0x7ff00000
 800a01c:	0800dc44 	.word	0x0800dc44
 800a020:	0800dc13 	.word	0x0800dc13
 800a024:	0800dc12 	.word	0x0800dc12
 800a028:	3ff80000 	.word	0x3ff80000
 800a02c:	0800dd58 	.word	0x0800dd58
 800a030:	0800dcb7 	.word	0x0800dcb7
 800a034:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a038:	6018      	str	r0, [r3, #0]
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	2b0e      	cmp	r3, #14
 800a03e:	f200 80a4 	bhi.w	800a18a <_dtoa_r+0x442>
 800a042:	2c00      	cmp	r4, #0
 800a044:	f000 80a1 	beq.w	800a18a <_dtoa_r+0x442>
 800a048:	2f00      	cmp	r7, #0
 800a04a:	dd33      	ble.n	800a0b4 <_dtoa_r+0x36c>
 800a04c:	4b86      	ldr	r3, [pc, #536]	@ (800a268 <_dtoa_r+0x520>)
 800a04e:	f007 020f 	and.w	r2, r7, #15
 800a052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a056:	05f8      	lsls	r0, r7, #23
 800a058:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a05c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a060:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a064:	d516      	bpl.n	800a094 <_dtoa_r+0x34c>
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a06a:	4b80      	ldr	r3, [pc, #512]	@ (800a26c <_dtoa_r+0x524>)
 800a06c:	2603      	movs	r6, #3
 800a06e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a072:	f7f6 fbc7 	bl	8000804 <__aeabi_ddiv>
 800a076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07a:	f004 040f 	and.w	r4, r4, #15
 800a07e:	4d7b      	ldr	r5, [pc, #492]	@ (800a26c <_dtoa_r+0x524>)
 800a080:	b954      	cbnz	r4, 800a098 <_dtoa_r+0x350>
 800a082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	f7f6 fbbb 	bl	8000804 <__aeabi_ddiv>
 800a08e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a092:	e028      	b.n	800a0e6 <_dtoa_r+0x39e>
 800a094:	2602      	movs	r6, #2
 800a096:	e7f2      	b.n	800a07e <_dtoa_r+0x336>
 800a098:	07e1      	lsls	r1, r4, #31
 800a09a:	d508      	bpl.n	800a0ae <_dtoa_r+0x366>
 800a09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0a4:	f7f6 fa84 	bl	80005b0 <__aeabi_dmul>
 800a0a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ac:	3601      	adds	r6, #1
 800a0ae:	1064      	asrs	r4, r4, #1
 800a0b0:	3508      	adds	r5, #8
 800a0b2:	e7e5      	b.n	800a080 <_dtoa_r+0x338>
 800a0b4:	f000 80d2 	beq.w	800a25c <_dtoa_r+0x514>
 800a0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0bc:	427c      	negs	r4, r7
 800a0be:	4b6a      	ldr	r3, [pc, #424]	@ (800a268 <_dtoa_r+0x520>)
 800a0c0:	f004 020f 	and.w	r2, r4, #15
 800a0c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fa70 	bl	80005b0 <__aeabi_dmul>
 800a0d0:	2602      	movs	r6, #2
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d8:	4d64      	ldr	r5, [pc, #400]	@ (800a26c <_dtoa_r+0x524>)
 800a0da:	1124      	asrs	r4, r4, #4
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	f040 80b2 	bne.w	800a246 <_dtoa_r+0x4fe>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1d3      	bne.n	800a08e <_dtoa_r+0x346>
 800a0e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 80b7 	beq.w	800a260 <_dtoa_r+0x518>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4b5d      	ldr	r3, [pc, #372]	@ (800a270 <_dtoa_r+0x528>)
 800a0fa:	f7f6 fccb 	bl	8000a94 <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f000 80ae 	beq.w	800a260 <_dtoa_r+0x518>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80aa 	beq.w	800a260 <_dtoa_r+0x518>
 800a10c:	9b08      	ldr	r3, [sp, #32]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dd37      	ble.n	800a182 <_dtoa_r+0x43a>
 800a112:	1e7b      	subs	r3, r7, #1
 800a114:	4620      	mov	r0, r4
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	2200      	movs	r2, #0
 800a11a:	4629      	mov	r1, r5
 800a11c:	4b55      	ldr	r3, [pc, #340]	@ (800a274 <_dtoa_r+0x52c>)
 800a11e:	f7f6 fa47 	bl	80005b0 <__aeabi_dmul>
 800a122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a126:	9c08      	ldr	r4, [sp, #32]
 800a128:	3601      	adds	r6, #1
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7f6 f9d6 	bl	80004dc <__aeabi_i2d>
 800a130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a134:	f7f6 fa3c 	bl	80005b0 <__aeabi_dmul>
 800a138:	2200      	movs	r2, #0
 800a13a:	4b4f      	ldr	r3, [pc, #316]	@ (800a278 <_dtoa_r+0x530>)
 800a13c:	f7f6 f882 	bl	8000244 <__adddf3>
 800a140:	4605      	mov	r5, r0
 800a142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a146:	2c00      	cmp	r4, #0
 800a148:	f040 809a 	bne.w	800a280 <_dtoa_r+0x538>
 800a14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a150:	2200      	movs	r2, #0
 800a152:	4b4a      	ldr	r3, [pc, #296]	@ (800a27c <_dtoa_r+0x534>)
 800a154:	f7f6 f874 	bl	8000240 <__aeabi_dsub>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a160:	462a      	mov	r2, r5
 800a162:	4633      	mov	r3, r6
 800a164:	f7f6 fcb4 	bl	8000ad0 <__aeabi_dcmpgt>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f040 828e 	bne.w	800a68a <_dtoa_r+0x942>
 800a16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a172:	462a      	mov	r2, r5
 800a174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a178:	f7f6 fc8c 	bl	8000a94 <__aeabi_dcmplt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f040 8127 	bne.w	800a3d0 <_dtoa_r+0x688>
 800a182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a18a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f2c0 8163 	blt.w	800a458 <_dtoa_r+0x710>
 800a192:	2f0e      	cmp	r7, #14
 800a194:	f300 8160 	bgt.w	800a458 <_dtoa_r+0x710>
 800a198:	4b33      	ldr	r3, [pc, #204]	@ (800a268 <_dtoa_r+0x520>)
 800a19a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a19e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da03      	bge.n	800a1b4 <_dtoa_r+0x46c>
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f340 8100 	ble.w	800a3b4 <_dtoa_r+0x66c>
 800a1b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1b8:	4656      	mov	r6, sl
 800a1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 fb1f 	bl	8000804 <__aeabi_ddiv>
 800a1c6:	f7f6 fca3 	bl	8000b10 <__aeabi_d2iz>
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	f7f6 f986 	bl	80004dc <__aeabi_i2d>
 800a1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d4:	f7f6 f9ec 	bl	80005b0 <__aeabi_dmul>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 f82e 	bl	8000240 <__aeabi_dsub>
 800a1e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1e8:	9d07      	ldr	r5, [sp, #28]
 800a1ea:	f806 4b01 	strb.w	r4, [r6], #1
 800a1ee:	eba6 040a 	sub.w	r4, r6, sl
 800a1f2:	42a5      	cmp	r5, r4
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	f040 8116 	bne.w	800a428 <_dtoa_r+0x6e0>
 800a1fc:	f7f6 f822 	bl	8000244 <__adddf3>
 800a200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	f7f6 fc62 	bl	8000ad0 <__aeabi_dcmpgt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 80f8 	bne.w	800a402 <_dtoa_r+0x6ba>
 800a212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a216:	4620      	mov	r0, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	f7f6 fc31 	bl	8000a80 <__aeabi_dcmpeq>
 800a21e:	b118      	cbz	r0, 800a228 <_dtoa_r+0x4e0>
 800a220:	f018 0f01 	tst.w	r8, #1
 800a224:	f040 80ed 	bne.w	800a402 <_dtoa_r+0x6ba>
 800a228:	4649      	mov	r1, r9
 800a22a:	4658      	mov	r0, fp
 800a22c:	f000 fc92 	bl	800ab54 <_Bfree>
 800a230:	2300      	movs	r3, #0
 800a232:	7033      	strb	r3, [r6, #0]
 800a234:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a236:	3701      	adds	r7, #1
 800a238:	601f      	str	r7, [r3, #0]
 800a23a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8320 	beq.w	800a882 <_dtoa_r+0xb3a>
 800a242:	601e      	str	r6, [r3, #0]
 800a244:	e31d      	b.n	800a882 <_dtoa_r+0xb3a>
 800a246:	07e2      	lsls	r2, r4, #31
 800a248:	d505      	bpl.n	800a256 <_dtoa_r+0x50e>
 800a24a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a24e:	f7f6 f9af 	bl	80005b0 <__aeabi_dmul>
 800a252:	2301      	movs	r3, #1
 800a254:	3601      	adds	r6, #1
 800a256:	1064      	asrs	r4, r4, #1
 800a258:	3508      	adds	r5, #8
 800a25a:	e73f      	b.n	800a0dc <_dtoa_r+0x394>
 800a25c:	2602      	movs	r6, #2
 800a25e:	e742      	b.n	800a0e6 <_dtoa_r+0x39e>
 800a260:	9c07      	ldr	r4, [sp, #28]
 800a262:	9704      	str	r7, [sp, #16]
 800a264:	e761      	b.n	800a12a <_dtoa_r+0x3e2>
 800a266:	bf00      	nop
 800a268:	0800dd58 	.word	0x0800dd58
 800a26c:	0800dd30 	.word	0x0800dd30
 800a270:	3ff00000 	.word	0x3ff00000
 800a274:	40240000 	.word	0x40240000
 800a278:	401c0000 	.word	0x401c0000
 800a27c:	40140000 	.word	0x40140000
 800a280:	4b70      	ldr	r3, [pc, #448]	@ (800a444 <_dtoa_r+0x6fc>)
 800a282:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a28c:	4454      	add	r4, sl
 800a28e:	2900      	cmp	r1, #0
 800a290:	d045      	beq.n	800a31e <_dtoa_r+0x5d6>
 800a292:	2000      	movs	r0, #0
 800a294:	496c      	ldr	r1, [pc, #432]	@ (800a448 <_dtoa_r+0x700>)
 800a296:	f7f6 fab5 	bl	8000804 <__aeabi_ddiv>
 800a29a:	4633      	mov	r3, r6
 800a29c:	462a      	mov	r2, r5
 800a29e:	f7f5 ffcf 	bl	8000240 <__aeabi_dsub>
 800a2a2:	4656      	mov	r6, sl
 800a2a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ac:	f7f6 fc30 	bl	8000b10 <__aeabi_d2iz>
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	f7f6 f913 	bl	80004dc <__aeabi_i2d>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2be:	f7f5 ffbf 	bl	8000240 <__aeabi_dsub>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	3530      	adds	r5, #48	@ 0x30
 800a2c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2d0:	f806 5b01 	strb.w	r5, [r6], #1
 800a2d4:	f7f6 fbde 	bl	8000a94 <__aeabi_dcmplt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d163      	bne.n	800a3a4 <_dtoa_r+0x65c>
 800a2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	495a      	ldr	r1, [pc, #360]	@ (800a44c <_dtoa_r+0x704>)
 800a2e4:	f7f5 ffac 	bl	8000240 <__aeabi_dsub>
 800a2e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2ec:	f7f6 fbd2 	bl	8000a94 <__aeabi_dcmplt>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f040 8087 	bne.w	800a404 <_dtoa_r+0x6bc>
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	f43f af43 	beq.w	800a182 <_dtoa_r+0x43a>
 800a2fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a300:	2200      	movs	r2, #0
 800a302:	4b53      	ldr	r3, [pc, #332]	@ (800a450 <_dtoa_r+0x708>)
 800a304:	f7f6 f954 	bl	80005b0 <__aeabi_dmul>
 800a308:	2200      	movs	r2, #0
 800a30a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a312:	4b4f      	ldr	r3, [pc, #316]	@ (800a450 <_dtoa_r+0x708>)
 800a314:	f7f6 f94c 	bl	80005b0 <__aeabi_dmul>
 800a318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a31c:	e7c4      	b.n	800a2a8 <_dtoa_r+0x560>
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	f7f6 f945 	bl	80005b0 <__aeabi_dmul>
 800a326:	4656      	mov	r6, sl
 800a328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a32c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a332:	f7f6 fbed 	bl	8000b10 <__aeabi_d2iz>
 800a336:	4605      	mov	r5, r0
 800a338:	f7f6 f8d0 	bl	80004dc <__aeabi_i2d>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a344:	f7f5 ff7c 	bl	8000240 <__aeabi_dsub>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	3530      	adds	r5, #48	@ 0x30
 800a34e:	f806 5b01 	strb.w	r5, [r6], #1
 800a352:	42a6      	cmp	r6, r4
 800a354:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a358:	f04f 0200 	mov.w	r2, #0
 800a35c:	d124      	bne.n	800a3a8 <_dtoa_r+0x660>
 800a35e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a362:	4b39      	ldr	r3, [pc, #228]	@ (800a448 <_dtoa_r+0x700>)
 800a364:	f7f5 ff6e 	bl	8000244 <__adddf3>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a370:	f7f6 fbae 	bl	8000ad0 <__aeabi_dcmpgt>
 800a374:	2800      	cmp	r0, #0
 800a376:	d145      	bne.n	800a404 <_dtoa_r+0x6bc>
 800a378:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a37c:	2000      	movs	r0, #0
 800a37e:	4932      	ldr	r1, [pc, #200]	@ (800a448 <_dtoa_r+0x700>)
 800a380:	f7f5 ff5e 	bl	8000240 <__aeabi_dsub>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38c:	f7f6 fb82 	bl	8000a94 <__aeabi_dcmplt>
 800a390:	2800      	cmp	r0, #0
 800a392:	f43f aef6 	beq.w	800a182 <_dtoa_r+0x43a>
 800a396:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a398:	1e73      	subs	r3, r6, #1
 800a39a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a39c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3a0:	2b30      	cmp	r3, #48	@ 0x30
 800a3a2:	d0f8      	beq.n	800a396 <_dtoa_r+0x64e>
 800a3a4:	9f04      	ldr	r7, [sp, #16]
 800a3a6:	e73f      	b.n	800a228 <_dtoa_r+0x4e0>
 800a3a8:	4b29      	ldr	r3, [pc, #164]	@ (800a450 <_dtoa_r+0x708>)
 800a3aa:	f7f6 f901 	bl	80005b0 <__aeabi_dmul>
 800a3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b2:	e7bc      	b.n	800a32e <_dtoa_r+0x5e6>
 800a3b4:	d10c      	bne.n	800a3d0 <_dtoa_r+0x688>
 800a3b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4b25      	ldr	r3, [pc, #148]	@ (800a454 <_dtoa_r+0x70c>)
 800a3be:	f7f6 f8f7 	bl	80005b0 <__aeabi_dmul>
 800a3c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c6:	f7f6 fb79 	bl	8000abc <__aeabi_dcmpge>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f000 815b 	beq.w	800a686 <_dtoa_r+0x93e>
 800a3d0:	2400      	movs	r4, #0
 800a3d2:	4625      	mov	r5, r4
 800a3d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3d6:	4656      	mov	r6, sl
 800a3d8:	43db      	mvns	r3, r3
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	2700      	movs	r7, #0
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4658      	mov	r0, fp
 800a3e2:	f000 fbb7 	bl	800ab54 <_Bfree>
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	d0dc      	beq.n	800a3a4 <_dtoa_r+0x65c>
 800a3ea:	b12f      	cbz	r7, 800a3f8 <_dtoa_r+0x6b0>
 800a3ec:	42af      	cmp	r7, r5
 800a3ee:	d003      	beq.n	800a3f8 <_dtoa_r+0x6b0>
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f000 fbae 	bl	800ab54 <_Bfree>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f000 fbaa 	bl	800ab54 <_Bfree>
 800a400:	e7d0      	b.n	800a3a4 <_dtoa_r+0x65c>
 800a402:	9704      	str	r7, [sp, #16]
 800a404:	4633      	mov	r3, r6
 800a406:	461e      	mov	r6, r3
 800a408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a40c:	2a39      	cmp	r2, #57	@ 0x39
 800a40e:	d107      	bne.n	800a420 <_dtoa_r+0x6d8>
 800a410:	459a      	cmp	sl, r3
 800a412:	d1f8      	bne.n	800a406 <_dtoa_r+0x6be>
 800a414:	9a04      	ldr	r2, [sp, #16]
 800a416:	3201      	adds	r2, #1
 800a418:	9204      	str	r2, [sp, #16]
 800a41a:	2230      	movs	r2, #48	@ 0x30
 800a41c:	f88a 2000 	strb.w	r2, [sl]
 800a420:	781a      	ldrb	r2, [r3, #0]
 800a422:	3201      	adds	r2, #1
 800a424:	701a      	strb	r2, [r3, #0]
 800a426:	e7bd      	b.n	800a3a4 <_dtoa_r+0x65c>
 800a428:	2200      	movs	r2, #0
 800a42a:	4b09      	ldr	r3, [pc, #36]	@ (800a450 <_dtoa_r+0x708>)
 800a42c:	f7f6 f8c0 	bl	80005b0 <__aeabi_dmul>
 800a430:	2200      	movs	r2, #0
 800a432:	2300      	movs	r3, #0
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	f7f6 fb22 	bl	8000a80 <__aeabi_dcmpeq>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f43f aebc 	beq.w	800a1ba <_dtoa_r+0x472>
 800a442:	e6f1      	b.n	800a228 <_dtoa_r+0x4e0>
 800a444:	0800dd58 	.word	0x0800dd58
 800a448:	3fe00000 	.word	0x3fe00000
 800a44c:	3ff00000 	.word	0x3ff00000
 800a450:	40240000 	.word	0x40240000
 800a454:	40140000 	.word	0x40140000
 800a458:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	f000 80db 	beq.w	800a616 <_dtoa_r+0x8ce>
 800a460:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a462:	2a01      	cmp	r2, #1
 800a464:	f300 80bf 	bgt.w	800a5e6 <_dtoa_r+0x89e>
 800a468:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	f000 80b7 	beq.w	800a5de <_dtoa_r+0x896>
 800a470:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a474:	4646      	mov	r6, r8
 800a476:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a478:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a47a:	2101      	movs	r1, #1
 800a47c:	441a      	add	r2, r3
 800a47e:	4658      	mov	r0, fp
 800a480:	4498      	add	r8, r3
 800a482:	9209      	str	r2, [sp, #36]	@ 0x24
 800a484:	f000 fc64 	bl	800ad50 <__i2b>
 800a488:	4605      	mov	r5, r0
 800a48a:	b15e      	cbz	r6, 800a4a4 <_dtoa_r+0x75c>
 800a48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd08      	ble.n	800a4a4 <_dtoa_r+0x75c>
 800a492:	42b3      	cmp	r3, r6
 800a494:	bfa8      	it	ge
 800a496:	4633      	movge	r3, r6
 800a498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a49a:	eba8 0803 	sub.w	r8, r8, r3
 800a49e:	1af6      	subs	r6, r6, r3
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	b1f3      	cbz	r3, 800a4e6 <_dtoa_r+0x79e>
 800a4a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80b7 	beq.w	800a61e <_dtoa_r+0x8d6>
 800a4b0:	b18c      	cbz	r4, 800a4d6 <_dtoa_r+0x78e>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 fd08 	bl	800aecc <__pow5mult>
 800a4bc:	464a      	mov	r2, r9
 800a4be:	4601      	mov	r1, r0
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f000 fc5a 	bl	800ad7c <__multiply>
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	9004      	str	r0, [sp, #16]
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f000 fb41 	bl	800ab54 <_Bfree>
 800a4d2:	9b04      	ldr	r3, [sp, #16]
 800a4d4:	4699      	mov	r9, r3
 800a4d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d8:	1b1a      	subs	r2, r3, r4
 800a4da:	d004      	beq.n	800a4e6 <_dtoa_r+0x79e>
 800a4dc:	4649      	mov	r1, r9
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f000 fcf4 	bl	800aecc <__pow5mult>
 800a4e4:	4681      	mov	r9, r0
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	4658      	mov	r0, fp
 800a4ea:	f000 fc31 	bl	800ad50 <__i2b>
 800a4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 81c9 	beq.w	800a88a <_dtoa_r+0xb42>
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	4658      	mov	r0, fp
 800a4fe:	f000 fce5 	bl	800aecc <__pow5mult>
 800a502:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a504:	4604      	mov	r4, r0
 800a506:	2b01      	cmp	r3, #1
 800a508:	f300 808f 	bgt.w	800a62a <_dtoa_r+0x8e2>
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 8087 	bne.w	800a622 <_dtoa_r+0x8da>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f040 8083 	bne.w	800a626 <_dtoa_r+0x8de>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a526:	0d1b      	lsrs	r3, r3, #20
 800a528:	051b      	lsls	r3, r3, #20
 800a52a:	b12b      	cbz	r3, 800a538 <_dtoa_r+0x7f0>
 800a52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52e:	f108 0801 	add.w	r8, r8, #1
 800a532:	3301      	adds	r3, #1
 800a534:	9309      	str	r3, [sp, #36]	@ 0x24
 800a536:	2301      	movs	r3, #1
 800a538:	930a      	str	r3, [sp, #40]	@ 0x28
 800a53a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 81aa 	beq.w	800a896 <_dtoa_r+0xb4e>
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a548:	6918      	ldr	r0, [r3, #16]
 800a54a:	f000 fbb5 	bl	800acb8 <__hi0bits>
 800a54e:	f1c0 0020 	rsb	r0, r0, #32
 800a552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a554:	4418      	add	r0, r3
 800a556:	f010 001f 	ands.w	r0, r0, #31
 800a55a:	d071      	beq.n	800a640 <_dtoa_r+0x8f8>
 800a55c:	f1c0 0320 	rsb	r3, r0, #32
 800a560:	2b04      	cmp	r3, #4
 800a562:	dd65      	ble.n	800a630 <_dtoa_r+0x8e8>
 800a564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a566:	f1c0 001c 	rsb	r0, r0, #28
 800a56a:	4403      	add	r3, r0
 800a56c:	4480      	add	r8, r0
 800a56e:	4406      	add	r6, r0
 800a570:	9309      	str	r3, [sp, #36]	@ 0x24
 800a572:	f1b8 0f00 	cmp.w	r8, #0
 800a576:	dd05      	ble.n	800a584 <_dtoa_r+0x83c>
 800a578:	4649      	mov	r1, r9
 800a57a:	4642      	mov	r2, r8
 800a57c:	4658      	mov	r0, fp
 800a57e:	f000 fcff 	bl	800af80 <__lshift>
 800a582:	4681      	mov	r9, r0
 800a584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a586:	2b00      	cmp	r3, #0
 800a588:	dd05      	ble.n	800a596 <_dtoa_r+0x84e>
 800a58a:	4621      	mov	r1, r4
 800a58c:	461a      	mov	r2, r3
 800a58e:	4658      	mov	r0, fp
 800a590:	f000 fcf6 	bl	800af80 <__lshift>
 800a594:	4604      	mov	r4, r0
 800a596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d053      	beq.n	800a644 <_dtoa_r+0x8fc>
 800a59c:	4621      	mov	r1, r4
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f000 fd5a 	bl	800b058 <__mcmp>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	da4d      	bge.n	800a644 <_dtoa_r+0x8fc>
 800a5a8:	1e7b      	subs	r3, r7, #1
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	220a      	movs	r2, #10
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4658      	mov	r0, fp
 800a5b4:	f000 faf0 	bl	800ab98 <__multadd>
 800a5b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 816c 	beq.w	800a89a <_dtoa_r+0xb52>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	220a      	movs	r2, #10
 800a5c8:	4658      	mov	r0, fp
 800a5ca:	f000 fae5 	bl	800ab98 <__multadd>
 800a5ce:	9b08      	ldr	r3, [sp, #32]
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dc61      	bgt.n	800a69a <_dtoa_r+0x952>
 800a5d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	dc3b      	bgt.n	800a654 <_dtoa_r+0x90c>
 800a5dc:	e05d      	b.n	800a69a <_dtoa_r+0x952>
 800a5de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5e4:	e746      	b.n	800a474 <_dtoa_r+0x72c>
 800a5e6:	9b07      	ldr	r3, [sp, #28]
 800a5e8:	1e5c      	subs	r4, r3, #1
 800a5ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	bfbf      	itttt	lt
 800a5f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a5f4:	1ae3      	sublt	r3, r4, r3
 800a5f6:	18d2      	addlt	r2, r2, r3
 800a5f8:	bfa8      	it	ge
 800a5fa:	1b1c      	subge	r4, r3, r4
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	bfbe      	ittt	lt
 800a600:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a602:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a604:	2400      	movlt	r4, #0
 800a606:	2b00      	cmp	r3, #0
 800a608:	bfb5      	itete	lt
 800a60a:	eba8 0603 	sublt.w	r6, r8, r3
 800a60e:	4646      	movge	r6, r8
 800a610:	2300      	movlt	r3, #0
 800a612:	9b07      	ldrge	r3, [sp, #28]
 800a614:	e730      	b.n	800a478 <_dtoa_r+0x730>
 800a616:	4646      	mov	r6, r8
 800a618:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a61a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a61c:	e735      	b.n	800a48a <_dtoa_r+0x742>
 800a61e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a620:	e75c      	b.n	800a4dc <_dtoa_r+0x794>
 800a622:	2300      	movs	r3, #0
 800a624:	e788      	b.n	800a538 <_dtoa_r+0x7f0>
 800a626:	9b02      	ldr	r3, [sp, #8]
 800a628:	e786      	b.n	800a538 <_dtoa_r+0x7f0>
 800a62a:	2300      	movs	r3, #0
 800a62c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a62e:	e788      	b.n	800a542 <_dtoa_r+0x7fa>
 800a630:	d09f      	beq.n	800a572 <_dtoa_r+0x82a>
 800a632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a634:	331c      	adds	r3, #28
 800a636:	441a      	add	r2, r3
 800a638:	4498      	add	r8, r3
 800a63a:	441e      	add	r6, r3
 800a63c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a63e:	e798      	b.n	800a572 <_dtoa_r+0x82a>
 800a640:	4603      	mov	r3, r0
 800a642:	e7f6      	b.n	800a632 <_dtoa_r+0x8ea>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	9704      	str	r7, [sp, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dc20      	bgt.n	800a68e <_dtoa_r+0x946>
 800a64c:	9308      	str	r3, [sp, #32]
 800a64e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a650:	2b02      	cmp	r3, #2
 800a652:	dd1e      	ble.n	800a692 <_dtoa_r+0x94a>
 800a654:	9b08      	ldr	r3, [sp, #32]
 800a656:	2b00      	cmp	r3, #0
 800a658:	f47f aebc 	bne.w	800a3d4 <_dtoa_r+0x68c>
 800a65c:	4621      	mov	r1, r4
 800a65e:	2205      	movs	r2, #5
 800a660:	4658      	mov	r0, fp
 800a662:	f000 fa99 	bl	800ab98 <__multadd>
 800a666:	4601      	mov	r1, r0
 800a668:	4604      	mov	r4, r0
 800a66a:	4648      	mov	r0, r9
 800a66c:	f000 fcf4 	bl	800b058 <__mcmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	f77f aeaf 	ble.w	800a3d4 <_dtoa_r+0x68c>
 800a676:	2331      	movs	r3, #49	@ 0x31
 800a678:	4656      	mov	r6, sl
 800a67a:	f806 3b01 	strb.w	r3, [r6], #1
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	3301      	adds	r3, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	e6aa      	b.n	800a3dc <_dtoa_r+0x694>
 800a686:	9c07      	ldr	r4, [sp, #28]
 800a688:	9704      	str	r7, [sp, #16]
 800a68a:	4625      	mov	r5, r4
 800a68c:	e7f3      	b.n	800a676 <_dtoa_r+0x92e>
 800a68e:	9b07      	ldr	r3, [sp, #28]
 800a690:	9308      	str	r3, [sp, #32]
 800a692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8104 	beq.w	800a8a2 <_dtoa_r+0xb5a>
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	dd05      	ble.n	800a6aa <_dtoa_r+0x962>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4658      	mov	r0, fp
 800a6a4:	f000 fc6c 	bl	800af80 <__lshift>
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d05a      	beq.n	800a766 <_dtoa_r+0xa1e>
 800a6b0:	4658      	mov	r0, fp
 800a6b2:	6869      	ldr	r1, [r5, #4]
 800a6b4:	f000 fa0e 	bl	800aad4 <_Balloc>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	b928      	cbnz	r0, 800a6c8 <_dtoa_r+0x980>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6c2:	4b83      	ldr	r3, [pc, #524]	@ (800a8d0 <_dtoa_r+0xb88>)
 800a6c4:	f7ff bb54 	b.w	8009d70 <_dtoa_r+0x28>
 800a6c8:	692a      	ldr	r2, [r5, #16]
 800a6ca:	f105 010c 	add.w	r1, r5, #12
 800a6ce:	3202      	adds	r2, #2
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	300c      	adds	r0, #12
 800a6d4:	f001 ff5e 	bl	800c594 <memcpy>
 800a6d8:	2201      	movs	r2, #1
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4658      	mov	r0, fp
 800a6de:	f000 fc4f 	bl	800af80 <__lshift>
 800a6e2:	462f      	mov	r7, r5
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	f10a 0301 	add.w	r3, sl, #1
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	4453      	add	r3, sl
 800a6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6f2:	9b02      	ldr	r3, [sp, #8]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	3b01      	subs	r3, #1
 800a700:	4648      	mov	r0, r9
 800a702:	9302      	str	r3, [sp, #8]
 800a704:	f7ff fa98 	bl	8009c38 <quorem>
 800a708:	4639      	mov	r1, r7
 800a70a:	9008      	str	r0, [sp, #32]
 800a70c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a710:	4648      	mov	r0, r9
 800a712:	f000 fca1 	bl	800b058 <__mcmp>
 800a716:	462a      	mov	r2, r5
 800a718:	9009      	str	r0, [sp, #36]	@ 0x24
 800a71a:	4621      	mov	r1, r4
 800a71c:	4658      	mov	r0, fp
 800a71e:	f000 fcb7 	bl	800b090 <__mdiff>
 800a722:	68c2      	ldr	r2, [r0, #12]
 800a724:	4606      	mov	r6, r0
 800a726:	bb02      	cbnz	r2, 800a76a <_dtoa_r+0xa22>
 800a728:	4601      	mov	r1, r0
 800a72a:	4648      	mov	r0, r9
 800a72c:	f000 fc94 	bl	800b058 <__mcmp>
 800a730:	4602      	mov	r2, r0
 800a732:	4631      	mov	r1, r6
 800a734:	4658      	mov	r0, fp
 800a736:	920c      	str	r2, [sp, #48]	@ 0x30
 800a738:	f000 fa0c 	bl	800ab54 <_Bfree>
 800a73c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a73e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a740:	9e07      	ldr	r6, [sp, #28]
 800a742:	ea43 0102 	orr.w	r1, r3, r2
 800a746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a748:	4319      	orrs	r1, r3
 800a74a:	d110      	bne.n	800a76e <_dtoa_r+0xa26>
 800a74c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a750:	d029      	beq.n	800a7a6 <_dtoa_r+0xa5e>
 800a752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	dd02      	ble.n	800a75e <_dtoa_r+0xa16>
 800a758:	9b08      	ldr	r3, [sp, #32]
 800a75a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a75e:	9b02      	ldr	r3, [sp, #8]
 800a760:	f883 8000 	strb.w	r8, [r3]
 800a764:	e63b      	b.n	800a3de <_dtoa_r+0x696>
 800a766:	4628      	mov	r0, r5
 800a768:	e7bb      	b.n	800a6e2 <_dtoa_r+0x99a>
 800a76a:	2201      	movs	r2, #1
 800a76c:	e7e1      	b.n	800a732 <_dtoa_r+0x9ea>
 800a76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	db04      	blt.n	800a77e <_dtoa_r+0xa36>
 800a774:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a776:	430b      	orrs	r3, r1
 800a778:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a77a:	430b      	orrs	r3, r1
 800a77c:	d120      	bne.n	800a7c0 <_dtoa_r+0xa78>
 800a77e:	2a00      	cmp	r2, #0
 800a780:	dded      	ble.n	800a75e <_dtoa_r+0xa16>
 800a782:	4649      	mov	r1, r9
 800a784:	2201      	movs	r2, #1
 800a786:	4658      	mov	r0, fp
 800a788:	f000 fbfa 	bl	800af80 <__lshift>
 800a78c:	4621      	mov	r1, r4
 800a78e:	4681      	mov	r9, r0
 800a790:	f000 fc62 	bl	800b058 <__mcmp>
 800a794:	2800      	cmp	r0, #0
 800a796:	dc03      	bgt.n	800a7a0 <_dtoa_r+0xa58>
 800a798:	d1e1      	bne.n	800a75e <_dtoa_r+0xa16>
 800a79a:	f018 0f01 	tst.w	r8, #1
 800a79e:	d0de      	beq.n	800a75e <_dtoa_r+0xa16>
 800a7a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7a4:	d1d8      	bne.n	800a758 <_dtoa_r+0xa10>
 800a7a6:	2339      	movs	r3, #57	@ 0x39
 800a7a8:	9a02      	ldr	r2, [sp, #8]
 800a7aa:	7013      	strb	r3, [r2, #0]
 800a7ac:	4633      	mov	r3, r6
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	2a39      	cmp	r2, #57	@ 0x39
 800a7b8:	d052      	beq.n	800a860 <_dtoa_r+0xb18>
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	e60e      	b.n	800a3de <_dtoa_r+0x696>
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	dd07      	ble.n	800a7d4 <_dtoa_r+0xa8c>
 800a7c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7c8:	d0ed      	beq.n	800a7a6 <_dtoa_r+0xa5e>
 800a7ca:	9a02      	ldr	r2, [sp, #8]
 800a7cc:	f108 0301 	add.w	r3, r8, #1
 800a7d0:	7013      	strb	r3, [r2, #0]
 800a7d2:	e604      	b.n	800a3de <_dtoa_r+0x696>
 800a7d4:	9b07      	ldr	r3, [sp, #28]
 800a7d6:	9a07      	ldr	r2, [sp, #28]
 800a7d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a7dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d028      	beq.n	800a834 <_dtoa_r+0xaec>
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	220a      	movs	r2, #10
 800a7e8:	4658      	mov	r0, fp
 800a7ea:	f000 f9d5 	bl	800ab98 <__multadd>
 800a7ee:	42af      	cmp	r7, r5
 800a7f0:	4681      	mov	r9, r0
 800a7f2:	f04f 0300 	mov.w	r3, #0
 800a7f6:	f04f 020a 	mov.w	r2, #10
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4658      	mov	r0, fp
 800a7fe:	d107      	bne.n	800a810 <_dtoa_r+0xac8>
 800a800:	f000 f9ca 	bl	800ab98 <__multadd>
 800a804:	4607      	mov	r7, r0
 800a806:	4605      	mov	r5, r0
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	e774      	b.n	800a6fa <_dtoa_r+0x9b2>
 800a810:	f000 f9c2 	bl	800ab98 <__multadd>
 800a814:	4629      	mov	r1, r5
 800a816:	4607      	mov	r7, r0
 800a818:	2300      	movs	r3, #0
 800a81a:	220a      	movs	r2, #10
 800a81c:	4658      	mov	r0, fp
 800a81e:	f000 f9bb 	bl	800ab98 <__multadd>
 800a822:	4605      	mov	r5, r0
 800a824:	e7f0      	b.n	800a808 <_dtoa_r+0xac0>
 800a826:	9b08      	ldr	r3, [sp, #32]
 800a828:	2700      	movs	r7, #0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bfcc      	ite	gt
 800a82e:	461e      	movgt	r6, r3
 800a830:	2601      	movle	r6, #1
 800a832:	4456      	add	r6, sl
 800a834:	4649      	mov	r1, r9
 800a836:	2201      	movs	r2, #1
 800a838:	4658      	mov	r0, fp
 800a83a:	f000 fba1 	bl	800af80 <__lshift>
 800a83e:	4621      	mov	r1, r4
 800a840:	4681      	mov	r9, r0
 800a842:	f000 fc09 	bl	800b058 <__mcmp>
 800a846:	2800      	cmp	r0, #0
 800a848:	dcb0      	bgt.n	800a7ac <_dtoa_r+0xa64>
 800a84a:	d102      	bne.n	800a852 <_dtoa_r+0xb0a>
 800a84c:	f018 0f01 	tst.w	r8, #1
 800a850:	d1ac      	bne.n	800a7ac <_dtoa_r+0xa64>
 800a852:	4633      	mov	r3, r6
 800a854:	461e      	mov	r6, r3
 800a856:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85a:	2a30      	cmp	r2, #48	@ 0x30
 800a85c:	d0fa      	beq.n	800a854 <_dtoa_r+0xb0c>
 800a85e:	e5be      	b.n	800a3de <_dtoa_r+0x696>
 800a860:	459a      	cmp	sl, r3
 800a862:	d1a4      	bne.n	800a7ae <_dtoa_r+0xa66>
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	3301      	adds	r3, #1
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	2331      	movs	r3, #49	@ 0x31
 800a86c:	f88a 3000 	strb.w	r3, [sl]
 800a870:	e5b5      	b.n	800a3de <_dtoa_r+0x696>
 800a872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a874:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a8d4 <_dtoa_r+0xb8c>
 800a878:	b11b      	cbz	r3, 800a882 <_dtoa_r+0xb3a>
 800a87a:	f10a 0308 	add.w	r3, sl, #8
 800a87e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	4650      	mov	r0, sl
 800a884:	b017      	add	sp, #92	@ 0x5c
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	f77f ae3d 	ble.w	800a50c <_dtoa_r+0x7c4>
 800a892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a894:	930a      	str	r3, [sp, #40]	@ 0x28
 800a896:	2001      	movs	r0, #1
 800a898:	e65b      	b.n	800a552 <_dtoa_r+0x80a>
 800a89a:	9b08      	ldr	r3, [sp, #32]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f77f aed6 	ble.w	800a64e <_dtoa_r+0x906>
 800a8a2:	4656      	mov	r6, sl
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	f7ff f9c6 	bl	8009c38 <quorem>
 800a8ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	f806 8b01 	strb.w	r8, [r6], #1
 800a8b6:	eba6 020a 	sub.w	r2, r6, sl
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	ddb3      	ble.n	800a826 <_dtoa_r+0xade>
 800a8be:	4649      	mov	r1, r9
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4658      	mov	r0, fp
 800a8c6:	f000 f967 	bl	800ab98 <__multadd>
 800a8ca:	4681      	mov	r9, r0
 800a8cc:	e7ea      	b.n	800a8a4 <_dtoa_r+0xb5c>
 800a8ce:	bf00      	nop
 800a8d0:	0800dcb7 	.word	0x0800dcb7
 800a8d4:	0800dc3b 	.word	0x0800dc3b

0800a8d8 <_free_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4605      	mov	r5, r0
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d040      	beq.n	800a962 <_free_r+0x8a>
 800a8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e4:	1f0c      	subs	r4, r1, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfb8      	it	lt
 800a8ea:	18e4      	addlt	r4, r4, r3
 800a8ec:	f000 f8e6 	bl	800aabc <__malloc_lock>
 800a8f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a964 <_free_r+0x8c>)
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	b933      	cbnz	r3, 800a904 <_free_r+0x2c>
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	6014      	str	r4, [r2, #0]
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a900:	f000 b8e2 	b.w	800aac8 <__malloc_unlock>
 800a904:	42a3      	cmp	r3, r4
 800a906:	d908      	bls.n	800a91a <_free_r+0x42>
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	1821      	adds	r1, r4, r0
 800a90c:	428b      	cmp	r3, r1
 800a90e:	bf01      	itttt	eq
 800a910:	6819      	ldreq	r1, [r3, #0]
 800a912:	685b      	ldreq	r3, [r3, #4]
 800a914:	1809      	addeq	r1, r1, r0
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	e7ed      	b.n	800a8f6 <_free_r+0x1e>
 800a91a:	461a      	mov	r2, r3
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	b10b      	cbz	r3, 800a924 <_free_r+0x4c>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d9fa      	bls.n	800a91a <_free_r+0x42>
 800a924:	6811      	ldr	r1, [r2, #0]
 800a926:	1850      	adds	r0, r2, r1
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d10b      	bne.n	800a944 <_free_r+0x6c>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	4401      	add	r1, r0
 800a930:	1850      	adds	r0, r2, r1
 800a932:	4283      	cmp	r3, r0
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	d1e0      	bne.n	800a8fa <_free_r+0x22>
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4408      	add	r0, r1
 800a93e:	6010      	str	r0, [r2, #0]
 800a940:	6053      	str	r3, [r2, #4]
 800a942:	e7da      	b.n	800a8fa <_free_r+0x22>
 800a944:	d902      	bls.n	800a94c <_free_r+0x74>
 800a946:	230c      	movs	r3, #12
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	e7d6      	b.n	800a8fa <_free_r+0x22>
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	1821      	adds	r1, r4, r0
 800a950:	428b      	cmp	r3, r1
 800a952:	bf01      	itttt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	1809      	addeq	r1, r1, r0
 800a95a:	6021      	streq	r1, [r4, #0]
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	6054      	str	r4, [r2, #4]
 800a960:	e7cb      	b.n	800a8fa <_free_r+0x22>
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	200009dc 	.word	0x200009dc

0800a968 <malloc>:
 800a968:	4b02      	ldr	r3, [pc, #8]	@ (800a974 <malloc+0xc>)
 800a96a:	4601      	mov	r1, r0
 800a96c:	6818      	ldr	r0, [r3, #0]
 800a96e:	f000 b825 	b.w	800a9bc <_malloc_r>
 800a972:	bf00      	nop
 800a974:	2000006c 	.word	0x2000006c

0800a978 <sbrk_aligned>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	4e0f      	ldr	r6, [pc, #60]	@ (800a9b8 <sbrk_aligned+0x40>)
 800a97c:	460c      	mov	r4, r1
 800a97e:	6831      	ldr	r1, [r6, #0]
 800a980:	4605      	mov	r5, r0
 800a982:	b911      	cbnz	r1, 800a98a <sbrk_aligned+0x12>
 800a984:	f001 fdf6 	bl	800c574 <_sbrk_r>
 800a988:	6030      	str	r0, [r6, #0]
 800a98a:	4621      	mov	r1, r4
 800a98c:	4628      	mov	r0, r5
 800a98e:	f001 fdf1 	bl	800c574 <_sbrk_r>
 800a992:	1c43      	adds	r3, r0, #1
 800a994:	d103      	bne.n	800a99e <sbrk_aligned+0x26>
 800a996:	f04f 34ff 	mov.w	r4, #4294967295
 800a99a:	4620      	mov	r0, r4
 800a99c:	bd70      	pop	{r4, r5, r6, pc}
 800a99e:	1cc4      	adds	r4, r0, #3
 800a9a0:	f024 0403 	bic.w	r4, r4, #3
 800a9a4:	42a0      	cmp	r0, r4
 800a9a6:	d0f8      	beq.n	800a99a <sbrk_aligned+0x22>
 800a9a8:	1a21      	subs	r1, r4, r0
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f001 fde2 	bl	800c574 <_sbrk_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	d1f2      	bne.n	800a99a <sbrk_aligned+0x22>
 800a9b4:	e7ef      	b.n	800a996 <sbrk_aligned+0x1e>
 800a9b6:	bf00      	nop
 800a9b8:	200009d8 	.word	0x200009d8

0800a9bc <_malloc_r>:
 800a9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	1ccd      	adds	r5, r1, #3
 800a9c2:	f025 0503 	bic.w	r5, r5, #3
 800a9c6:	3508      	adds	r5, #8
 800a9c8:	2d0c      	cmp	r5, #12
 800a9ca:	bf38      	it	cc
 800a9cc:	250c      	movcc	r5, #12
 800a9ce:	2d00      	cmp	r5, #0
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	db01      	blt.n	800a9d8 <_malloc_r+0x1c>
 800a9d4:	42a9      	cmp	r1, r5
 800a9d6:	d904      	bls.n	800a9e2 <_malloc_r+0x26>
 800a9d8:	230c      	movs	r3, #12
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aab8 <_malloc_r+0xfc>
 800a9e6:	f000 f869 	bl	800aabc <__malloc_lock>
 800a9ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a9ee:	461c      	mov	r4, r3
 800a9f0:	bb44      	cbnz	r4, 800aa44 <_malloc_r+0x88>
 800a9f2:	4629      	mov	r1, r5
 800a9f4:	4630      	mov	r0, r6
 800a9f6:	f7ff ffbf 	bl	800a978 <sbrk_aligned>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	d158      	bne.n	800aab2 <_malloc_r+0xf6>
 800aa00:	f8d8 4000 	ldr.w	r4, [r8]
 800aa04:	4627      	mov	r7, r4
 800aa06:	2f00      	cmp	r7, #0
 800aa08:	d143      	bne.n	800aa92 <_malloc_r+0xd6>
 800aa0a:	2c00      	cmp	r4, #0
 800aa0c:	d04b      	beq.n	800aaa6 <_malloc_r+0xea>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	4639      	mov	r1, r7
 800aa12:	4630      	mov	r0, r6
 800aa14:	eb04 0903 	add.w	r9, r4, r3
 800aa18:	f001 fdac 	bl	800c574 <_sbrk_r>
 800aa1c:	4581      	cmp	r9, r0
 800aa1e:	d142      	bne.n	800aaa6 <_malloc_r+0xea>
 800aa20:	6821      	ldr	r1, [r4, #0]
 800aa22:	4630      	mov	r0, r6
 800aa24:	1a6d      	subs	r5, r5, r1
 800aa26:	4629      	mov	r1, r5
 800aa28:	f7ff ffa6 	bl	800a978 <sbrk_aligned>
 800aa2c:	3001      	adds	r0, #1
 800aa2e:	d03a      	beq.n	800aaa6 <_malloc_r+0xea>
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	442b      	add	r3, r5
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	bb62      	cbnz	r2, 800aa98 <_malloc_r+0xdc>
 800aa3e:	f8c8 7000 	str.w	r7, [r8]
 800aa42:	e00f      	b.n	800aa64 <_malloc_r+0xa8>
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	1b52      	subs	r2, r2, r5
 800aa48:	d420      	bmi.n	800aa8c <_malloc_r+0xd0>
 800aa4a:	2a0b      	cmp	r2, #11
 800aa4c:	d917      	bls.n	800aa7e <_malloc_r+0xc2>
 800aa4e:	1961      	adds	r1, r4, r5
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	6025      	str	r5, [r4, #0]
 800aa54:	bf18      	it	ne
 800aa56:	6059      	strne	r1, [r3, #4]
 800aa58:	6863      	ldr	r3, [r4, #4]
 800aa5a:	bf08      	it	eq
 800aa5c:	f8c8 1000 	streq.w	r1, [r8]
 800aa60:	5162      	str	r2, [r4, r5]
 800aa62:	604b      	str	r3, [r1, #4]
 800aa64:	4630      	mov	r0, r6
 800aa66:	f000 f82f 	bl	800aac8 <__malloc_unlock>
 800aa6a:	f104 000b 	add.w	r0, r4, #11
 800aa6e:	1d23      	adds	r3, r4, #4
 800aa70:	f020 0007 	bic.w	r0, r0, #7
 800aa74:	1ac2      	subs	r2, r0, r3
 800aa76:	bf1c      	itt	ne
 800aa78:	1a1b      	subne	r3, r3, r0
 800aa7a:	50a3      	strne	r3, [r4, r2]
 800aa7c:	e7af      	b.n	800a9de <_malloc_r+0x22>
 800aa7e:	6862      	ldr	r2, [r4, #4]
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	bf0c      	ite	eq
 800aa84:	f8c8 2000 	streq.w	r2, [r8]
 800aa88:	605a      	strne	r2, [r3, #4]
 800aa8a:	e7eb      	b.n	800aa64 <_malloc_r+0xa8>
 800aa8c:	4623      	mov	r3, r4
 800aa8e:	6864      	ldr	r4, [r4, #4]
 800aa90:	e7ae      	b.n	800a9f0 <_malloc_r+0x34>
 800aa92:	463c      	mov	r4, r7
 800aa94:	687f      	ldr	r7, [r7, #4]
 800aa96:	e7b6      	b.n	800aa06 <_malloc_r+0x4a>
 800aa98:	461a      	mov	r2, r3
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	d1fb      	bne.n	800aa98 <_malloc_r+0xdc>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6053      	str	r3, [r2, #4]
 800aaa4:	e7de      	b.n	800aa64 <_malloc_r+0xa8>
 800aaa6:	230c      	movs	r3, #12
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	6033      	str	r3, [r6, #0]
 800aaac:	f000 f80c 	bl	800aac8 <__malloc_unlock>
 800aab0:	e794      	b.n	800a9dc <_malloc_r+0x20>
 800aab2:	6005      	str	r5, [r0, #0]
 800aab4:	e7d6      	b.n	800aa64 <_malloc_r+0xa8>
 800aab6:	bf00      	nop
 800aab8:	200009dc 	.word	0x200009dc

0800aabc <__malloc_lock>:
 800aabc:	4801      	ldr	r0, [pc, #4]	@ (800aac4 <__malloc_lock+0x8>)
 800aabe:	f7ff b8a6 	b.w	8009c0e <__retarget_lock_acquire_recursive>
 800aac2:	bf00      	nop
 800aac4:	200009d4 	.word	0x200009d4

0800aac8 <__malloc_unlock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	@ (800aad0 <__malloc_unlock+0x8>)
 800aaca:	f7ff b8a1 	b.w	8009c10 <__retarget_lock_release_recursive>
 800aace:	bf00      	nop
 800aad0:	200009d4 	.word	0x200009d4

0800aad4 <_Balloc>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	69c6      	ldr	r6, [r0, #28]
 800aad8:	4604      	mov	r4, r0
 800aada:	460d      	mov	r5, r1
 800aadc:	b976      	cbnz	r6, 800aafc <_Balloc+0x28>
 800aade:	2010      	movs	r0, #16
 800aae0:	f7ff ff42 	bl	800a968 <malloc>
 800aae4:	4602      	mov	r2, r0
 800aae6:	61e0      	str	r0, [r4, #28]
 800aae8:	b920      	cbnz	r0, 800aaf4 <_Balloc+0x20>
 800aaea:	216b      	movs	r1, #107	@ 0x6b
 800aaec:	4b17      	ldr	r3, [pc, #92]	@ (800ab4c <_Balloc+0x78>)
 800aaee:	4818      	ldr	r0, [pc, #96]	@ (800ab50 <_Balloc+0x7c>)
 800aaf0:	f001 fd64 	bl	800c5bc <__assert_func>
 800aaf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaf8:	6006      	str	r6, [r0, #0]
 800aafa:	60c6      	str	r6, [r0, #12]
 800aafc:	69e6      	ldr	r6, [r4, #28]
 800aafe:	68f3      	ldr	r3, [r6, #12]
 800ab00:	b183      	cbz	r3, 800ab24 <_Balloc+0x50>
 800ab02:	69e3      	ldr	r3, [r4, #28]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab0a:	b9b8      	cbnz	r0, 800ab3c <_Balloc+0x68>
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	fa01 f605 	lsl.w	r6, r1, r5
 800ab12:	1d72      	adds	r2, r6, #5
 800ab14:	4620      	mov	r0, r4
 800ab16:	0092      	lsls	r2, r2, #2
 800ab18:	f001 fd6e 	bl	800c5f8 <_calloc_r>
 800ab1c:	b160      	cbz	r0, 800ab38 <_Balloc+0x64>
 800ab1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab22:	e00e      	b.n	800ab42 <_Balloc+0x6e>
 800ab24:	2221      	movs	r2, #33	@ 0x21
 800ab26:	2104      	movs	r1, #4
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f001 fd65 	bl	800c5f8 <_calloc_r>
 800ab2e:	69e3      	ldr	r3, [r4, #28]
 800ab30:	60f0      	str	r0, [r6, #12]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e4      	bne.n	800ab02 <_Balloc+0x2e>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	6802      	ldr	r2, [r0, #0]
 800ab3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab42:	2300      	movs	r3, #0
 800ab44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab48:	e7f7      	b.n	800ab3a <_Balloc+0x66>
 800ab4a:	bf00      	nop
 800ab4c:	0800dc48 	.word	0x0800dc48
 800ab50:	0800dcc8 	.word	0x0800dcc8

0800ab54 <_Bfree>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	69c6      	ldr	r6, [r0, #28]
 800ab58:	4605      	mov	r5, r0
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	b976      	cbnz	r6, 800ab7c <_Bfree+0x28>
 800ab5e:	2010      	movs	r0, #16
 800ab60:	f7ff ff02 	bl	800a968 <malloc>
 800ab64:	4602      	mov	r2, r0
 800ab66:	61e8      	str	r0, [r5, #28]
 800ab68:	b920      	cbnz	r0, 800ab74 <_Bfree+0x20>
 800ab6a:	218f      	movs	r1, #143	@ 0x8f
 800ab6c:	4b08      	ldr	r3, [pc, #32]	@ (800ab90 <_Bfree+0x3c>)
 800ab6e:	4809      	ldr	r0, [pc, #36]	@ (800ab94 <_Bfree+0x40>)
 800ab70:	f001 fd24 	bl	800c5bc <__assert_func>
 800ab74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab78:	6006      	str	r6, [r0, #0]
 800ab7a:	60c6      	str	r6, [r0, #12]
 800ab7c:	b13c      	cbz	r4, 800ab8e <_Bfree+0x3a>
 800ab7e:	69eb      	ldr	r3, [r5, #28]
 800ab80:	6862      	ldr	r2, [r4, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab88:	6021      	str	r1, [r4, #0]
 800ab8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab8e:	bd70      	pop	{r4, r5, r6, pc}
 800ab90:	0800dc48 	.word	0x0800dc48
 800ab94:	0800dcc8 	.word	0x0800dcc8

0800ab98 <__multadd>:
 800ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4607      	mov	r7, r0
 800ab9e:	460c      	mov	r4, r1
 800aba0:	461e      	mov	r6, r3
 800aba2:	2000      	movs	r0, #0
 800aba4:	690d      	ldr	r5, [r1, #16]
 800aba6:	f101 0c14 	add.w	ip, r1, #20
 800abaa:	f8dc 3000 	ldr.w	r3, [ip]
 800abae:	3001      	adds	r0, #1
 800abb0:	b299      	uxth	r1, r3
 800abb2:	fb02 6101 	mla	r1, r2, r1, r6
 800abb6:	0c1e      	lsrs	r6, r3, #16
 800abb8:	0c0b      	lsrs	r3, r1, #16
 800abba:	fb02 3306 	mla	r3, r2, r6, r3
 800abbe:	b289      	uxth	r1, r1
 800abc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abc4:	4285      	cmp	r5, r0
 800abc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abca:	f84c 1b04 	str.w	r1, [ip], #4
 800abce:	dcec      	bgt.n	800abaa <__multadd+0x12>
 800abd0:	b30e      	cbz	r6, 800ac16 <__multadd+0x7e>
 800abd2:	68a3      	ldr	r3, [r4, #8]
 800abd4:	42ab      	cmp	r3, r5
 800abd6:	dc19      	bgt.n	800ac0c <__multadd+0x74>
 800abd8:	6861      	ldr	r1, [r4, #4]
 800abda:	4638      	mov	r0, r7
 800abdc:	3101      	adds	r1, #1
 800abde:	f7ff ff79 	bl	800aad4 <_Balloc>
 800abe2:	4680      	mov	r8, r0
 800abe4:	b928      	cbnz	r0, 800abf2 <__multadd+0x5a>
 800abe6:	4602      	mov	r2, r0
 800abe8:	21ba      	movs	r1, #186	@ 0xba
 800abea:	4b0c      	ldr	r3, [pc, #48]	@ (800ac1c <__multadd+0x84>)
 800abec:	480c      	ldr	r0, [pc, #48]	@ (800ac20 <__multadd+0x88>)
 800abee:	f001 fce5 	bl	800c5bc <__assert_func>
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	f104 010c 	add.w	r1, r4, #12
 800abf8:	3202      	adds	r2, #2
 800abfa:	0092      	lsls	r2, r2, #2
 800abfc:	300c      	adds	r0, #12
 800abfe:	f001 fcc9 	bl	800c594 <memcpy>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4638      	mov	r0, r7
 800ac06:	f7ff ffa5 	bl	800ab54 <_Bfree>
 800ac0a:	4644      	mov	r4, r8
 800ac0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac10:	3501      	adds	r5, #1
 800ac12:	615e      	str	r6, [r3, #20]
 800ac14:	6125      	str	r5, [r4, #16]
 800ac16:	4620      	mov	r0, r4
 800ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1c:	0800dcb7 	.word	0x0800dcb7
 800ac20:	0800dcc8 	.word	0x0800dcc8

0800ac24 <__s2b>:
 800ac24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac28:	4615      	mov	r5, r2
 800ac2a:	2209      	movs	r2, #9
 800ac2c:	461f      	mov	r7, r3
 800ac2e:	3308      	adds	r3, #8
 800ac30:	460c      	mov	r4, r1
 800ac32:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac36:	4606      	mov	r6, r0
 800ac38:	2201      	movs	r2, #1
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	db09      	blt.n	800ac54 <__s2b+0x30>
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ff47 	bl	800aad4 <_Balloc>
 800ac46:	b940      	cbnz	r0, 800ac5a <__s2b+0x36>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	21d3      	movs	r1, #211	@ 0xd3
 800ac4c:	4b18      	ldr	r3, [pc, #96]	@ (800acb0 <__s2b+0x8c>)
 800ac4e:	4819      	ldr	r0, [pc, #100]	@ (800acb4 <__s2b+0x90>)
 800ac50:	f001 fcb4 	bl	800c5bc <__assert_func>
 800ac54:	0052      	lsls	r2, r2, #1
 800ac56:	3101      	adds	r1, #1
 800ac58:	e7f0      	b.n	800ac3c <__s2b+0x18>
 800ac5a:	9b08      	ldr	r3, [sp, #32]
 800ac5c:	2d09      	cmp	r5, #9
 800ac5e:	6143      	str	r3, [r0, #20]
 800ac60:	f04f 0301 	mov.w	r3, #1
 800ac64:	6103      	str	r3, [r0, #16]
 800ac66:	dd16      	ble.n	800ac96 <__s2b+0x72>
 800ac68:	f104 0909 	add.w	r9, r4, #9
 800ac6c:	46c8      	mov	r8, r9
 800ac6e:	442c      	add	r4, r5
 800ac70:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac74:	4601      	mov	r1, r0
 800ac76:	220a      	movs	r2, #10
 800ac78:	4630      	mov	r0, r6
 800ac7a:	3b30      	subs	r3, #48	@ 0x30
 800ac7c:	f7ff ff8c 	bl	800ab98 <__multadd>
 800ac80:	45a0      	cmp	r8, r4
 800ac82:	d1f5      	bne.n	800ac70 <__s2b+0x4c>
 800ac84:	f1a5 0408 	sub.w	r4, r5, #8
 800ac88:	444c      	add	r4, r9
 800ac8a:	1b2d      	subs	r5, r5, r4
 800ac8c:	1963      	adds	r3, r4, r5
 800ac8e:	42bb      	cmp	r3, r7
 800ac90:	db04      	blt.n	800ac9c <__s2b+0x78>
 800ac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac96:	2509      	movs	r5, #9
 800ac98:	340a      	adds	r4, #10
 800ac9a:	e7f6      	b.n	800ac8a <__s2b+0x66>
 800ac9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aca0:	4601      	mov	r1, r0
 800aca2:	220a      	movs	r2, #10
 800aca4:	4630      	mov	r0, r6
 800aca6:	3b30      	subs	r3, #48	@ 0x30
 800aca8:	f7ff ff76 	bl	800ab98 <__multadd>
 800acac:	e7ee      	b.n	800ac8c <__s2b+0x68>
 800acae:	bf00      	nop
 800acb0:	0800dcb7 	.word	0x0800dcb7
 800acb4:	0800dcc8 	.word	0x0800dcc8

0800acb8 <__hi0bits>:
 800acb8:	4603      	mov	r3, r0
 800acba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800acbe:	bf3a      	itte	cc
 800acc0:	0403      	lslcc	r3, r0, #16
 800acc2:	2010      	movcc	r0, #16
 800acc4:	2000      	movcs	r0, #0
 800acc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800acca:	bf3c      	itt	cc
 800accc:	021b      	lslcc	r3, r3, #8
 800acce:	3008      	addcc	r0, #8
 800acd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acd4:	bf3c      	itt	cc
 800acd6:	011b      	lslcc	r3, r3, #4
 800acd8:	3004      	addcc	r0, #4
 800acda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acde:	bf3c      	itt	cc
 800ace0:	009b      	lslcc	r3, r3, #2
 800ace2:	3002      	addcc	r0, #2
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	db05      	blt.n	800acf4 <__hi0bits+0x3c>
 800ace8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800acec:	f100 0001 	add.w	r0, r0, #1
 800acf0:	bf08      	it	eq
 800acf2:	2020      	moveq	r0, #32
 800acf4:	4770      	bx	lr

0800acf6 <__lo0bits>:
 800acf6:	6803      	ldr	r3, [r0, #0]
 800acf8:	4602      	mov	r2, r0
 800acfa:	f013 0007 	ands.w	r0, r3, #7
 800acfe:	d00b      	beq.n	800ad18 <__lo0bits+0x22>
 800ad00:	07d9      	lsls	r1, r3, #31
 800ad02:	d421      	bmi.n	800ad48 <__lo0bits+0x52>
 800ad04:	0798      	lsls	r0, r3, #30
 800ad06:	bf49      	itett	mi
 800ad08:	085b      	lsrmi	r3, r3, #1
 800ad0a:	089b      	lsrpl	r3, r3, #2
 800ad0c:	2001      	movmi	r0, #1
 800ad0e:	6013      	strmi	r3, [r2, #0]
 800ad10:	bf5c      	itt	pl
 800ad12:	2002      	movpl	r0, #2
 800ad14:	6013      	strpl	r3, [r2, #0]
 800ad16:	4770      	bx	lr
 800ad18:	b299      	uxth	r1, r3
 800ad1a:	b909      	cbnz	r1, 800ad20 <__lo0bits+0x2a>
 800ad1c:	2010      	movs	r0, #16
 800ad1e:	0c1b      	lsrs	r3, r3, #16
 800ad20:	b2d9      	uxtb	r1, r3
 800ad22:	b909      	cbnz	r1, 800ad28 <__lo0bits+0x32>
 800ad24:	3008      	adds	r0, #8
 800ad26:	0a1b      	lsrs	r3, r3, #8
 800ad28:	0719      	lsls	r1, r3, #28
 800ad2a:	bf04      	itt	eq
 800ad2c:	091b      	lsreq	r3, r3, #4
 800ad2e:	3004      	addeq	r0, #4
 800ad30:	0799      	lsls	r1, r3, #30
 800ad32:	bf04      	itt	eq
 800ad34:	089b      	lsreq	r3, r3, #2
 800ad36:	3002      	addeq	r0, #2
 800ad38:	07d9      	lsls	r1, r3, #31
 800ad3a:	d403      	bmi.n	800ad44 <__lo0bits+0x4e>
 800ad3c:	085b      	lsrs	r3, r3, #1
 800ad3e:	f100 0001 	add.w	r0, r0, #1
 800ad42:	d003      	beq.n	800ad4c <__lo0bits+0x56>
 800ad44:	6013      	str	r3, [r2, #0]
 800ad46:	4770      	bx	lr
 800ad48:	2000      	movs	r0, #0
 800ad4a:	4770      	bx	lr
 800ad4c:	2020      	movs	r0, #32
 800ad4e:	4770      	bx	lr

0800ad50 <__i2b>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	460c      	mov	r4, r1
 800ad54:	2101      	movs	r1, #1
 800ad56:	f7ff febd 	bl	800aad4 <_Balloc>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	b928      	cbnz	r0, 800ad6a <__i2b+0x1a>
 800ad5e:	f240 1145 	movw	r1, #325	@ 0x145
 800ad62:	4b04      	ldr	r3, [pc, #16]	@ (800ad74 <__i2b+0x24>)
 800ad64:	4804      	ldr	r0, [pc, #16]	@ (800ad78 <__i2b+0x28>)
 800ad66:	f001 fc29 	bl	800c5bc <__assert_func>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	6144      	str	r4, [r0, #20]
 800ad6e:	6103      	str	r3, [r0, #16]
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	bf00      	nop
 800ad74:	0800dcb7 	.word	0x0800dcb7
 800ad78:	0800dcc8 	.word	0x0800dcc8

0800ad7c <__multiply>:
 800ad7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad80:	4614      	mov	r4, r2
 800ad82:	690a      	ldr	r2, [r1, #16]
 800ad84:	6923      	ldr	r3, [r4, #16]
 800ad86:	460f      	mov	r7, r1
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	bfa2      	ittt	ge
 800ad8c:	4623      	movge	r3, r4
 800ad8e:	460c      	movge	r4, r1
 800ad90:	461f      	movge	r7, r3
 800ad92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ad96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ad9a:	68a3      	ldr	r3, [r4, #8]
 800ad9c:	6861      	ldr	r1, [r4, #4]
 800ad9e:	eb0a 0609 	add.w	r6, sl, r9
 800ada2:	42b3      	cmp	r3, r6
 800ada4:	b085      	sub	sp, #20
 800ada6:	bfb8      	it	lt
 800ada8:	3101      	addlt	r1, #1
 800adaa:	f7ff fe93 	bl	800aad4 <_Balloc>
 800adae:	b930      	cbnz	r0, 800adbe <__multiply+0x42>
 800adb0:	4602      	mov	r2, r0
 800adb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800adb6:	4b43      	ldr	r3, [pc, #268]	@ (800aec4 <__multiply+0x148>)
 800adb8:	4843      	ldr	r0, [pc, #268]	@ (800aec8 <__multiply+0x14c>)
 800adba:	f001 fbff 	bl	800c5bc <__assert_func>
 800adbe:	f100 0514 	add.w	r5, r0, #20
 800adc2:	462b      	mov	r3, r5
 800adc4:	2200      	movs	r2, #0
 800adc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adca:	4543      	cmp	r3, r8
 800adcc:	d321      	bcc.n	800ae12 <__multiply+0x96>
 800adce:	f107 0114 	add.w	r1, r7, #20
 800add2:	f104 0214 	add.w	r2, r4, #20
 800add6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800adda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800adde:	9302      	str	r3, [sp, #8]
 800ade0:	1b13      	subs	r3, r2, r4
 800ade2:	3b15      	subs	r3, #21
 800ade4:	f023 0303 	bic.w	r3, r3, #3
 800ade8:	3304      	adds	r3, #4
 800adea:	f104 0715 	add.w	r7, r4, #21
 800adee:	42ba      	cmp	r2, r7
 800adf0:	bf38      	it	cc
 800adf2:	2304      	movcc	r3, #4
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	9b02      	ldr	r3, [sp, #8]
 800adf8:	9103      	str	r1, [sp, #12]
 800adfa:	428b      	cmp	r3, r1
 800adfc:	d80c      	bhi.n	800ae18 <__multiply+0x9c>
 800adfe:	2e00      	cmp	r6, #0
 800ae00:	dd03      	ble.n	800ae0a <__multiply+0x8e>
 800ae02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d05a      	beq.n	800aec0 <__multiply+0x144>
 800ae0a:	6106      	str	r6, [r0, #16]
 800ae0c:	b005      	add	sp, #20
 800ae0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae12:	f843 2b04 	str.w	r2, [r3], #4
 800ae16:	e7d8      	b.n	800adca <__multiply+0x4e>
 800ae18:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae1c:	f1ba 0f00 	cmp.w	sl, #0
 800ae20:	d023      	beq.n	800ae6a <__multiply+0xee>
 800ae22:	46a9      	mov	r9, r5
 800ae24:	f04f 0c00 	mov.w	ip, #0
 800ae28:	f104 0e14 	add.w	lr, r4, #20
 800ae2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ae30:	f8d9 3000 	ldr.w	r3, [r9]
 800ae34:	fa1f fb87 	uxth.w	fp, r7
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ae3e:	4463      	add	r3, ip
 800ae40:	f8d9 c000 	ldr.w	ip, [r9]
 800ae44:	0c3f      	lsrs	r7, r7, #16
 800ae46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ae4a:	fb0a c707 	mla	r7, sl, r7, ip
 800ae4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae58:	4572      	cmp	r2, lr
 800ae5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ae5e:	f849 3b04 	str.w	r3, [r9], #4
 800ae62:	d8e3      	bhi.n	800ae2c <__multiply+0xb0>
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	f845 c003 	str.w	ip, [r5, r3]
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	3104      	adds	r1, #4
 800ae6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ae72:	f1b9 0f00 	cmp.w	r9, #0
 800ae76:	d021      	beq.n	800aebc <__multiply+0x140>
 800ae78:	46ae      	mov	lr, r5
 800ae7a:	f04f 0a00 	mov.w	sl, #0
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	f104 0c14 	add.w	ip, r4, #20
 800ae84:	f8bc b000 	ldrh.w	fp, [ip]
 800ae88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	fb09 770b 	mla	r7, r9, fp, r7
 800ae92:	4457      	add	r7, sl
 800ae94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ae98:	f84e 3b04 	str.w	r3, [lr], #4
 800ae9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aea4:	f8be 3000 	ldrh.w	r3, [lr]
 800aea8:	4562      	cmp	r2, ip
 800aeaa:	fb09 330a 	mla	r3, r9, sl, r3
 800aeae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aeb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aeb6:	d8e5      	bhi.n	800ae84 <__multiply+0x108>
 800aeb8:	9f01      	ldr	r7, [sp, #4]
 800aeba:	51eb      	str	r3, [r5, r7]
 800aebc:	3504      	adds	r5, #4
 800aebe:	e79a      	b.n	800adf6 <__multiply+0x7a>
 800aec0:	3e01      	subs	r6, #1
 800aec2:	e79c      	b.n	800adfe <__multiply+0x82>
 800aec4:	0800dcb7 	.word	0x0800dcb7
 800aec8:	0800dcc8 	.word	0x0800dcc8

0800aecc <__pow5mult>:
 800aecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	4615      	mov	r5, r2
 800aed2:	f012 0203 	ands.w	r2, r2, #3
 800aed6:	4607      	mov	r7, r0
 800aed8:	460e      	mov	r6, r1
 800aeda:	d007      	beq.n	800aeec <__pow5mult+0x20>
 800aedc:	4c25      	ldr	r4, [pc, #148]	@ (800af74 <__pow5mult+0xa8>)
 800aede:	3a01      	subs	r2, #1
 800aee0:	2300      	movs	r3, #0
 800aee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aee6:	f7ff fe57 	bl	800ab98 <__multadd>
 800aeea:	4606      	mov	r6, r0
 800aeec:	10ad      	asrs	r5, r5, #2
 800aeee:	d03d      	beq.n	800af6c <__pow5mult+0xa0>
 800aef0:	69fc      	ldr	r4, [r7, #28]
 800aef2:	b97c      	cbnz	r4, 800af14 <__pow5mult+0x48>
 800aef4:	2010      	movs	r0, #16
 800aef6:	f7ff fd37 	bl	800a968 <malloc>
 800aefa:	4602      	mov	r2, r0
 800aefc:	61f8      	str	r0, [r7, #28]
 800aefe:	b928      	cbnz	r0, 800af0c <__pow5mult+0x40>
 800af00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af04:	4b1c      	ldr	r3, [pc, #112]	@ (800af78 <__pow5mult+0xac>)
 800af06:	481d      	ldr	r0, [pc, #116]	@ (800af7c <__pow5mult+0xb0>)
 800af08:	f001 fb58 	bl	800c5bc <__assert_func>
 800af0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af10:	6004      	str	r4, [r0, #0]
 800af12:	60c4      	str	r4, [r0, #12]
 800af14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af1c:	b94c      	cbnz	r4, 800af32 <__pow5mult+0x66>
 800af1e:	f240 2171 	movw	r1, #625	@ 0x271
 800af22:	4638      	mov	r0, r7
 800af24:	f7ff ff14 	bl	800ad50 <__i2b>
 800af28:	2300      	movs	r3, #0
 800af2a:	4604      	mov	r4, r0
 800af2c:	f8c8 0008 	str.w	r0, [r8, #8]
 800af30:	6003      	str	r3, [r0, #0]
 800af32:	f04f 0900 	mov.w	r9, #0
 800af36:	07eb      	lsls	r3, r5, #31
 800af38:	d50a      	bpl.n	800af50 <__pow5mult+0x84>
 800af3a:	4631      	mov	r1, r6
 800af3c:	4622      	mov	r2, r4
 800af3e:	4638      	mov	r0, r7
 800af40:	f7ff ff1c 	bl	800ad7c <__multiply>
 800af44:	4680      	mov	r8, r0
 800af46:	4631      	mov	r1, r6
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff fe03 	bl	800ab54 <_Bfree>
 800af4e:	4646      	mov	r6, r8
 800af50:	106d      	asrs	r5, r5, #1
 800af52:	d00b      	beq.n	800af6c <__pow5mult+0xa0>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	b938      	cbnz	r0, 800af68 <__pow5mult+0x9c>
 800af58:	4622      	mov	r2, r4
 800af5a:	4621      	mov	r1, r4
 800af5c:	4638      	mov	r0, r7
 800af5e:	f7ff ff0d 	bl	800ad7c <__multiply>
 800af62:	6020      	str	r0, [r4, #0]
 800af64:	f8c0 9000 	str.w	r9, [r0]
 800af68:	4604      	mov	r4, r0
 800af6a:	e7e4      	b.n	800af36 <__pow5mult+0x6a>
 800af6c:	4630      	mov	r0, r6
 800af6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af72:	bf00      	nop
 800af74:	0800dd24 	.word	0x0800dd24
 800af78:	0800dc48 	.word	0x0800dc48
 800af7c:	0800dcc8 	.word	0x0800dcc8

0800af80 <__lshift>:
 800af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af84:	460c      	mov	r4, r1
 800af86:	4607      	mov	r7, r0
 800af88:	4691      	mov	r9, r2
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	6849      	ldr	r1, [r1, #4]
 800af8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af92:	68a3      	ldr	r3, [r4, #8]
 800af94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af98:	f108 0601 	add.w	r6, r8, #1
 800af9c:	42b3      	cmp	r3, r6
 800af9e:	db0b      	blt.n	800afb8 <__lshift+0x38>
 800afa0:	4638      	mov	r0, r7
 800afa2:	f7ff fd97 	bl	800aad4 <_Balloc>
 800afa6:	4605      	mov	r5, r0
 800afa8:	b948      	cbnz	r0, 800afbe <__lshift+0x3e>
 800afaa:	4602      	mov	r2, r0
 800afac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800afb0:	4b27      	ldr	r3, [pc, #156]	@ (800b050 <__lshift+0xd0>)
 800afb2:	4828      	ldr	r0, [pc, #160]	@ (800b054 <__lshift+0xd4>)
 800afb4:	f001 fb02 	bl	800c5bc <__assert_func>
 800afb8:	3101      	adds	r1, #1
 800afba:	005b      	lsls	r3, r3, #1
 800afbc:	e7ee      	b.n	800af9c <__lshift+0x1c>
 800afbe:	2300      	movs	r3, #0
 800afc0:	f100 0114 	add.w	r1, r0, #20
 800afc4:	f100 0210 	add.w	r2, r0, #16
 800afc8:	4618      	mov	r0, r3
 800afca:	4553      	cmp	r3, sl
 800afcc:	db33      	blt.n	800b036 <__lshift+0xb6>
 800afce:	6920      	ldr	r0, [r4, #16]
 800afd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afd4:	f104 0314 	add.w	r3, r4, #20
 800afd8:	f019 091f 	ands.w	r9, r9, #31
 800afdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afe4:	d02b      	beq.n	800b03e <__lshift+0xbe>
 800afe6:	468a      	mov	sl, r1
 800afe8:	2200      	movs	r2, #0
 800afea:	f1c9 0e20 	rsb	lr, r9, #32
 800afee:	6818      	ldr	r0, [r3, #0]
 800aff0:	fa00 f009 	lsl.w	r0, r0, r9
 800aff4:	4310      	orrs	r0, r2
 800aff6:	f84a 0b04 	str.w	r0, [sl], #4
 800affa:	f853 2b04 	ldr.w	r2, [r3], #4
 800affe:	459c      	cmp	ip, r3
 800b000:	fa22 f20e 	lsr.w	r2, r2, lr
 800b004:	d8f3      	bhi.n	800afee <__lshift+0x6e>
 800b006:	ebac 0304 	sub.w	r3, ip, r4
 800b00a:	3b15      	subs	r3, #21
 800b00c:	f023 0303 	bic.w	r3, r3, #3
 800b010:	3304      	adds	r3, #4
 800b012:	f104 0015 	add.w	r0, r4, #21
 800b016:	4584      	cmp	ip, r0
 800b018:	bf38      	it	cc
 800b01a:	2304      	movcc	r3, #4
 800b01c:	50ca      	str	r2, [r1, r3]
 800b01e:	b10a      	cbz	r2, 800b024 <__lshift+0xa4>
 800b020:	f108 0602 	add.w	r6, r8, #2
 800b024:	3e01      	subs	r6, #1
 800b026:	4638      	mov	r0, r7
 800b028:	4621      	mov	r1, r4
 800b02a:	612e      	str	r6, [r5, #16]
 800b02c:	f7ff fd92 	bl	800ab54 <_Bfree>
 800b030:	4628      	mov	r0, r5
 800b032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b036:	f842 0f04 	str.w	r0, [r2, #4]!
 800b03a:	3301      	adds	r3, #1
 800b03c:	e7c5      	b.n	800afca <__lshift+0x4a>
 800b03e:	3904      	subs	r1, #4
 800b040:	f853 2b04 	ldr.w	r2, [r3], #4
 800b044:	459c      	cmp	ip, r3
 800b046:	f841 2f04 	str.w	r2, [r1, #4]!
 800b04a:	d8f9      	bhi.n	800b040 <__lshift+0xc0>
 800b04c:	e7ea      	b.n	800b024 <__lshift+0xa4>
 800b04e:	bf00      	nop
 800b050:	0800dcb7 	.word	0x0800dcb7
 800b054:	0800dcc8 	.word	0x0800dcc8

0800b058 <__mcmp>:
 800b058:	4603      	mov	r3, r0
 800b05a:	690a      	ldr	r2, [r1, #16]
 800b05c:	6900      	ldr	r0, [r0, #16]
 800b05e:	b530      	push	{r4, r5, lr}
 800b060:	1a80      	subs	r0, r0, r2
 800b062:	d10e      	bne.n	800b082 <__mcmp+0x2a>
 800b064:	3314      	adds	r3, #20
 800b066:	3114      	adds	r1, #20
 800b068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b06c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b078:	4295      	cmp	r5, r2
 800b07a:	d003      	beq.n	800b084 <__mcmp+0x2c>
 800b07c:	d205      	bcs.n	800b08a <__mcmp+0x32>
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	bd30      	pop	{r4, r5, pc}
 800b084:	42a3      	cmp	r3, r4
 800b086:	d3f3      	bcc.n	800b070 <__mcmp+0x18>
 800b088:	e7fb      	b.n	800b082 <__mcmp+0x2a>
 800b08a:	2001      	movs	r0, #1
 800b08c:	e7f9      	b.n	800b082 <__mcmp+0x2a>
	...

0800b090 <__mdiff>:
 800b090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b094:	4689      	mov	r9, r1
 800b096:	4606      	mov	r6, r0
 800b098:	4611      	mov	r1, r2
 800b09a:	4648      	mov	r0, r9
 800b09c:	4614      	mov	r4, r2
 800b09e:	f7ff ffdb 	bl	800b058 <__mcmp>
 800b0a2:	1e05      	subs	r5, r0, #0
 800b0a4:	d112      	bne.n	800b0cc <__mdiff+0x3c>
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff fd13 	bl	800aad4 <_Balloc>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	b928      	cbnz	r0, 800b0be <__mdiff+0x2e>
 800b0b2:	f240 2137 	movw	r1, #567	@ 0x237
 800b0b6:	4b3e      	ldr	r3, [pc, #248]	@ (800b1b0 <__mdiff+0x120>)
 800b0b8:	483e      	ldr	r0, [pc, #248]	@ (800b1b4 <__mdiff+0x124>)
 800b0ba:	f001 fa7f 	bl	800c5bc <__assert_func>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	b003      	add	sp, #12
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	bfbc      	itt	lt
 800b0ce:	464b      	movlt	r3, r9
 800b0d0:	46a1      	movlt	r9, r4
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b0d8:	bfba      	itte	lt
 800b0da:	461c      	movlt	r4, r3
 800b0dc:	2501      	movlt	r5, #1
 800b0de:	2500      	movge	r5, #0
 800b0e0:	f7ff fcf8 	bl	800aad4 <_Balloc>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	b918      	cbnz	r0, 800b0f0 <__mdiff+0x60>
 800b0e8:	f240 2145 	movw	r1, #581	@ 0x245
 800b0ec:	4b30      	ldr	r3, [pc, #192]	@ (800b1b0 <__mdiff+0x120>)
 800b0ee:	e7e3      	b.n	800b0b8 <__mdiff+0x28>
 800b0f0:	f100 0b14 	add.w	fp, r0, #20
 800b0f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b0f8:	f109 0310 	add.w	r3, r9, #16
 800b0fc:	60c5      	str	r5, [r0, #12]
 800b0fe:	f04f 0c00 	mov.w	ip, #0
 800b102:	f109 0514 	add.w	r5, r9, #20
 800b106:	46d9      	mov	r9, fp
 800b108:	6926      	ldr	r6, [r4, #16]
 800b10a:	f104 0e14 	add.w	lr, r4, #20
 800b10e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b112:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b11e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b122:	b281      	uxth	r1, r0
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	fa1f f38a 	uxth.w	r3, sl
 800b12a:	1a5b      	subs	r3, r3, r1
 800b12c:	0c00      	lsrs	r0, r0, #16
 800b12e:	4463      	add	r3, ip
 800b130:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b134:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b138:	b29b      	uxth	r3, r3
 800b13a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b13e:	4576      	cmp	r6, lr
 800b140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b144:	f849 3b04 	str.w	r3, [r9], #4
 800b148:	d8e6      	bhi.n	800b118 <__mdiff+0x88>
 800b14a:	1b33      	subs	r3, r6, r4
 800b14c:	3b15      	subs	r3, #21
 800b14e:	f023 0303 	bic.w	r3, r3, #3
 800b152:	3415      	adds	r4, #21
 800b154:	3304      	adds	r3, #4
 800b156:	42a6      	cmp	r6, r4
 800b158:	bf38      	it	cc
 800b15a:	2304      	movcc	r3, #4
 800b15c:	441d      	add	r5, r3
 800b15e:	445b      	add	r3, fp
 800b160:	461e      	mov	r6, r3
 800b162:	462c      	mov	r4, r5
 800b164:	4544      	cmp	r4, r8
 800b166:	d30e      	bcc.n	800b186 <__mdiff+0xf6>
 800b168:	f108 0103 	add.w	r1, r8, #3
 800b16c:	1b49      	subs	r1, r1, r5
 800b16e:	f021 0103 	bic.w	r1, r1, #3
 800b172:	3d03      	subs	r5, #3
 800b174:	45a8      	cmp	r8, r5
 800b176:	bf38      	it	cc
 800b178:	2100      	movcc	r1, #0
 800b17a:	440b      	add	r3, r1
 800b17c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b180:	b199      	cbz	r1, 800b1aa <__mdiff+0x11a>
 800b182:	6117      	str	r7, [r2, #16]
 800b184:	e79e      	b.n	800b0c4 <__mdiff+0x34>
 800b186:	46e6      	mov	lr, ip
 800b188:	f854 1b04 	ldr.w	r1, [r4], #4
 800b18c:	fa1f fc81 	uxth.w	ip, r1
 800b190:	44f4      	add	ip, lr
 800b192:	0c08      	lsrs	r0, r1, #16
 800b194:	4471      	add	r1, lr
 800b196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b19a:	b289      	uxth	r1, r1
 800b19c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b1a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1a4:	f846 1b04 	str.w	r1, [r6], #4
 800b1a8:	e7dc      	b.n	800b164 <__mdiff+0xd4>
 800b1aa:	3f01      	subs	r7, #1
 800b1ac:	e7e6      	b.n	800b17c <__mdiff+0xec>
 800b1ae:	bf00      	nop
 800b1b0:	0800dcb7 	.word	0x0800dcb7
 800b1b4:	0800dcc8 	.word	0x0800dcc8

0800b1b8 <__ulp>:
 800b1b8:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f4 <__ulp+0x3c>)
 800b1ba:	400b      	ands	r3, r1
 800b1bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	dc08      	bgt.n	800b1d6 <__ulp+0x1e>
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b1ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1ce:	da04      	bge.n	800b1da <__ulp+0x22>
 800b1d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b1d4:	4113      	asrs	r3, r2
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	e008      	b.n	800b1ec <__ulp+0x34>
 800b1da:	f1a2 0314 	sub.w	r3, r2, #20
 800b1de:	2b1e      	cmp	r3, #30
 800b1e0:	bfd6      	itet	le
 800b1e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b1e6:	2201      	movgt	r2, #1
 800b1e8:	40da      	lsrle	r2, r3
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	7ff00000 	.word	0x7ff00000

0800b1f8 <__b2d>:
 800b1f8:	6902      	ldr	r2, [r0, #16]
 800b1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fc:	f100 0614 	add.w	r6, r0, #20
 800b200:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b204:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b208:	4f1e      	ldr	r7, [pc, #120]	@ (800b284 <__b2d+0x8c>)
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7ff fd54 	bl	800acb8 <__hi0bits>
 800b210:	4603      	mov	r3, r0
 800b212:	f1c0 0020 	rsb	r0, r0, #32
 800b216:	2b0a      	cmp	r3, #10
 800b218:	f1a2 0504 	sub.w	r5, r2, #4
 800b21c:	6008      	str	r0, [r1, #0]
 800b21e:	dc12      	bgt.n	800b246 <__b2d+0x4e>
 800b220:	42ae      	cmp	r6, r5
 800b222:	bf2c      	ite	cs
 800b224:	2200      	movcs	r2, #0
 800b226:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b22a:	f1c3 0c0b 	rsb	ip, r3, #11
 800b22e:	3315      	adds	r3, #21
 800b230:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b234:	fa04 f303 	lsl.w	r3, r4, r3
 800b238:	fa22 f20c 	lsr.w	r2, r2, ip
 800b23c:	ea4e 0107 	orr.w	r1, lr, r7
 800b240:	431a      	orrs	r2, r3
 800b242:	4610      	mov	r0, r2
 800b244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b246:	42ae      	cmp	r6, r5
 800b248:	bf36      	itet	cc
 800b24a:	f1a2 0508 	subcc.w	r5, r2, #8
 800b24e:	2200      	movcs	r2, #0
 800b250:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b254:	3b0b      	subs	r3, #11
 800b256:	d012      	beq.n	800b27e <__b2d+0x86>
 800b258:	f1c3 0720 	rsb	r7, r3, #32
 800b25c:	fa22 f107 	lsr.w	r1, r2, r7
 800b260:	409c      	lsls	r4, r3
 800b262:	430c      	orrs	r4, r1
 800b264:	42b5      	cmp	r5, r6
 800b266:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b26a:	bf94      	ite	ls
 800b26c:	2400      	movls	r4, #0
 800b26e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b272:	409a      	lsls	r2, r3
 800b274:	40fc      	lsrs	r4, r7
 800b276:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b27a:	4322      	orrs	r2, r4
 800b27c:	e7e1      	b.n	800b242 <__b2d+0x4a>
 800b27e:	ea44 0107 	orr.w	r1, r4, r7
 800b282:	e7de      	b.n	800b242 <__b2d+0x4a>
 800b284:	3ff00000 	.word	0x3ff00000

0800b288 <__d2b>:
 800b288:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b28c:	2101      	movs	r1, #1
 800b28e:	4690      	mov	r8, r2
 800b290:	4699      	mov	r9, r3
 800b292:	9e08      	ldr	r6, [sp, #32]
 800b294:	f7ff fc1e 	bl	800aad4 <_Balloc>
 800b298:	4604      	mov	r4, r0
 800b29a:	b930      	cbnz	r0, 800b2aa <__d2b+0x22>
 800b29c:	4602      	mov	r2, r0
 800b29e:	f240 310f 	movw	r1, #783	@ 0x30f
 800b2a2:	4b23      	ldr	r3, [pc, #140]	@ (800b330 <__d2b+0xa8>)
 800b2a4:	4823      	ldr	r0, [pc, #140]	@ (800b334 <__d2b+0xac>)
 800b2a6:	f001 f989 	bl	800c5bc <__assert_func>
 800b2aa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b2ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b2b2:	b10d      	cbz	r5, 800b2b8 <__d2b+0x30>
 800b2b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2b8:	9301      	str	r3, [sp, #4]
 800b2ba:	f1b8 0300 	subs.w	r3, r8, #0
 800b2be:	d024      	beq.n	800b30a <__d2b+0x82>
 800b2c0:	4668      	mov	r0, sp
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	f7ff fd17 	bl	800acf6 <__lo0bits>
 800b2c8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b2cc:	b1d8      	cbz	r0, 800b306 <__d2b+0x7e>
 800b2ce:	f1c0 0320 	rsb	r3, r0, #32
 800b2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2d6:	430b      	orrs	r3, r1
 800b2d8:	40c2      	lsrs	r2, r0
 800b2da:	6163      	str	r3, [r4, #20]
 800b2dc:	9201      	str	r2, [sp, #4]
 800b2de:	9b01      	ldr	r3, [sp, #4]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	bf0c      	ite	eq
 800b2e4:	2201      	moveq	r2, #1
 800b2e6:	2202      	movne	r2, #2
 800b2e8:	61a3      	str	r3, [r4, #24]
 800b2ea:	6122      	str	r2, [r4, #16]
 800b2ec:	b1ad      	cbz	r5, 800b31a <__d2b+0x92>
 800b2ee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b2f2:	4405      	add	r5, r0
 800b2f4:	6035      	str	r5, [r6, #0]
 800b2f6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b2fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2fc:	6018      	str	r0, [r3, #0]
 800b2fe:	4620      	mov	r0, r4
 800b300:	b002      	add	sp, #8
 800b302:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b306:	6161      	str	r1, [r4, #20]
 800b308:	e7e9      	b.n	800b2de <__d2b+0x56>
 800b30a:	a801      	add	r0, sp, #4
 800b30c:	f7ff fcf3 	bl	800acf6 <__lo0bits>
 800b310:	9b01      	ldr	r3, [sp, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	6163      	str	r3, [r4, #20]
 800b316:	3020      	adds	r0, #32
 800b318:	e7e7      	b.n	800b2ea <__d2b+0x62>
 800b31a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b31e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b322:	6030      	str	r0, [r6, #0]
 800b324:	6918      	ldr	r0, [r3, #16]
 800b326:	f7ff fcc7 	bl	800acb8 <__hi0bits>
 800b32a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b32e:	e7e4      	b.n	800b2fa <__d2b+0x72>
 800b330:	0800dcb7 	.word	0x0800dcb7
 800b334:	0800dcc8 	.word	0x0800dcc8

0800b338 <__ratio>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	b085      	sub	sp, #20
 800b33e:	e9cd 1000 	strd	r1, r0, [sp]
 800b342:	a902      	add	r1, sp, #8
 800b344:	f7ff ff58 	bl	800b1f8 <__b2d>
 800b348:	468b      	mov	fp, r1
 800b34a:	4606      	mov	r6, r0
 800b34c:	460f      	mov	r7, r1
 800b34e:	9800      	ldr	r0, [sp, #0]
 800b350:	a903      	add	r1, sp, #12
 800b352:	f7ff ff51 	bl	800b1f8 <__b2d>
 800b356:	460d      	mov	r5, r1
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	4689      	mov	r9, r1
 800b35c:	6919      	ldr	r1, [r3, #16]
 800b35e:	9b00      	ldr	r3, [sp, #0]
 800b360:	4604      	mov	r4, r0
 800b362:	691b      	ldr	r3, [r3, #16]
 800b364:	4630      	mov	r0, r6
 800b366:	1ac9      	subs	r1, r1, r3
 800b368:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b36c:	1a9b      	subs	r3, r3, r2
 800b36e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfcd      	iteet	gt
 800b376:	463a      	movgt	r2, r7
 800b378:	462a      	movle	r2, r5
 800b37a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b37e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b382:	bfd8      	it	le
 800b384:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b388:	464b      	mov	r3, r9
 800b38a:	4622      	mov	r2, r4
 800b38c:	4659      	mov	r1, fp
 800b38e:	f7f5 fa39 	bl	8000804 <__aeabi_ddiv>
 800b392:	b005      	add	sp, #20
 800b394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b398 <__copybits>:
 800b398:	3901      	subs	r1, #1
 800b39a:	b570      	push	{r4, r5, r6, lr}
 800b39c:	1149      	asrs	r1, r1, #5
 800b39e:	6914      	ldr	r4, [r2, #16]
 800b3a0:	3101      	adds	r1, #1
 800b3a2:	f102 0314 	add.w	r3, r2, #20
 800b3a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b3aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b3ae:	1f05      	subs	r5, r0, #4
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	d30c      	bcc.n	800b3ce <__copybits+0x36>
 800b3b4:	1aa3      	subs	r3, r4, r2
 800b3b6:	3b11      	subs	r3, #17
 800b3b8:	f023 0303 	bic.w	r3, r3, #3
 800b3bc:	3211      	adds	r2, #17
 800b3be:	42a2      	cmp	r2, r4
 800b3c0:	bf88      	it	hi
 800b3c2:	2300      	movhi	r3, #0
 800b3c4:	4418      	add	r0, r3
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	4288      	cmp	r0, r1
 800b3ca:	d305      	bcc.n	800b3d8 <__copybits+0x40>
 800b3cc:	bd70      	pop	{r4, r5, r6, pc}
 800b3ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3d2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3d6:	e7eb      	b.n	800b3b0 <__copybits+0x18>
 800b3d8:	f840 3b04 	str.w	r3, [r0], #4
 800b3dc:	e7f4      	b.n	800b3c8 <__copybits+0x30>

0800b3de <__any_on>:
 800b3de:	f100 0214 	add.w	r2, r0, #20
 800b3e2:	6900      	ldr	r0, [r0, #16]
 800b3e4:	114b      	asrs	r3, r1, #5
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	db11      	blt.n	800b410 <__any_on+0x32>
 800b3ec:	dd0a      	ble.n	800b404 <__any_on+0x26>
 800b3ee:	f011 011f 	ands.w	r1, r1, #31
 800b3f2:	d007      	beq.n	800b404 <__any_on+0x26>
 800b3f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3f8:	fa24 f001 	lsr.w	r0, r4, r1
 800b3fc:	fa00 f101 	lsl.w	r1, r0, r1
 800b400:	428c      	cmp	r4, r1
 800b402:	d10b      	bne.n	800b41c <__any_on+0x3e>
 800b404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b408:	4293      	cmp	r3, r2
 800b40a:	d803      	bhi.n	800b414 <__any_on+0x36>
 800b40c:	2000      	movs	r0, #0
 800b40e:	bd10      	pop	{r4, pc}
 800b410:	4603      	mov	r3, r0
 800b412:	e7f7      	b.n	800b404 <__any_on+0x26>
 800b414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b418:	2900      	cmp	r1, #0
 800b41a:	d0f5      	beq.n	800b408 <__any_on+0x2a>
 800b41c:	2001      	movs	r0, #1
 800b41e:	e7f6      	b.n	800b40e <__any_on+0x30>

0800b420 <sulp>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	460f      	mov	r7, r1
 800b426:	4690      	mov	r8, r2
 800b428:	f7ff fec6 	bl	800b1b8 <__ulp>
 800b42c:	4604      	mov	r4, r0
 800b42e:	460d      	mov	r5, r1
 800b430:	f1b8 0f00 	cmp.w	r8, #0
 800b434:	d011      	beq.n	800b45a <sulp+0x3a>
 800b436:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b43a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dd0b      	ble.n	800b45a <sulp+0x3a>
 800b442:	2400      	movs	r4, #0
 800b444:	051b      	lsls	r3, r3, #20
 800b446:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b44a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b44e:	4622      	mov	r2, r4
 800b450:	462b      	mov	r3, r5
 800b452:	f7f5 f8ad 	bl	80005b0 <__aeabi_dmul>
 800b456:	4604      	mov	r4, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	4620      	mov	r0, r4
 800b45c:	4629      	mov	r1, r5
 800b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b462:	0000      	movs	r0, r0
 800b464:	0000      	movs	r0, r0
	...

0800b468 <_strtod_l>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	b09f      	sub	sp, #124	@ 0x7c
 800b46e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b470:	2200      	movs	r2, #0
 800b472:	460c      	mov	r4, r1
 800b474:	921a      	str	r2, [sp, #104]	@ 0x68
 800b476:	f04f 0a00 	mov.w	sl, #0
 800b47a:	f04f 0b00 	mov.w	fp, #0
 800b47e:	460a      	mov	r2, r1
 800b480:	9005      	str	r0, [sp, #20]
 800b482:	9219      	str	r2, [sp, #100]	@ 0x64
 800b484:	7811      	ldrb	r1, [r2, #0]
 800b486:	292b      	cmp	r1, #43	@ 0x2b
 800b488:	d048      	beq.n	800b51c <_strtod_l+0xb4>
 800b48a:	d836      	bhi.n	800b4fa <_strtod_l+0x92>
 800b48c:	290d      	cmp	r1, #13
 800b48e:	d830      	bhi.n	800b4f2 <_strtod_l+0x8a>
 800b490:	2908      	cmp	r1, #8
 800b492:	d830      	bhi.n	800b4f6 <_strtod_l+0x8e>
 800b494:	2900      	cmp	r1, #0
 800b496:	d039      	beq.n	800b50c <_strtod_l+0xa4>
 800b498:	2200      	movs	r2, #0
 800b49a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b49c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b49e:	782a      	ldrb	r2, [r5, #0]
 800b4a0:	2a30      	cmp	r2, #48	@ 0x30
 800b4a2:	f040 80b1 	bne.w	800b608 <_strtod_l+0x1a0>
 800b4a6:	786a      	ldrb	r2, [r5, #1]
 800b4a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b4ac:	2a58      	cmp	r2, #88	@ 0x58
 800b4ae:	d16c      	bne.n	800b58a <_strtod_l+0x122>
 800b4b0:	9302      	str	r3, [sp, #8]
 800b4b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4b4:	4a8e      	ldr	r2, [pc, #568]	@ (800b6f0 <_strtod_l+0x288>)
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	ab1a      	add	r3, sp, #104	@ 0x68
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	9805      	ldr	r0, [sp, #20]
 800b4be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b4c0:	a919      	add	r1, sp, #100	@ 0x64
 800b4c2:	f001 f915 	bl	800c6f0 <__gethex>
 800b4c6:	f010 060f 	ands.w	r6, r0, #15
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	d005      	beq.n	800b4da <_strtod_l+0x72>
 800b4ce:	2e06      	cmp	r6, #6
 800b4d0:	d126      	bne.n	800b520 <_strtod_l+0xb8>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800b4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f040 8584 	bne.w	800bfea <_strtod_l+0xb82>
 800b4e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4e4:	b1bb      	cbz	r3, 800b516 <_strtod_l+0xae>
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b4ec:	b01f      	add	sp, #124	@ 0x7c
 800b4ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f2:	2920      	cmp	r1, #32
 800b4f4:	d1d0      	bne.n	800b498 <_strtod_l+0x30>
 800b4f6:	3201      	adds	r2, #1
 800b4f8:	e7c3      	b.n	800b482 <_strtod_l+0x1a>
 800b4fa:	292d      	cmp	r1, #45	@ 0x2d
 800b4fc:	d1cc      	bne.n	800b498 <_strtod_l+0x30>
 800b4fe:	2101      	movs	r1, #1
 800b500:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b502:	1c51      	adds	r1, r2, #1
 800b504:	9119      	str	r1, [sp, #100]	@ 0x64
 800b506:	7852      	ldrb	r2, [r2, #1]
 800b508:	2a00      	cmp	r2, #0
 800b50a:	d1c7      	bne.n	800b49c <_strtod_l+0x34>
 800b50c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b50e:	9419      	str	r4, [sp, #100]	@ 0x64
 800b510:	2b00      	cmp	r3, #0
 800b512:	f040 8568 	bne.w	800bfe6 <_strtod_l+0xb7e>
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	e7e7      	b.n	800b4ec <_strtod_l+0x84>
 800b51c:	2100      	movs	r1, #0
 800b51e:	e7ef      	b.n	800b500 <_strtod_l+0x98>
 800b520:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b522:	b13a      	cbz	r2, 800b534 <_strtod_l+0xcc>
 800b524:	2135      	movs	r1, #53	@ 0x35
 800b526:	a81c      	add	r0, sp, #112	@ 0x70
 800b528:	f7ff ff36 	bl	800b398 <__copybits>
 800b52c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b52e:	9805      	ldr	r0, [sp, #20]
 800b530:	f7ff fb10 	bl	800ab54 <_Bfree>
 800b534:	3e01      	subs	r6, #1
 800b536:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b538:	2e04      	cmp	r6, #4
 800b53a:	d806      	bhi.n	800b54a <_strtod_l+0xe2>
 800b53c:	e8df f006 	tbb	[pc, r6]
 800b540:	201d0314 	.word	0x201d0314
 800b544:	14          	.byte	0x14
 800b545:	00          	.byte	0x00
 800b546:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b54a:	05e1      	lsls	r1, r4, #23
 800b54c:	bf48      	it	mi
 800b54e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b552:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b556:	0d1b      	lsrs	r3, r3, #20
 800b558:	051b      	lsls	r3, r3, #20
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1bd      	bne.n	800b4da <_strtod_l+0x72>
 800b55e:	f7fe fb2b 	bl	8009bb8 <__errno>
 800b562:	2322      	movs	r3, #34	@ 0x22
 800b564:	6003      	str	r3, [r0, #0]
 800b566:	e7b8      	b.n	800b4da <_strtod_l+0x72>
 800b568:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b56c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b570:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b574:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b578:	e7e7      	b.n	800b54a <_strtod_l+0xe2>
 800b57a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b6f4 <_strtod_l+0x28c>
 800b57e:	e7e4      	b.n	800b54a <_strtod_l+0xe2>
 800b580:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b584:	f04f 3aff 	mov.w	sl, #4294967295
 800b588:	e7df      	b.n	800b54a <_strtod_l+0xe2>
 800b58a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	9219      	str	r2, [sp, #100]	@ 0x64
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b30      	cmp	r3, #48	@ 0x30
 800b594:	d0f9      	beq.n	800b58a <_strtod_l+0x122>
 800b596:	2b00      	cmp	r3, #0
 800b598:	d09f      	beq.n	800b4da <_strtod_l+0x72>
 800b59a:	2301      	movs	r3, #1
 800b59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b59e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5a0:	220a      	movs	r2, #10
 800b5a2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	461f      	mov	r7, r3
 800b5a8:	9308      	str	r3, [sp, #32]
 800b5aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b5ae:	7805      	ldrb	r5, [r0, #0]
 800b5b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b5b4:	b2d9      	uxtb	r1, r3
 800b5b6:	2909      	cmp	r1, #9
 800b5b8:	d928      	bls.n	800b60c <_strtod_l+0x1a4>
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	494e      	ldr	r1, [pc, #312]	@ (800b6f8 <_strtod_l+0x290>)
 800b5be:	f000 ffc7 	bl	800c550 <strncmp>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d032      	beq.n	800b62c <_strtod_l+0x1c4>
 800b5c6:	2000      	movs	r0, #0
 800b5c8:	462a      	mov	r2, r5
 800b5ca:	4681      	mov	r9, r0
 800b5cc:	463d      	mov	r5, r7
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2a65      	cmp	r2, #101	@ 0x65
 800b5d2:	d001      	beq.n	800b5d8 <_strtod_l+0x170>
 800b5d4:	2a45      	cmp	r2, #69	@ 0x45
 800b5d6:	d114      	bne.n	800b602 <_strtod_l+0x19a>
 800b5d8:	b91d      	cbnz	r5, 800b5e2 <_strtod_l+0x17a>
 800b5da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5dc:	4302      	orrs	r2, r0
 800b5de:	d095      	beq.n	800b50c <_strtod_l+0xa4>
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b5e4:	1c62      	adds	r2, r4, #1
 800b5e6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5e8:	7862      	ldrb	r2, [r4, #1]
 800b5ea:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5ec:	d077      	beq.n	800b6de <_strtod_l+0x276>
 800b5ee:	2a2d      	cmp	r2, #45	@ 0x2d
 800b5f0:	d07b      	beq.n	800b6ea <_strtod_l+0x282>
 800b5f2:	f04f 0c00 	mov.w	ip, #0
 800b5f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b5fa:	2909      	cmp	r1, #9
 800b5fc:	f240 8082 	bls.w	800b704 <_strtod_l+0x29c>
 800b600:	9419      	str	r4, [sp, #100]	@ 0x64
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	e0a2      	b.n	800b74e <_strtod_l+0x2e6>
 800b608:	2300      	movs	r3, #0
 800b60a:	e7c7      	b.n	800b59c <_strtod_l+0x134>
 800b60c:	2f08      	cmp	r7, #8
 800b60e:	bfd5      	itete	le
 800b610:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b612:	9908      	ldrgt	r1, [sp, #32]
 800b614:	fb02 3301 	mlale	r3, r2, r1, r3
 800b618:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b61c:	f100 0001 	add.w	r0, r0, #1
 800b620:	bfd4      	ite	le
 800b622:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b624:	9308      	strgt	r3, [sp, #32]
 800b626:	3701      	adds	r7, #1
 800b628:	9019      	str	r0, [sp, #100]	@ 0x64
 800b62a:	e7bf      	b.n	800b5ac <_strtod_l+0x144>
 800b62c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	9219      	str	r2, [sp, #100]	@ 0x64
 800b632:	785a      	ldrb	r2, [r3, #1]
 800b634:	b37f      	cbz	r7, 800b696 <_strtod_l+0x22e>
 800b636:	4681      	mov	r9, r0
 800b638:	463d      	mov	r5, r7
 800b63a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b63e:	2b09      	cmp	r3, #9
 800b640:	d912      	bls.n	800b668 <_strtod_l+0x200>
 800b642:	2301      	movs	r3, #1
 800b644:	e7c4      	b.n	800b5d0 <_strtod_l+0x168>
 800b646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b648:	3001      	adds	r0, #1
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b64e:	785a      	ldrb	r2, [r3, #1]
 800b650:	2a30      	cmp	r2, #48	@ 0x30
 800b652:	d0f8      	beq.n	800b646 <_strtod_l+0x1de>
 800b654:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b658:	2b08      	cmp	r3, #8
 800b65a:	f200 84cb 	bhi.w	800bff4 <_strtod_l+0xb8c>
 800b65e:	4681      	mov	r9, r0
 800b660:	2000      	movs	r0, #0
 800b662:	4605      	mov	r5, r0
 800b664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b666:	930c      	str	r3, [sp, #48]	@ 0x30
 800b668:	3a30      	subs	r2, #48	@ 0x30
 800b66a:	f100 0301 	add.w	r3, r0, #1
 800b66e:	d02a      	beq.n	800b6c6 <_strtod_l+0x25e>
 800b670:	4499      	add	r9, r3
 800b672:	210a      	movs	r1, #10
 800b674:	462b      	mov	r3, r5
 800b676:	eb00 0c05 	add.w	ip, r0, r5
 800b67a:	4563      	cmp	r3, ip
 800b67c:	d10d      	bne.n	800b69a <_strtod_l+0x232>
 800b67e:	1c69      	adds	r1, r5, #1
 800b680:	4401      	add	r1, r0
 800b682:	4428      	add	r0, r5
 800b684:	2808      	cmp	r0, #8
 800b686:	dc16      	bgt.n	800b6b6 <_strtod_l+0x24e>
 800b688:	230a      	movs	r3, #10
 800b68a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b68c:	fb03 2300 	mla	r3, r3, r0, r2
 800b690:	930a      	str	r3, [sp, #40]	@ 0x28
 800b692:	2300      	movs	r3, #0
 800b694:	e018      	b.n	800b6c8 <_strtod_l+0x260>
 800b696:	4638      	mov	r0, r7
 800b698:	e7da      	b.n	800b650 <_strtod_l+0x1e8>
 800b69a:	2b08      	cmp	r3, #8
 800b69c:	f103 0301 	add.w	r3, r3, #1
 800b6a0:	dc03      	bgt.n	800b6aa <_strtod_l+0x242>
 800b6a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b6a4:	434e      	muls	r6, r1
 800b6a6:	960a      	str	r6, [sp, #40]	@ 0x28
 800b6a8:	e7e7      	b.n	800b67a <_strtod_l+0x212>
 800b6aa:	2b10      	cmp	r3, #16
 800b6ac:	bfde      	ittt	le
 800b6ae:	9e08      	ldrle	r6, [sp, #32]
 800b6b0:	434e      	mulle	r6, r1
 800b6b2:	9608      	strle	r6, [sp, #32]
 800b6b4:	e7e1      	b.n	800b67a <_strtod_l+0x212>
 800b6b6:	280f      	cmp	r0, #15
 800b6b8:	dceb      	bgt.n	800b692 <_strtod_l+0x22a>
 800b6ba:	230a      	movs	r3, #10
 800b6bc:	9808      	ldr	r0, [sp, #32]
 800b6be:	fb03 2300 	mla	r3, r3, r0, r2
 800b6c2:	9308      	str	r3, [sp, #32]
 800b6c4:	e7e5      	b.n	800b692 <_strtod_l+0x22a>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6ca:	460d      	mov	r5, r1
 800b6cc:	1c50      	adds	r0, r2, #1
 800b6ce:	9019      	str	r0, [sp, #100]	@ 0x64
 800b6d0:	7852      	ldrb	r2, [r2, #1]
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	e7b1      	b.n	800b63a <_strtod_l+0x1d2>
 800b6d6:	f04f 0900 	mov.w	r9, #0
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e77d      	b.n	800b5da <_strtod_l+0x172>
 800b6de:	f04f 0c00 	mov.w	ip, #0
 800b6e2:	1ca2      	adds	r2, r4, #2
 800b6e4:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6e6:	78a2      	ldrb	r2, [r4, #2]
 800b6e8:	e785      	b.n	800b5f6 <_strtod_l+0x18e>
 800b6ea:	f04f 0c01 	mov.w	ip, #1
 800b6ee:	e7f8      	b.n	800b6e2 <_strtod_l+0x27a>
 800b6f0:	0800de38 	.word	0x0800de38
 800b6f4:	7ff00000 	.word	0x7ff00000
 800b6f8:	0800de20 	.word	0x0800de20
 800b6fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6fe:	1c51      	adds	r1, r2, #1
 800b700:	9119      	str	r1, [sp, #100]	@ 0x64
 800b702:	7852      	ldrb	r2, [r2, #1]
 800b704:	2a30      	cmp	r2, #48	@ 0x30
 800b706:	d0f9      	beq.n	800b6fc <_strtod_l+0x294>
 800b708:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b70c:	2908      	cmp	r1, #8
 800b70e:	f63f af78 	bhi.w	800b602 <_strtod_l+0x19a>
 800b712:	f04f 080a 	mov.w	r8, #10
 800b716:	3a30      	subs	r2, #48	@ 0x30
 800b718:	920e      	str	r2, [sp, #56]	@ 0x38
 800b71a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b71c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b71e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b720:	1c56      	adds	r6, r2, #1
 800b722:	9619      	str	r6, [sp, #100]	@ 0x64
 800b724:	7852      	ldrb	r2, [r2, #1]
 800b726:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b72a:	f1be 0f09 	cmp.w	lr, #9
 800b72e:	d939      	bls.n	800b7a4 <_strtod_l+0x33c>
 800b730:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b732:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b736:	1a76      	subs	r6, r6, r1
 800b738:	2e08      	cmp	r6, #8
 800b73a:	dc03      	bgt.n	800b744 <_strtod_l+0x2dc>
 800b73c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b73e:	4588      	cmp	r8, r1
 800b740:	bfa8      	it	ge
 800b742:	4688      	movge	r8, r1
 800b744:	f1bc 0f00 	cmp.w	ip, #0
 800b748:	d001      	beq.n	800b74e <_strtod_l+0x2e6>
 800b74a:	f1c8 0800 	rsb	r8, r8, #0
 800b74e:	2d00      	cmp	r5, #0
 800b750:	d14e      	bne.n	800b7f0 <_strtod_l+0x388>
 800b752:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b754:	4308      	orrs	r0, r1
 800b756:	f47f aec0 	bne.w	800b4da <_strtod_l+0x72>
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	f47f aed6 	bne.w	800b50c <_strtod_l+0xa4>
 800b760:	2a69      	cmp	r2, #105	@ 0x69
 800b762:	d028      	beq.n	800b7b6 <_strtod_l+0x34e>
 800b764:	dc25      	bgt.n	800b7b2 <_strtod_l+0x34a>
 800b766:	2a49      	cmp	r2, #73	@ 0x49
 800b768:	d025      	beq.n	800b7b6 <_strtod_l+0x34e>
 800b76a:	2a4e      	cmp	r2, #78	@ 0x4e
 800b76c:	f47f aece 	bne.w	800b50c <_strtod_l+0xa4>
 800b770:	499a      	ldr	r1, [pc, #616]	@ (800b9dc <_strtod_l+0x574>)
 800b772:	a819      	add	r0, sp, #100	@ 0x64
 800b774:	f001 f9de 	bl	800cb34 <__match>
 800b778:	2800      	cmp	r0, #0
 800b77a:	f43f aec7 	beq.w	800b50c <_strtod_l+0xa4>
 800b77e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b28      	cmp	r3, #40	@ 0x28
 800b784:	d12e      	bne.n	800b7e4 <_strtod_l+0x37c>
 800b786:	4996      	ldr	r1, [pc, #600]	@ (800b9e0 <_strtod_l+0x578>)
 800b788:	aa1c      	add	r2, sp, #112	@ 0x70
 800b78a:	a819      	add	r0, sp, #100	@ 0x64
 800b78c:	f001 f9e6 	bl	800cb5c <__hexnan>
 800b790:	2805      	cmp	r0, #5
 800b792:	d127      	bne.n	800b7e4 <_strtod_l+0x37c>
 800b794:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b796:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b79a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b79e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b7a2:	e69a      	b.n	800b4da <_strtod_l+0x72>
 800b7a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b7a6:	fb08 2101 	mla	r1, r8, r1, r2
 800b7aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b7ae:	920e      	str	r2, [sp, #56]	@ 0x38
 800b7b0:	e7b5      	b.n	800b71e <_strtod_l+0x2b6>
 800b7b2:	2a6e      	cmp	r2, #110	@ 0x6e
 800b7b4:	e7da      	b.n	800b76c <_strtod_l+0x304>
 800b7b6:	498b      	ldr	r1, [pc, #556]	@ (800b9e4 <_strtod_l+0x57c>)
 800b7b8:	a819      	add	r0, sp, #100	@ 0x64
 800b7ba:	f001 f9bb 	bl	800cb34 <__match>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	f43f aea4 	beq.w	800b50c <_strtod_l+0xa4>
 800b7c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7c6:	4988      	ldr	r1, [pc, #544]	@ (800b9e8 <_strtod_l+0x580>)
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	a819      	add	r0, sp, #100	@ 0x64
 800b7cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7ce:	f001 f9b1 	bl	800cb34 <__match>
 800b7d2:	b910      	cbnz	r0, 800b7da <_strtod_l+0x372>
 800b7d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7da:	f04f 0a00 	mov.w	sl, #0
 800b7de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b9ec <_strtod_l+0x584>
 800b7e2:	e67a      	b.n	800b4da <_strtod_l+0x72>
 800b7e4:	4882      	ldr	r0, [pc, #520]	@ (800b9f0 <_strtod_l+0x588>)
 800b7e6:	f000 fee3 	bl	800c5b0 <nan>
 800b7ea:	4682      	mov	sl, r0
 800b7ec:	468b      	mov	fp, r1
 800b7ee:	e674      	b.n	800b4da <_strtod_l+0x72>
 800b7f0:	eba8 0309 	sub.w	r3, r8, r9
 800b7f4:	2f00      	cmp	r7, #0
 800b7f6:	bf08      	it	eq
 800b7f8:	462f      	moveq	r7, r5
 800b7fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7fc:	2d10      	cmp	r5, #16
 800b7fe:	462c      	mov	r4, r5
 800b800:	9309      	str	r3, [sp, #36]	@ 0x24
 800b802:	bfa8      	it	ge
 800b804:	2410      	movge	r4, #16
 800b806:	f7f4 fe59 	bl	80004bc <__aeabi_ui2d>
 800b80a:	2d09      	cmp	r5, #9
 800b80c:	4682      	mov	sl, r0
 800b80e:	468b      	mov	fp, r1
 800b810:	dc11      	bgt.n	800b836 <_strtod_l+0x3ce>
 800b812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	f43f ae60 	beq.w	800b4da <_strtod_l+0x72>
 800b81a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81c:	dd76      	ble.n	800b90c <_strtod_l+0x4a4>
 800b81e:	2b16      	cmp	r3, #22
 800b820:	dc5d      	bgt.n	800b8de <_strtod_l+0x476>
 800b822:	4974      	ldr	r1, [pc, #464]	@ (800b9f4 <_strtod_l+0x58c>)
 800b824:	4652      	mov	r2, sl
 800b826:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b82a:	465b      	mov	r3, fp
 800b82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b830:	f7f4 febe 	bl	80005b0 <__aeabi_dmul>
 800b834:	e7d9      	b.n	800b7ea <_strtod_l+0x382>
 800b836:	4b6f      	ldr	r3, [pc, #444]	@ (800b9f4 <_strtod_l+0x58c>)
 800b838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b83c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b840:	f7f4 feb6 	bl	80005b0 <__aeabi_dmul>
 800b844:	4682      	mov	sl, r0
 800b846:	9808      	ldr	r0, [sp, #32]
 800b848:	468b      	mov	fp, r1
 800b84a:	f7f4 fe37 	bl	80004bc <__aeabi_ui2d>
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	4650      	mov	r0, sl
 800b854:	4659      	mov	r1, fp
 800b856:	f7f4 fcf5 	bl	8000244 <__adddf3>
 800b85a:	2d0f      	cmp	r5, #15
 800b85c:	4682      	mov	sl, r0
 800b85e:	468b      	mov	fp, r1
 800b860:	ddd7      	ble.n	800b812 <_strtod_l+0x3aa>
 800b862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b864:	1b2c      	subs	r4, r5, r4
 800b866:	441c      	add	r4, r3
 800b868:	2c00      	cmp	r4, #0
 800b86a:	f340 8096 	ble.w	800b99a <_strtod_l+0x532>
 800b86e:	f014 030f 	ands.w	r3, r4, #15
 800b872:	d00a      	beq.n	800b88a <_strtod_l+0x422>
 800b874:	495f      	ldr	r1, [pc, #380]	@ (800b9f4 <_strtod_l+0x58c>)
 800b876:	4652      	mov	r2, sl
 800b878:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b880:	465b      	mov	r3, fp
 800b882:	f7f4 fe95 	bl	80005b0 <__aeabi_dmul>
 800b886:	4682      	mov	sl, r0
 800b888:	468b      	mov	fp, r1
 800b88a:	f034 040f 	bics.w	r4, r4, #15
 800b88e:	d073      	beq.n	800b978 <_strtod_l+0x510>
 800b890:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b894:	dd48      	ble.n	800b928 <_strtod_l+0x4c0>
 800b896:	2400      	movs	r4, #0
 800b898:	46a0      	mov	r8, r4
 800b89a:	46a1      	mov	r9, r4
 800b89c:	940a      	str	r4, [sp, #40]	@ 0x28
 800b89e:	2322      	movs	r3, #34	@ 0x22
 800b8a0:	f04f 0a00 	mov.w	sl, #0
 800b8a4:	9a05      	ldr	r2, [sp, #20]
 800b8a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b9ec <_strtod_l+0x584>
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f43f ae13 	beq.w	800b4da <_strtod_l+0x72>
 800b8b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b8b6:	9805      	ldr	r0, [sp, #20]
 800b8b8:	f7ff f94c 	bl	800ab54 <_Bfree>
 800b8bc:	4649      	mov	r1, r9
 800b8be:	9805      	ldr	r0, [sp, #20]
 800b8c0:	f7ff f948 	bl	800ab54 <_Bfree>
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	9805      	ldr	r0, [sp, #20]
 800b8c8:	f7ff f944 	bl	800ab54 <_Bfree>
 800b8cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8ce:	9805      	ldr	r0, [sp, #20]
 800b8d0:	f7ff f940 	bl	800ab54 <_Bfree>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	9805      	ldr	r0, [sp, #20]
 800b8d8:	f7ff f93c 	bl	800ab54 <_Bfree>
 800b8dc:	e5fd      	b.n	800b4da <_strtod_l+0x72>
 800b8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	dbbc      	blt.n	800b862 <_strtod_l+0x3fa>
 800b8e8:	4c42      	ldr	r4, [pc, #264]	@ (800b9f4 <_strtod_l+0x58c>)
 800b8ea:	f1c5 050f 	rsb	r5, r5, #15
 800b8ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b8f2:	4652      	mov	r2, sl
 800b8f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8f8:	465b      	mov	r3, fp
 800b8fa:	f7f4 fe59 	bl	80005b0 <__aeabi_dmul>
 800b8fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b900:	1b5d      	subs	r5, r3, r5
 800b902:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b906:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b90a:	e791      	b.n	800b830 <_strtod_l+0x3c8>
 800b90c:	3316      	adds	r3, #22
 800b90e:	dba8      	blt.n	800b862 <_strtod_l+0x3fa>
 800b910:	4b38      	ldr	r3, [pc, #224]	@ (800b9f4 <_strtod_l+0x58c>)
 800b912:	eba9 0808 	sub.w	r8, r9, r8
 800b916:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b91a:	4650      	mov	r0, sl
 800b91c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b920:	4659      	mov	r1, fp
 800b922:	f7f4 ff6f 	bl	8000804 <__aeabi_ddiv>
 800b926:	e760      	b.n	800b7ea <_strtod_l+0x382>
 800b928:	4b33      	ldr	r3, [pc, #204]	@ (800b9f8 <_strtod_l+0x590>)
 800b92a:	4650      	mov	r0, sl
 800b92c:	9308      	str	r3, [sp, #32]
 800b92e:	2300      	movs	r3, #0
 800b930:	4659      	mov	r1, fp
 800b932:	461e      	mov	r6, r3
 800b934:	1124      	asrs	r4, r4, #4
 800b936:	2c01      	cmp	r4, #1
 800b938:	dc21      	bgt.n	800b97e <_strtod_l+0x516>
 800b93a:	b10b      	cbz	r3, 800b940 <_strtod_l+0x4d8>
 800b93c:	4682      	mov	sl, r0
 800b93e:	468b      	mov	fp, r1
 800b940:	492d      	ldr	r1, [pc, #180]	@ (800b9f8 <_strtod_l+0x590>)
 800b942:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b946:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b94a:	4652      	mov	r2, sl
 800b94c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b950:	465b      	mov	r3, fp
 800b952:	f7f4 fe2d 	bl	80005b0 <__aeabi_dmul>
 800b956:	4b25      	ldr	r3, [pc, #148]	@ (800b9ec <_strtod_l+0x584>)
 800b958:	460a      	mov	r2, r1
 800b95a:	400b      	ands	r3, r1
 800b95c:	4927      	ldr	r1, [pc, #156]	@ (800b9fc <_strtod_l+0x594>)
 800b95e:	4682      	mov	sl, r0
 800b960:	428b      	cmp	r3, r1
 800b962:	d898      	bhi.n	800b896 <_strtod_l+0x42e>
 800b964:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b968:	428b      	cmp	r3, r1
 800b96a:	bf86      	itte	hi
 800b96c:	f04f 3aff 	movhi.w	sl, #4294967295
 800b970:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ba00 <_strtod_l+0x598>
 800b974:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b978:	2300      	movs	r3, #0
 800b97a:	9308      	str	r3, [sp, #32]
 800b97c:	e07a      	b.n	800ba74 <_strtod_l+0x60c>
 800b97e:	07e2      	lsls	r2, r4, #31
 800b980:	d505      	bpl.n	800b98e <_strtod_l+0x526>
 800b982:	9b08      	ldr	r3, [sp, #32]
 800b984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b988:	f7f4 fe12 	bl	80005b0 <__aeabi_dmul>
 800b98c:	2301      	movs	r3, #1
 800b98e:	9a08      	ldr	r2, [sp, #32]
 800b990:	3601      	adds	r6, #1
 800b992:	3208      	adds	r2, #8
 800b994:	1064      	asrs	r4, r4, #1
 800b996:	9208      	str	r2, [sp, #32]
 800b998:	e7cd      	b.n	800b936 <_strtod_l+0x4ce>
 800b99a:	d0ed      	beq.n	800b978 <_strtod_l+0x510>
 800b99c:	4264      	negs	r4, r4
 800b99e:	f014 020f 	ands.w	r2, r4, #15
 800b9a2:	d00a      	beq.n	800b9ba <_strtod_l+0x552>
 800b9a4:	4b13      	ldr	r3, [pc, #76]	@ (800b9f4 <_strtod_l+0x58c>)
 800b9a6:	4650      	mov	r0, sl
 800b9a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ac:	4659      	mov	r1, fp
 800b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b2:	f7f4 ff27 	bl	8000804 <__aeabi_ddiv>
 800b9b6:	4682      	mov	sl, r0
 800b9b8:	468b      	mov	fp, r1
 800b9ba:	1124      	asrs	r4, r4, #4
 800b9bc:	d0dc      	beq.n	800b978 <_strtod_l+0x510>
 800b9be:	2c1f      	cmp	r4, #31
 800b9c0:	dd20      	ble.n	800ba04 <_strtod_l+0x59c>
 800b9c2:	2400      	movs	r4, #0
 800b9c4:	46a0      	mov	r8, r4
 800b9c6:	46a1      	mov	r9, r4
 800b9c8:	940a      	str	r4, [sp, #40]	@ 0x28
 800b9ca:	2322      	movs	r3, #34	@ 0x22
 800b9cc:	9a05      	ldr	r2, [sp, #20]
 800b9ce:	f04f 0a00 	mov.w	sl, #0
 800b9d2:	f04f 0b00 	mov.w	fp, #0
 800b9d6:	6013      	str	r3, [r2, #0]
 800b9d8:	e768      	b.n	800b8ac <_strtod_l+0x444>
 800b9da:	bf00      	nop
 800b9dc:	0800dc0f 	.word	0x0800dc0f
 800b9e0:	0800de24 	.word	0x0800de24
 800b9e4:	0800dc07 	.word	0x0800dc07
 800b9e8:	0800dc3e 	.word	0x0800dc3e
 800b9ec:	7ff00000 	.word	0x7ff00000
 800b9f0:	0800dfcd 	.word	0x0800dfcd
 800b9f4:	0800dd58 	.word	0x0800dd58
 800b9f8:	0800dd30 	.word	0x0800dd30
 800b9fc:	7ca00000 	.word	0x7ca00000
 800ba00:	7fefffff 	.word	0x7fefffff
 800ba04:	f014 0310 	ands.w	r3, r4, #16
 800ba08:	bf18      	it	ne
 800ba0a:	236a      	movne	r3, #106	@ 0x6a
 800ba0c:	4650      	mov	r0, sl
 800ba0e:	9308      	str	r3, [sp, #32]
 800ba10:	4659      	mov	r1, fp
 800ba12:	2300      	movs	r3, #0
 800ba14:	4ea9      	ldr	r6, [pc, #676]	@ (800bcbc <_strtod_l+0x854>)
 800ba16:	07e2      	lsls	r2, r4, #31
 800ba18:	d504      	bpl.n	800ba24 <_strtod_l+0x5bc>
 800ba1a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba1e:	f7f4 fdc7 	bl	80005b0 <__aeabi_dmul>
 800ba22:	2301      	movs	r3, #1
 800ba24:	1064      	asrs	r4, r4, #1
 800ba26:	f106 0608 	add.w	r6, r6, #8
 800ba2a:	d1f4      	bne.n	800ba16 <_strtod_l+0x5ae>
 800ba2c:	b10b      	cbz	r3, 800ba32 <_strtod_l+0x5ca>
 800ba2e:	4682      	mov	sl, r0
 800ba30:	468b      	mov	fp, r1
 800ba32:	9b08      	ldr	r3, [sp, #32]
 800ba34:	b1b3      	cbz	r3, 800ba64 <_strtod_l+0x5fc>
 800ba36:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ba3a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	4659      	mov	r1, fp
 800ba42:	dd0f      	ble.n	800ba64 <_strtod_l+0x5fc>
 800ba44:	2b1f      	cmp	r3, #31
 800ba46:	dd57      	ble.n	800baf8 <_strtod_l+0x690>
 800ba48:	2b34      	cmp	r3, #52	@ 0x34
 800ba4a:	bfd8      	it	le
 800ba4c:	f04f 33ff 	movle.w	r3, #4294967295
 800ba50:	f04f 0a00 	mov.w	sl, #0
 800ba54:	bfcf      	iteee	gt
 800ba56:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ba5a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ba5e:	4093      	lslle	r3, r2
 800ba60:	ea03 0b01 	andle.w	fp, r3, r1
 800ba64:	2200      	movs	r2, #0
 800ba66:	2300      	movs	r3, #0
 800ba68:	4650      	mov	r0, sl
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	f7f5 f808 	bl	8000a80 <__aeabi_dcmpeq>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d1a6      	bne.n	800b9c2 <_strtod_l+0x55a>
 800ba74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba76:	463a      	mov	r2, r7
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	9805      	ldr	r0, [sp, #20]
 800ba80:	f7ff f8d0 	bl	800ac24 <__s2b>
 800ba84:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f43f af05 	beq.w	800b896 <_strtod_l+0x42e>
 800ba8c:	2400      	movs	r4, #0
 800ba8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba90:	eba9 0308 	sub.w	r3, r9, r8
 800ba94:	2a00      	cmp	r2, #0
 800ba96:	bfa8      	it	ge
 800ba98:	2300      	movge	r3, #0
 800ba9a:	46a0      	mov	r8, r4
 800ba9c:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800baa2:	9316      	str	r3, [sp, #88]	@ 0x58
 800baa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baa6:	9805      	ldr	r0, [sp, #20]
 800baa8:	6859      	ldr	r1, [r3, #4]
 800baaa:	f7ff f813 	bl	800aad4 <_Balloc>
 800baae:	4681      	mov	r9, r0
 800bab0:	2800      	cmp	r0, #0
 800bab2:	f43f aef4 	beq.w	800b89e <_strtod_l+0x436>
 800bab6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bab8:	300c      	adds	r0, #12
 800baba:	691a      	ldr	r2, [r3, #16]
 800babc:	f103 010c 	add.w	r1, r3, #12
 800bac0:	3202      	adds	r2, #2
 800bac2:	0092      	lsls	r2, r2, #2
 800bac4:	f000 fd66 	bl	800c594 <memcpy>
 800bac8:	ab1c      	add	r3, sp, #112	@ 0x70
 800baca:	9301      	str	r3, [sp, #4]
 800bacc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	4652      	mov	r2, sl
 800bad2:	465b      	mov	r3, fp
 800bad4:	9805      	ldr	r0, [sp, #20]
 800bad6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bada:	f7ff fbd5 	bl	800b288 <__d2b>
 800bade:	901a      	str	r0, [sp, #104]	@ 0x68
 800bae0:	2800      	cmp	r0, #0
 800bae2:	f43f aedc 	beq.w	800b89e <_strtod_l+0x436>
 800bae6:	2101      	movs	r1, #1
 800bae8:	9805      	ldr	r0, [sp, #20]
 800baea:	f7ff f931 	bl	800ad50 <__i2b>
 800baee:	4680      	mov	r8, r0
 800baf0:	b948      	cbnz	r0, 800bb06 <_strtod_l+0x69e>
 800baf2:	f04f 0800 	mov.w	r8, #0
 800baf6:	e6d2      	b.n	800b89e <_strtod_l+0x436>
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	fa02 f303 	lsl.w	r3, r2, r3
 800bb00:	ea03 0a0a 	and.w	sl, r3, sl
 800bb04:	e7ae      	b.n	800ba64 <_strtod_l+0x5fc>
 800bb06:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bb08:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bb0a:	2d00      	cmp	r5, #0
 800bb0c:	bfab      	itete	ge
 800bb0e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bb10:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bb12:	18ef      	addge	r7, r5, r3
 800bb14:	1b5e      	sublt	r6, r3, r5
 800bb16:	9b08      	ldr	r3, [sp, #32]
 800bb18:	bfa8      	it	ge
 800bb1a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bb1c:	eba5 0503 	sub.w	r5, r5, r3
 800bb20:	4415      	add	r5, r2
 800bb22:	4b67      	ldr	r3, [pc, #412]	@ (800bcc0 <_strtod_l+0x858>)
 800bb24:	f105 35ff 	add.w	r5, r5, #4294967295
 800bb28:	bfb8      	it	lt
 800bb2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bb2c:	429d      	cmp	r5, r3
 800bb2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bb32:	da50      	bge.n	800bbd6 <_strtod_l+0x76e>
 800bb34:	1b5b      	subs	r3, r3, r5
 800bb36:	2b1f      	cmp	r3, #31
 800bb38:	f04f 0101 	mov.w	r1, #1
 800bb3c:	eba2 0203 	sub.w	r2, r2, r3
 800bb40:	dc3d      	bgt.n	800bbbe <_strtod_l+0x756>
 800bb42:	fa01 f303 	lsl.w	r3, r1, r3
 800bb46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb48:	2300      	movs	r3, #0
 800bb4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb4c:	18bd      	adds	r5, r7, r2
 800bb4e:	9b08      	ldr	r3, [sp, #32]
 800bb50:	42af      	cmp	r7, r5
 800bb52:	4416      	add	r6, r2
 800bb54:	441e      	add	r6, r3
 800bb56:	463b      	mov	r3, r7
 800bb58:	bfa8      	it	ge
 800bb5a:	462b      	movge	r3, r5
 800bb5c:	42b3      	cmp	r3, r6
 800bb5e:	bfa8      	it	ge
 800bb60:	4633      	movge	r3, r6
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	bfc2      	ittt	gt
 800bb66:	1aed      	subgt	r5, r5, r3
 800bb68:	1af6      	subgt	r6, r6, r3
 800bb6a:	1aff      	subgt	r7, r7, r3
 800bb6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	dd16      	ble.n	800bba0 <_strtod_l+0x738>
 800bb72:	4641      	mov	r1, r8
 800bb74:	461a      	mov	r2, r3
 800bb76:	9805      	ldr	r0, [sp, #20]
 800bb78:	f7ff f9a8 	bl	800aecc <__pow5mult>
 800bb7c:	4680      	mov	r8, r0
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d0b7      	beq.n	800baf2 <_strtod_l+0x68a>
 800bb82:	4601      	mov	r1, r0
 800bb84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb86:	9805      	ldr	r0, [sp, #20]
 800bb88:	f7ff f8f8 	bl	800ad7c <__multiply>
 800bb8c:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f43f ae85 	beq.w	800b89e <_strtod_l+0x436>
 800bb94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb96:	9805      	ldr	r0, [sp, #20]
 800bb98:	f7fe ffdc 	bl	800ab54 <_Bfree>
 800bb9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bba0:	2d00      	cmp	r5, #0
 800bba2:	dc1d      	bgt.n	800bbe0 <_strtod_l+0x778>
 800bba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dd23      	ble.n	800bbf2 <_strtod_l+0x78a>
 800bbaa:	4649      	mov	r1, r9
 800bbac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bbae:	9805      	ldr	r0, [sp, #20]
 800bbb0:	f7ff f98c 	bl	800aecc <__pow5mult>
 800bbb4:	4681      	mov	r9, r0
 800bbb6:	b9e0      	cbnz	r0, 800bbf2 <_strtod_l+0x78a>
 800bbb8:	f04f 0900 	mov.w	r9, #0
 800bbbc:	e66f      	b.n	800b89e <_strtod_l+0x436>
 800bbbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bbc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bbc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bbca:	35e2      	adds	r5, #226	@ 0xe2
 800bbcc:	fa01 f305 	lsl.w	r3, r1, r5
 800bbd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bbd4:	e7ba      	b.n	800bb4c <_strtod_l+0x6e4>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbda:	2301      	movs	r3, #1
 800bbdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbde:	e7b5      	b.n	800bb4c <_strtod_l+0x6e4>
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bbe4:	9805      	ldr	r0, [sp, #20]
 800bbe6:	f7ff f9cb 	bl	800af80 <__lshift>
 800bbea:	901a      	str	r0, [sp, #104]	@ 0x68
 800bbec:	2800      	cmp	r0, #0
 800bbee:	d1d9      	bne.n	800bba4 <_strtod_l+0x73c>
 800bbf0:	e655      	b.n	800b89e <_strtod_l+0x436>
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	dd07      	ble.n	800bc06 <_strtod_l+0x79e>
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	4632      	mov	r2, r6
 800bbfa:	9805      	ldr	r0, [sp, #20]
 800bbfc:	f7ff f9c0 	bl	800af80 <__lshift>
 800bc00:	4681      	mov	r9, r0
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d0d8      	beq.n	800bbb8 <_strtod_l+0x750>
 800bc06:	2f00      	cmp	r7, #0
 800bc08:	dd08      	ble.n	800bc1c <_strtod_l+0x7b4>
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	463a      	mov	r2, r7
 800bc0e:	9805      	ldr	r0, [sp, #20]
 800bc10:	f7ff f9b6 	bl	800af80 <__lshift>
 800bc14:	4680      	mov	r8, r0
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f43f ae41 	beq.w	800b89e <_strtod_l+0x436>
 800bc1c:	464a      	mov	r2, r9
 800bc1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc20:	9805      	ldr	r0, [sp, #20]
 800bc22:	f7ff fa35 	bl	800b090 <__mdiff>
 800bc26:	4604      	mov	r4, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	f43f ae38 	beq.w	800b89e <_strtod_l+0x436>
 800bc2e:	68c3      	ldr	r3, [r0, #12]
 800bc30:	4641      	mov	r1, r8
 800bc32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc34:	2300      	movs	r3, #0
 800bc36:	60c3      	str	r3, [r0, #12]
 800bc38:	f7ff fa0e 	bl	800b058 <__mcmp>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	da45      	bge.n	800bccc <_strtod_l+0x864>
 800bc40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc42:	ea53 030a 	orrs.w	r3, r3, sl
 800bc46:	d16b      	bne.n	800bd20 <_strtod_l+0x8b8>
 800bc48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d167      	bne.n	800bd20 <_strtod_l+0x8b8>
 800bc50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc54:	0d1b      	lsrs	r3, r3, #20
 800bc56:	051b      	lsls	r3, r3, #20
 800bc58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc5c:	d960      	bls.n	800bd20 <_strtod_l+0x8b8>
 800bc5e:	6963      	ldr	r3, [r4, #20]
 800bc60:	b913      	cbnz	r3, 800bc68 <_strtod_l+0x800>
 800bc62:	6923      	ldr	r3, [r4, #16]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	dd5b      	ble.n	800bd20 <_strtod_l+0x8b8>
 800bc68:	4621      	mov	r1, r4
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	9805      	ldr	r0, [sp, #20]
 800bc6e:	f7ff f987 	bl	800af80 <__lshift>
 800bc72:	4641      	mov	r1, r8
 800bc74:	4604      	mov	r4, r0
 800bc76:	f7ff f9ef 	bl	800b058 <__mcmp>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	dd50      	ble.n	800bd20 <_strtod_l+0x8b8>
 800bc7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc82:	9a08      	ldr	r2, [sp, #32]
 800bc84:	0d1b      	lsrs	r3, r3, #20
 800bc86:	051b      	lsls	r3, r3, #20
 800bc88:	2a00      	cmp	r2, #0
 800bc8a:	d06a      	beq.n	800bd62 <_strtod_l+0x8fa>
 800bc8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc90:	d867      	bhi.n	800bd62 <_strtod_l+0x8fa>
 800bc92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc96:	f67f ae98 	bls.w	800b9ca <_strtod_l+0x562>
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	4b09      	ldr	r3, [pc, #36]	@ (800bcc4 <_strtod_l+0x85c>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	f7f4 fc85 	bl	80005b0 <__aeabi_dmul>
 800bca6:	4b08      	ldr	r3, [pc, #32]	@ (800bcc8 <_strtod_l+0x860>)
 800bca8:	4682      	mov	sl, r0
 800bcaa:	400b      	ands	r3, r1
 800bcac:	468b      	mov	fp, r1
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	f47f ae00 	bne.w	800b8b4 <_strtod_l+0x44c>
 800bcb4:	2322      	movs	r3, #34	@ 0x22
 800bcb6:	9a05      	ldr	r2, [sp, #20]
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	e5fb      	b.n	800b8b4 <_strtod_l+0x44c>
 800bcbc:	0800de50 	.word	0x0800de50
 800bcc0:	fffffc02 	.word	0xfffffc02
 800bcc4:	39500000 	.word	0x39500000
 800bcc8:	7ff00000 	.word	0x7ff00000
 800bccc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bcd0:	d165      	bne.n	800bd9e <_strtod_l+0x936>
 800bcd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bcd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcd8:	b35a      	cbz	r2, 800bd32 <_strtod_l+0x8ca>
 800bcda:	4a99      	ldr	r2, [pc, #612]	@ (800bf40 <_strtod_l+0xad8>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d12b      	bne.n	800bd38 <_strtod_l+0x8d0>
 800bce0:	9b08      	ldr	r3, [sp, #32]
 800bce2:	4651      	mov	r1, sl
 800bce4:	b303      	cbz	r3, 800bd28 <_strtod_l+0x8c0>
 800bce6:	465a      	mov	r2, fp
 800bce8:	4b96      	ldr	r3, [pc, #600]	@ (800bf44 <_strtod_l+0xadc>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf4:	d81b      	bhi.n	800bd2e <_strtod_l+0x8c6>
 800bcf6:	0d1b      	lsrs	r3, r3, #20
 800bcf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bcfc:	fa02 f303 	lsl.w	r3, r2, r3
 800bd00:	4299      	cmp	r1, r3
 800bd02:	d119      	bne.n	800bd38 <_strtod_l+0x8d0>
 800bd04:	4b90      	ldr	r3, [pc, #576]	@ (800bf48 <_strtod_l+0xae0>)
 800bd06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d102      	bne.n	800bd12 <_strtod_l+0x8aa>
 800bd0c:	3101      	adds	r1, #1
 800bd0e:	f43f adc6 	beq.w	800b89e <_strtod_l+0x436>
 800bd12:	f04f 0a00 	mov.w	sl, #0
 800bd16:	4b8b      	ldr	r3, [pc, #556]	@ (800bf44 <_strtod_l+0xadc>)
 800bd18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd1a:	401a      	ands	r2, r3
 800bd1c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bd20:	9b08      	ldr	r3, [sp, #32]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1b9      	bne.n	800bc9a <_strtod_l+0x832>
 800bd26:	e5c5      	b.n	800b8b4 <_strtod_l+0x44c>
 800bd28:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2c:	e7e8      	b.n	800bd00 <_strtod_l+0x898>
 800bd2e:	4613      	mov	r3, r2
 800bd30:	e7e6      	b.n	800bd00 <_strtod_l+0x898>
 800bd32:	ea53 030a 	orrs.w	r3, r3, sl
 800bd36:	d0a2      	beq.n	800bc7e <_strtod_l+0x816>
 800bd38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bd3a:	b1db      	cbz	r3, 800bd74 <_strtod_l+0x90c>
 800bd3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd3e:	4213      	tst	r3, r2
 800bd40:	d0ee      	beq.n	800bd20 <_strtod_l+0x8b8>
 800bd42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd44:	4650      	mov	r0, sl
 800bd46:	4659      	mov	r1, fp
 800bd48:	9a08      	ldr	r2, [sp, #32]
 800bd4a:	b1bb      	cbz	r3, 800bd7c <_strtod_l+0x914>
 800bd4c:	f7ff fb68 	bl	800b420 <sulp>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd58:	f7f4 fa74 	bl	8000244 <__adddf3>
 800bd5c:	4682      	mov	sl, r0
 800bd5e:	468b      	mov	fp, r1
 800bd60:	e7de      	b.n	800bd20 <_strtod_l+0x8b8>
 800bd62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bd66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bd6a:	f04f 3aff 	mov.w	sl, #4294967295
 800bd6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bd72:	e7d5      	b.n	800bd20 <_strtod_l+0x8b8>
 800bd74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd76:	ea13 0f0a 	tst.w	r3, sl
 800bd7a:	e7e1      	b.n	800bd40 <_strtod_l+0x8d8>
 800bd7c:	f7ff fb50 	bl	800b420 <sulp>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd88:	f7f4 fa5a 	bl	8000240 <__aeabi_dsub>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4682      	mov	sl, r0
 800bd92:	468b      	mov	fp, r1
 800bd94:	f7f4 fe74 	bl	8000a80 <__aeabi_dcmpeq>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d0c1      	beq.n	800bd20 <_strtod_l+0x8b8>
 800bd9c:	e615      	b.n	800b9ca <_strtod_l+0x562>
 800bd9e:	4641      	mov	r1, r8
 800bda0:	4620      	mov	r0, r4
 800bda2:	f7ff fac9 	bl	800b338 <__ratio>
 800bda6:	2200      	movs	r2, #0
 800bda8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bdac:	4606      	mov	r6, r0
 800bdae:	460f      	mov	r7, r1
 800bdb0:	f7f4 fe7a 	bl	8000aa8 <__aeabi_dcmple>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d06d      	beq.n	800be94 <_strtod_l+0xa2c>
 800bdb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d178      	bne.n	800beb0 <_strtod_l+0xa48>
 800bdbe:	f1ba 0f00 	cmp.w	sl, #0
 800bdc2:	d156      	bne.n	800be72 <_strtod_l+0xa0a>
 800bdc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d158      	bne.n	800be80 <_strtod_l+0xa18>
 800bdce:	2200      	movs	r2, #0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	4b5d      	ldr	r3, [pc, #372]	@ (800bf4c <_strtod_l+0xae4>)
 800bdd6:	f7f4 fe5d 	bl	8000a94 <__aeabi_dcmplt>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d157      	bne.n	800be8e <_strtod_l+0xa26>
 800bdde:	4630      	mov	r0, r6
 800bde0:	4639      	mov	r1, r7
 800bde2:	2200      	movs	r2, #0
 800bde4:	4b5a      	ldr	r3, [pc, #360]	@ (800bf50 <_strtod_l+0xae8>)
 800bde6:	f7f4 fbe3 	bl	80005b0 <__aeabi_dmul>
 800bdea:	4606      	mov	r6, r0
 800bdec:	460f      	mov	r7, r1
 800bdee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bdf2:	9606      	str	r6, [sp, #24]
 800bdf4:	9307      	str	r3, [sp, #28]
 800bdf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdfa:	4d52      	ldr	r5, [pc, #328]	@ (800bf44 <_strtod_l+0xadc>)
 800bdfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be02:	401d      	ands	r5, r3
 800be04:	4b53      	ldr	r3, [pc, #332]	@ (800bf54 <_strtod_l+0xaec>)
 800be06:	429d      	cmp	r5, r3
 800be08:	f040 80aa 	bne.w	800bf60 <_strtod_l+0xaf8>
 800be0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be0e:	4650      	mov	r0, sl
 800be10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800be14:	4659      	mov	r1, fp
 800be16:	f7ff f9cf 	bl	800b1b8 <__ulp>
 800be1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be1e:	f7f4 fbc7 	bl	80005b0 <__aeabi_dmul>
 800be22:	4652      	mov	r2, sl
 800be24:	465b      	mov	r3, fp
 800be26:	f7f4 fa0d 	bl	8000244 <__adddf3>
 800be2a:	460b      	mov	r3, r1
 800be2c:	4945      	ldr	r1, [pc, #276]	@ (800bf44 <_strtod_l+0xadc>)
 800be2e:	4a4a      	ldr	r2, [pc, #296]	@ (800bf58 <_strtod_l+0xaf0>)
 800be30:	4019      	ands	r1, r3
 800be32:	4291      	cmp	r1, r2
 800be34:	4682      	mov	sl, r0
 800be36:	d942      	bls.n	800bebe <_strtod_l+0xa56>
 800be38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800be3a:	4b43      	ldr	r3, [pc, #268]	@ (800bf48 <_strtod_l+0xae0>)
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d103      	bne.n	800be48 <_strtod_l+0x9e0>
 800be40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be42:	3301      	adds	r3, #1
 800be44:	f43f ad2b 	beq.w	800b89e <_strtod_l+0x436>
 800be48:	f04f 3aff 	mov.w	sl, #4294967295
 800be4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800bf48 <_strtod_l+0xae0>
 800be50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800be52:	9805      	ldr	r0, [sp, #20]
 800be54:	f7fe fe7e 	bl	800ab54 <_Bfree>
 800be58:	4649      	mov	r1, r9
 800be5a:	9805      	ldr	r0, [sp, #20]
 800be5c:	f7fe fe7a 	bl	800ab54 <_Bfree>
 800be60:	4641      	mov	r1, r8
 800be62:	9805      	ldr	r0, [sp, #20]
 800be64:	f7fe fe76 	bl	800ab54 <_Bfree>
 800be68:	4621      	mov	r1, r4
 800be6a:	9805      	ldr	r0, [sp, #20]
 800be6c:	f7fe fe72 	bl	800ab54 <_Bfree>
 800be70:	e618      	b.n	800baa4 <_strtod_l+0x63c>
 800be72:	f1ba 0f01 	cmp.w	sl, #1
 800be76:	d103      	bne.n	800be80 <_strtod_l+0xa18>
 800be78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f43f ada5 	beq.w	800b9ca <_strtod_l+0x562>
 800be80:	2200      	movs	r2, #0
 800be82:	4b36      	ldr	r3, [pc, #216]	@ (800bf5c <_strtod_l+0xaf4>)
 800be84:	2600      	movs	r6, #0
 800be86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be8a:	4f30      	ldr	r7, [pc, #192]	@ (800bf4c <_strtod_l+0xae4>)
 800be8c:	e7b3      	b.n	800bdf6 <_strtod_l+0x98e>
 800be8e:	2600      	movs	r6, #0
 800be90:	4f2f      	ldr	r7, [pc, #188]	@ (800bf50 <_strtod_l+0xae8>)
 800be92:	e7ac      	b.n	800bdee <_strtod_l+0x986>
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	4b2d      	ldr	r3, [pc, #180]	@ (800bf50 <_strtod_l+0xae8>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	f7f4 fb88 	bl	80005b0 <__aeabi_dmul>
 800bea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d0a1      	beq.n	800bdee <_strtod_l+0x986>
 800beaa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800beae:	e7a2      	b.n	800bdf6 <_strtod_l+0x98e>
 800beb0:	2200      	movs	r2, #0
 800beb2:	4b26      	ldr	r3, [pc, #152]	@ (800bf4c <_strtod_l+0xae4>)
 800beb4:	4616      	mov	r6, r2
 800beb6:	461f      	mov	r7, r3
 800beb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bebc:	e79b      	b.n	800bdf6 <_strtod_l+0x98e>
 800bebe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bec2:	9b08      	ldr	r3, [sp, #32]
 800bec4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1c1      	bne.n	800be50 <_strtod_l+0x9e8>
 800becc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bed0:	0d1b      	lsrs	r3, r3, #20
 800bed2:	051b      	lsls	r3, r3, #20
 800bed4:	429d      	cmp	r5, r3
 800bed6:	d1bb      	bne.n	800be50 <_strtod_l+0x9e8>
 800bed8:	4630      	mov	r0, r6
 800beda:	4639      	mov	r1, r7
 800bedc:	f7f5 f9aa 	bl	8001234 <__aeabi_d2lz>
 800bee0:	f7f4 fb38 	bl	8000554 <__aeabi_l2d>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4630      	mov	r0, r6
 800beea:	4639      	mov	r1, r7
 800beec:	f7f4 f9a8 	bl	8000240 <__aeabi_dsub>
 800bef0:	460b      	mov	r3, r1
 800bef2:	4602      	mov	r2, r0
 800bef4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bef8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800befc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befe:	ea46 060a 	orr.w	r6, r6, sl
 800bf02:	431e      	orrs	r6, r3
 800bf04:	d069      	beq.n	800bfda <_strtod_l+0xb72>
 800bf06:	a30a      	add	r3, pc, #40	@ (adr r3, 800bf30 <_strtod_l+0xac8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 fdc2 	bl	8000a94 <__aeabi_dcmplt>
 800bf10:	2800      	cmp	r0, #0
 800bf12:	f47f accf 	bne.w	800b8b4 <_strtod_l+0x44c>
 800bf16:	a308      	add	r3, pc, #32	@ (adr r3, 800bf38 <_strtod_l+0xad0>)
 800bf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf20:	f7f4 fdd6 	bl	8000ad0 <__aeabi_dcmpgt>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d093      	beq.n	800be50 <_strtod_l+0x9e8>
 800bf28:	e4c4      	b.n	800b8b4 <_strtod_l+0x44c>
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w
 800bf30:	94a03595 	.word	0x94a03595
 800bf34:	3fdfffff 	.word	0x3fdfffff
 800bf38:	35afe535 	.word	0x35afe535
 800bf3c:	3fe00000 	.word	0x3fe00000
 800bf40:	000fffff 	.word	0x000fffff
 800bf44:	7ff00000 	.word	0x7ff00000
 800bf48:	7fefffff 	.word	0x7fefffff
 800bf4c:	3ff00000 	.word	0x3ff00000
 800bf50:	3fe00000 	.word	0x3fe00000
 800bf54:	7fe00000 	.word	0x7fe00000
 800bf58:	7c9fffff 	.word	0x7c9fffff
 800bf5c:	bff00000 	.word	0xbff00000
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	b323      	cbz	r3, 800bfae <_strtod_l+0xb46>
 800bf64:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf68:	d821      	bhi.n	800bfae <_strtod_l+0xb46>
 800bf6a:	a327      	add	r3, pc, #156	@ (adr r3, 800c008 <_strtod_l+0xba0>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 fd98 	bl	8000aa8 <__aeabi_dcmple>
 800bf78:	b1a0      	cbz	r0, 800bfa4 <_strtod_l+0xb3c>
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7f4 fdef 	bl	8000b60 <__aeabi_d2uiz>
 800bf82:	2801      	cmp	r0, #1
 800bf84:	bf38      	it	cc
 800bf86:	2001      	movcc	r0, #1
 800bf88:	f7f4 fa98 	bl	80004bc <__aeabi_ui2d>
 800bf8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf8e:	4606      	mov	r6, r0
 800bf90:	460f      	mov	r7, r1
 800bf92:	b9fb      	cbnz	r3, 800bfd4 <_strtod_l+0xb6c>
 800bf94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf98:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf9a:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bfa0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bfa4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfa6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bfaa:	1b5b      	subs	r3, r3, r5
 800bfac:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfb2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bfb6:	f7ff f8ff 	bl	800b1b8 <__ulp>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4650      	mov	r0, sl
 800bfc0:	4659      	mov	r1, fp
 800bfc2:	f7f4 faf5 	bl	80005b0 <__aeabi_dmul>
 800bfc6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bfca:	f7f4 f93b 	bl	8000244 <__adddf3>
 800bfce:	4682      	mov	sl, r0
 800bfd0:	468b      	mov	fp, r1
 800bfd2:	e776      	b.n	800bec2 <_strtod_l+0xa5a>
 800bfd4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bfd8:	e7e0      	b.n	800bf9c <_strtod_l+0xb34>
 800bfda:	a30d      	add	r3, pc, #52	@ (adr r3, 800c010 <_strtod_l+0xba8>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	f7f4 fd58 	bl	8000a94 <__aeabi_dcmplt>
 800bfe4:	e79e      	b.n	800bf24 <_strtod_l+0xabc>
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bfea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bfec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	f7ff ba77 	b.w	800b4e2 <_strtod_l+0x7a>
 800bff4:	2a65      	cmp	r2, #101	@ 0x65
 800bff6:	f43f ab6e 	beq.w	800b6d6 <_strtod_l+0x26e>
 800bffa:	2a45      	cmp	r2, #69	@ 0x45
 800bffc:	f43f ab6b 	beq.w	800b6d6 <_strtod_l+0x26e>
 800c000:	2301      	movs	r3, #1
 800c002:	f7ff bba6 	b.w	800b752 <_strtod_l+0x2ea>
 800c006:	bf00      	nop
 800c008:	ffc00000 	.word	0xffc00000
 800c00c:	41dfffff 	.word	0x41dfffff
 800c010:	94a03595 	.word	0x94a03595
 800c014:	3fcfffff 	.word	0x3fcfffff

0800c018 <_strtod_r>:
 800c018:	4b01      	ldr	r3, [pc, #4]	@ (800c020 <_strtod_r+0x8>)
 800c01a:	f7ff ba25 	b.w	800b468 <_strtod_l>
 800c01e:	bf00      	nop
 800c020:	200000bc 	.word	0x200000bc

0800c024 <_strtol_l.constprop.0>:
 800c024:	2b24      	cmp	r3, #36	@ 0x24
 800c026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c02a:	4686      	mov	lr, r0
 800c02c:	4690      	mov	r8, r2
 800c02e:	d801      	bhi.n	800c034 <_strtol_l.constprop.0+0x10>
 800c030:	2b01      	cmp	r3, #1
 800c032:	d106      	bne.n	800c042 <_strtol_l.constprop.0+0x1e>
 800c034:	f7fd fdc0 	bl	8009bb8 <__errno>
 800c038:	2316      	movs	r3, #22
 800c03a:	6003      	str	r3, [r0, #0]
 800c03c:	2000      	movs	r0, #0
 800c03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c042:	460d      	mov	r5, r1
 800c044:	4833      	ldr	r0, [pc, #204]	@ (800c114 <_strtol_l.constprop.0+0xf0>)
 800c046:	462a      	mov	r2, r5
 800c048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c04c:	5d06      	ldrb	r6, [r0, r4]
 800c04e:	f016 0608 	ands.w	r6, r6, #8
 800c052:	d1f8      	bne.n	800c046 <_strtol_l.constprop.0+0x22>
 800c054:	2c2d      	cmp	r4, #45	@ 0x2d
 800c056:	d12d      	bne.n	800c0b4 <_strtol_l.constprop.0+0x90>
 800c058:	2601      	movs	r6, #1
 800c05a:	782c      	ldrb	r4, [r5, #0]
 800c05c:	1c95      	adds	r5, r2, #2
 800c05e:	f033 0210 	bics.w	r2, r3, #16
 800c062:	d109      	bne.n	800c078 <_strtol_l.constprop.0+0x54>
 800c064:	2c30      	cmp	r4, #48	@ 0x30
 800c066:	d12a      	bne.n	800c0be <_strtol_l.constprop.0+0x9a>
 800c068:	782a      	ldrb	r2, [r5, #0]
 800c06a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c06e:	2a58      	cmp	r2, #88	@ 0x58
 800c070:	d125      	bne.n	800c0be <_strtol_l.constprop.0+0x9a>
 800c072:	2310      	movs	r3, #16
 800c074:	786c      	ldrb	r4, [r5, #1]
 800c076:	3502      	adds	r5, #2
 800c078:	2200      	movs	r2, #0
 800c07a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c07e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c082:	fbbc f9f3 	udiv	r9, ip, r3
 800c086:	4610      	mov	r0, r2
 800c088:	fb03 ca19 	mls	sl, r3, r9, ip
 800c08c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c090:	2f09      	cmp	r7, #9
 800c092:	d81b      	bhi.n	800c0cc <_strtol_l.constprop.0+0xa8>
 800c094:	463c      	mov	r4, r7
 800c096:	42a3      	cmp	r3, r4
 800c098:	dd27      	ble.n	800c0ea <_strtol_l.constprop.0+0xc6>
 800c09a:	1c57      	adds	r7, r2, #1
 800c09c:	d007      	beq.n	800c0ae <_strtol_l.constprop.0+0x8a>
 800c09e:	4581      	cmp	r9, r0
 800c0a0:	d320      	bcc.n	800c0e4 <_strtol_l.constprop.0+0xc0>
 800c0a2:	d101      	bne.n	800c0a8 <_strtol_l.constprop.0+0x84>
 800c0a4:	45a2      	cmp	sl, r4
 800c0a6:	db1d      	blt.n	800c0e4 <_strtol_l.constprop.0+0xc0>
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	fb00 4003 	mla	r0, r0, r3, r4
 800c0ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0b2:	e7eb      	b.n	800c08c <_strtol_l.constprop.0+0x68>
 800c0b4:	2c2b      	cmp	r4, #43	@ 0x2b
 800c0b6:	bf04      	itt	eq
 800c0b8:	782c      	ldrbeq	r4, [r5, #0]
 800c0ba:	1c95      	addeq	r5, r2, #2
 800c0bc:	e7cf      	b.n	800c05e <_strtol_l.constprop.0+0x3a>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1da      	bne.n	800c078 <_strtol_l.constprop.0+0x54>
 800c0c2:	2c30      	cmp	r4, #48	@ 0x30
 800c0c4:	bf0c      	ite	eq
 800c0c6:	2308      	moveq	r3, #8
 800c0c8:	230a      	movne	r3, #10
 800c0ca:	e7d5      	b.n	800c078 <_strtol_l.constprop.0+0x54>
 800c0cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c0d0:	2f19      	cmp	r7, #25
 800c0d2:	d801      	bhi.n	800c0d8 <_strtol_l.constprop.0+0xb4>
 800c0d4:	3c37      	subs	r4, #55	@ 0x37
 800c0d6:	e7de      	b.n	800c096 <_strtol_l.constprop.0+0x72>
 800c0d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c0dc:	2f19      	cmp	r7, #25
 800c0de:	d804      	bhi.n	800c0ea <_strtol_l.constprop.0+0xc6>
 800c0e0:	3c57      	subs	r4, #87	@ 0x57
 800c0e2:	e7d8      	b.n	800c096 <_strtol_l.constprop.0+0x72>
 800c0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e8:	e7e1      	b.n	800c0ae <_strtol_l.constprop.0+0x8a>
 800c0ea:	1c53      	adds	r3, r2, #1
 800c0ec:	d108      	bne.n	800c100 <_strtol_l.constprop.0+0xdc>
 800c0ee:	2322      	movs	r3, #34	@ 0x22
 800c0f0:	4660      	mov	r0, ip
 800c0f2:	f8ce 3000 	str.w	r3, [lr]
 800c0f6:	f1b8 0f00 	cmp.w	r8, #0
 800c0fa:	d0a0      	beq.n	800c03e <_strtol_l.constprop.0+0x1a>
 800c0fc:	1e69      	subs	r1, r5, #1
 800c0fe:	e006      	b.n	800c10e <_strtol_l.constprop.0+0xea>
 800c100:	b106      	cbz	r6, 800c104 <_strtol_l.constprop.0+0xe0>
 800c102:	4240      	negs	r0, r0
 800c104:	f1b8 0f00 	cmp.w	r8, #0
 800c108:	d099      	beq.n	800c03e <_strtol_l.constprop.0+0x1a>
 800c10a:	2a00      	cmp	r2, #0
 800c10c:	d1f6      	bne.n	800c0fc <_strtol_l.constprop.0+0xd8>
 800c10e:	f8c8 1000 	str.w	r1, [r8]
 800c112:	e794      	b.n	800c03e <_strtol_l.constprop.0+0x1a>
 800c114:	0800de79 	.word	0x0800de79

0800c118 <_strtol_r>:
 800c118:	f7ff bf84 	b.w	800c024 <_strtol_l.constprop.0>

0800c11c <__ssputs_r>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	461f      	mov	r7, r3
 800c122:	688e      	ldr	r6, [r1, #8]
 800c124:	4682      	mov	sl, r0
 800c126:	42be      	cmp	r6, r7
 800c128:	460c      	mov	r4, r1
 800c12a:	4690      	mov	r8, r2
 800c12c:	680b      	ldr	r3, [r1, #0]
 800c12e:	d82d      	bhi.n	800c18c <__ssputs_r+0x70>
 800c130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c138:	d026      	beq.n	800c188 <__ssputs_r+0x6c>
 800c13a:	6965      	ldr	r5, [r4, #20]
 800c13c:	6909      	ldr	r1, [r1, #16]
 800c13e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c142:	eba3 0901 	sub.w	r9, r3, r1
 800c146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c14a:	1c7b      	adds	r3, r7, #1
 800c14c:	444b      	add	r3, r9
 800c14e:	106d      	asrs	r5, r5, #1
 800c150:	429d      	cmp	r5, r3
 800c152:	bf38      	it	cc
 800c154:	461d      	movcc	r5, r3
 800c156:	0553      	lsls	r3, r2, #21
 800c158:	d527      	bpl.n	800c1aa <__ssputs_r+0x8e>
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7fe fc2e 	bl	800a9bc <_malloc_r>
 800c160:	4606      	mov	r6, r0
 800c162:	b360      	cbz	r0, 800c1be <__ssputs_r+0xa2>
 800c164:	464a      	mov	r2, r9
 800c166:	6921      	ldr	r1, [r4, #16]
 800c168:	f000 fa14 	bl	800c594 <memcpy>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	6126      	str	r6, [r4, #16]
 800c17a:	444e      	add	r6, r9
 800c17c:	6026      	str	r6, [r4, #0]
 800c17e:	463e      	mov	r6, r7
 800c180:	6165      	str	r5, [r4, #20]
 800c182:	eba5 0509 	sub.w	r5, r5, r9
 800c186:	60a5      	str	r5, [r4, #8]
 800c188:	42be      	cmp	r6, r7
 800c18a:	d900      	bls.n	800c18e <__ssputs_r+0x72>
 800c18c:	463e      	mov	r6, r7
 800c18e:	4632      	mov	r2, r6
 800c190:	4641      	mov	r1, r8
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	f000 f9c2 	bl	800c51c <memmove>
 800c198:	2000      	movs	r0, #0
 800c19a:	68a3      	ldr	r3, [r4, #8]
 800c19c:	1b9b      	subs	r3, r3, r6
 800c19e:	60a3      	str	r3, [r4, #8]
 800c1a0:	6823      	ldr	r3, [r4, #0]
 800c1a2:	4433      	add	r3, r6
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	f000 fd83 	bl	800ccb6 <_realloc_r>
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d1e0      	bne.n	800c178 <__ssputs_r+0x5c>
 800c1b6:	4650      	mov	r0, sl
 800c1b8:	6921      	ldr	r1, [r4, #16]
 800c1ba:	f7fe fb8d 	bl	800a8d8 <_free_r>
 800c1be:	230c      	movs	r3, #12
 800c1c0:	f8ca 3000 	str.w	r3, [sl]
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	e7e9      	b.n	800c1a6 <__ssputs_r+0x8a>
	...

0800c1d4 <_svfiprintf_r>:
 800c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d8:	4698      	mov	r8, r3
 800c1da:	898b      	ldrh	r3, [r1, #12]
 800c1dc:	4607      	mov	r7, r0
 800c1de:	061b      	lsls	r3, r3, #24
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	b09d      	sub	sp, #116	@ 0x74
 800c1e6:	d510      	bpl.n	800c20a <_svfiprintf_r+0x36>
 800c1e8:	690b      	ldr	r3, [r1, #16]
 800c1ea:	b973      	cbnz	r3, 800c20a <_svfiprintf_r+0x36>
 800c1ec:	2140      	movs	r1, #64	@ 0x40
 800c1ee:	f7fe fbe5 	bl	800a9bc <_malloc_r>
 800c1f2:	6028      	str	r0, [r5, #0]
 800c1f4:	6128      	str	r0, [r5, #16]
 800c1f6:	b930      	cbnz	r0, 800c206 <_svfiprintf_r+0x32>
 800c1f8:	230c      	movs	r3, #12
 800c1fa:	603b      	str	r3, [r7, #0]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	b01d      	add	sp, #116	@ 0x74
 800c202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c206:	2340      	movs	r3, #64	@ 0x40
 800c208:	616b      	str	r3, [r5, #20]
 800c20a:	2300      	movs	r3, #0
 800c20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c20e:	2320      	movs	r3, #32
 800c210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c214:	2330      	movs	r3, #48	@ 0x30
 800c216:	f04f 0901 	mov.w	r9, #1
 800c21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c21e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c3b8 <_svfiprintf_r+0x1e4>
 800c222:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c226:	4623      	mov	r3, r4
 800c228:	469a      	mov	sl, r3
 800c22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c22e:	b10a      	cbz	r2, 800c234 <_svfiprintf_r+0x60>
 800c230:	2a25      	cmp	r2, #37	@ 0x25
 800c232:	d1f9      	bne.n	800c228 <_svfiprintf_r+0x54>
 800c234:	ebba 0b04 	subs.w	fp, sl, r4
 800c238:	d00b      	beq.n	800c252 <_svfiprintf_r+0x7e>
 800c23a:	465b      	mov	r3, fp
 800c23c:	4622      	mov	r2, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	4638      	mov	r0, r7
 800c242:	f7ff ff6b 	bl	800c11c <__ssputs_r>
 800c246:	3001      	adds	r0, #1
 800c248:	f000 80a7 	beq.w	800c39a <_svfiprintf_r+0x1c6>
 800c24c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c24e:	445a      	add	r2, fp
 800c250:	9209      	str	r2, [sp, #36]	@ 0x24
 800c252:	f89a 3000 	ldrb.w	r3, [sl]
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 809f 	beq.w	800c39a <_svfiprintf_r+0x1c6>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f04f 32ff 	mov.w	r2, #4294967295
 800c262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c266:	f10a 0a01 	add.w	sl, sl, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	9307      	str	r3, [sp, #28]
 800c26e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c272:	931a      	str	r3, [sp, #104]	@ 0x68
 800c274:	4654      	mov	r4, sl
 800c276:	2205      	movs	r2, #5
 800c278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c27c:	484e      	ldr	r0, [pc, #312]	@ (800c3b8 <_svfiprintf_r+0x1e4>)
 800c27e:	f7fd fcc8 	bl	8009c12 <memchr>
 800c282:	9a04      	ldr	r2, [sp, #16]
 800c284:	b9d8      	cbnz	r0, 800c2be <_svfiprintf_r+0xea>
 800c286:	06d0      	lsls	r0, r2, #27
 800c288:	bf44      	itt	mi
 800c28a:	2320      	movmi	r3, #32
 800c28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c290:	0711      	lsls	r1, r2, #28
 800c292:	bf44      	itt	mi
 800c294:	232b      	movmi	r3, #43	@ 0x2b
 800c296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c29a:	f89a 3000 	ldrb.w	r3, [sl]
 800c29e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2a0:	d015      	beq.n	800c2ce <_svfiprintf_r+0xfa>
 800c2a2:	4654      	mov	r4, sl
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f04f 0c0a 	mov.w	ip, #10
 800c2aa:	9a07      	ldr	r2, [sp, #28]
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2b2:	3b30      	subs	r3, #48	@ 0x30
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	d94b      	bls.n	800c350 <_svfiprintf_r+0x17c>
 800c2b8:	b1b0      	cbz	r0, 800c2e8 <_svfiprintf_r+0x114>
 800c2ba:	9207      	str	r2, [sp, #28]
 800c2bc:	e014      	b.n	800c2e8 <_svfiprintf_r+0x114>
 800c2be:	eba0 0308 	sub.w	r3, r0, r8
 800c2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	46a2      	mov	sl, r4
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	e7d2      	b.n	800c274 <_svfiprintf_r+0xa0>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	1d19      	adds	r1, r3, #4
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	9103      	str	r1, [sp, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	bfbb      	ittet	lt
 800c2da:	425b      	neglt	r3, r3
 800c2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800c2e0:	9307      	strge	r3, [sp, #28]
 800c2e2:	9307      	strlt	r3, [sp, #28]
 800c2e4:	bfb8      	it	lt
 800c2e6:	9204      	strlt	r2, [sp, #16]
 800c2e8:	7823      	ldrb	r3, [r4, #0]
 800c2ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ec:	d10a      	bne.n	800c304 <_svfiprintf_r+0x130>
 800c2ee:	7863      	ldrb	r3, [r4, #1]
 800c2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2f2:	d132      	bne.n	800c35a <_svfiprintf_r+0x186>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	3402      	adds	r4, #2
 800c2f8:	1d1a      	adds	r2, r3, #4
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	9203      	str	r2, [sp, #12]
 800c2fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c302:	9305      	str	r3, [sp, #20]
 800c304:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c3bc <_svfiprintf_r+0x1e8>
 800c308:	2203      	movs	r2, #3
 800c30a:	4650      	mov	r0, sl
 800c30c:	7821      	ldrb	r1, [r4, #0]
 800c30e:	f7fd fc80 	bl	8009c12 <memchr>
 800c312:	b138      	cbz	r0, 800c324 <_svfiprintf_r+0x150>
 800c314:	2240      	movs	r2, #64	@ 0x40
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	eba0 000a 	sub.w	r0, r0, sl
 800c31c:	4082      	lsls	r2, r0
 800c31e:	4313      	orrs	r3, r2
 800c320:	3401      	adds	r4, #1
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c328:	2206      	movs	r2, #6
 800c32a:	4825      	ldr	r0, [pc, #148]	@ (800c3c0 <_svfiprintf_r+0x1ec>)
 800c32c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c330:	f7fd fc6f 	bl	8009c12 <memchr>
 800c334:	2800      	cmp	r0, #0
 800c336:	d036      	beq.n	800c3a6 <_svfiprintf_r+0x1d2>
 800c338:	4b22      	ldr	r3, [pc, #136]	@ (800c3c4 <_svfiprintf_r+0x1f0>)
 800c33a:	bb1b      	cbnz	r3, 800c384 <_svfiprintf_r+0x1b0>
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	3307      	adds	r3, #7
 800c340:	f023 0307 	bic.w	r3, r3, #7
 800c344:	3308      	adds	r3, #8
 800c346:	9303      	str	r3, [sp, #12]
 800c348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34a:	4433      	add	r3, r6
 800c34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c34e:	e76a      	b.n	800c226 <_svfiprintf_r+0x52>
 800c350:	460c      	mov	r4, r1
 800c352:	2001      	movs	r0, #1
 800c354:	fb0c 3202 	mla	r2, ip, r2, r3
 800c358:	e7a8      	b.n	800c2ac <_svfiprintf_r+0xd8>
 800c35a:	2300      	movs	r3, #0
 800c35c:	f04f 0c0a 	mov.w	ip, #10
 800c360:	4619      	mov	r1, r3
 800c362:	3401      	adds	r4, #1
 800c364:	9305      	str	r3, [sp, #20]
 800c366:	4620      	mov	r0, r4
 800c368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c36c:	3a30      	subs	r2, #48	@ 0x30
 800c36e:	2a09      	cmp	r2, #9
 800c370:	d903      	bls.n	800c37a <_svfiprintf_r+0x1a6>
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0c6      	beq.n	800c304 <_svfiprintf_r+0x130>
 800c376:	9105      	str	r1, [sp, #20]
 800c378:	e7c4      	b.n	800c304 <_svfiprintf_r+0x130>
 800c37a:	4604      	mov	r4, r0
 800c37c:	2301      	movs	r3, #1
 800c37e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c382:	e7f0      	b.n	800c366 <_svfiprintf_r+0x192>
 800c384:	ab03      	add	r3, sp, #12
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	462a      	mov	r2, r5
 800c38a:	4638      	mov	r0, r7
 800c38c:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c8 <_svfiprintf_r+0x1f4>)
 800c38e:	a904      	add	r1, sp, #16
 800c390:	f7fc fccc 	bl	8008d2c <_printf_float>
 800c394:	1c42      	adds	r2, r0, #1
 800c396:	4606      	mov	r6, r0
 800c398:	d1d6      	bne.n	800c348 <_svfiprintf_r+0x174>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	065b      	lsls	r3, r3, #25
 800c39e:	f53f af2d 	bmi.w	800c1fc <_svfiprintf_r+0x28>
 800c3a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3a4:	e72c      	b.n	800c200 <_svfiprintf_r+0x2c>
 800c3a6:	ab03      	add	r3, sp, #12
 800c3a8:	9300      	str	r3, [sp, #0]
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4638      	mov	r0, r7
 800c3ae:	4b06      	ldr	r3, [pc, #24]	@ (800c3c8 <_svfiprintf_r+0x1f4>)
 800c3b0:	a904      	add	r1, sp, #16
 800c3b2:	f7fc ff59 	bl	8009268 <_printf_i>
 800c3b6:	e7ed      	b.n	800c394 <_svfiprintf_r+0x1c0>
 800c3b8:	0800df79 	.word	0x0800df79
 800c3bc:	0800df7f 	.word	0x0800df7f
 800c3c0:	0800df83 	.word	0x0800df83
 800c3c4:	08008d2d 	.word	0x08008d2d
 800c3c8:	0800c11d 	.word	0x0800c11d

0800c3cc <__sflush_r>:
 800c3cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	0716      	lsls	r6, r2, #28
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	d454      	bmi.n	800c484 <__sflush_r+0xb8>
 800c3da:	684b      	ldr	r3, [r1, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc02      	bgt.n	800c3e6 <__sflush_r+0x1a>
 800c3e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	dd48      	ble.n	800c478 <__sflush_r+0xac>
 800c3e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c3e8:	2e00      	cmp	r6, #0
 800c3ea:	d045      	beq.n	800c478 <__sflush_r+0xac>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c3f2:	682f      	ldr	r7, [r5, #0]
 800c3f4:	6a21      	ldr	r1, [r4, #32]
 800c3f6:	602b      	str	r3, [r5, #0]
 800c3f8:	d030      	beq.n	800c45c <__sflush_r+0x90>
 800c3fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c3fc:	89a3      	ldrh	r3, [r4, #12]
 800c3fe:	0759      	lsls	r1, r3, #29
 800c400:	d505      	bpl.n	800c40e <__sflush_r+0x42>
 800c402:	6863      	ldr	r3, [r4, #4]
 800c404:	1ad2      	subs	r2, r2, r3
 800c406:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c408:	b10b      	cbz	r3, 800c40e <__sflush_r+0x42>
 800c40a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c40c:	1ad2      	subs	r2, r2, r3
 800c40e:	2300      	movs	r3, #0
 800c410:	4628      	mov	r0, r5
 800c412:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c414:	6a21      	ldr	r1, [r4, #32]
 800c416:	47b0      	blx	r6
 800c418:	1c43      	adds	r3, r0, #1
 800c41a:	89a3      	ldrh	r3, [r4, #12]
 800c41c:	d106      	bne.n	800c42c <__sflush_r+0x60>
 800c41e:	6829      	ldr	r1, [r5, #0]
 800c420:	291d      	cmp	r1, #29
 800c422:	d82b      	bhi.n	800c47c <__sflush_r+0xb0>
 800c424:	4a28      	ldr	r2, [pc, #160]	@ (800c4c8 <__sflush_r+0xfc>)
 800c426:	410a      	asrs	r2, r1
 800c428:	07d6      	lsls	r6, r2, #31
 800c42a:	d427      	bmi.n	800c47c <__sflush_r+0xb0>
 800c42c:	2200      	movs	r2, #0
 800c42e:	6062      	str	r2, [r4, #4]
 800c430:	6922      	ldr	r2, [r4, #16]
 800c432:	04d9      	lsls	r1, r3, #19
 800c434:	6022      	str	r2, [r4, #0]
 800c436:	d504      	bpl.n	800c442 <__sflush_r+0x76>
 800c438:	1c42      	adds	r2, r0, #1
 800c43a:	d101      	bne.n	800c440 <__sflush_r+0x74>
 800c43c:	682b      	ldr	r3, [r5, #0]
 800c43e:	b903      	cbnz	r3, 800c442 <__sflush_r+0x76>
 800c440:	6560      	str	r0, [r4, #84]	@ 0x54
 800c442:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c444:	602f      	str	r7, [r5, #0]
 800c446:	b1b9      	cbz	r1, 800c478 <__sflush_r+0xac>
 800c448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c44c:	4299      	cmp	r1, r3
 800c44e:	d002      	beq.n	800c456 <__sflush_r+0x8a>
 800c450:	4628      	mov	r0, r5
 800c452:	f7fe fa41 	bl	800a8d8 <_free_r>
 800c456:	2300      	movs	r3, #0
 800c458:	6363      	str	r3, [r4, #52]	@ 0x34
 800c45a:	e00d      	b.n	800c478 <__sflush_r+0xac>
 800c45c:	2301      	movs	r3, #1
 800c45e:	4628      	mov	r0, r5
 800c460:	47b0      	blx	r6
 800c462:	4602      	mov	r2, r0
 800c464:	1c50      	adds	r0, r2, #1
 800c466:	d1c9      	bne.n	800c3fc <__sflush_r+0x30>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d0c6      	beq.n	800c3fc <__sflush_r+0x30>
 800c46e:	2b1d      	cmp	r3, #29
 800c470:	d001      	beq.n	800c476 <__sflush_r+0xaa>
 800c472:	2b16      	cmp	r3, #22
 800c474:	d11d      	bne.n	800c4b2 <__sflush_r+0xe6>
 800c476:	602f      	str	r7, [r5, #0]
 800c478:	2000      	movs	r0, #0
 800c47a:	e021      	b.n	800c4c0 <__sflush_r+0xf4>
 800c47c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c480:	b21b      	sxth	r3, r3
 800c482:	e01a      	b.n	800c4ba <__sflush_r+0xee>
 800c484:	690f      	ldr	r7, [r1, #16]
 800c486:	2f00      	cmp	r7, #0
 800c488:	d0f6      	beq.n	800c478 <__sflush_r+0xac>
 800c48a:	0793      	lsls	r3, r2, #30
 800c48c:	bf18      	it	ne
 800c48e:	2300      	movne	r3, #0
 800c490:	680e      	ldr	r6, [r1, #0]
 800c492:	bf08      	it	eq
 800c494:	694b      	ldreq	r3, [r1, #20]
 800c496:	1bf6      	subs	r6, r6, r7
 800c498:	600f      	str	r7, [r1, #0]
 800c49a:	608b      	str	r3, [r1, #8]
 800c49c:	2e00      	cmp	r6, #0
 800c49e:	ddeb      	ble.n	800c478 <__sflush_r+0xac>
 800c4a0:	4633      	mov	r3, r6
 800c4a2:	463a      	mov	r2, r7
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	6a21      	ldr	r1, [r4, #32]
 800c4a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c4ac:	47e0      	blx	ip
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	dc07      	bgt.n	800c4c2 <__sflush_r+0xf6>
 800c4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4c2:	4407      	add	r7, r0
 800c4c4:	1a36      	subs	r6, r6, r0
 800c4c6:	e7e9      	b.n	800c49c <__sflush_r+0xd0>
 800c4c8:	dfbffffe 	.word	0xdfbffffe

0800c4cc <_fflush_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	690b      	ldr	r3, [r1, #16]
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	b913      	cbnz	r3, 800c4dc <_fflush_r+0x10>
 800c4d6:	2500      	movs	r5, #0
 800c4d8:	4628      	mov	r0, r5
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	b118      	cbz	r0, 800c4e6 <_fflush_r+0x1a>
 800c4de:	6a03      	ldr	r3, [r0, #32]
 800c4e0:	b90b      	cbnz	r3, 800c4e6 <_fflush_r+0x1a>
 800c4e2:	f7fd fa7d 	bl	80099e0 <__sinit>
 800c4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d0f3      	beq.n	800c4d6 <_fflush_r+0xa>
 800c4ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c4f0:	07d0      	lsls	r0, r2, #31
 800c4f2:	d404      	bmi.n	800c4fe <_fflush_r+0x32>
 800c4f4:	0599      	lsls	r1, r3, #22
 800c4f6:	d402      	bmi.n	800c4fe <_fflush_r+0x32>
 800c4f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4fa:	f7fd fb88 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800c4fe:	4628      	mov	r0, r5
 800c500:	4621      	mov	r1, r4
 800c502:	f7ff ff63 	bl	800c3cc <__sflush_r>
 800c506:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c508:	4605      	mov	r5, r0
 800c50a:	07da      	lsls	r2, r3, #31
 800c50c:	d4e4      	bmi.n	800c4d8 <_fflush_r+0xc>
 800c50e:	89a3      	ldrh	r3, [r4, #12]
 800c510:	059b      	lsls	r3, r3, #22
 800c512:	d4e1      	bmi.n	800c4d8 <_fflush_r+0xc>
 800c514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c516:	f7fd fb7b 	bl	8009c10 <__retarget_lock_release_recursive>
 800c51a:	e7dd      	b.n	800c4d8 <_fflush_r+0xc>

0800c51c <memmove>:
 800c51c:	4288      	cmp	r0, r1
 800c51e:	b510      	push	{r4, lr}
 800c520:	eb01 0402 	add.w	r4, r1, r2
 800c524:	d902      	bls.n	800c52c <memmove+0x10>
 800c526:	4284      	cmp	r4, r0
 800c528:	4623      	mov	r3, r4
 800c52a:	d807      	bhi.n	800c53c <memmove+0x20>
 800c52c:	1e43      	subs	r3, r0, #1
 800c52e:	42a1      	cmp	r1, r4
 800c530:	d008      	beq.n	800c544 <memmove+0x28>
 800c532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c53a:	e7f8      	b.n	800c52e <memmove+0x12>
 800c53c:	4601      	mov	r1, r0
 800c53e:	4402      	add	r2, r0
 800c540:	428a      	cmp	r2, r1
 800c542:	d100      	bne.n	800c546 <memmove+0x2a>
 800c544:	bd10      	pop	{r4, pc}
 800c546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c54a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c54e:	e7f7      	b.n	800c540 <memmove+0x24>

0800c550 <strncmp>:
 800c550:	b510      	push	{r4, lr}
 800c552:	b16a      	cbz	r2, 800c570 <strncmp+0x20>
 800c554:	3901      	subs	r1, #1
 800c556:	1884      	adds	r4, r0, r2
 800c558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c55c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c560:	429a      	cmp	r2, r3
 800c562:	d103      	bne.n	800c56c <strncmp+0x1c>
 800c564:	42a0      	cmp	r0, r4
 800c566:	d001      	beq.n	800c56c <strncmp+0x1c>
 800c568:	2a00      	cmp	r2, #0
 800c56a:	d1f5      	bne.n	800c558 <strncmp+0x8>
 800c56c:	1ad0      	subs	r0, r2, r3
 800c56e:	bd10      	pop	{r4, pc}
 800c570:	4610      	mov	r0, r2
 800c572:	e7fc      	b.n	800c56e <strncmp+0x1e>

0800c574 <_sbrk_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	2300      	movs	r3, #0
 800c578:	4d05      	ldr	r5, [pc, #20]	@ (800c590 <_sbrk_r+0x1c>)
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	f7f7 fd3c 	bl	8003ffc <_sbrk>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_sbrk_r+0x1a>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_sbrk_r+0x1a>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	200009d0 	.word	0x200009d0

0800c594 <memcpy>:
 800c594:	440a      	add	r2, r1
 800c596:	4291      	cmp	r1, r2
 800c598:	f100 33ff 	add.w	r3, r0, #4294967295
 800c59c:	d100      	bne.n	800c5a0 <memcpy+0xc>
 800c59e:	4770      	bx	lr
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a6:	4291      	cmp	r1, r2
 800c5a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5ac:	d1f9      	bne.n	800c5a2 <memcpy+0xe>
 800c5ae:	bd10      	pop	{r4, pc}

0800c5b0 <nan>:
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	4901      	ldr	r1, [pc, #4]	@ (800c5b8 <nan+0x8>)
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop
 800c5b8:	7ff80000 	.word	0x7ff80000

0800c5bc <__assert_func>:
 800c5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5be:	4614      	mov	r4, r2
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	4b09      	ldr	r3, [pc, #36]	@ (800c5e8 <__assert_func+0x2c>)
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68d8      	ldr	r0, [r3, #12]
 800c5ca:	b954      	cbnz	r4, 800c5e2 <__assert_func+0x26>
 800c5cc:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <__assert_func+0x30>)
 800c5ce:	461c      	mov	r4, r3
 800c5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5d4:	9100      	str	r1, [sp, #0]
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	4905      	ldr	r1, [pc, #20]	@ (800c5f0 <__assert_func+0x34>)
 800c5da:	f000 fba7 	bl	800cd2c <fiprintf>
 800c5de:	f000 fbb7 	bl	800cd50 <abort>
 800c5e2:	4b04      	ldr	r3, [pc, #16]	@ (800c5f4 <__assert_func+0x38>)
 800c5e4:	e7f4      	b.n	800c5d0 <__assert_func+0x14>
 800c5e6:	bf00      	nop
 800c5e8:	2000006c 	.word	0x2000006c
 800c5ec:	0800dfcd 	.word	0x0800dfcd
 800c5f0:	0800df9f 	.word	0x0800df9f
 800c5f4:	0800df92 	.word	0x0800df92

0800c5f8 <_calloc_r>:
 800c5f8:	b570      	push	{r4, r5, r6, lr}
 800c5fa:	fba1 5402 	umull	r5, r4, r1, r2
 800c5fe:	b93c      	cbnz	r4, 800c610 <_calloc_r+0x18>
 800c600:	4629      	mov	r1, r5
 800c602:	f7fe f9db 	bl	800a9bc <_malloc_r>
 800c606:	4606      	mov	r6, r0
 800c608:	b928      	cbnz	r0, 800c616 <_calloc_r+0x1e>
 800c60a:	2600      	movs	r6, #0
 800c60c:	4630      	mov	r0, r6
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	220c      	movs	r2, #12
 800c612:	6002      	str	r2, [r0, #0]
 800c614:	e7f9      	b.n	800c60a <_calloc_r+0x12>
 800c616:	462a      	mov	r2, r5
 800c618:	4621      	mov	r1, r4
 800c61a:	f7fd fa7a 	bl	8009b12 <memset>
 800c61e:	e7f5      	b.n	800c60c <_calloc_r+0x14>

0800c620 <rshift>:
 800c620:	6903      	ldr	r3, [r0, #16]
 800c622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c626:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c62a:	f100 0414 	add.w	r4, r0, #20
 800c62e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c632:	dd46      	ble.n	800c6c2 <rshift+0xa2>
 800c634:	f011 011f 	ands.w	r1, r1, #31
 800c638:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c63c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c640:	d10c      	bne.n	800c65c <rshift+0x3c>
 800c642:	4629      	mov	r1, r5
 800c644:	f100 0710 	add.w	r7, r0, #16
 800c648:	42b1      	cmp	r1, r6
 800c64a:	d335      	bcc.n	800c6b8 <rshift+0x98>
 800c64c:	1a9b      	subs	r3, r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	1eea      	subs	r2, r5, #3
 800c652:	4296      	cmp	r6, r2
 800c654:	bf38      	it	cc
 800c656:	2300      	movcc	r3, #0
 800c658:	4423      	add	r3, r4
 800c65a:	e015      	b.n	800c688 <rshift+0x68>
 800c65c:	46a1      	mov	r9, r4
 800c65e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c662:	f1c1 0820 	rsb	r8, r1, #32
 800c666:	40cf      	lsrs	r7, r1
 800c668:	f105 0e04 	add.w	lr, r5, #4
 800c66c:	4576      	cmp	r6, lr
 800c66e:	46f4      	mov	ip, lr
 800c670:	d816      	bhi.n	800c6a0 <rshift+0x80>
 800c672:	1a9a      	subs	r2, r3, r2
 800c674:	0092      	lsls	r2, r2, #2
 800c676:	3a04      	subs	r2, #4
 800c678:	3501      	adds	r5, #1
 800c67a:	42ae      	cmp	r6, r5
 800c67c:	bf38      	it	cc
 800c67e:	2200      	movcc	r2, #0
 800c680:	18a3      	adds	r3, r4, r2
 800c682:	50a7      	str	r7, [r4, r2]
 800c684:	b107      	cbz	r7, 800c688 <rshift+0x68>
 800c686:	3304      	adds	r3, #4
 800c688:	42a3      	cmp	r3, r4
 800c68a:	eba3 0204 	sub.w	r2, r3, r4
 800c68e:	bf08      	it	eq
 800c690:	2300      	moveq	r3, #0
 800c692:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c696:	6102      	str	r2, [r0, #16]
 800c698:	bf08      	it	eq
 800c69a:	6143      	streq	r3, [r0, #20]
 800c69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6a0:	f8dc c000 	ldr.w	ip, [ip]
 800c6a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800c6a8:	ea4c 0707 	orr.w	r7, ip, r7
 800c6ac:	f849 7b04 	str.w	r7, [r9], #4
 800c6b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6b4:	40cf      	lsrs	r7, r1
 800c6b6:	e7d9      	b.n	800c66c <rshift+0x4c>
 800c6b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800c6bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6c0:	e7c2      	b.n	800c648 <rshift+0x28>
 800c6c2:	4623      	mov	r3, r4
 800c6c4:	e7e0      	b.n	800c688 <rshift+0x68>

0800c6c6 <__hexdig_fun>:
 800c6c6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6ca:	2b09      	cmp	r3, #9
 800c6cc:	d802      	bhi.n	800c6d4 <__hexdig_fun+0xe>
 800c6ce:	3820      	subs	r0, #32
 800c6d0:	b2c0      	uxtb	r0, r0
 800c6d2:	4770      	bx	lr
 800c6d4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6d8:	2b05      	cmp	r3, #5
 800c6da:	d801      	bhi.n	800c6e0 <__hexdig_fun+0x1a>
 800c6dc:	3847      	subs	r0, #71	@ 0x47
 800c6de:	e7f7      	b.n	800c6d0 <__hexdig_fun+0xa>
 800c6e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c6e4:	2b05      	cmp	r3, #5
 800c6e6:	d801      	bhi.n	800c6ec <__hexdig_fun+0x26>
 800c6e8:	3827      	subs	r0, #39	@ 0x27
 800c6ea:	e7f1      	b.n	800c6d0 <__hexdig_fun+0xa>
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	4770      	bx	lr

0800c6f0 <__gethex>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	468a      	mov	sl, r1
 800c6f6:	4690      	mov	r8, r2
 800c6f8:	b085      	sub	sp, #20
 800c6fa:	9302      	str	r3, [sp, #8]
 800c6fc:	680b      	ldr	r3, [r1, #0]
 800c6fe:	9001      	str	r0, [sp, #4]
 800c700:	1c9c      	adds	r4, r3, #2
 800c702:	46a1      	mov	r9, r4
 800c704:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c708:	2830      	cmp	r0, #48	@ 0x30
 800c70a:	d0fa      	beq.n	800c702 <__gethex+0x12>
 800c70c:	eba9 0303 	sub.w	r3, r9, r3
 800c710:	f1a3 0b02 	sub.w	fp, r3, #2
 800c714:	f7ff ffd7 	bl	800c6c6 <__hexdig_fun>
 800c718:	4605      	mov	r5, r0
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d168      	bne.n	800c7f0 <__gethex+0x100>
 800c71e:	2201      	movs	r2, #1
 800c720:	4648      	mov	r0, r9
 800c722:	499f      	ldr	r1, [pc, #636]	@ (800c9a0 <__gethex+0x2b0>)
 800c724:	f7ff ff14 	bl	800c550 <strncmp>
 800c728:	4607      	mov	r7, r0
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d167      	bne.n	800c7fe <__gethex+0x10e>
 800c72e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c732:	4626      	mov	r6, r4
 800c734:	f7ff ffc7 	bl	800c6c6 <__hexdig_fun>
 800c738:	2800      	cmp	r0, #0
 800c73a:	d062      	beq.n	800c802 <__gethex+0x112>
 800c73c:	4623      	mov	r3, r4
 800c73e:	7818      	ldrb	r0, [r3, #0]
 800c740:	4699      	mov	r9, r3
 800c742:	2830      	cmp	r0, #48	@ 0x30
 800c744:	f103 0301 	add.w	r3, r3, #1
 800c748:	d0f9      	beq.n	800c73e <__gethex+0x4e>
 800c74a:	f7ff ffbc 	bl	800c6c6 <__hexdig_fun>
 800c74e:	fab0 f580 	clz	r5, r0
 800c752:	f04f 0b01 	mov.w	fp, #1
 800c756:	096d      	lsrs	r5, r5, #5
 800c758:	464a      	mov	r2, r9
 800c75a:	4616      	mov	r6, r2
 800c75c:	7830      	ldrb	r0, [r6, #0]
 800c75e:	3201      	adds	r2, #1
 800c760:	f7ff ffb1 	bl	800c6c6 <__hexdig_fun>
 800c764:	2800      	cmp	r0, #0
 800c766:	d1f8      	bne.n	800c75a <__gethex+0x6a>
 800c768:	2201      	movs	r2, #1
 800c76a:	4630      	mov	r0, r6
 800c76c:	498c      	ldr	r1, [pc, #560]	@ (800c9a0 <__gethex+0x2b0>)
 800c76e:	f7ff feef 	bl	800c550 <strncmp>
 800c772:	2800      	cmp	r0, #0
 800c774:	d13f      	bne.n	800c7f6 <__gethex+0x106>
 800c776:	b944      	cbnz	r4, 800c78a <__gethex+0x9a>
 800c778:	1c74      	adds	r4, r6, #1
 800c77a:	4622      	mov	r2, r4
 800c77c:	4616      	mov	r6, r2
 800c77e:	7830      	ldrb	r0, [r6, #0]
 800c780:	3201      	adds	r2, #1
 800c782:	f7ff ffa0 	bl	800c6c6 <__hexdig_fun>
 800c786:	2800      	cmp	r0, #0
 800c788:	d1f8      	bne.n	800c77c <__gethex+0x8c>
 800c78a:	1ba4      	subs	r4, r4, r6
 800c78c:	00a7      	lsls	r7, r4, #2
 800c78e:	7833      	ldrb	r3, [r6, #0]
 800c790:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c794:	2b50      	cmp	r3, #80	@ 0x50
 800c796:	d13e      	bne.n	800c816 <__gethex+0x126>
 800c798:	7873      	ldrb	r3, [r6, #1]
 800c79a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c79c:	d033      	beq.n	800c806 <__gethex+0x116>
 800c79e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c7a0:	d034      	beq.n	800c80c <__gethex+0x11c>
 800c7a2:	2400      	movs	r4, #0
 800c7a4:	1c71      	adds	r1, r6, #1
 800c7a6:	7808      	ldrb	r0, [r1, #0]
 800c7a8:	f7ff ff8d 	bl	800c6c6 <__hexdig_fun>
 800c7ac:	1e43      	subs	r3, r0, #1
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	2b18      	cmp	r3, #24
 800c7b2:	d830      	bhi.n	800c816 <__gethex+0x126>
 800c7b4:	f1a0 0210 	sub.w	r2, r0, #16
 800c7b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7bc:	f7ff ff83 	bl	800c6c6 <__hexdig_fun>
 800c7c0:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7c4:	fa5f fc8c 	uxtb.w	ip, ip
 800c7c8:	f1bc 0f18 	cmp.w	ip, #24
 800c7cc:	f04f 030a 	mov.w	r3, #10
 800c7d0:	d91e      	bls.n	800c810 <__gethex+0x120>
 800c7d2:	b104      	cbz	r4, 800c7d6 <__gethex+0xe6>
 800c7d4:	4252      	negs	r2, r2
 800c7d6:	4417      	add	r7, r2
 800c7d8:	f8ca 1000 	str.w	r1, [sl]
 800c7dc:	b1ed      	cbz	r5, 800c81a <__gethex+0x12a>
 800c7de:	f1bb 0f00 	cmp.w	fp, #0
 800c7e2:	bf0c      	ite	eq
 800c7e4:	2506      	moveq	r5, #6
 800c7e6:	2500      	movne	r5, #0
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	b005      	add	sp, #20
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	2500      	movs	r5, #0
 800c7f2:	462c      	mov	r4, r5
 800c7f4:	e7b0      	b.n	800c758 <__gethex+0x68>
 800c7f6:	2c00      	cmp	r4, #0
 800c7f8:	d1c7      	bne.n	800c78a <__gethex+0x9a>
 800c7fa:	4627      	mov	r7, r4
 800c7fc:	e7c7      	b.n	800c78e <__gethex+0x9e>
 800c7fe:	464e      	mov	r6, r9
 800c800:	462f      	mov	r7, r5
 800c802:	2501      	movs	r5, #1
 800c804:	e7c3      	b.n	800c78e <__gethex+0x9e>
 800c806:	2400      	movs	r4, #0
 800c808:	1cb1      	adds	r1, r6, #2
 800c80a:	e7cc      	b.n	800c7a6 <__gethex+0xb6>
 800c80c:	2401      	movs	r4, #1
 800c80e:	e7fb      	b.n	800c808 <__gethex+0x118>
 800c810:	fb03 0002 	mla	r0, r3, r2, r0
 800c814:	e7ce      	b.n	800c7b4 <__gethex+0xc4>
 800c816:	4631      	mov	r1, r6
 800c818:	e7de      	b.n	800c7d8 <__gethex+0xe8>
 800c81a:	4629      	mov	r1, r5
 800c81c:	eba6 0309 	sub.w	r3, r6, r9
 800c820:	3b01      	subs	r3, #1
 800c822:	2b07      	cmp	r3, #7
 800c824:	dc0a      	bgt.n	800c83c <__gethex+0x14c>
 800c826:	9801      	ldr	r0, [sp, #4]
 800c828:	f7fe f954 	bl	800aad4 <_Balloc>
 800c82c:	4604      	mov	r4, r0
 800c82e:	b940      	cbnz	r0, 800c842 <__gethex+0x152>
 800c830:	4602      	mov	r2, r0
 800c832:	21e4      	movs	r1, #228	@ 0xe4
 800c834:	4b5b      	ldr	r3, [pc, #364]	@ (800c9a4 <__gethex+0x2b4>)
 800c836:	485c      	ldr	r0, [pc, #368]	@ (800c9a8 <__gethex+0x2b8>)
 800c838:	f7ff fec0 	bl	800c5bc <__assert_func>
 800c83c:	3101      	adds	r1, #1
 800c83e:	105b      	asrs	r3, r3, #1
 800c840:	e7ef      	b.n	800c822 <__gethex+0x132>
 800c842:	2300      	movs	r3, #0
 800c844:	f100 0a14 	add.w	sl, r0, #20
 800c848:	4655      	mov	r5, sl
 800c84a:	469b      	mov	fp, r3
 800c84c:	45b1      	cmp	r9, r6
 800c84e:	d337      	bcc.n	800c8c0 <__gethex+0x1d0>
 800c850:	f845 bb04 	str.w	fp, [r5], #4
 800c854:	eba5 050a 	sub.w	r5, r5, sl
 800c858:	10ad      	asrs	r5, r5, #2
 800c85a:	6125      	str	r5, [r4, #16]
 800c85c:	4658      	mov	r0, fp
 800c85e:	f7fe fa2b 	bl	800acb8 <__hi0bits>
 800c862:	016d      	lsls	r5, r5, #5
 800c864:	f8d8 6000 	ldr.w	r6, [r8]
 800c868:	1a2d      	subs	r5, r5, r0
 800c86a:	42b5      	cmp	r5, r6
 800c86c:	dd54      	ble.n	800c918 <__gethex+0x228>
 800c86e:	1bad      	subs	r5, r5, r6
 800c870:	4629      	mov	r1, r5
 800c872:	4620      	mov	r0, r4
 800c874:	f7fe fdb3 	bl	800b3de <__any_on>
 800c878:	4681      	mov	r9, r0
 800c87a:	b178      	cbz	r0, 800c89c <__gethex+0x1ac>
 800c87c:	f04f 0901 	mov.w	r9, #1
 800c880:	1e6b      	subs	r3, r5, #1
 800c882:	1159      	asrs	r1, r3, #5
 800c884:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c888:	f003 021f 	and.w	r2, r3, #31
 800c88c:	fa09 f202 	lsl.w	r2, r9, r2
 800c890:	420a      	tst	r2, r1
 800c892:	d003      	beq.n	800c89c <__gethex+0x1ac>
 800c894:	454b      	cmp	r3, r9
 800c896:	dc36      	bgt.n	800c906 <__gethex+0x216>
 800c898:	f04f 0902 	mov.w	r9, #2
 800c89c:	4629      	mov	r1, r5
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f7ff febe 	bl	800c620 <rshift>
 800c8a4:	442f      	add	r7, r5
 800c8a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8aa:	42bb      	cmp	r3, r7
 800c8ac:	da42      	bge.n	800c934 <__gethex+0x244>
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	9801      	ldr	r0, [sp, #4]
 800c8b2:	f7fe f94f 	bl	800ab54 <_Bfree>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8ba:	25a3      	movs	r5, #163	@ 0xa3
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	e793      	b.n	800c7e8 <__gethex+0xf8>
 800c8c0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8c4:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8c6:	d012      	beq.n	800c8ee <__gethex+0x1fe>
 800c8c8:	2b20      	cmp	r3, #32
 800c8ca:	d104      	bne.n	800c8d6 <__gethex+0x1e6>
 800c8cc:	f845 bb04 	str.w	fp, [r5], #4
 800c8d0:	f04f 0b00 	mov.w	fp, #0
 800c8d4:	465b      	mov	r3, fp
 800c8d6:	7830      	ldrb	r0, [r6, #0]
 800c8d8:	9303      	str	r3, [sp, #12]
 800c8da:	f7ff fef4 	bl	800c6c6 <__hexdig_fun>
 800c8de:	9b03      	ldr	r3, [sp, #12]
 800c8e0:	f000 000f 	and.w	r0, r0, #15
 800c8e4:	4098      	lsls	r0, r3
 800c8e6:	ea4b 0b00 	orr.w	fp, fp, r0
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	e7ae      	b.n	800c84c <__gethex+0x15c>
 800c8ee:	45b1      	cmp	r9, r6
 800c8f0:	d8ea      	bhi.n	800c8c8 <__gethex+0x1d8>
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	492a      	ldr	r1, [pc, #168]	@ (800c9a0 <__gethex+0x2b0>)
 800c8f8:	9303      	str	r3, [sp, #12]
 800c8fa:	f7ff fe29 	bl	800c550 <strncmp>
 800c8fe:	9b03      	ldr	r3, [sp, #12]
 800c900:	2800      	cmp	r0, #0
 800c902:	d1e1      	bne.n	800c8c8 <__gethex+0x1d8>
 800c904:	e7a2      	b.n	800c84c <__gethex+0x15c>
 800c906:	4620      	mov	r0, r4
 800c908:	1ea9      	subs	r1, r5, #2
 800c90a:	f7fe fd68 	bl	800b3de <__any_on>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d0c2      	beq.n	800c898 <__gethex+0x1a8>
 800c912:	f04f 0903 	mov.w	r9, #3
 800c916:	e7c1      	b.n	800c89c <__gethex+0x1ac>
 800c918:	da09      	bge.n	800c92e <__gethex+0x23e>
 800c91a:	1b75      	subs	r5, r6, r5
 800c91c:	4621      	mov	r1, r4
 800c91e:	462a      	mov	r2, r5
 800c920:	9801      	ldr	r0, [sp, #4]
 800c922:	f7fe fb2d 	bl	800af80 <__lshift>
 800c926:	4604      	mov	r4, r0
 800c928:	1b7f      	subs	r7, r7, r5
 800c92a:	f100 0a14 	add.w	sl, r0, #20
 800c92e:	f04f 0900 	mov.w	r9, #0
 800c932:	e7b8      	b.n	800c8a6 <__gethex+0x1b6>
 800c934:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c938:	42bd      	cmp	r5, r7
 800c93a:	dd6f      	ble.n	800ca1c <__gethex+0x32c>
 800c93c:	1bed      	subs	r5, r5, r7
 800c93e:	42ae      	cmp	r6, r5
 800c940:	dc34      	bgt.n	800c9ac <__gethex+0x2bc>
 800c942:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c946:	2b02      	cmp	r3, #2
 800c948:	d022      	beq.n	800c990 <__gethex+0x2a0>
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	d024      	beq.n	800c998 <__gethex+0x2a8>
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d115      	bne.n	800c97e <__gethex+0x28e>
 800c952:	42ae      	cmp	r6, r5
 800c954:	d113      	bne.n	800c97e <__gethex+0x28e>
 800c956:	2e01      	cmp	r6, #1
 800c958:	d10b      	bne.n	800c972 <__gethex+0x282>
 800c95a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c95e:	9a02      	ldr	r2, [sp, #8]
 800c960:	2562      	movs	r5, #98	@ 0x62
 800c962:	6013      	str	r3, [r2, #0]
 800c964:	2301      	movs	r3, #1
 800c966:	6123      	str	r3, [r4, #16]
 800c968:	f8ca 3000 	str.w	r3, [sl]
 800c96c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c96e:	601c      	str	r4, [r3, #0]
 800c970:	e73a      	b.n	800c7e8 <__gethex+0xf8>
 800c972:	4620      	mov	r0, r4
 800c974:	1e71      	subs	r1, r6, #1
 800c976:	f7fe fd32 	bl	800b3de <__any_on>
 800c97a:	2800      	cmp	r0, #0
 800c97c:	d1ed      	bne.n	800c95a <__gethex+0x26a>
 800c97e:	4621      	mov	r1, r4
 800c980:	9801      	ldr	r0, [sp, #4]
 800c982:	f7fe f8e7 	bl	800ab54 <_Bfree>
 800c986:	2300      	movs	r3, #0
 800c988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c98a:	2550      	movs	r5, #80	@ 0x50
 800c98c:	6013      	str	r3, [r2, #0]
 800c98e:	e72b      	b.n	800c7e8 <__gethex+0xf8>
 800c990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1f3      	bne.n	800c97e <__gethex+0x28e>
 800c996:	e7e0      	b.n	800c95a <__gethex+0x26a>
 800c998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1dd      	bne.n	800c95a <__gethex+0x26a>
 800c99e:	e7ee      	b.n	800c97e <__gethex+0x28e>
 800c9a0:	0800de20 	.word	0x0800de20
 800c9a4:	0800dcb7 	.word	0x0800dcb7
 800c9a8:	0800dfce 	.word	0x0800dfce
 800c9ac:	1e6f      	subs	r7, r5, #1
 800c9ae:	f1b9 0f00 	cmp.w	r9, #0
 800c9b2:	d130      	bne.n	800ca16 <__gethex+0x326>
 800c9b4:	b127      	cbz	r7, 800c9c0 <__gethex+0x2d0>
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	f7fe fd10 	bl	800b3de <__any_on>
 800c9be:	4681      	mov	r9, r0
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	1b76      	subs	r6, r6, r5
 800c9c6:	2502      	movs	r5, #2
 800c9c8:	117a      	asrs	r2, r7, #5
 800c9ca:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9ce:	f007 071f 	and.w	r7, r7, #31
 800c9d2:	40bb      	lsls	r3, r7
 800c9d4:	4213      	tst	r3, r2
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	bf18      	it	ne
 800c9da:	f049 0902 	orrne.w	r9, r9, #2
 800c9de:	f7ff fe1f 	bl	800c620 <rshift>
 800c9e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c9e6:	f1b9 0f00 	cmp.w	r9, #0
 800c9ea:	d047      	beq.n	800ca7c <__gethex+0x38c>
 800c9ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9f0:	2b02      	cmp	r3, #2
 800c9f2:	d015      	beq.n	800ca20 <__gethex+0x330>
 800c9f4:	2b03      	cmp	r3, #3
 800c9f6:	d017      	beq.n	800ca28 <__gethex+0x338>
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d109      	bne.n	800ca10 <__gethex+0x320>
 800c9fc:	f019 0f02 	tst.w	r9, #2
 800ca00:	d006      	beq.n	800ca10 <__gethex+0x320>
 800ca02:	f8da 3000 	ldr.w	r3, [sl]
 800ca06:	ea49 0903 	orr.w	r9, r9, r3
 800ca0a:	f019 0f01 	tst.w	r9, #1
 800ca0e:	d10e      	bne.n	800ca2e <__gethex+0x33e>
 800ca10:	f045 0510 	orr.w	r5, r5, #16
 800ca14:	e032      	b.n	800ca7c <__gethex+0x38c>
 800ca16:	f04f 0901 	mov.w	r9, #1
 800ca1a:	e7d1      	b.n	800c9c0 <__gethex+0x2d0>
 800ca1c:	2501      	movs	r5, #1
 800ca1e:	e7e2      	b.n	800c9e6 <__gethex+0x2f6>
 800ca20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca22:	f1c3 0301 	rsb	r3, r3, #1
 800ca26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0f0      	beq.n	800ca10 <__gethex+0x320>
 800ca2e:	f04f 0c00 	mov.w	ip, #0
 800ca32:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca36:	f104 0314 	add.w	r3, r4, #20
 800ca3a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca3e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca42:	4618      	mov	r0, r3
 800ca44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca48:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca4c:	d01b      	beq.n	800ca86 <__gethex+0x396>
 800ca4e:	3201      	adds	r2, #1
 800ca50:	6002      	str	r2, [r0, #0]
 800ca52:	2d02      	cmp	r5, #2
 800ca54:	f104 0314 	add.w	r3, r4, #20
 800ca58:	d13c      	bne.n	800cad4 <__gethex+0x3e4>
 800ca5a:	f8d8 2000 	ldr.w	r2, [r8]
 800ca5e:	3a01      	subs	r2, #1
 800ca60:	42b2      	cmp	r2, r6
 800ca62:	d109      	bne.n	800ca78 <__gethex+0x388>
 800ca64:	2201      	movs	r2, #1
 800ca66:	1171      	asrs	r1, r6, #5
 800ca68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca6c:	f006 061f 	and.w	r6, r6, #31
 800ca70:	fa02 f606 	lsl.w	r6, r2, r6
 800ca74:	421e      	tst	r6, r3
 800ca76:	d13a      	bne.n	800caee <__gethex+0x3fe>
 800ca78:	f045 0520 	orr.w	r5, r5, #32
 800ca7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca7e:	601c      	str	r4, [r3, #0]
 800ca80:	9b02      	ldr	r3, [sp, #8]
 800ca82:	601f      	str	r7, [r3, #0]
 800ca84:	e6b0      	b.n	800c7e8 <__gethex+0xf8>
 800ca86:	4299      	cmp	r1, r3
 800ca88:	f843 cc04 	str.w	ip, [r3, #-4]
 800ca8c:	d8d9      	bhi.n	800ca42 <__gethex+0x352>
 800ca8e:	68a3      	ldr	r3, [r4, #8]
 800ca90:	459b      	cmp	fp, r3
 800ca92:	db17      	blt.n	800cac4 <__gethex+0x3d4>
 800ca94:	6861      	ldr	r1, [r4, #4]
 800ca96:	9801      	ldr	r0, [sp, #4]
 800ca98:	3101      	adds	r1, #1
 800ca9a:	f7fe f81b 	bl	800aad4 <_Balloc>
 800ca9e:	4681      	mov	r9, r0
 800caa0:	b918      	cbnz	r0, 800caaa <__gethex+0x3ba>
 800caa2:	4602      	mov	r2, r0
 800caa4:	2184      	movs	r1, #132	@ 0x84
 800caa6:	4b19      	ldr	r3, [pc, #100]	@ (800cb0c <__gethex+0x41c>)
 800caa8:	e6c5      	b.n	800c836 <__gethex+0x146>
 800caaa:	6922      	ldr	r2, [r4, #16]
 800caac:	f104 010c 	add.w	r1, r4, #12
 800cab0:	3202      	adds	r2, #2
 800cab2:	0092      	lsls	r2, r2, #2
 800cab4:	300c      	adds	r0, #12
 800cab6:	f7ff fd6d 	bl	800c594 <memcpy>
 800caba:	4621      	mov	r1, r4
 800cabc:	9801      	ldr	r0, [sp, #4]
 800cabe:	f7fe f849 	bl	800ab54 <_Bfree>
 800cac2:	464c      	mov	r4, r9
 800cac4:	6923      	ldr	r3, [r4, #16]
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	6122      	str	r2, [r4, #16]
 800caca:	2201      	movs	r2, #1
 800cacc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cad0:	615a      	str	r2, [r3, #20]
 800cad2:	e7be      	b.n	800ca52 <__gethex+0x362>
 800cad4:	6922      	ldr	r2, [r4, #16]
 800cad6:	455a      	cmp	r2, fp
 800cad8:	dd0b      	ble.n	800caf2 <__gethex+0x402>
 800cada:	2101      	movs	r1, #1
 800cadc:	4620      	mov	r0, r4
 800cade:	f7ff fd9f 	bl	800c620 <rshift>
 800cae2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cae6:	3701      	adds	r7, #1
 800cae8:	42bb      	cmp	r3, r7
 800caea:	f6ff aee0 	blt.w	800c8ae <__gethex+0x1be>
 800caee:	2501      	movs	r5, #1
 800caf0:	e7c2      	b.n	800ca78 <__gethex+0x388>
 800caf2:	f016 061f 	ands.w	r6, r6, #31
 800caf6:	d0fa      	beq.n	800caee <__gethex+0x3fe>
 800caf8:	4453      	add	r3, sl
 800cafa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cafe:	f7fe f8db 	bl	800acb8 <__hi0bits>
 800cb02:	f1c6 0620 	rsb	r6, r6, #32
 800cb06:	42b0      	cmp	r0, r6
 800cb08:	dbe7      	blt.n	800cada <__gethex+0x3ea>
 800cb0a:	e7f0      	b.n	800caee <__gethex+0x3fe>
 800cb0c:	0800dcb7 	.word	0x0800dcb7

0800cb10 <L_shift>:
 800cb10:	f1c2 0208 	rsb	r2, r2, #8
 800cb14:	0092      	lsls	r2, r2, #2
 800cb16:	b570      	push	{r4, r5, r6, lr}
 800cb18:	f1c2 0620 	rsb	r6, r2, #32
 800cb1c:	6843      	ldr	r3, [r0, #4]
 800cb1e:	6804      	ldr	r4, [r0, #0]
 800cb20:	fa03 f506 	lsl.w	r5, r3, r6
 800cb24:	432c      	orrs	r4, r5
 800cb26:	40d3      	lsrs	r3, r2
 800cb28:	6004      	str	r4, [r0, #0]
 800cb2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb2e:	4288      	cmp	r0, r1
 800cb30:	d3f4      	bcc.n	800cb1c <L_shift+0xc>
 800cb32:	bd70      	pop	{r4, r5, r6, pc}

0800cb34 <__match>:
 800cb34:	b530      	push	{r4, r5, lr}
 800cb36:	6803      	ldr	r3, [r0, #0]
 800cb38:	3301      	adds	r3, #1
 800cb3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb3e:	b914      	cbnz	r4, 800cb46 <__match+0x12>
 800cb40:	6003      	str	r3, [r0, #0]
 800cb42:	2001      	movs	r0, #1
 800cb44:	bd30      	pop	{r4, r5, pc}
 800cb46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb4a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb4e:	2d19      	cmp	r5, #25
 800cb50:	bf98      	it	ls
 800cb52:	3220      	addls	r2, #32
 800cb54:	42a2      	cmp	r2, r4
 800cb56:	d0f0      	beq.n	800cb3a <__match+0x6>
 800cb58:	2000      	movs	r0, #0
 800cb5a:	e7f3      	b.n	800cb44 <__match+0x10>

0800cb5c <__hexnan>:
 800cb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	2500      	movs	r5, #0
 800cb62:	680b      	ldr	r3, [r1, #0]
 800cb64:	4682      	mov	sl, r0
 800cb66:	115e      	asrs	r6, r3, #5
 800cb68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb6c:	f013 031f 	ands.w	r3, r3, #31
 800cb70:	bf18      	it	ne
 800cb72:	3604      	addne	r6, #4
 800cb74:	1f37      	subs	r7, r6, #4
 800cb76:	4690      	mov	r8, r2
 800cb78:	46b9      	mov	r9, r7
 800cb7a:	463c      	mov	r4, r7
 800cb7c:	46ab      	mov	fp, r5
 800cb7e:	b087      	sub	sp, #28
 800cb80:	6801      	ldr	r1, [r0, #0]
 800cb82:	9301      	str	r3, [sp, #4]
 800cb84:	f846 5c04 	str.w	r5, [r6, #-4]
 800cb88:	9502      	str	r5, [sp, #8]
 800cb8a:	784a      	ldrb	r2, [r1, #1]
 800cb8c:	1c4b      	adds	r3, r1, #1
 800cb8e:	9303      	str	r3, [sp, #12]
 800cb90:	b342      	cbz	r2, 800cbe4 <__hexnan+0x88>
 800cb92:	4610      	mov	r0, r2
 800cb94:	9105      	str	r1, [sp, #20]
 800cb96:	9204      	str	r2, [sp, #16]
 800cb98:	f7ff fd95 	bl	800c6c6 <__hexdig_fun>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d151      	bne.n	800cc44 <__hexnan+0xe8>
 800cba0:	9a04      	ldr	r2, [sp, #16]
 800cba2:	9905      	ldr	r1, [sp, #20]
 800cba4:	2a20      	cmp	r2, #32
 800cba6:	d818      	bhi.n	800cbda <__hexnan+0x7e>
 800cba8:	9b02      	ldr	r3, [sp, #8]
 800cbaa:	459b      	cmp	fp, r3
 800cbac:	dd13      	ble.n	800cbd6 <__hexnan+0x7a>
 800cbae:	454c      	cmp	r4, r9
 800cbb0:	d206      	bcs.n	800cbc0 <__hexnan+0x64>
 800cbb2:	2d07      	cmp	r5, #7
 800cbb4:	dc04      	bgt.n	800cbc0 <__hexnan+0x64>
 800cbb6:	462a      	mov	r2, r5
 800cbb8:	4649      	mov	r1, r9
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7ff ffa8 	bl	800cb10 <L_shift>
 800cbc0:	4544      	cmp	r4, r8
 800cbc2:	d952      	bls.n	800cc6a <__hexnan+0x10e>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f1a4 0904 	sub.w	r9, r4, #4
 800cbca:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbce:	461d      	mov	r5, r3
 800cbd0:	464c      	mov	r4, r9
 800cbd2:	f8cd b008 	str.w	fp, [sp, #8]
 800cbd6:	9903      	ldr	r1, [sp, #12]
 800cbd8:	e7d7      	b.n	800cb8a <__hexnan+0x2e>
 800cbda:	2a29      	cmp	r2, #41	@ 0x29
 800cbdc:	d157      	bne.n	800cc8e <__hexnan+0x132>
 800cbde:	3102      	adds	r1, #2
 800cbe0:	f8ca 1000 	str.w	r1, [sl]
 800cbe4:	f1bb 0f00 	cmp.w	fp, #0
 800cbe8:	d051      	beq.n	800cc8e <__hexnan+0x132>
 800cbea:	454c      	cmp	r4, r9
 800cbec:	d206      	bcs.n	800cbfc <__hexnan+0xa0>
 800cbee:	2d07      	cmp	r5, #7
 800cbf0:	dc04      	bgt.n	800cbfc <__hexnan+0xa0>
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f7ff ff8a 	bl	800cb10 <L_shift>
 800cbfc:	4544      	cmp	r4, r8
 800cbfe:	d936      	bls.n	800cc6e <__hexnan+0x112>
 800cc00:	4623      	mov	r3, r4
 800cc02:	f1a8 0204 	sub.w	r2, r8, #4
 800cc06:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc0a:	429f      	cmp	r7, r3
 800cc0c:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc10:	d2f9      	bcs.n	800cc06 <__hexnan+0xaa>
 800cc12:	1b3b      	subs	r3, r7, r4
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	3304      	adds	r3, #4
 800cc1a:	3401      	adds	r4, #1
 800cc1c:	3e03      	subs	r6, #3
 800cc1e:	42b4      	cmp	r4, r6
 800cc20:	bf88      	it	hi
 800cc22:	2304      	movhi	r3, #4
 800cc24:	2200      	movs	r2, #0
 800cc26:	4443      	add	r3, r8
 800cc28:	f843 2b04 	str.w	r2, [r3], #4
 800cc2c:	429f      	cmp	r7, r3
 800cc2e:	d2fb      	bcs.n	800cc28 <__hexnan+0xcc>
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	b91b      	cbnz	r3, 800cc3c <__hexnan+0xe0>
 800cc34:	4547      	cmp	r7, r8
 800cc36:	d128      	bne.n	800cc8a <__hexnan+0x12e>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	603b      	str	r3, [r7, #0]
 800cc3c:	2005      	movs	r0, #5
 800cc3e:	b007      	add	sp, #28
 800cc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc44:	3501      	adds	r5, #1
 800cc46:	2d08      	cmp	r5, #8
 800cc48:	f10b 0b01 	add.w	fp, fp, #1
 800cc4c:	dd06      	ble.n	800cc5c <__hexnan+0x100>
 800cc4e:	4544      	cmp	r4, r8
 800cc50:	d9c1      	bls.n	800cbd6 <__hexnan+0x7a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	2501      	movs	r5, #1
 800cc56:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc5a:	3c04      	subs	r4, #4
 800cc5c:	6822      	ldr	r2, [r4, #0]
 800cc5e:	f000 000f 	and.w	r0, r0, #15
 800cc62:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc66:	6020      	str	r0, [r4, #0]
 800cc68:	e7b5      	b.n	800cbd6 <__hexnan+0x7a>
 800cc6a:	2508      	movs	r5, #8
 800cc6c:	e7b3      	b.n	800cbd6 <__hexnan+0x7a>
 800cc6e:	9b01      	ldr	r3, [sp, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d0dd      	beq.n	800cc30 <__hexnan+0xd4>
 800cc74:	f04f 32ff 	mov.w	r2, #4294967295
 800cc78:	f1c3 0320 	rsb	r3, r3, #32
 800cc7c:	40da      	lsrs	r2, r3
 800cc7e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cc82:	4013      	ands	r3, r2
 800cc84:	f846 3c04 	str.w	r3, [r6, #-4]
 800cc88:	e7d2      	b.n	800cc30 <__hexnan+0xd4>
 800cc8a:	3f04      	subs	r7, #4
 800cc8c:	e7d0      	b.n	800cc30 <__hexnan+0xd4>
 800cc8e:	2004      	movs	r0, #4
 800cc90:	e7d5      	b.n	800cc3e <__hexnan+0xe2>

0800cc92 <__ascii_mbtowc>:
 800cc92:	b082      	sub	sp, #8
 800cc94:	b901      	cbnz	r1, 800cc98 <__ascii_mbtowc+0x6>
 800cc96:	a901      	add	r1, sp, #4
 800cc98:	b142      	cbz	r2, 800ccac <__ascii_mbtowc+0x1a>
 800cc9a:	b14b      	cbz	r3, 800ccb0 <__ascii_mbtowc+0x1e>
 800cc9c:	7813      	ldrb	r3, [r2, #0]
 800cc9e:	600b      	str	r3, [r1, #0]
 800cca0:	7812      	ldrb	r2, [r2, #0]
 800cca2:	1e10      	subs	r0, r2, #0
 800cca4:	bf18      	it	ne
 800cca6:	2001      	movne	r0, #1
 800cca8:	b002      	add	sp, #8
 800ccaa:	4770      	bx	lr
 800ccac:	4610      	mov	r0, r2
 800ccae:	e7fb      	b.n	800cca8 <__ascii_mbtowc+0x16>
 800ccb0:	f06f 0001 	mvn.w	r0, #1
 800ccb4:	e7f8      	b.n	800cca8 <__ascii_mbtowc+0x16>

0800ccb6 <_realloc_r>:
 800ccb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccba:	4680      	mov	r8, r0
 800ccbc:	4615      	mov	r5, r2
 800ccbe:	460c      	mov	r4, r1
 800ccc0:	b921      	cbnz	r1, 800cccc <_realloc_r+0x16>
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc8:	f7fd be78 	b.w	800a9bc <_malloc_r>
 800cccc:	b92a      	cbnz	r2, 800ccda <_realloc_r+0x24>
 800ccce:	f7fd fe03 	bl	800a8d8 <_free_r>
 800ccd2:	2400      	movs	r4, #0
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccda:	f000 f840 	bl	800cd5e <_malloc_usable_size_r>
 800ccde:	4285      	cmp	r5, r0
 800cce0:	4606      	mov	r6, r0
 800cce2:	d802      	bhi.n	800ccea <_realloc_r+0x34>
 800cce4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cce8:	d8f4      	bhi.n	800ccd4 <_realloc_r+0x1e>
 800ccea:	4629      	mov	r1, r5
 800ccec:	4640      	mov	r0, r8
 800ccee:	f7fd fe65 	bl	800a9bc <_malloc_r>
 800ccf2:	4607      	mov	r7, r0
 800ccf4:	2800      	cmp	r0, #0
 800ccf6:	d0ec      	beq.n	800ccd2 <_realloc_r+0x1c>
 800ccf8:	42b5      	cmp	r5, r6
 800ccfa:	462a      	mov	r2, r5
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	bf28      	it	cs
 800cd00:	4632      	movcs	r2, r6
 800cd02:	f7ff fc47 	bl	800c594 <memcpy>
 800cd06:	4621      	mov	r1, r4
 800cd08:	4640      	mov	r0, r8
 800cd0a:	f7fd fde5 	bl	800a8d8 <_free_r>
 800cd0e:	463c      	mov	r4, r7
 800cd10:	e7e0      	b.n	800ccd4 <_realloc_r+0x1e>

0800cd12 <__ascii_wctomb>:
 800cd12:	4603      	mov	r3, r0
 800cd14:	4608      	mov	r0, r1
 800cd16:	b141      	cbz	r1, 800cd2a <__ascii_wctomb+0x18>
 800cd18:	2aff      	cmp	r2, #255	@ 0xff
 800cd1a:	d904      	bls.n	800cd26 <__ascii_wctomb+0x14>
 800cd1c:	228a      	movs	r2, #138	@ 0x8a
 800cd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	4770      	bx	lr
 800cd26:	2001      	movs	r0, #1
 800cd28:	700a      	strb	r2, [r1, #0]
 800cd2a:	4770      	bx	lr

0800cd2c <fiprintf>:
 800cd2c:	b40e      	push	{r1, r2, r3}
 800cd2e:	b503      	push	{r0, r1, lr}
 800cd30:	4601      	mov	r1, r0
 800cd32:	ab03      	add	r3, sp, #12
 800cd34:	4805      	ldr	r0, [pc, #20]	@ (800cd4c <fiprintf+0x20>)
 800cd36:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd3a:	6800      	ldr	r0, [r0, #0]
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	f000 f83d 	bl	800cdbc <_vfiprintf_r>
 800cd42:	b002      	add	sp, #8
 800cd44:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd48:	b003      	add	sp, #12
 800cd4a:	4770      	bx	lr
 800cd4c:	2000006c 	.word	0x2000006c

0800cd50 <abort>:
 800cd50:	2006      	movs	r0, #6
 800cd52:	b508      	push	{r3, lr}
 800cd54:	f000 fa06 	bl	800d164 <raise>
 800cd58:	2001      	movs	r0, #1
 800cd5a:	f7f7 f8da 	bl	8003f12 <_exit>

0800cd5e <_malloc_usable_size_r>:
 800cd5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd62:	1f18      	subs	r0, r3, #4
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	bfbc      	itt	lt
 800cd68:	580b      	ldrlt	r3, [r1, r0]
 800cd6a:	18c0      	addlt	r0, r0, r3
 800cd6c:	4770      	bx	lr

0800cd6e <__sfputc_r>:
 800cd6e:	6893      	ldr	r3, [r2, #8]
 800cd70:	b410      	push	{r4}
 800cd72:	3b01      	subs	r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	6093      	str	r3, [r2, #8]
 800cd78:	da07      	bge.n	800cd8a <__sfputc_r+0x1c>
 800cd7a:	6994      	ldr	r4, [r2, #24]
 800cd7c:	42a3      	cmp	r3, r4
 800cd7e:	db01      	blt.n	800cd84 <__sfputc_r+0x16>
 800cd80:	290a      	cmp	r1, #10
 800cd82:	d102      	bne.n	800cd8a <__sfputc_r+0x1c>
 800cd84:	bc10      	pop	{r4}
 800cd86:	f000 b931 	b.w	800cfec <__swbuf_r>
 800cd8a:	6813      	ldr	r3, [r2, #0]
 800cd8c:	1c58      	adds	r0, r3, #1
 800cd8e:	6010      	str	r0, [r2, #0]
 800cd90:	7019      	strb	r1, [r3, #0]
 800cd92:	4608      	mov	r0, r1
 800cd94:	bc10      	pop	{r4}
 800cd96:	4770      	bx	lr

0800cd98 <__sfputs_r>:
 800cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	460f      	mov	r7, r1
 800cd9e:	4614      	mov	r4, r2
 800cda0:	18d5      	adds	r5, r2, r3
 800cda2:	42ac      	cmp	r4, r5
 800cda4:	d101      	bne.n	800cdaa <__sfputs_r+0x12>
 800cda6:	2000      	movs	r0, #0
 800cda8:	e007      	b.n	800cdba <__sfputs_r+0x22>
 800cdaa:	463a      	mov	r2, r7
 800cdac:	4630      	mov	r0, r6
 800cdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb2:	f7ff ffdc 	bl	800cd6e <__sfputc_r>
 800cdb6:	1c43      	adds	r3, r0, #1
 800cdb8:	d1f3      	bne.n	800cda2 <__sfputs_r+0xa>
 800cdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cdbc <_vfiprintf_r>:
 800cdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	4614      	mov	r4, r2
 800cdc4:	4698      	mov	r8, r3
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	b09d      	sub	sp, #116	@ 0x74
 800cdca:	b118      	cbz	r0, 800cdd4 <_vfiprintf_r+0x18>
 800cdcc:	6a03      	ldr	r3, [r0, #32]
 800cdce:	b90b      	cbnz	r3, 800cdd4 <_vfiprintf_r+0x18>
 800cdd0:	f7fc fe06 	bl	80099e0 <__sinit>
 800cdd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdd6:	07d9      	lsls	r1, r3, #31
 800cdd8:	d405      	bmi.n	800cde6 <_vfiprintf_r+0x2a>
 800cdda:	89ab      	ldrh	r3, [r5, #12]
 800cddc:	059a      	lsls	r2, r3, #22
 800cdde:	d402      	bmi.n	800cde6 <_vfiprintf_r+0x2a>
 800cde0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cde2:	f7fc ff14 	bl	8009c0e <__retarget_lock_acquire_recursive>
 800cde6:	89ab      	ldrh	r3, [r5, #12]
 800cde8:	071b      	lsls	r3, r3, #28
 800cdea:	d501      	bpl.n	800cdf0 <_vfiprintf_r+0x34>
 800cdec:	692b      	ldr	r3, [r5, #16]
 800cdee:	b99b      	cbnz	r3, 800ce18 <_vfiprintf_r+0x5c>
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	4630      	mov	r0, r6
 800cdf4:	f000 f938 	bl	800d068 <__swsetup_r>
 800cdf8:	b170      	cbz	r0, 800ce18 <_vfiprintf_r+0x5c>
 800cdfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdfc:	07dc      	lsls	r4, r3, #31
 800cdfe:	d504      	bpl.n	800ce0a <_vfiprintf_r+0x4e>
 800ce00:	f04f 30ff 	mov.w	r0, #4294967295
 800ce04:	b01d      	add	sp, #116	@ 0x74
 800ce06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0a:	89ab      	ldrh	r3, [r5, #12]
 800ce0c:	0598      	lsls	r0, r3, #22
 800ce0e:	d4f7      	bmi.n	800ce00 <_vfiprintf_r+0x44>
 800ce10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce12:	f7fc fefd 	bl	8009c10 <__retarget_lock_release_recursive>
 800ce16:	e7f3      	b.n	800ce00 <_vfiprintf_r+0x44>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce1c:	2320      	movs	r3, #32
 800ce1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce22:	2330      	movs	r3, #48	@ 0x30
 800ce24:	f04f 0901 	mov.w	r9, #1
 800ce28:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cfd8 <_vfiprintf_r+0x21c>
 800ce30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce34:	4623      	mov	r3, r4
 800ce36:	469a      	mov	sl, r3
 800ce38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce3c:	b10a      	cbz	r2, 800ce42 <_vfiprintf_r+0x86>
 800ce3e:	2a25      	cmp	r2, #37	@ 0x25
 800ce40:	d1f9      	bne.n	800ce36 <_vfiprintf_r+0x7a>
 800ce42:	ebba 0b04 	subs.w	fp, sl, r4
 800ce46:	d00b      	beq.n	800ce60 <_vfiprintf_r+0xa4>
 800ce48:	465b      	mov	r3, fp
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f7ff ffa2 	bl	800cd98 <__sfputs_r>
 800ce54:	3001      	adds	r0, #1
 800ce56:	f000 80a7 	beq.w	800cfa8 <_vfiprintf_r+0x1ec>
 800ce5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce5c:	445a      	add	r2, fp
 800ce5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce60:	f89a 3000 	ldrb.w	r3, [sl]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 809f 	beq.w	800cfa8 <_vfiprintf_r+0x1ec>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce74:	f10a 0a01 	add.w	sl, sl, #1
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	9307      	str	r3, [sp, #28]
 800ce7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce80:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce82:	4654      	mov	r4, sl
 800ce84:	2205      	movs	r2, #5
 800ce86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce8a:	4853      	ldr	r0, [pc, #332]	@ (800cfd8 <_vfiprintf_r+0x21c>)
 800ce8c:	f7fc fec1 	bl	8009c12 <memchr>
 800ce90:	9a04      	ldr	r2, [sp, #16]
 800ce92:	b9d8      	cbnz	r0, 800cecc <_vfiprintf_r+0x110>
 800ce94:	06d1      	lsls	r1, r2, #27
 800ce96:	bf44      	itt	mi
 800ce98:	2320      	movmi	r3, #32
 800ce9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce9e:	0713      	lsls	r3, r2, #28
 800cea0:	bf44      	itt	mi
 800cea2:	232b      	movmi	r3, #43	@ 0x2b
 800cea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cea8:	f89a 3000 	ldrb.w	r3, [sl]
 800ceac:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceae:	d015      	beq.n	800cedc <_vfiprintf_r+0x120>
 800ceb0:	4654      	mov	r4, sl
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	f04f 0c0a 	mov.w	ip, #10
 800ceb8:	9a07      	ldr	r2, [sp, #28]
 800ceba:	4621      	mov	r1, r4
 800cebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cec0:	3b30      	subs	r3, #48	@ 0x30
 800cec2:	2b09      	cmp	r3, #9
 800cec4:	d94b      	bls.n	800cf5e <_vfiprintf_r+0x1a2>
 800cec6:	b1b0      	cbz	r0, 800cef6 <_vfiprintf_r+0x13a>
 800cec8:	9207      	str	r2, [sp, #28]
 800ceca:	e014      	b.n	800cef6 <_vfiprintf_r+0x13a>
 800cecc:	eba0 0308 	sub.w	r3, r0, r8
 800ced0:	fa09 f303 	lsl.w	r3, r9, r3
 800ced4:	4313      	orrs	r3, r2
 800ced6:	46a2      	mov	sl, r4
 800ced8:	9304      	str	r3, [sp, #16]
 800ceda:	e7d2      	b.n	800ce82 <_vfiprintf_r+0xc6>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	1d19      	adds	r1, r3, #4
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	9103      	str	r1, [sp, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	bfbb      	ittet	lt
 800cee8:	425b      	neglt	r3, r3
 800ceea:	f042 0202 	orrlt.w	r2, r2, #2
 800ceee:	9307      	strge	r3, [sp, #28]
 800cef0:	9307      	strlt	r3, [sp, #28]
 800cef2:	bfb8      	it	lt
 800cef4:	9204      	strlt	r2, [sp, #16]
 800cef6:	7823      	ldrb	r3, [r4, #0]
 800cef8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cefa:	d10a      	bne.n	800cf12 <_vfiprintf_r+0x156>
 800cefc:	7863      	ldrb	r3, [r4, #1]
 800cefe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf00:	d132      	bne.n	800cf68 <_vfiprintf_r+0x1ac>
 800cf02:	9b03      	ldr	r3, [sp, #12]
 800cf04:	3402      	adds	r4, #2
 800cf06:	1d1a      	adds	r2, r3, #4
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	9203      	str	r2, [sp, #12]
 800cf0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cfdc <_vfiprintf_r+0x220>
 800cf16:	2203      	movs	r2, #3
 800cf18:	4650      	mov	r0, sl
 800cf1a:	7821      	ldrb	r1, [r4, #0]
 800cf1c:	f7fc fe79 	bl	8009c12 <memchr>
 800cf20:	b138      	cbz	r0, 800cf32 <_vfiprintf_r+0x176>
 800cf22:	2240      	movs	r2, #64	@ 0x40
 800cf24:	9b04      	ldr	r3, [sp, #16]
 800cf26:	eba0 000a 	sub.w	r0, r0, sl
 800cf2a:	4082      	lsls	r2, r0
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	3401      	adds	r4, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf36:	2206      	movs	r2, #6
 800cf38:	4829      	ldr	r0, [pc, #164]	@ (800cfe0 <_vfiprintf_r+0x224>)
 800cf3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf3e:	f7fc fe68 	bl	8009c12 <memchr>
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d03f      	beq.n	800cfc6 <_vfiprintf_r+0x20a>
 800cf46:	4b27      	ldr	r3, [pc, #156]	@ (800cfe4 <_vfiprintf_r+0x228>)
 800cf48:	bb1b      	cbnz	r3, 800cf92 <_vfiprintf_r+0x1d6>
 800cf4a:	9b03      	ldr	r3, [sp, #12]
 800cf4c:	3307      	adds	r3, #7
 800cf4e:	f023 0307 	bic.w	r3, r3, #7
 800cf52:	3308      	adds	r3, #8
 800cf54:	9303      	str	r3, [sp, #12]
 800cf56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf58:	443b      	add	r3, r7
 800cf5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf5c:	e76a      	b.n	800ce34 <_vfiprintf_r+0x78>
 800cf5e:	460c      	mov	r4, r1
 800cf60:	2001      	movs	r0, #1
 800cf62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf66:	e7a8      	b.n	800ceba <_vfiprintf_r+0xfe>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f04f 0c0a 	mov.w	ip, #10
 800cf6e:	4619      	mov	r1, r3
 800cf70:	3401      	adds	r4, #1
 800cf72:	9305      	str	r3, [sp, #20]
 800cf74:	4620      	mov	r0, r4
 800cf76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf7a:	3a30      	subs	r2, #48	@ 0x30
 800cf7c:	2a09      	cmp	r2, #9
 800cf7e:	d903      	bls.n	800cf88 <_vfiprintf_r+0x1cc>
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d0c6      	beq.n	800cf12 <_vfiprintf_r+0x156>
 800cf84:	9105      	str	r1, [sp, #20]
 800cf86:	e7c4      	b.n	800cf12 <_vfiprintf_r+0x156>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf90:	e7f0      	b.n	800cf74 <_vfiprintf_r+0x1b8>
 800cf92:	ab03      	add	r3, sp, #12
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	462a      	mov	r2, r5
 800cf98:	4630      	mov	r0, r6
 800cf9a:	4b13      	ldr	r3, [pc, #76]	@ (800cfe8 <_vfiprintf_r+0x22c>)
 800cf9c:	a904      	add	r1, sp, #16
 800cf9e:	f7fb fec5 	bl	8008d2c <_printf_float>
 800cfa2:	4607      	mov	r7, r0
 800cfa4:	1c78      	adds	r0, r7, #1
 800cfa6:	d1d6      	bne.n	800cf56 <_vfiprintf_r+0x19a>
 800cfa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfaa:	07d9      	lsls	r1, r3, #31
 800cfac:	d405      	bmi.n	800cfba <_vfiprintf_r+0x1fe>
 800cfae:	89ab      	ldrh	r3, [r5, #12]
 800cfb0:	059a      	lsls	r2, r3, #22
 800cfb2:	d402      	bmi.n	800cfba <_vfiprintf_r+0x1fe>
 800cfb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfb6:	f7fc fe2b 	bl	8009c10 <__retarget_lock_release_recursive>
 800cfba:	89ab      	ldrh	r3, [r5, #12]
 800cfbc:	065b      	lsls	r3, r3, #25
 800cfbe:	f53f af1f 	bmi.w	800ce00 <_vfiprintf_r+0x44>
 800cfc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfc4:	e71e      	b.n	800ce04 <_vfiprintf_r+0x48>
 800cfc6:	ab03      	add	r3, sp, #12
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	462a      	mov	r2, r5
 800cfcc:	4630      	mov	r0, r6
 800cfce:	4b06      	ldr	r3, [pc, #24]	@ (800cfe8 <_vfiprintf_r+0x22c>)
 800cfd0:	a904      	add	r1, sp, #16
 800cfd2:	f7fc f949 	bl	8009268 <_printf_i>
 800cfd6:	e7e4      	b.n	800cfa2 <_vfiprintf_r+0x1e6>
 800cfd8:	0800df79 	.word	0x0800df79
 800cfdc:	0800df7f 	.word	0x0800df7f
 800cfe0:	0800df83 	.word	0x0800df83
 800cfe4:	08008d2d 	.word	0x08008d2d
 800cfe8:	0800cd99 	.word	0x0800cd99

0800cfec <__swbuf_r>:
 800cfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfee:	460e      	mov	r6, r1
 800cff0:	4614      	mov	r4, r2
 800cff2:	4605      	mov	r5, r0
 800cff4:	b118      	cbz	r0, 800cffe <__swbuf_r+0x12>
 800cff6:	6a03      	ldr	r3, [r0, #32]
 800cff8:	b90b      	cbnz	r3, 800cffe <__swbuf_r+0x12>
 800cffa:	f7fc fcf1 	bl	80099e0 <__sinit>
 800cffe:	69a3      	ldr	r3, [r4, #24]
 800d000:	60a3      	str	r3, [r4, #8]
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	071a      	lsls	r2, r3, #28
 800d006:	d501      	bpl.n	800d00c <__swbuf_r+0x20>
 800d008:	6923      	ldr	r3, [r4, #16]
 800d00a:	b943      	cbnz	r3, 800d01e <__swbuf_r+0x32>
 800d00c:	4621      	mov	r1, r4
 800d00e:	4628      	mov	r0, r5
 800d010:	f000 f82a 	bl	800d068 <__swsetup_r>
 800d014:	b118      	cbz	r0, 800d01e <__swbuf_r+0x32>
 800d016:	f04f 37ff 	mov.w	r7, #4294967295
 800d01a:	4638      	mov	r0, r7
 800d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	6922      	ldr	r2, [r4, #16]
 800d022:	b2f6      	uxtb	r6, r6
 800d024:	1a98      	subs	r0, r3, r2
 800d026:	6963      	ldr	r3, [r4, #20]
 800d028:	4637      	mov	r7, r6
 800d02a:	4283      	cmp	r3, r0
 800d02c:	dc05      	bgt.n	800d03a <__swbuf_r+0x4e>
 800d02e:	4621      	mov	r1, r4
 800d030:	4628      	mov	r0, r5
 800d032:	f7ff fa4b 	bl	800c4cc <_fflush_r>
 800d036:	2800      	cmp	r0, #0
 800d038:	d1ed      	bne.n	800d016 <__swbuf_r+0x2a>
 800d03a:	68a3      	ldr	r3, [r4, #8]
 800d03c:	3b01      	subs	r3, #1
 800d03e:	60a3      	str	r3, [r4, #8]
 800d040:	6823      	ldr	r3, [r4, #0]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	6022      	str	r2, [r4, #0]
 800d046:	701e      	strb	r6, [r3, #0]
 800d048:	6962      	ldr	r2, [r4, #20]
 800d04a:	1c43      	adds	r3, r0, #1
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d004      	beq.n	800d05a <__swbuf_r+0x6e>
 800d050:	89a3      	ldrh	r3, [r4, #12]
 800d052:	07db      	lsls	r3, r3, #31
 800d054:	d5e1      	bpl.n	800d01a <__swbuf_r+0x2e>
 800d056:	2e0a      	cmp	r6, #10
 800d058:	d1df      	bne.n	800d01a <__swbuf_r+0x2e>
 800d05a:	4621      	mov	r1, r4
 800d05c:	4628      	mov	r0, r5
 800d05e:	f7ff fa35 	bl	800c4cc <_fflush_r>
 800d062:	2800      	cmp	r0, #0
 800d064:	d0d9      	beq.n	800d01a <__swbuf_r+0x2e>
 800d066:	e7d6      	b.n	800d016 <__swbuf_r+0x2a>

0800d068 <__swsetup_r>:
 800d068:	b538      	push	{r3, r4, r5, lr}
 800d06a:	4b29      	ldr	r3, [pc, #164]	@ (800d110 <__swsetup_r+0xa8>)
 800d06c:	4605      	mov	r5, r0
 800d06e:	6818      	ldr	r0, [r3, #0]
 800d070:	460c      	mov	r4, r1
 800d072:	b118      	cbz	r0, 800d07c <__swsetup_r+0x14>
 800d074:	6a03      	ldr	r3, [r0, #32]
 800d076:	b90b      	cbnz	r3, 800d07c <__swsetup_r+0x14>
 800d078:	f7fc fcb2 	bl	80099e0 <__sinit>
 800d07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d080:	0719      	lsls	r1, r3, #28
 800d082:	d422      	bmi.n	800d0ca <__swsetup_r+0x62>
 800d084:	06da      	lsls	r2, r3, #27
 800d086:	d407      	bmi.n	800d098 <__swsetup_r+0x30>
 800d088:	2209      	movs	r2, #9
 800d08a:	602a      	str	r2, [r5, #0]
 800d08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d090:	f04f 30ff 	mov.w	r0, #4294967295
 800d094:	81a3      	strh	r3, [r4, #12]
 800d096:	e033      	b.n	800d100 <__swsetup_r+0x98>
 800d098:	0758      	lsls	r0, r3, #29
 800d09a:	d512      	bpl.n	800d0c2 <__swsetup_r+0x5a>
 800d09c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d09e:	b141      	cbz	r1, 800d0b2 <__swsetup_r+0x4a>
 800d0a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d0a4:	4299      	cmp	r1, r3
 800d0a6:	d002      	beq.n	800d0ae <__swsetup_r+0x46>
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7fd fc15 	bl	800a8d8 <_free_r>
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0b8:	81a3      	strh	r3, [r4, #12]
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6063      	str	r3, [r4, #4]
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	89a3      	ldrh	r3, [r4, #12]
 800d0c4:	f043 0308 	orr.w	r3, r3, #8
 800d0c8:	81a3      	strh	r3, [r4, #12]
 800d0ca:	6923      	ldr	r3, [r4, #16]
 800d0cc:	b94b      	cbnz	r3, 800d0e2 <__swsetup_r+0x7a>
 800d0ce:	89a3      	ldrh	r3, [r4, #12]
 800d0d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0d8:	d003      	beq.n	800d0e2 <__swsetup_r+0x7a>
 800d0da:	4621      	mov	r1, r4
 800d0dc:	4628      	mov	r0, r5
 800d0de:	f000 f882 	bl	800d1e6 <__smakebuf_r>
 800d0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e6:	f013 0201 	ands.w	r2, r3, #1
 800d0ea:	d00a      	beq.n	800d102 <__swsetup_r+0x9a>
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	60a2      	str	r2, [r4, #8]
 800d0f0:	6962      	ldr	r2, [r4, #20]
 800d0f2:	4252      	negs	r2, r2
 800d0f4:	61a2      	str	r2, [r4, #24]
 800d0f6:	6922      	ldr	r2, [r4, #16]
 800d0f8:	b942      	cbnz	r2, 800d10c <__swsetup_r+0xa4>
 800d0fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0fe:	d1c5      	bne.n	800d08c <__swsetup_r+0x24>
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	0799      	lsls	r1, r3, #30
 800d104:	bf58      	it	pl
 800d106:	6962      	ldrpl	r2, [r4, #20]
 800d108:	60a2      	str	r2, [r4, #8]
 800d10a:	e7f4      	b.n	800d0f6 <__swsetup_r+0x8e>
 800d10c:	2000      	movs	r0, #0
 800d10e:	e7f7      	b.n	800d100 <__swsetup_r+0x98>
 800d110:	2000006c 	.word	0x2000006c

0800d114 <_raise_r>:
 800d114:	291f      	cmp	r1, #31
 800d116:	b538      	push	{r3, r4, r5, lr}
 800d118:	4605      	mov	r5, r0
 800d11a:	460c      	mov	r4, r1
 800d11c:	d904      	bls.n	800d128 <_raise_r+0x14>
 800d11e:	2316      	movs	r3, #22
 800d120:	6003      	str	r3, [r0, #0]
 800d122:	f04f 30ff 	mov.w	r0, #4294967295
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d12a:	b112      	cbz	r2, 800d132 <_raise_r+0x1e>
 800d12c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d130:	b94b      	cbnz	r3, 800d146 <_raise_r+0x32>
 800d132:	4628      	mov	r0, r5
 800d134:	f000 f830 	bl	800d198 <_getpid_r>
 800d138:	4622      	mov	r2, r4
 800d13a:	4601      	mov	r1, r0
 800d13c:	4628      	mov	r0, r5
 800d13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d142:	f000 b817 	b.w	800d174 <_kill_r>
 800d146:	2b01      	cmp	r3, #1
 800d148:	d00a      	beq.n	800d160 <_raise_r+0x4c>
 800d14a:	1c59      	adds	r1, r3, #1
 800d14c:	d103      	bne.n	800d156 <_raise_r+0x42>
 800d14e:	2316      	movs	r3, #22
 800d150:	6003      	str	r3, [r0, #0]
 800d152:	2001      	movs	r0, #1
 800d154:	e7e7      	b.n	800d126 <_raise_r+0x12>
 800d156:	2100      	movs	r1, #0
 800d158:	4620      	mov	r0, r4
 800d15a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d15e:	4798      	blx	r3
 800d160:	2000      	movs	r0, #0
 800d162:	e7e0      	b.n	800d126 <_raise_r+0x12>

0800d164 <raise>:
 800d164:	4b02      	ldr	r3, [pc, #8]	@ (800d170 <raise+0xc>)
 800d166:	4601      	mov	r1, r0
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	f7ff bfd3 	b.w	800d114 <_raise_r>
 800d16e:	bf00      	nop
 800d170:	2000006c 	.word	0x2000006c

0800d174 <_kill_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	2300      	movs	r3, #0
 800d178:	4d06      	ldr	r5, [pc, #24]	@ (800d194 <_kill_r+0x20>)
 800d17a:	4604      	mov	r4, r0
 800d17c:	4608      	mov	r0, r1
 800d17e:	4611      	mov	r1, r2
 800d180:	602b      	str	r3, [r5, #0]
 800d182:	f7f6 feb6 	bl	8003ef2 <_kill>
 800d186:	1c43      	adds	r3, r0, #1
 800d188:	d102      	bne.n	800d190 <_kill_r+0x1c>
 800d18a:	682b      	ldr	r3, [r5, #0]
 800d18c:	b103      	cbz	r3, 800d190 <_kill_r+0x1c>
 800d18e:	6023      	str	r3, [r4, #0]
 800d190:	bd38      	pop	{r3, r4, r5, pc}
 800d192:	bf00      	nop
 800d194:	200009d0 	.word	0x200009d0

0800d198 <_getpid_r>:
 800d198:	f7f6 bea4 	b.w	8003ee4 <_getpid>

0800d19c <__swhatbuf_r>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	460c      	mov	r4, r1
 800d1a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a4:	4615      	mov	r5, r2
 800d1a6:	2900      	cmp	r1, #0
 800d1a8:	461e      	mov	r6, r3
 800d1aa:	b096      	sub	sp, #88	@ 0x58
 800d1ac:	da0c      	bge.n	800d1c8 <__swhatbuf_r+0x2c>
 800d1ae:	89a3      	ldrh	r3, [r4, #12]
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1b6:	bf14      	ite	ne
 800d1b8:	2340      	movne	r3, #64	@ 0x40
 800d1ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1be:	2000      	movs	r0, #0
 800d1c0:	6031      	str	r1, [r6, #0]
 800d1c2:	602b      	str	r3, [r5, #0]
 800d1c4:	b016      	add	sp, #88	@ 0x58
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}
 800d1c8:	466a      	mov	r2, sp
 800d1ca:	f000 f849 	bl	800d260 <_fstat_r>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	dbed      	blt.n	800d1ae <__swhatbuf_r+0x12>
 800d1d2:	9901      	ldr	r1, [sp, #4]
 800d1d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1dc:	4259      	negs	r1, r3
 800d1de:	4159      	adcs	r1, r3
 800d1e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1e4:	e7eb      	b.n	800d1be <__swhatbuf_r+0x22>

0800d1e6 <__smakebuf_r>:
 800d1e6:	898b      	ldrh	r3, [r1, #12]
 800d1e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ea:	079d      	lsls	r5, r3, #30
 800d1ec:	4606      	mov	r6, r0
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	d507      	bpl.n	800d202 <__smakebuf_r+0x1c>
 800d1f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1f6:	6023      	str	r3, [r4, #0]
 800d1f8:	6123      	str	r3, [r4, #16]
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	6163      	str	r3, [r4, #20]
 800d1fe:	b003      	add	sp, #12
 800d200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d202:	466a      	mov	r2, sp
 800d204:	ab01      	add	r3, sp, #4
 800d206:	f7ff ffc9 	bl	800d19c <__swhatbuf_r>
 800d20a:	9f00      	ldr	r7, [sp, #0]
 800d20c:	4605      	mov	r5, r0
 800d20e:	4639      	mov	r1, r7
 800d210:	4630      	mov	r0, r6
 800d212:	f7fd fbd3 	bl	800a9bc <_malloc_r>
 800d216:	b948      	cbnz	r0, 800d22c <__smakebuf_r+0x46>
 800d218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d21c:	059a      	lsls	r2, r3, #22
 800d21e:	d4ee      	bmi.n	800d1fe <__smakebuf_r+0x18>
 800d220:	f023 0303 	bic.w	r3, r3, #3
 800d224:	f043 0302 	orr.w	r3, r3, #2
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	e7e2      	b.n	800d1f2 <__smakebuf_r+0xc>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d236:	81a3      	strh	r3, [r4, #12]
 800d238:	9b01      	ldr	r3, [sp, #4]
 800d23a:	6020      	str	r0, [r4, #0]
 800d23c:	b15b      	cbz	r3, 800d256 <__smakebuf_r+0x70>
 800d23e:	4630      	mov	r0, r6
 800d240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d244:	f000 f81e 	bl	800d284 <_isatty_r>
 800d248:	b128      	cbz	r0, 800d256 <__smakebuf_r+0x70>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f023 0303 	bic.w	r3, r3, #3
 800d250:	f043 0301 	orr.w	r3, r3, #1
 800d254:	81a3      	strh	r3, [r4, #12]
 800d256:	89a3      	ldrh	r3, [r4, #12]
 800d258:	431d      	orrs	r5, r3
 800d25a:	81a5      	strh	r5, [r4, #12]
 800d25c:	e7cf      	b.n	800d1fe <__smakebuf_r+0x18>
	...

0800d260 <_fstat_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	2300      	movs	r3, #0
 800d264:	4d06      	ldr	r5, [pc, #24]	@ (800d280 <_fstat_r+0x20>)
 800d266:	4604      	mov	r4, r0
 800d268:	4608      	mov	r0, r1
 800d26a:	4611      	mov	r1, r2
 800d26c:	602b      	str	r3, [r5, #0]
 800d26e:	f7f6 fe9f 	bl	8003fb0 <_fstat>
 800d272:	1c43      	adds	r3, r0, #1
 800d274:	d102      	bne.n	800d27c <_fstat_r+0x1c>
 800d276:	682b      	ldr	r3, [r5, #0]
 800d278:	b103      	cbz	r3, 800d27c <_fstat_r+0x1c>
 800d27a:	6023      	str	r3, [r4, #0]
 800d27c:	bd38      	pop	{r3, r4, r5, pc}
 800d27e:	bf00      	nop
 800d280:	200009d0 	.word	0x200009d0

0800d284 <_isatty_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	2300      	movs	r3, #0
 800d288:	4d05      	ldr	r5, [pc, #20]	@ (800d2a0 <_isatty_r+0x1c>)
 800d28a:	4604      	mov	r4, r0
 800d28c:	4608      	mov	r0, r1
 800d28e:	602b      	str	r3, [r5, #0]
 800d290:	f7f6 fe9d 	bl	8003fce <_isatty>
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	d102      	bne.n	800d29e <_isatty_r+0x1a>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b103      	cbz	r3, 800d29e <_isatty_r+0x1a>
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	200009d0 	.word	0x200009d0

0800d2a4 <_init>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	bf00      	nop
 800d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2aa:	bc08      	pop	{r3}
 800d2ac:	469e      	mov	lr, r3
 800d2ae:	4770      	bx	lr

0800d2b0 <_fini>:
 800d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b2:	bf00      	nop
 800d2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2b6:	bc08      	pop	{r3}
 800d2b8:	469e      	mov	lr, r3
 800d2ba:	4770      	bx	lr
