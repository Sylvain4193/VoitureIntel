
PS_Control_Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfdc  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  0800d1c8  0800d1c8  0000e1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df20  0800df20  0000f220  2**0
                  CONTENTS
  4 .ARM          00000008  0800df20  0800df20  0000ef20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df28  0800df28  0000f220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df28  0800df28  0000ef28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df2c  0800df2c  0000ef2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800df30  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000220  0800e150  0000f220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009c4  0800e150  0000f9c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f38a  00000000  00000000  0000f249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344e  00000000  00000000  0001e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00021a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d44  00000000  00000000  00022b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e997  00000000  00000000  000238cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4d5  00000000  00000000  00042263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c8ec  00000000  00000000  00060738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  000fd068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00102af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000220 	.word	0x20000220
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d1ac 	.word	0x0800d1ac

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000224 	.word	0x20000224
 8000224:	0800d1ac 	.word	0x0800d1ac

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	@ 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eae:	2afd      	cmp	r2, #253	@ 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	@ 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	@ 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_d2lz>:
 8001234:	b538      	push	{r3, r4, r5, lr}
 8001236:	2200      	movs	r2, #0
 8001238:	2300      	movs	r3, #0
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	f7ff fc29 	bl	8000a94 <__aeabi_dcmplt>
 8001242:	b928      	cbnz	r0, 8001250 <__aeabi_d2lz+0x1c>
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800124c:	f000 b80a 	b.w	8001264 <__aeabi_d2ulz>
 8001250:	4620      	mov	r0, r4
 8001252:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001256:	f000 f805 	bl	8001264 <__aeabi_d2ulz>
 800125a:	4240      	negs	r0, r0
 800125c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop

08001264 <__aeabi_d2ulz>:
 8001264:	b5d0      	push	{r4, r6, r7, lr}
 8001266:	2200      	movs	r2, #0
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <__aeabi_d2ulz+0x34>)
 800126a:	4606      	mov	r6, r0
 800126c:	460f      	mov	r7, r1
 800126e:	f7ff f99f 	bl	80005b0 <__aeabi_dmul>
 8001272:	f7ff fc75 	bl	8000b60 <__aeabi_d2uiz>
 8001276:	4604      	mov	r4, r0
 8001278:	f7ff f920 	bl	80004bc <__aeabi_ui2d>
 800127c:	2200      	movs	r2, #0
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <__aeabi_d2ulz+0x38>)
 8001280:	f7ff f996 	bl	80005b0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7fe ffd8 	bl	8000240 <__aeabi_dsub>
 8001290:	f7ff fc66 	bl	8000b60 <__aeabi_d2uiz>
 8001294:	4621      	mov	r1, r4
 8001296:	bdd0      	pop	{r4, r6, r7, pc}
 8001298:	3df00000 	.word	0x3df00000
 800129c:	41f00000 	.word	0x41f00000

080012a0 <I2C_WriteByte>:
static SSD1306_t SSD1306;

// 向oled写数据  -- 使用hal库的i2c,不打开i2c的EV_IRQHandler，使用DMA会有bug，此为hal库的bug
// Write data to OLED - use i2c from the HAL library without opening EV_IRQHandler, there may be a bug when using DMA, which is a bug in the hal library
void I2C_WriteByte(unsigned char addr, unsigned char data)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af04      	add	r7, sp, #16
 80012a6:	4603      	mov	r3, r0
 80012a8:	460a      	mov	r2, r1
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	4613      	mov	r3, r2
 80012ae:	71bb      	strb	r3, [r7, #6]
    // 不使用DMA的方式传输-阻塞型
    // Transmission without DMA - Blocking
    HAL_I2C_Mem_Write(&hi2c1, OLED_ADDRESS, addr, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	230a      	movs	r3, #10
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	2301      	movs	r3, #1
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2301      	movs	r3, #1
 80012c2:	2178      	movs	r1, #120	@ 0x78
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <I2C_WriteByte+0x34>)
 80012c6:	f004 fa0b 	bl	80056e0 <HAL_I2C_Mem_Write>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200005dc 	.word	0x200005dc

080012d8 <OLED_Init>:
// 函数功能:oled初始化
// 传入参数:无
// Function function: oled initialization
// Incoming parameter: None
void OLED_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

    HAL_Delay(100);
 80012dc:	2064      	movs	r0, #100	@ 0x64
 80012de:	f003 fbfd 	bl	8004adc <HAL_Delay>

    SSD1306_WRITECOMMAND(0xae); // display off
 80012e2:	21ae      	movs	r1, #174	@ 0xae
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ffdb 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // Set Normal Display (default)
 80012ea:	21a6      	movs	r1, #166	@ 0xa6
 80012ec:	2000      	movs	r0, #0
 80012ee:	f7ff ffd7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xAE); // DISPLAYOFF
 80012f2:	21ae      	movs	r1, #174	@ 0xae
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ffd3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD5); // SETDISPLAYCLOCKDIV
 80012fa:	21d5      	movs	r1, #213	@ 0xd5
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff ffcf 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x80); // the suggested ratio 0x80
 8001302:	2180      	movs	r1, #128	@ 0x80
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff ffcb 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xA8); // SSD1306_SETMULTIPLEX
 800130a:	21a8      	movs	r1, #168	@ 0xa8
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ffc7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x1F);
 8001312:	211f      	movs	r1, #31
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff ffc3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xD3);       // SETDISPLAYOFFSET
 800131a:	21d3      	movs	r1, #211	@ 0xd3
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ffbf 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x00);       // no offset
 8001322:	2100      	movs	r1, #0
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff ffbb 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40 | 0x0); // SETSTARTLINE
 800132a:	2140      	movs	r1, #64	@ 0x40
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff ffb7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x8D);       // CHARGEPUMP
 8001332:	218d      	movs	r1, #141	@ 0x8d
 8001334:	2000      	movs	r0, #0
 8001336:	f7ff ffb3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x14);       // 0x014 enable, 0x010 disable
 800133a:	2114      	movs	r1, #20
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffaf 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x20);       // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5),
 8001342:	2120      	movs	r1, #32
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ffab 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02);       // 0x12 //128x32 OLED: 0x002,  128x32 OLED 0x012
 800134a:	2102      	movs	r1, #2
 800134c:	2000      	movs	r0, #0
 800134e:	f7ff ffa7 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa1);       // segment remap a0/a1
 8001352:	21a1      	movs	r1, #161	@ 0xa1
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ffa3 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xc8);       // c0: scan dir normal, c8: reverse
 800135a:	21c8      	movs	r1, #200	@ 0xc8
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff ff9f 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xda);
 8001362:	21da      	movs	r1, #218	@ 0xda
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff ff9b 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x02); // com pin HW config, sequential com pin config (bit 4), disable left/right remap (bit 5)
 800136a:	2102      	movs	r1, #2
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff ff97 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x81);
 8001372:	2181      	movs	r1, #129	@ 0x81
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff ff93 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xcf); // [2] set contrast control
 800137a:	21cf      	movs	r1, #207	@ 0xcf
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff ff8f 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xd9);
 8001382:	21d9      	movs	r1, #217	@ 0xd9
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff8b 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xf1); // [2] pre-charge period 0x022/f1
 800138a:	21f1      	movs	r1, #241	@ 0xf1
 800138c:	2000      	movs	r0, #0
 800138e:	f7ff ff87 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xdb);
 8001392:	21db      	movs	r1, #219	@ 0xdb
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff ff83 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x40); // vcomh deselect level
 800139a:	2140      	movs	r1, #64	@ 0x40
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff ff7f 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0x2e); // Disable scroll
 80013a2:	212e      	movs	r1, #46	@ 0x2e
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff ff7b 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa4); // output ram to display
 80013aa:	21a4      	movs	r1, #164	@ 0xa4
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff ff77 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xa6); // none inverted normal display mode
 80013b2:	21a6      	movs	r1, #166	@ 0xa6
 80013b4:	2000      	movs	r0, #0
 80013b6:	f7ff ff73 	bl	80012a0 <I2C_WriteByte>
    SSD1306_WRITECOMMAND(0xaf); // display on
 80013ba:	21af      	movs	r1, #175	@ 0xaf
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff6f 	bl	80012a0 <I2C_WriteByte>

    /* Clear screen */
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f846 	bl	8001454 <SSD1306_Fill>

    /* Update screen */
    SSD1306_UpdateScreen();
 80013c8:	f000 f80e 	bl	80013e8 <SSD1306_UpdateScreen>

    /* Set default values */
    SSD1306.CurrentX = 0;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <OLED_Init+0x10c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80013d2:	4b04      	ldr	r3, [pc, #16]	@ (80013e4 <OLED_Init+0x10c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	805a      	strh	r2, [r3, #2]

    /* Initialized OK */
    SSD1306.Initialized = 1;
 80013d8:	4b02      	ldr	r3, [pc, #8]	@ (80013e4 <OLED_Init+0x10c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	715a      	strb	r2, [r3, #5]
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000043c 	.word	0x2000043c

080013e8 <SSD1306_UpdateScreen>:
// 函数功能:oled屏幕更新显示
// 传入参数:无
// Function function: OLED screen update display
// Incoming parameter: None
void SSD1306_UpdateScreen(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    uint8_t m, n;

    for (m = 0; m < 8; m++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	71fb      	strb	r3, [r7, #7]
 80013f2:	e025      	b.n	8001440 <SSD1306_UpdateScreen+0x58>
    {
        SSD1306_WRITECOMMAND(0xB0 + m);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	3b50      	subs	r3, #80	@ 0x50
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	4619      	mov	r1, r3
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff ff4f 	bl	80012a0 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x00);
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff ff4b 	bl	80012a0 <I2C_WriteByte>
        SSD1306_WRITECOMMAND(0x10);
 800140a:	2110      	movs	r1, #16
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff ff47 	bl	80012a0 <I2C_WriteByte>

        for (n = 0; n < SSD1306_WIDTH; n++)
 8001412:	2300      	movs	r3, #0
 8001414:	71bb      	strb	r3, [r7, #6]
 8001416:	e00c      	b.n	8001432 <SSD1306_UpdateScreen+0x4a>
        {

            SSD1306_WRITEDATA(SSD1306_Buffer[n + SSD1306_WIDTH * m]);
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	4413      	add	r3, r2
 8001420:	4a0b      	ldr	r2, [pc, #44]	@ (8001450 <SSD1306_UpdateScreen+0x68>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	4619      	mov	r1, r3
 8001426:	2040      	movs	r0, #64	@ 0x40
 8001428:	f7ff ff3a 	bl	80012a0 <I2C_WriteByte>
        for (n = 0; n < SSD1306_WIDTH; n++)
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	3301      	adds	r3, #1
 8001430:	71bb      	strb	r3, [r7, #6]
 8001432:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	daee      	bge.n	8001418 <SSD1306_UpdateScreen+0x30>
    for (m = 0; m < 8; m++)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3301      	adds	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	2b07      	cmp	r3, #7
 8001444:	d9d6      	bls.n	80013f4 <SSD1306_UpdateScreen+0xc>
        }
    }
}
 8001446:	bf00      	nop
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000023c 	.word	0x2000023c

08001454 <SSD1306_Fill>:
// 函数功能:oled屏幕清屏，但没刷新显示
// 传入参数:color :SSD1306_COLOR_BLACK SSD1306_COLOR_WHITE
// Function function: OLED screen is cleared, but the display is not refreshed
// Incoming parameter: color: SSD1306_ COLOR_ BLACK SSD1306_ COLOR_ WHITE
void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <SSD1306_Fill+0x14>
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <SSD1306_Fill+0x16>
 8001468:	23ff      	movs	r3, #255	@ 0xff
 800146a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146e:	4619      	mov	r1, r3
 8001470:	4803      	ldr	r0, [pc, #12]	@ (8001480 <SSD1306_Fill+0x2c>)
 8001472:	f008 fad2 	bl	8009a1a <memset>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000023c 	.word	0x2000023c

08001484 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	460b      	mov	r3, r1
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	70fb      	strb	r3, [r7, #3]
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b7f      	cmp	r3, #127	@ 0x7f
 800149a:	d848      	bhi.n	800152e <SSD1306_DrawPixel+0xaa>
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	d845      	bhi.n	800152e <SSD1306_DrawPixel+0xaa>
    {
        return; // Error, out of range 出错，超出范围
    }

    /* Check if pixels are inverted 检查像素是否倒置 */
    if (SSD1306.Inverted)
 80014a2:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <SSD1306_DrawPixel+0xb4>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <SSD1306_DrawPixel+0x34>
    {
        color = (SSD1306_COLOR_t)!color;
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf0c      	ite	eq
 80014b0:	2301      	moveq	r3, #1
 80014b2:	2300      	movne	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	70fb      	strb	r3, [r7, #3]
    }

    /* COLOR 设置颜色 */
    if (color == SSD1306_COLOR_WHITE)
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d11a      	bne.n	80014f4 <SSD1306_DrawPixel+0x70>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	08db      	lsrs	r3, r3, #3
 80014c4:	b298      	uxth	r0, r3
 80014c6:	4603      	mov	r3, r0
 80014c8:	01db      	lsls	r3, r3, #7
 80014ca:	4413      	add	r3, r2
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b259      	sxtb	r1, r3
 80014e4:	88fa      	ldrh	r2, [r7, #6]
 80014e6:	4603      	mov	r3, r0
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	4413      	add	r3, r2
 80014ec:	b2c9      	uxtb	r1, r1
 80014ee:	4a13      	ldr	r2, [pc, #76]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 80014f0:	54d1      	strb	r1, [r2, r3]
 80014f2:	e01d      	b.n	8001530 <SSD1306_DrawPixel+0xac>
    }
    else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014f4:	88fa      	ldrh	r2, [r7, #6]
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	b298      	uxth	r0, r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	01db      	lsls	r3, r3, #7
 8001500:	4413      	add	r3, r2
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 8001504:	5cd3      	ldrb	r3, [r2, r3]
 8001506:	b25a      	sxtb	r2, r3
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	b25b      	sxtb	r3, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	b25b      	sxtb	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b259      	sxtb	r1, r3
 800151e:	88fa      	ldrh	r2, [r7, #6]
 8001520:	4603      	mov	r3, r0
 8001522:	01db      	lsls	r3, r3, #7
 8001524:	4413      	add	r3, r2
 8001526:	b2c9      	uxtb	r1, r1
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <SSD1306_DrawPixel+0xb8>)
 800152a:	54d1      	strb	r1, [r2, r3]
 800152c:	e000      	b.n	8001530 <SSD1306_DrawPixel+0xac>
        return; // Error, out of range 出错，超出范围
 800152e:	bf00      	nop
    }
}
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	2000043c 	.word	0x2000043c
 800153c:	2000023c 	.word	0x2000023c

08001540 <SSD1306_GotoXY>:
// 函数功能:设置当前的光标
// 传入参数:x:横坐标 y:纵坐标
// Function function: Set the current cursor
// Incoming parameter: x: abscissa y: ordinate
void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	460a      	mov	r2, r1
 800154a:	80fb      	strh	r3, [r7, #6]
 800154c:	4613      	mov	r3, r2
 800154e:	80bb      	strh	r3, [r7, #4]
    SSD1306.CurrentX = x;
 8001550:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <SSD1306_GotoXY+0x28>)
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	8013      	strh	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8001556:	4a04      	ldr	r2, [pc, #16]	@ (8001568 <SSD1306_GotoXY+0x28>)
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	8053      	strh	r3, [r2, #2]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000043c 	.word	0x2000043c

0800156c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	4613      	mov	r3, r2
 800157a:	71bb      	strb	r3, [r7, #6]
    uint32_t i, b, j;

    if (
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800157c:	4b39      	ldr	r3, [pc, #228]	@ (8001664 <SSD1306_Putc+0xf8>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
    if (
 8001588:	2b7f      	cmp	r3, #127	@ 0x7f
 800158a:	dc07      	bgt.n	800159c <SSD1306_Putc+0x30>
        SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight))
 800158c:	4b35      	ldr	r3, [pc, #212]	@ (8001664 <SSD1306_Putc+0xf8>)
 800158e:	885b      	ldrh	r3, [r3, #2]
 8001590:	461a      	mov	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	4413      	add	r3, r2
        SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001598:	2b1f      	cmp	r3, #31
 800159a:	dd01      	ble.n	80015a0 <SSD1306_Putc+0x34>
    {
        return 0; // Check if pixels are inverted 出错，超出范围
 800159c:	2300      	movs	r3, #0
 800159e:	e05d      	b.n	800165c <SSD1306_Putc+0xf0>
    }

    for (i = 0; i < Font->FontHeight; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e04b      	b.n	800163e <SSD1306_Putc+0xd2>
    {
        b = Font->data[(ch - 32) * Font->FontHeight + i];
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	3b20      	subs	r3, #32
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	7849      	ldrb	r1, [r1, #1]
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	440b      	add	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < Font->FontWidth; j++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	e030      	b.n	800162c <SSD1306_Putc+0xc0>
        {
            if ((b << j) & 0x8000)
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <SSD1306_Putc+0x90>
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)color);
 80015da:	4b22      	ldr	r3, [pc, #136]	@ (8001664 <SSD1306_Putc+0xf8>)
 80015dc:	881a      	ldrh	r2, [r3, #0]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b298      	uxth	r0, r3
 80015e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <SSD1306_Putc+0xf8>)
 80015e8:	885a      	ldrh	r2, [r3, #2]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	79ba      	ldrb	r2, [r7, #6]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff ff45 	bl	8001484 <SSD1306_DrawPixel>
 80015fa:	e014      	b.n	8001626 <SSD1306_Putc+0xba>
            }
            else
            {
                SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <SSD1306_Putc+0xf8>)
 80015fe:	881a      	ldrh	r2, [r3, #0]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b298      	uxth	r0, r3
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <SSD1306_Putc+0xf8>)
 800160a:	885a      	ldrh	r2, [r3, #2]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	b299      	uxth	r1, r3
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	f7ff ff2f 	bl	8001484 <SSD1306_DrawPixel>
        for (j = 0; j < Font->FontWidth; j++)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	3301      	adds	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	4293      	cmp	r3, r2
 8001636:	d3c8      	bcc.n	80015ca <SSD1306_Putc+0x5e>
    for (i = 0; i < Font->FontHeight; i++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	461a      	mov	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4293      	cmp	r3, r2
 8001648:	d3ad      	bcc.n	80015a6 <SSD1306_Putc+0x3a>
            }
        }
    }

    /* Increase pointer */
    SSD1306.CurrentX += Font->FontWidth;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <SSD1306_Putc+0xf8>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4413      	add	r3, r2
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b03      	ldr	r3, [pc, #12]	@ (8001664 <SSD1306_Putc+0xf8>)
 8001658:	801a      	strh	r2, [r3, #0]

    /* Return character written */
    return ch;
 800165a:	79fb      	ldrb	r3, [r7, #7]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000043c 	.word	0x2000043c

08001668 <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	4613      	mov	r3, r2
 8001674:	71fb      	strb	r3, [r7, #7]
    /* Write characters */
    while (*str)
 8001676:	e012      	b.n	800169e <SSD1306_Puts+0x36>
    {
        /* Write character by character */
        if (SSD1306_Putc(*str, Font, color) != *str)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	79fa      	ldrb	r2, [r7, #7]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff73 	bl	800156c <SSD1306_Putc>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d002      	beq.n	8001698 <SSD1306_Puts+0x30>
        {
            /* Return error */
            return *str;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	e008      	b.n	80016aa <SSD1306_Puts+0x42>
        }

        /* Increase string pointer */
        str++;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]
    while (*str)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1e8      	bne.n	8001678 <SSD1306_Puts+0x10>
    }

    /* Everything OK, zero should be returned */
    return *str;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	781b      	ldrb	r3, [r3, #0]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <OLED_Clear>:
    }
}

/* OLED Clear Screen OLED清除屏幕 */
void OLED_Clear(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
    SSD1306_Fill(SSD1306_COLOR_BLACK);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fecc 	bl	8001454 <SSD1306_Fill>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <OLED_Refresh>:

/*Refresh OLED screen 刷新OLED屏幕 */
void OLED_Refresh(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    SSD1306_UpdateScreen();
 80016c4:	f7ff fe90 	bl	80013e8 <SSD1306_UpdateScreen>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <OLED_Draw_String>:

/* Write Characters 写入字符 */
void OLED_Draw_String(char *data, uint8_t x, uint8_t y, bool clear, bool refresh)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4608      	mov	r0, r1
 80016d6:	4611      	mov	r1, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	70fb      	strb	r3, [r7, #3]
 80016de:	460b      	mov	r3, r1
 80016e0:	70bb      	strb	r3, [r7, #2]
 80016e2:	4613      	mov	r3, r2
 80016e4:	707b      	strb	r3, [r7, #1]
    if (clear)
 80016e6:	787b      	ldrb	r3, [r7, #1]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <OLED_Draw_String+0x24>
        OLED_Clear();
 80016ec:	f7ff ffe1 	bl	80016b2 <OLED_Clear>
    SSD1306_GotoXY(x, y);
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	78ba      	ldrb	r2, [r7, #2]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff20 	bl	8001540 <SSD1306_GotoXY>
    SSD1306_Puts(data, &Font_7x10, SSD1306_COLOR_WHITE);
 8001700:	2201      	movs	r2, #1
 8001702:	4906      	ldr	r1, [pc, #24]	@ (800171c <OLED_Draw_String+0x50>)
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffaf 	bl	8001668 <SSD1306_Puts>
    if (refresh)
 800170a:	7c3b      	ldrb	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <OLED_Draw_String+0x48>
        OLED_Refresh();
 8001710:	f7ff ffd6 	bl	80016c0 <OLED_Refresh>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000

08001720 <OLED_Draw_Line>:

/* Write a line of characters 写入一行字符 */
void OLED_Draw_Line(char *data, uint8_t line, bool clear, bool refresh)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af02      	add	r7, sp, #8
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4608      	mov	r0, r1
 800172a:	4611      	mov	r1, r2
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	70fb      	strb	r3, [r7, #3]
 8001732:	460b      	mov	r3, r1
 8001734:	70bb      	strb	r3, [r7, #2]
 8001736:	4613      	mov	r3, r2
 8001738:	707b      	strb	r3, [r7, #1]
    if (line > 0 && line <= 3)
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <OLED_Draw_Line+0x46>
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d80f      	bhi.n	8001766 <OLED_Draw_Line+0x46>
    {
        OLED_Draw_String(data, 0, 10 * (line - 1), clear, refresh);
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	461a      	mov	r2, r3
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4413      	add	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3b0a      	subs	r3, #10
 8001754:	b2da      	uxtb	r2, r3
 8001756:	78b9      	ldrb	r1, [r7, #2]
 8001758:	787b      	ldrb	r3, [r7, #1]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	460b      	mov	r3, r1
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffb3 	bl	80016cc <OLED_Draw_String>
    }
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <User_PS2_Control>:
char line2[20] = {'\0'};

// 函数功能：ps2控制小车
// Function function: PS2 control car
void User_PS2_Control(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	// 如果不接手柄，即4个255 If the handle is not connected, i.e. 4 255
	PS2_LX = PS2_AnologData(PSS_LX);
 8001774:	2007      	movs	r0, #7
 8001776:	f000 fb27 	bl	8001dc8 <PS2_AnologData>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b9b      	ldr	r3, [pc, #620]	@ (80019ec <User_PS2_Control+0x27c>)
 8001780:	601a      	str	r2, [r3, #0]
	PS2_LY = PS2_AnologData(PSS_LY);
 8001782:	2008      	movs	r0, #8
 8001784:	f000 fb20 	bl	8001dc8 <PS2_AnologData>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	4b98      	ldr	r3, [pc, #608]	@ (80019f0 <User_PS2_Control+0x280>)
 800178e:	601a      	str	r2, [r3, #0]
	PS2_RX = PS2_AnologData(PSS_RX);
 8001790:	2005      	movs	r0, #5
 8001792:	f000 fb19 	bl	8001dc8 <PS2_AnologData>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b96      	ldr	r3, [pc, #600]	@ (80019f4 <User_PS2_Control+0x284>)
 800179c:	601a      	str	r2, [r3, #0]
	PS2_RY = PS2_AnologData(PSS_RY);
 800179e:	2006      	movs	r0, #6
 80017a0:	f000 fb12 	bl	8001dc8 <PS2_AnologData>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b93      	ldr	r3, [pc, #588]	@ (80019f8 <User_PS2_Control+0x288>)
 80017aa:	601a      	str	r2, [r3, #0]
	PS2_KEY = PS2_DataKey(); // 出现192
 80017ac:	f000 fad2 	bl	8001d54 <PS2_DataKey>
 80017b0:	4603      	mov	r3, r0
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b91      	ldr	r3, [pc, #580]	@ (80019fc <User_PS2_Control+0x28c>)
 80017b6:	601a      	str	r2, [r3, #0]

	sprintf(line1, "speed = %d   ", g_car_speed);
 80017b8:	4b91      	ldr	r3, [pc, #580]	@ (8001a00 <User_PS2_Control+0x290>)
 80017ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017be:	461a      	mov	r2, r3
 80017c0:	4990      	ldr	r1, [pc, #576]	@ (8001a04 <User_PS2_Control+0x294>)
 80017c2:	4891      	ldr	r0, [pc, #580]	@ (8001a08 <User_PS2_Control+0x298>)
 80017c4:	f008 f8c6 	bl	8009954 <siprintf>
	sprintf(line2, "speed = %.3f   ", Distance_Wall);
 80017c8:	4b90      	ldr	r3, [pc, #576]	@ (8001a0c <User_PS2_Control+0x29c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe97 	bl	8000500 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	498e      	ldr	r1, [pc, #568]	@ (8001a10 <User_PS2_Control+0x2a0>)
 80017d8:	488e      	ldr	r0, [pc, #568]	@ (8001a14 <User_PS2_Control+0x2a4>)
 80017da:	f008 f8bb 	bl	8009954 <siprintf>
	OLED_Draw_Line(line1, 2, false, false);
 80017de:	2300      	movs	r3, #0
 80017e0:	2200      	movs	r2, #0
 80017e2:	2102      	movs	r1, #2
 80017e4:	4888      	ldr	r0, [pc, #544]	@ (8001a08 <User_PS2_Control+0x298>)
 80017e6:	f7ff ff9b 	bl	8001720 <OLED_Draw_Line>
	OLED_Draw_Line(line2, 3, false, true);
 80017ea:	2301      	movs	r3, #1
 80017ec:	2200      	movs	r2, #0
 80017ee:	2103      	movs	r1, #3
 80017f0:	4888      	ldr	r0, [pc, #544]	@ (8001a14 <User_PS2_Control+0x2a4>)
 80017f2:	f7ff ff95 	bl	8001720 <OLED_Draw_Line>

	// 手柄没通信上 The handle is not communicating
	if ((PS2_LX == 255) && (PS2_LY == 255) && (PS2_RX == 255) && (PS2_RY == 255))
 80017f6:	4b7d      	ldr	r3, [pc, #500]	@ (80019ec <User_PS2_Control+0x27c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2bff      	cmp	r3, #255	@ 0xff
 80017fc:	d10c      	bne.n	8001818 <User_PS2_Control+0xa8>
 80017fe:	4b7c      	ldr	r3, [pc, #496]	@ (80019f0 <User_PS2_Control+0x280>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2bff      	cmp	r3, #255	@ 0xff
 8001804:	d108      	bne.n	8001818 <User_PS2_Control+0xa8>
 8001806:	4b7b      	ldr	r3, [pc, #492]	@ (80019f4 <User_PS2_Control+0x284>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2bff      	cmp	r3, #255	@ 0xff
 800180c:	d104      	bne.n	8001818 <User_PS2_Control+0xa8>
 800180e:	4b7a      	ldr	r3, [pc, #488]	@ (80019f8 <User_PS2_Control+0x288>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2bff      	cmp	r3, #255	@ 0xff
 8001814:	f000 81cd 	beq.w	8001bb2 <User_PS2_Control+0x442>
	{
		return;
	}
	else if ((PS2_LX == 0) && (PS2_LY == 0) && (PS2_RX == 0) && (PS2_RY == 0))
 8001818:	4b74      	ldr	r3, [pc, #464]	@ (80019ec <User_PS2_Control+0x27c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10c      	bne.n	800183a <User_PS2_Control+0xca>
 8001820:	4b73      	ldr	r3, [pc, #460]	@ (80019f0 <User_PS2_Control+0x280>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d108      	bne.n	800183a <User_PS2_Control+0xca>
 8001828:	4b72      	ldr	r3, [pc, #456]	@ (80019f4 <User_PS2_Control+0x284>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d104      	bne.n	800183a <User_PS2_Control+0xca>
 8001830:	4b71      	ldr	r3, [pc, #452]	@ (80019f8 <User_PS2_Control+0x288>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 81be 	beq.w	8001bb6 <User_PS2_Control+0x446>
	{
		return;
	}
	else if ((PS2_LX == 192) || (PS2_LY == 192) || (PS2_RX == 192) || (PS2_RY == 192)) // 这是误判的值,到时可自己调整 This is a misjudgment value, you can adjust it yourself then
 800183a:	4b6c      	ldr	r3, [pc, #432]	@ (80019ec <User_PS2_Control+0x27c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001840:	f000 81bb 	beq.w	8001bba <User_PS2_Control+0x44a>
 8001844:	4b6a      	ldr	r3, [pc, #424]	@ (80019f0 <User_PS2_Control+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2bc0      	cmp	r3, #192	@ 0xc0
 800184a:	f000 81b6 	beq.w	8001bba <User_PS2_Control+0x44a>
 800184e:	4b69      	ldr	r3, [pc, #420]	@ (80019f4 <User_PS2_Control+0x284>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2bc0      	cmp	r3, #192	@ 0xc0
 8001854:	f000 81b1 	beq.w	8001bba <User_PS2_Control+0x44a>
 8001858:	4b67      	ldr	r3, [pc, #412]	@ (80019f8 <User_PS2_Control+0x288>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2bc0      	cmp	r3, #192	@ 0xc0
 800185e:	f000 81ac 	beq.w	8001bba <User_PS2_Control+0x44a>
	{
		return;
	}

	// 左边控制前后，右边控制左右 Left controls front and rear, right controls left and right
	if (PS2_LY < 125 && (PS2_RX > 125 && PS2_RX < 150)) // 控制前 Before control
 8001862:	4b63      	ldr	r3, [pc, #396]	@ (80019f0 <User_PS2_Control+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b7c      	cmp	r3, #124	@ 0x7c
 8001868:	dc10      	bgt.n	800188c <User_PS2_Control+0x11c>
 800186a:	4b62      	ldr	r3, [pc, #392]	@ (80019f4 <User_PS2_Control+0x284>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b7d      	cmp	r3, #125	@ 0x7d
 8001870:	dd0c      	ble.n	800188c <User_PS2_Control+0x11c>
 8001872:	4b60      	ldr	r3, [pc, #384]	@ (80019f4 <User_PS2_Control+0x284>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b95      	cmp	r3, #149	@ 0x95
 8001878:	dc08      	bgt.n	800188c <User_PS2_Control+0x11c>
	{
		wheel_State(MOTION_RUN, g_car_speed);
 800187a:	4b61      	ldr	r3, [pc, #388]	@ (8001a00 <User_PS2_Control+0x290>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	b29b      	uxth	r3, r3
 8001882:	4619      	mov	r1, r3
 8001884:	2001      	movs	r0, #1
 8001886:	f001 fac9 	bl	8002e1c <wheel_State>
 800188a:	e078      	b.n	800197e <User_PS2_Control+0x20e>
	}
	else if (PS2_LY > 150 && (PS2_RX > 125 && PS2_RX < 150)) // 控制后 After control
 800188c:	4b58      	ldr	r3, [pc, #352]	@ (80019f0 <User_PS2_Control+0x280>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b96      	cmp	r3, #150	@ 0x96
 8001892:	dd10      	ble.n	80018b6 <User_PS2_Control+0x146>
 8001894:	4b57      	ldr	r3, [pc, #348]	@ (80019f4 <User_PS2_Control+0x284>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b7d      	cmp	r3, #125	@ 0x7d
 800189a:	dd0c      	ble.n	80018b6 <User_PS2_Control+0x146>
 800189c:	4b55      	ldr	r3, [pc, #340]	@ (80019f4 <User_PS2_Control+0x284>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b95      	cmp	r3, #149	@ 0x95
 80018a2:	dc08      	bgt.n	80018b6 <User_PS2_Control+0x146>
	{
		wheel_State(MOTION_BACK, g_car_speed);
 80018a4:	4b56      	ldr	r3, [pc, #344]	@ (8001a00 <User_PS2_Control+0x290>)
 80018a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	2002      	movs	r0, #2
 80018b0:	f001 fab4 	bl	8002e1c <wheel_State>
 80018b4:	e063      	b.n	800197e <User_PS2_Control+0x20e>
	}
	else if (PS2_RX < 125 && (PS2_LY > 125 && PS2_LY < 150)) // 控制左 Control Left
 80018b6:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <User_PS2_Control+0x284>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b7c      	cmp	r3, #124	@ 0x7c
 80018bc:	dc10      	bgt.n	80018e0 <User_PS2_Control+0x170>
 80018be:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <User_PS2_Control+0x280>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b7d      	cmp	r3, #125	@ 0x7d
 80018c4:	dd0c      	ble.n	80018e0 <User_PS2_Control+0x170>
 80018c6:	4b4a      	ldr	r3, [pc, #296]	@ (80019f0 <User_PS2_Control+0x280>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b95      	cmp	r3, #149	@ 0x95
 80018cc:	dc08      	bgt.n	80018e0 <User_PS2_Control+0x170>
	{
		wheel_State(MOTION_LEFT, g_car_speed);
 80018ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001a00 <User_PS2_Control+0x290>)
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	2003      	movs	r0, #3
 80018da:	f001 fa9f 	bl	8002e1c <wheel_State>
 80018de:	e04e      	b.n	800197e <User_PS2_Control+0x20e>
	}
	else if (PS2_RX > 150 && (PS2_LY > 125 && PS2_LY < 150)) // 控制右 Control Right
 80018e0:	4b44      	ldr	r3, [pc, #272]	@ (80019f4 <User_PS2_Control+0x284>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b96      	cmp	r3, #150	@ 0x96
 80018e6:	dd10      	ble.n	800190a <User_PS2_Control+0x19a>
 80018e8:	4b41      	ldr	r3, [pc, #260]	@ (80019f0 <User_PS2_Control+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b7d      	cmp	r3, #125	@ 0x7d
 80018ee:	dd0c      	ble.n	800190a <User_PS2_Control+0x19a>
 80018f0:	4b3f      	ldr	r3, [pc, #252]	@ (80019f0 <User_PS2_Control+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b95      	cmp	r3, #149	@ 0x95
 80018f6:	dc08      	bgt.n	800190a <User_PS2_Control+0x19a>
	{
		wheel_State(MOTION_RIGHT, g_car_speed);
 80018f8:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <User_PS2_Control+0x290>)
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4619      	mov	r1, r3
 8001902:	2004      	movs	r0, #4
 8001904:	f001 fa8a 	bl	8002e1c <wheel_State>
 8001908:	e039      	b.n	800197e <User_PS2_Control+0x20e>
	}
	else if ((PS2_LY < 125 && PS2_RX < 125) || (PS2_LY > 150 && PS2_RX < 125)) // 左旋 counter-clockwise
 800190a:	4b39      	ldr	r3, [pc, #228]	@ (80019f0 <User_PS2_Control+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b7c      	cmp	r3, #124	@ 0x7c
 8001910:	dc03      	bgt.n	800191a <User_PS2_Control+0x1aa>
 8001912:	4b38      	ldr	r3, [pc, #224]	@ (80019f4 <User_PS2_Control+0x284>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b7c      	cmp	r3, #124	@ 0x7c
 8001918:	dd07      	ble.n	800192a <User_PS2_Control+0x1ba>
 800191a:	4b35      	ldr	r3, [pc, #212]	@ (80019f0 <User_PS2_Control+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b96      	cmp	r3, #150	@ 0x96
 8001920:	dd0c      	ble.n	800193c <User_PS2_Control+0x1cc>
 8001922:	4b34      	ldr	r3, [pc, #208]	@ (80019f4 <User_PS2_Control+0x284>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b7c      	cmp	r3, #124	@ 0x7c
 8001928:	dc08      	bgt.n	800193c <User_PS2_Control+0x1cc>
	{
		wheel_State(MOTION_SPIN_LEFT, g_car_speed);
 800192a:	4b35      	ldr	r3, [pc, #212]	@ (8001a00 <User_PS2_Control+0x290>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4619      	mov	r1, r3
 8001934:	2005      	movs	r0, #5
 8001936:	f001 fa71 	bl	8002e1c <wheel_State>
 800193a:	e020      	b.n	800197e <User_PS2_Control+0x20e>
	}
	else if ((PS2_LY < 125 && PS2_RX > 150) || (PS2_LY > 150 && PS2_RX > 150)) // 右旋 dextrorotation
 800193c:	4b2c      	ldr	r3, [pc, #176]	@ (80019f0 <User_PS2_Control+0x280>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b7c      	cmp	r3, #124	@ 0x7c
 8001942:	dc03      	bgt.n	800194c <User_PS2_Control+0x1dc>
 8001944:	4b2b      	ldr	r3, [pc, #172]	@ (80019f4 <User_PS2_Control+0x284>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b96      	cmp	r3, #150	@ 0x96
 800194a:	dc07      	bgt.n	800195c <User_PS2_Control+0x1ec>
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <User_PS2_Control+0x280>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b96      	cmp	r3, #150	@ 0x96
 8001952:	dd0c      	ble.n	800196e <User_PS2_Control+0x1fe>
 8001954:	4b27      	ldr	r3, [pc, #156]	@ (80019f4 <User_PS2_Control+0x284>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b96      	cmp	r3, #150	@ 0x96
 800195a:	dd08      	ble.n	800196e <User_PS2_Control+0x1fe>
	{
		wheel_State(MOTION_SPIN_RIGHT, g_car_speed);
 800195c:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <User_PS2_Control+0x290>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4619      	mov	r1, r3
 8001966:	2006      	movs	r0, #6
 8001968:	f001 fa58 	bl	8002e1c <wheel_State>
 800196c:	e007      	b.n	800197e <User_PS2_Control+0x20e>
	}

	else
	{
		if (PS2_KEY == 0) // 没按键按下 No buttons pressed
 800196e:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <User_PS2_Control+0x28c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d103      	bne.n	800197e <User_PS2_Control+0x20e>
			wheel_State(MOTION_STOP, 0);
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f001 fa4f 	bl	8002e1c <wheel_State>
	}

	switch (PS2_KEY)
 800197e:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <User_PS2_Control+0x28c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3b05      	subs	r3, #5
 8001984:	2b0b      	cmp	r3, #11
 8001986:	f200 8105 	bhi.w	8001b94 <User_PS2_Control+0x424>
 800198a:	a201      	add	r2, pc, #4	@ (adr r2, 8001990 <User_PS2_Control+0x220>)
 800198c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001990:	08001a93 	.word	0x08001a93
 8001994:	08001aa5 	.word	0x08001aa5
 8001998:	08001ab7 	.word	0x08001ab7
 800199c:	08001ac9 	.word	0x08001ac9
 80019a0:	08001a19 	.word	0x08001a19
 80019a4:	08001a69 	.word	0x08001a69
 80019a8:	080019c1 	.word	0x080019c1
 80019ac:	08001a43 	.word	0x08001a43
 80019b0:	08001adb 	.word	0x08001adb
 80019b4:	08001b67 	.word	0x08001b67
 80019b8:	08001ae7 	.word	0x08001ae7
 80019bc:	08001b39 	.word	0x08001b39
	{
	case PSB_L1:
		g_car_speed += 100;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <User_PS2_Control+0x290>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	3364      	adds	r3, #100	@ 0x64
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001a00 <User_PS2_Control+0x290>)
 80019d0:	801a      	strh	r2, [r3, #0]
		if (g_car_speed > 1000)
 80019d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <User_PS2_Control+0x290>)
 80019d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019dc:	f340 80dc 	ble.w	8001b98 <User_PS2_Control+0x428>
			g_car_speed = 1000;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <User_PS2_Control+0x290>)
 80019e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019e6:	801a      	strh	r2, [r3, #0]
		break; // 小加速 Minor acceleration
 80019e8:	e0d6      	b.n	8001b98 <User_PS2_Control+0x428>
 80019ea:	bf00      	nop
 80019ec:	20000444 	.word	0x20000444
 80019f0:	20000448 	.word	0x20000448
 80019f4:	2000044c 	.word	0x2000044c
 80019f8:	20000450 	.word	0x20000450
 80019fc:	20000454 	.word	0x20000454
 8001a00:	20000008 	.word	0x20000008
 8001a04:	0800d1c8 	.word	0x0800d1c8
 8001a08:	20000460 	.word	0x20000460
 8001a0c:	20000458 	.word	0x20000458
 8001a10:	0800d1d8 	.word	0x0800d1d8
 8001a14:	20000474 	.word	0x20000474
	case PSB_L2:
		g_car_speed += 250;
 8001a18:	4b69      	ldr	r3, [pc, #420]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	33fa      	adds	r3, #250	@ 0xfa
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	4b66      	ldr	r3, [pc, #408]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a28:	801a      	strh	r2, [r3, #0]
		if (g_car_speed > 1000)
 8001a2a:	4b65      	ldr	r3, [pc, #404]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a34:	f340 80b2 	ble.w	8001b9c <User_PS2_Control+0x42c>
			g_car_speed = 1000;
 8001a38:	4b61      	ldr	r3, [pc, #388]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a3e:	801a      	strh	r2, [r3, #0]
		break; // 大加速  负数的时候，摇杆方向可变反 When the acceleration is negative, the direction of the joystick can be reversed
 8001a40:	e0ac      	b.n	8001b9c <User_PS2_Control+0x42c>

	case PSB_R1:
		g_car_speed -= 100;
 8001a42:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b64      	subs	r3, #100	@ 0x64
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a52:	801a      	strh	r2, [r3, #0]
		if (g_car_speed < 100)
 8001a54:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5a:	2b63      	cmp	r3, #99	@ 0x63
 8001a5c:	f300 80a0 	bgt.w	8001ba0 <User_PS2_Control+0x430>
			g_car_speed = 100;
 8001a60:	4b57      	ldr	r3, [pc, #348]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a62:	2264      	movs	r2, #100	@ 0x64
 8001a64:	801a      	strh	r2, [r3, #0]
		break; // 小减速 Small deceleration
 8001a66:	e09b      	b.n	8001ba0 <User_PS2_Control+0x430>
	case PSB_R2:
		g_car_speed -= 250;
 8001a68:	4b55      	ldr	r3, [pc, #340]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3bfa      	subs	r3, #250	@ 0xfa
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b52      	ldr	r3, [pc, #328]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a78:	801a      	strh	r2, [r3, #0]
		if (g_car_speed < -1000)
 8001a7a:	4b51      	ldr	r3, [pc, #324]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8001a84:	f280 808e 	bge.w	8001ba4 <User_PS2_Control+0x434>
			g_car_speed = -1000;
 8001a88:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a8a:	f64f 4218 	movw	r2, #64536	@ 0xfc18
 8001a8e:	801a      	strh	r2, [r3, #0]
		break; // 大减速 负数的时候，摇杆方向可变反 When the deceleration is negative, the direction of the joystick can be reversed
 8001a90:	e088      	b.n	8001ba4 <User_PS2_Control+0x434>

	case PSB_PAD_UP:
		wheel_State(MOTION_RUN, g_car_speed);
 8001a92:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f001 f9bd 	bl	8002e1c <wheel_State>
		break;
 8001aa2:	e082      	b.n	8001baa <User_PS2_Control+0x43a>
	case PSB_PAD_RIGHT:
		wheel_State(MOTION_RIGHT, g_car_speed);
 8001aa4:	4b46      	ldr	r3, [pc, #280]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	2004      	movs	r0, #4
 8001ab0:	f001 f9b4 	bl	8002e1c <wheel_State>
		break;
 8001ab4:	e079      	b.n	8001baa <User_PS2_Control+0x43a>
	case PSB_PAD_DOWN:
		wheel_State(MOTION_BACK, g_car_speed);
 8001ab6:	4b42      	ldr	r3, [pc, #264]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4619      	mov	r1, r3
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f001 f9ab 	bl	8002e1c <wheel_State>
		break;
 8001ac6:	e070      	b.n	8001baa <User_PS2_Control+0x43a>
	case PSB_PAD_LEFT:
		wheel_State(MOTION_LEFT, g_car_speed);
 8001ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc0 <User_PS2_Control+0x450>)
 8001aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	2003      	movs	r0, #3
 8001ad4:	f001 f9a2 	bl	8002e1c <wheel_State>
		break;
 8001ad8:	e067      	b.n	8001baa <User_PS2_Control+0x43a>

	case PSB_GREEN: //Triangle
		Distance_Wall = Get_distance();
 8001ada:	f001 fed7 	bl	800388c <Get_distance>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4a38      	ldr	r2, [pc, #224]	@ (8001bc4 <User_PS2_Control+0x454>)
 8001ae2:	6013      	str	r3, [r2, #0]
		break;
 8001ae4:	e061      	b.n	8001baa <User_PS2_Control+0x43a>
	case PSB_BLUE: //Cross
		RGB_OFF_ALL;
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4837      	ldr	r0, [pc, #220]	@ (8001bc8 <User_PS2_Control+0x458>)
 8001aec:	f003 fc0a 	bl	8005304 <HAL_GPIO_WritePin>
 8001af0:	2200      	movs	r2, #0
 8001af2:	2108      	movs	r1, #8
 8001af4:	4834      	ldr	r0, [pc, #208]	@ (8001bc8 <User_PS2_Control+0x458>)
 8001af6:	f003 fc05 	bl	8005304 <HAL_GPIO_WritePin>
 8001afa:	2200      	movs	r2, #0
 8001afc:	2110      	movs	r1, #16
 8001afe:	4832      	ldr	r0, [pc, #200]	@ (8001bc8 <User_PS2_Control+0x458>)
 8001b00:	f003 fc00 	bl	8005304 <HAL_GPIO_WritePin>
 8001b04:	2200      	movs	r2, #0
 8001b06:	2102      	movs	r1, #2
 8001b08:	4830      	ldr	r0, [pc, #192]	@ (8001bcc <User_PS2_Control+0x45c>)
 8001b0a:	f003 fbfb 	bl	8005304 <HAL_GPIO_WritePin>
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2180      	movs	r1, #128	@ 0x80
 8001b12:	482d      	ldr	r0, [pc, #180]	@ (8001bc8 <User_PS2_Control+0x458>)
 8001b14:	f003 fbf6 	bl	8005304 <HAL_GPIO_WritePin>
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	482b      	ldr	r0, [pc, #172]	@ (8001bcc <User_PS2_Control+0x45c>)
 8001b1e:	f003 fbf1 	bl	8005304 <HAL_GPIO_WritePin>
		if (g_color != red)
 8001b22:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <User_PS2_Control+0x460>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d03e      	beq.n	8001ba8 <User_PS2_Control+0x438>
			g_color--;
 8001b2a:	4b29      	ldr	r3, [pc, #164]	@ (8001bd0 <User_PS2_Control+0x460>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b27      	ldr	r3, [pc, #156]	@ (8001bd0 <User_PS2_Control+0x460>)
 8001b34:	701a      	strb	r2, [r3, #0]
		break; // 关闭所有大灯 Turn off all headlights
 8001b36:	e037      	b.n	8001ba8 <User_PS2_Control+0x438>
	case PSB_PINK: //Square
		g_Se_eff++; // 切换特效 Switch special effects
 8001b38:	4b26      	ldr	r3, [pc, #152]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b42:	701a      	strb	r2, [r3, #0]
		if (g_Se_eff >= RGB_EFFCT_MAX)
 8001b44:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b06      	cmp	r3, #6
 8001b4a:	d902      	bls.n	8001b52 <User_PS2_Control+0x3e2>
		{
			g_Se_eff = CUT_RGB;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		}
		wheel_State(MOTION_STOP, 0); // 把车停了，再展示特效 Park the car and display the special effects again
 8001b52:	2100      	movs	r1, #0
 8001b54:	2000      	movs	r0, #0
 8001b56:	f001 f961 	bl	8002e1c <wheel_State>
		user_control(g_Se_eff);
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f000 fbb0 	bl	80022c4 <user_control>
		break;
 8001b64:	e021      	b.n	8001baa <User_PS2_Control+0x43a>
	case PSB_RED:  //Round
		g_Se_eff--; // 切换特效 Switch special effects
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b70:	701a      	strb	r2, [r3, #0]
		if (g_Se_eff < CUT_RGB)
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <User_PS2_Control+0x410>
		{
			g_Se_eff = (Color_effect_t)(RGB_EFFCT_MAX - 1);
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b7c:	2206      	movs	r2, #6
 8001b7e:	701a      	strb	r2, [r3, #0]
		}
		wheel_State(MOTION_STOP, 0); // 把车停了，再展示特效 Park the car and display the special effects again
 8001b80:	2100      	movs	r1, #0
 8001b82:	2000      	movs	r0, #0
 8001b84:	f001 f94a 	bl	8002e1c <wheel_State>
		user_control(g_Se_eff);
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <User_PS2_Control+0x464>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fb99 	bl	80022c4 <user_control>
		break;
 8001b92:	e00a      	b.n	8001baa <User_PS2_Control+0x43a>

	default:
		break;
 8001b94:	bf00      	nop
 8001b96:	e008      	b.n	8001baa <User_PS2_Control+0x43a>
		break; // 小加速 Minor acceleration
 8001b98:	bf00      	nop
 8001b9a:	e006      	b.n	8001baa <User_PS2_Control+0x43a>
		break; // 大加速  负数的时候，摇杆方向可变反 When the acceleration is negative, the direction of the joystick can be reversed
 8001b9c:	bf00      	nop
 8001b9e:	e004      	b.n	8001baa <User_PS2_Control+0x43a>
		break; // 小减速 Small deceleration
 8001ba0:	bf00      	nop
 8001ba2:	e002      	b.n	8001baa <User_PS2_Control+0x43a>
		break; // 大减速 负数的时候，摇杆方向可变反 When the deceleration is negative, the direction of the joystick can be reversed
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <User_PS2_Control+0x43a>
		break; // 关闭所有大灯 Turn off all headlights
 8001ba8:	bf00      	nop
		wheel_State(MOTION_STOP, 0);
	}

	HAL_Delay(20); // 保持连接 Stay connected
 8001baa:	2014      	movs	r0, #20
 8001bac:	f002 ff96 	bl	8004adc <HAL_Delay>
 8001bb0:	e004      	b.n	8001bbc <User_PS2_Control+0x44c>
		return;
 8001bb2:	bf00      	nop
 8001bb4:	e002      	b.n	8001bbc <User_PS2_Control+0x44c>
		return;
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <User_PS2_Control+0x44c>
		return;
 8001bba:	bf00      	nop
}
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000458 	.word	0x20000458
 8001bc8:	40011800 	.word	0x40011800
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	2000045c 	.word	0x2000045c
 8001bd4:	2000000a 	.word	0x2000000a

08001bd8 <PS2_Cmd>:
Function function: Send commands to the handle
Entry parameter: CMD instruction
Return value: None
**************************************************************************/
void PS2_Cmd(uint8_t CMD)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	volatile uint16_t ref = 0x01;
 8001be2:	2301      	movs	r3, #1
 8001be4:	81fb      	strh	r3, [r7, #14]
	Data[1] = 0;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <PS2_Cmd+0xa4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	705a      	strb	r2, [r3, #1]
	for (ref = 0x01; ref < 0x0100; ref <<= 1)
 8001bec:	2301      	movs	r3, #1
 8001bee:	81fb      	strh	r3, [r7, #14]
 8001bf0:	e03b      	b.n	8001c6a <PS2_Cmd+0x92>
	{
		if (ref & CMD)
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <PS2_Cmd+0x34>
		{
			DO_H; // Output one control bit 输出一位控制位
 8001c00:	2201      	movs	r2, #1
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	481e      	ldr	r0, [pc, #120]	@ (8001c80 <PS2_Cmd+0xa8>)
 8001c06:	f003 fb7d 	bl	8005304 <HAL_GPIO_WritePin>
 8001c0a:	e004      	b.n	8001c16 <PS2_Cmd+0x3e>
		}
		else
			DO_L;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2180      	movs	r1, #128	@ 0x80
 8001c10:	481b      	ldr	r0, [pc, #108]	@ (8001c80 <PS2_Cmd+0xa8>)
 8001c12:	f003 fb77 	bl	8005304 <HAL_GPIO_WritePin>
		CLK_H; // Clock up 时钟拉高
 8001c16:	2201      	movs	r2, #1
 8001c18:	2120      	movs	r1, #32
 8001c1a:	4819      	ldr	r0, [pc, #100]	@ (8001c80 <PS2_Cmd+0xa8>)
 8001c1c:	f003 fb72 	bl	8005304 <HAL_GPIO_WritePin>
		DELAY_TIME;
 8001c20:	2005      	movs	r0, #5
 8001c22:	f000 fe05 	bl	8002830 <Delay_Us>
		CLK_L;
 8001c26:	2200      	movs	r2, #0
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4815      	ldr	r0, [pc, #84]	@ (8001c80 <PS2_Cmd+0xa8>)
 8001c2c:	f003 fb6a 	bl	8005304 <HAL_GPIO_WritePin>
		DELAY_TIME;
 8001c30:	2005      	movs	r0, #5
 8001c32:	f000 fdfd 	bl	8002830 <Delay_Us>
		CLK_H;
 8001c36:	2201      	movs	r2, #1
 8001c38:	2120      	movs	r1, #32
 8001c3a:	4811      	ldr	r0, [pc, #68]	@ (8001c80 <PS2_Cmd+0xa8>)
 8001c3c:	f003 fb62 	bl	8005304 <HAL_GPIO_WritePin>
		if (DI) // At high levels 为高电平的时候
 8001c40:	2140      	movs	r1, #64	@ 0x40
 8001c42:	480f      	ldr	r0, [pc, #60]	@ (8001c80 <PS2_Cmd+0xa8>)
 8001c44:	f003 fb3e 	bl	80052c4 <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <PS2_Cmd+0x88>
			Data[1] = ref | Data[1];
 8001c4e:	89fb      	ldrh	r3, [r7, #14]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <PS2_Cmd+0xa4>)
 8001c56:	785b      	ldrb	r3, [r3, #1]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <PS2_Cmd+0xa4>)
 8001c5e:	705a      	strb	r2, [r3, #1]
	for (ref = 0x01; ref < 0x0100; ref <<= 1)
 8001c60:	89fb      	ldrh	r3, [r7, #14]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	81fb      	strh	r3, [r7, #14]
 8001c6a:	89fb      	ldrh	r3, [r7, #14]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2bff      	cmp	r3, #255	@ 0xff
 8001c70:	d9bf      	bls.n	8001bf2 <PS2_Cmd+0x1a>
	}
	(16);
}
 8001c72:	bf00      	nop
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	2000048c 	.word	0x2000048c
 8001c80:	40010800 	.word	0x40010800

08001c84 <PS2_ReadData>:
Function function: Read handle data
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ReadData(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
	volatile uint8_t byte = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	volatile uint16_t ref = 0x01;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	80bb      	strh	r3, [r7, #4]
	CS_L;
 8001c92:	2200      	movs	r2, #0
 8001c94:	2110      	movs	r1, #16
 8001c96:	482c      	ldr	r0, [pc, #176]	@ (8001d48 <PS2_ReadData+0xc4>)
 8001c98:	f003 fb34 	bl	8005304 <HAL_GPIO_WritePin>
	PS2_Cmd(Comd[0]);				 // start command 开始命令
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <PS2_ReadData+0xc8>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff99 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(Comd[1]);				 // request data 请求数据
 8001ca6:	4b29      	ldr	r3, [pc, #164]	@ (8001d4c <PS2_ReadData+0xc8>)
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff94 	bl	8001bd8 <PS2_Cmd>
	for (byte = 2; byte < 9; byte++) // Start accepting data 开始接受数据
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	e03a      	b.n	8001d2c <PS2_ReadData+0xa8>
	{
		for (ref = 0x01; ref < 0x100; ref <<= 1)
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	80bb      	strh	r3, [r7, #4]
 8001cba:	e02e      	b.n	8001d1a <PS2_ReadData+0x96>
		{
			CLK_H;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2120      	movs	r1, #32
 8001cc0:	4821      	ldr	r0, [pc, #132]	@ (8001d48 <PS2_ReadData+0xc4>)
 8001cc2:	f003 fb1f 	bl	8005304 <HAL_GPIO_WritePin>
			DELAY_TIME;
 8001cc6:	2005      	movs	r0, #5
 8001cc8:	f000 fdb2 	bl	8002830 <Delay_Us>
			CLK_L;
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2120      	movs	r1, #32
 8001cd0:	481d      	ldr	r0, [pc, #116]	@ (8001d48 <PS2_ReadData+0xc4>)
 8001cd2:	f003 fb17 	bl	8005304 <HAL_GPIO_WritePin>
			DELAY_TIME;
 8001cd6:	2005      	movs	r0, #5
 8001cd8:	f000 fdaa 	bl	8002830 <Delay_Us>
			CLK_H;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2120      	movs	r1, #32
 8001ce0:	4819      	ldr	r0, [pc, #100]	@ (8001d48 <PS2_ReadData+0xc4>)
 8001ce2:	f003 fb0f 	bl	8005304 <HAL_GPIO_WritePin>
			if (DI)
 8001ce6:	2140      	movs	r1, #64	@ 0x40
 8001ce8:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <PS2_ReadData+0xc4>)
 8001cea:	f003 faeb 	bl	80052c4 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <PS2_ReadData+0x8c>
				Data[byte] = ref | Data[byte];
 8001cf4:	88bb      	ldrh	r3, [r7, #4]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <PS2_ReadData+0xcc>)
 8001d02:	5c5b      	ldrb	r3, [r3, r1]
 8001d04:	79f9      	ldrb	r1, [r7, #7]
 8001d06:	b2c9      	uxtb	r1, r1
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <PS2_ReadData+0xcc>)
 8001d0e:	545a      	strb	r2, [r3, r1]
		for (ref = 0x01; ref < 0x100; ref <<= 1)
 8001d10:	88bb      	ldrh	r3, [r7, #4]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	80bb      	strh	r3, [r7, #4]
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2bff      	cmp	r3, #255	@ 0xff
 8001d20:	d9cc      	bls.n	8001cbc <PS2_ReadData+0x38>
	for (byte = 2; byte < 9; byte++) // Start accepting data 开始接受数据
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d9c0      	bls.n	8001cb6 <PS2_ReadData+0x32>
		}
		(16);
	}
	CS_H;
 8001d34:	2201      	movs	r2, #1
 8001d36:	2110      	movs	r1, #16
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <PS2_ReadData+0xc4>)
 8001d3a:	f003 fae3 	bl	8005304 <HAL_GPIO_WritePin>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	2000048c 	.word	0x2000048c

08001d54 <PS2_DataKey>:
Entry parameter: CMD instruction
Return value: None
//0 when only one button is pressed, 1 when not pressed
**************************************************************************/
uint8_t PS2_DataKey()
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
	uint8_t index;
	PS2_ClearData();
 8001d5a:	f000 f845 	bl	8001de8 <PS2_ClearData>
	PS2_ReadData();
 8001d5e:	f7ff ff91 	bl	8001c84 <PS2_ReadData>
	Handkey = (Data[4] << 8) | Data[3]; // These are 16 buttons that are pressed as 0 and not pressed as 1 这是16个按键  按下为0， 未按下为1
 8001d62:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <PS2_DataKey+0x68>)
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <PS2_DataKey+0x68>)
 8001d6c:	78db      	ldrb	r3, [r3, #3]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <PS2_DataKey+0x6c>)
 8001d78:	801a      	strh	r2, [r3, #0]
	for (index = 0; index < 16; index++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71fb      	strb	r3, [r7, #7]
 8001d7e:	e014      	b.n	8001daa <PS2_DataKey+0x56>
	{
		if ((Handkey & (1 << (MASK[index] - 1))) == 0)
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <PS2_DataKey+0x6c>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc4 <PS2_DataKey+0x70>)
 8001d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	fa41 f303 	asr.w	r3, r1, r3
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <PS2_DataKey+0x50>
			return index + 1;
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e006      	b.n	8001db2 <PS2_DataKey+0x5e>
	for (index = 0; index < 16; index++)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	3301      	adds	r3, #1
 8001da8:	71fb      	strb	r3, [r7, #7]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d9e7      	bls.n	8001d80 <PS2_DataKey+0x2c>
	}
	return 0; // No buttons pressed 没有任何按键按下
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2000048c 	.word	0x2000048c
 8001dc0:	20000488 	.word	0x20000488
 8001dc4:	20000010 	.word	0x20000010

08001dc8 <PS2_AnologData>:
Function function: Send commands to the handle
Entry parameters: Obtain an analog range of 0-256 for a joystick
Return value: None
**************************************************************************/
uint8_t PS2_AnologData(uint8_t button)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
	return Data[button];
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4a03      	ldr	r2, [pc, #12]	@ (8001de4 <PS2_AnologData+0x1c>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	2000048c 	.word	0x2000048c

08001de8 <PS2_ClearData>:
// Clear data buffer 清除数据缓冲区
void PS2_ClearData()
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
	uint8_t a;
	for (a = 0; a < 9; a++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	71fb      	strb	r3, [r7, #7]
 8001df2:	e006      	b.n	8001e02 <PS2_ClearData+0x1a>
		Data[a] = 0x00;
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <PS2_ClearData+0x2c>)
 8001df8:	2100      	movs	r1, #0
 8001dfa:	54d1      	strb	r1, [r2, r3]
	for (a = 0; a < 9; a++)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d9f5      	bls.n	8001df4 <PS2_ClearData+0xc>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	2000048c 	.word	0x2000048c

08001e18 <PS2_ShortPoll>:
Function function: short poll
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ShortPoll(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	CS_L;
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2110      	movs	r1, #16
 8001e20:	480f      	ldr	r0, [pc, #60]	@ (8001e60 <PS2_ShortPoll+0x48>)
 8001e22:	f003 fa6f 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001e26:	2010      	movs	r0, #16
 8001e28:	f000 fd02 	bl	8002830 <Delay_Us>
	PS2_Cmd(0x01);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fed3 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x42);
 8001e32:	2042      	movs	r0, #66	@ 0x42
 8001e34:	f7ff fed0 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff fecd 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff feca 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff fec7 	bl	8001bd8 <PS2_Cmd>
	CS_H;
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <PS2_ShortPoll+0x48>)
 8001e50:	f003 fa58 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001e54:	2010      	movs	r0, #16
 8001e56:	f000 fceb 	bl	8002830 <Delay_Us>
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40010800 	.word	0x40010800

08001e64 <PS2_EnterConfing>:
Function Function: Enter Configuration
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_EnterConfing(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	CS_L;
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	4815      	ldr	r0, [pc, #84]	@ (8001ec4 <PS2_EnterConfing+0x60>)
 8001e6e:	f003 fa49 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001e72:	2010      	movs	r0, #16
 8001e74:	f000 fcdc 	bl	8002830 <Delay_Us>
	PS2_Cmd(0x01);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff fead 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x43);
 8001e7e:	2043      	movs	r0, #67	@ 0x43
 8001e80:	f7ff feaa 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fea7 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x01);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7ff fea4 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f7ff fea1 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fe9e 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fe9b 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fe98 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fe95 	bl	8001bd8 <PS2_Cmd>
	CS_H;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2110      	movs	r1, #16
 8001eb2:	4804      	ldr	r0, [pc, #16]	@ (8001ec4 <PS2_EnterConfing+0x60>)
 8001eb4:	f003 fa26 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001eb8:	2010      	movs	r0, #16
 8001eba:	f000 fcb9 	bl	8002830 <Delay_Us>
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40010800 	.word	0x40010800

08001ec8 <PS2_TurnOnAnalogMode>:
Function Function: Sending Mode Settings
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_TurnOnAnalogMode(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	CS_L;
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2110      	movs	r1, #16
 8001ed0:	4813      	ldr	r0, [pc, #76]	@ (8001f20 <PS2_TurnOnAnalogMode+0x58>)
 8001ed2:	f003 fa17 	bl	8005304 <HAL_GPIO_WritePin>
	PS2_Cmd(0x01);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff fe7e 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x44);
 8001edc:	2044      	movs	r0, #68	@ 0x44
 8001ede:	f7ff fe7b 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7ff fe78 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x01); // analog=0x01;digital=0x00  Software settings sending mode 软件设置发送模式
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7ff fe75 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x03); // Ox03 latch setting, that is, the mode cannot be set by pressing the "MODE" button. Ox03锁存设置，即不可通过按键“MODE”设置模式。
 8001eee:	2003      	movs	r0, #3
 8001ef0:	f7ff fe72 	bl	8001bd8 <PS2_Cmd>
				   // 0xEE does not lock software settings, and the mode can be set by pressing the "MODE" button. 0xEE不锁存软件设置，可通过按键“MODE”设置模式。
	PS2_Cmd(0X00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fe6f 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fe6c 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fe69 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff fe66 	bl	8001bd8 <PS2_Cmd>
	CS_H;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2110      	movs	r1, #16
 8001f10:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <PS2_TurnOnAnalogMode+0x58>)
 8001f12:	f003 f9f7 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001f16:	2010      	movs	r0, #16
 8001f18:	f000 fc8a 	bl	8002830 <Delay_Us>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40010800 	.word	0x40010800

08001f24 <PS2_ExitConfing>:
Function function: Complete and save configuration
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_ExitConfing(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	CS_L;
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4815      	ldr	r0, [pc, #84]	@ (8001f84 <PS2_ExitConfing+0x60>)
 8001f2e:	f003 f9e9 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001f32:	2010      	movs	r0, #16
 8001f34:	f000 fc7c 	bl	8002830 <Delay_Us>
	PS2_Cmd(0x01);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff fe4d 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x43);
 8001f3e:	2043      	movs	r0, #67	@ 0x43
 8001f40:	f7ff fe4a 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0X00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f7ff fe47 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x00);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f7ff fe44 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8001f50:	205a      	movs	r0, #90	@ 0x5a
 8001f52:	f7ff fe41 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8001f56:	205a      	movs	r0, #90	@ 0x5a
 8001f58:	f7ff fe3e 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8001f5c:	205a      	movs	r0, #90	@ 0x5a
 8001f5e:	f7ff fe3b 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8001f62:	205a      	movs	r0, #90	@ 0x5a
 8001f64:	f7ff fe38 	bl	8001bd8 <PS2_Cmd>
	PS2_Cmd(0x5A);
 8001f68:	205a      	movs	r0, #90	@ 0x5a
 8001f6a:	f7ff fe35 	bl	8001bd8 <PS2_Cmd>
	CS_H;
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4804      	ldr	r0, [pc, #16]	@ (8001f84 <PS2_ExitConfing+0x60>)
 8001f74:	f003 f9c6 	bl	8005304 <HAL_GPIO_WritePin>
	Delay_Us(16);
 8001f78:	2010      	movs	r0, #16
 8001f7a:	f000 fc59 	bl	8002830 <Delay_Us>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40010800 	.word	0x40010800

08001f88 <PS2_SetInit>:
Function Function: Handle Configuration Initialization
Entry parameters: None
Return value: None
**************************************************************************/
void PS2_SetInit(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	PS2_ShortPoll();
 8001f8c:	f7ff ff44 	bl	8001e18 <PS2_ShortPoll>
	PS2_ShortPoll();
 8001f90:	f7ff ff42 	bl	8001e18 <PS2_ShortPoll>
	PS2_ShortPoll();
 8001f94:	f7ff ff40 	bl	8001e18 <PS2_ShortPoll>
	PS2_EnterConfing();		// Entering configuration mode 进入配置模式
 8001f98:	f7ff ff64 	bl	8001e64 <PS2_EnterConfing>
	PS2_TurnOnAnalogMode(); // Configure the "Traffic Light" mode and choose whether to save it “红绿灯”配置模式，并选择是否保存
 8001f9c:	f7ff ff94 	bl	8001ec8 <PS2_TurnOnAnalogMode>
	// PS2_VibrationMode();	//Enable vibration mode 开启震动模式
	PS2_ExitConfing(); // Complete and save the configuration 完成并保存配置
 8001fa0:	f7ff ffc0 	bl	8001f24 <PS2_ExitConfing>
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <RGB_color_ALL>:
#include "app_rgb.h"


//两个RGB灯同时切换7种颜色特效
void RGB_color_ALL(uint32_t times)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	for(RGB_Color i = red;i<Max_color;i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e00c      	b.n	8001fd0 <RGB_color_ALL+0x28>
	{
		Set_RGB(RGB_Max,i);
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	2003      	movs	r0, #3
 8001fbc:	f000 fa7a 	bl	80024b4 <Set_RGB>
		Delay_Ms(times);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc71 	bl	80028ac <Delay_Ms>
	for(RGB_Color i = red;i<Max_color;i++)
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d9ef      	bls.n	8001fb6 <RGB_color_ALL+0xe>
	}

}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <RGB_color_follow>:

//RGB灯跟随效果
void RGB_color_follow(uint32_t times)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	for(RGB_Color i = red;i<=Max_color;i++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e02a      	b.n	8002044 <RGB_color_follow+0x64>
	{
		Set_RGB(RGB_R,(RGB_Color)(i%Max_color));
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <RGB_color_follow+0x74>)
 8001ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff6:	1ad1      	subs	r1, r2, r3
 8001ff8:	0849      	lsrs	r1, r1, #1
 8001ffa:	440b      	add	r3, r1
 8001ffc:	0899      	lsrs	r1, r3, #2
 8001ffe:	460b      	mov	r3, r1
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a5b      	subs	r3, r3, r1
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4619      	mov	r1, r3
 800200a:	2001      	movs	r0, #1
 800200c:	f000 fa52 	bl	80024b4 <Set_RGB>
		Set_RGB(RGB_L,(RGB_Color)((i+1)%Max_color));
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <RGB_color_follow+0x78>)
 8002016:	fb83 1302 	smull	r1, r3, r3, r2
 800201a:	4413      	add	r3, r2
 800201c:	1099      	asrs	r1, r3, #2
 800201e:	17d3      	asrs	r3, r2, #31
 8002020:	1ac9      	subs	r1, r1, r3
 8002022:	460b      	mov	r3, r1
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a5b      	subs	r3, r3, r1
 8002028:	1ad1      	subs	r1, r2, r3
 800202a:	b2cb      	uxtb	r3, r1
 800202c:	4619      	mov	r1, r3
 800202e:	2002      	movs	r0, #2
 8002030:	f000 fa40 	bl	80024b4 <Set_RGB>
		Delay_Ms(times);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fc37 	bl	80028ac <Delay_Ms>
	for(RGB_Color i = red;i<=Max_color;i++)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	3301      	adds	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	2b07      	cmp	r3, #7
 8002048:	d9d1      	bls.n	8001fee <RGB_color_follow+0xe>
	}

}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	24924925 	.word	0x24924925
 8002058:	92492493 	.word	0x92492493

0800205c <RGB_color_water>:

//RGB灯流水效果
//direction；方向 0从右到左 1从左到右
//times：时间
void RGB_color_water(uint8_t direction,uint32_t times)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
	if(direction == 0)
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d135      	bne.n	80020da <RGB_color_water+0x7e>
	{
		for(RGB_Color i=red;i<Max_color;i++)
 800206e:	2300      	movs	r3, #0
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	e02e      	b.n	80020d2 <RGB_color_water+0x76>
		{
			Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 8002074:	7bfa      	ldrb	r2, [r7, #15]
 8002076:	4b35      	ldr	r3, [pc, #212]	@ (800214c <RGB_color_water+0xf0>)
 8002078:	fba3 1302 	umull	r1, r3, r3, r2
 800207c:	1ad1      	subs	r1, r2, r3
 800207e:	0849      	lsrs	r1, r1, #1
 8002080:	440b      	add	r3, r1
 8002082:	0899      	lsrs	r1, r3, #2
 8002084:	460b      	mov	r3, r1
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a5b      	subs	r3, r3, r1
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4619      	mov	r1, r3
 8002090:	2002      	movs	r0, #2
 8002092:	f000 fa0f 	bl	80024b4 <Set_RGB>
			Delay_Ms(times);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fc06 	bl	80028ac <Delay_Ms>
			Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <RGB_color_water+0xf0>)
 80020a4:	fba3 1302 	umull	r1, r3, r3, r2
 80020a8:	1ad1      	subs	r1, r2, r3
 80020aa:	0849      	lsrs	r1, r1, #1
 80020ac:	440b      	add	r3, r1
 80020ae:	0899      	lsrs	r1, r3, #2
 80020b0:	460b      	mov	r3, r1
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	1a5b      	subs	r3, r3, r1
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4619      	mov	r1, r3
 80020bc:	2001      	movs	r0, #1
 80020be:	f000 f9f9 	bl	80024b4 <Set_RGB>
			Delay_Ms(times);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fbf0 	bl	80028ac <Delay_Ms>
		for(RGB_Color i=red;i<Max_color;i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d9cd      	bls.n	8002074 <RGB_color_water+0x18>
			Set_RGB(RGB_L,(RGB_Color)((i)%Max_color));
			Delay_Ms(times);
		}
	}

}
 80020d8:	e034      	b.n	8002144 <RGB_color_water+0xe8>
		for(RGB_Color i=red;i<Max_color;i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	73bb      	strb	r3, [r7, #14]
 80020de:	e02e      	b.n	800213e <RGB_color_water+0xe2>
			Set_RGB(RGB_R,(RGB_Color)(i%Max_color));
 80020e0:	7bba      	ldrb	r2, [r7, #14]
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <RGB_color_water+0xf0>)
 80020e4:	fba3 1302 	umull	r1, r3, r3, r2
 80020e8:	1ad1      	subs	r1, r2, r3
 80020ea:	0849      	lsrs	r1, r1, #1
 80020ec:	440b      	add	r3, r1
 80020ee:	0899      	lsrs	r1, r3, #2
 80020f0:	460b      	mov	r3, r1
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	1a5b      	subs	r3, r3, r1
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4619      	mov	r1, r3
 80020fc:	2001      	movs	r0, #1
 80020fe:	f000 f9d9 	bl	80024b4 <Set_RGB>
			Delay_Ms(times);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fbd0 	bl	80028ac <Delay_Ms>
			Set_RGB(RGB_L,(RGB_Color)((i)%Max_color));
 800210c:	7bba      	ldrb	r2, [r7, #14]
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <RGB_color_water+0xf0>)
 8002110:	fba3 1302 	umull	r1, r3, r3, r2
 8002114:	1ad1      	subs	r1, r2, r3
 8002116:	0849      	lsrs	r1, r1, #1
 8002118:	440b      	add	r3, r1
 800211a:	0899      	lsrs	r1, r3, #2
 800211c:	460b      	mov	r3, r1
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a5b      	subs	r3, r3, r1
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	2002      	movs	r0, #2
 800212a:	f000 f9c3 	bl	80024b4 <Set_RGB>
			Delay_Ms(times);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fbba 	bl	80028ac <Delay_Ms>
		for(RGB_Color i=red;i<Max_color;i++)
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	3301      	adds	r3, #1
 800213c:	73bb      	strb	r3, [r7, #14]
 800213e:	7bbb      	ldrb	r3, [r7, #14]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d9cd      	bls.n	80020e0 <RGB_color_water+0x84>
}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	24924925 	.word	0x24924925

08002150 <RGB_one_light>:
//单灯轮播效果
void RGB_one_light(uint8_t direction,uint32_t times)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
	if(direction == 0)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d153      	bne.n	800220a <RGB_one_light+0xba>
	{
			for(RGB_Color i=red;i<Max_color;i++)
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e04c      	b.n	8002202 <RGB_one_light+0xb2>
			{
				Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <RGB_one_light+0x168>)
 800216c:	fba3 1302 	umull	r1, r3, r3, r2
 8002170:	1ad1      	subs	r1, r2, r3
 8002172:	0849      	lsrs	r1, r1, #1
 8002174:	440b      	add	r3, r1
 8002176:	0899      	lsrs	r1, r3, #2
 8002178:	460b      	mov	r3, r1
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a5b      	subs	r3, r3, r1
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4619      	mov	r1, r3
 8002184:	2002      	movs	r0, #2
 8002186:	f000 f995 	bl	80024b4 <Set_RGB>
				RGB_OFF_R;
 800218a:	2200      	movs	r2, #0
 800218c:	2104      	movs	r1, #4
 800218e:	484b      	ldr	r0, [pc, #300]	@ (80022bc <RGB_one_light+0x16c>)
 8002190:	f003 f8b8 	bl	8005304 <HAL_GPIO_WritePin>
 8002194:	2200      	movs	r2, #0
 8002196:	2108      	movs	r1, #8
 8002198:	4848      	ldr	r0, [pc, #288]	@ (80022bc <RGB_one_light+0x16c>)
 800219a:	f003 f8b3 	bl	8005304 <HAL_GPIO_WritePin>
 800219e:	2200      	movs	r2, #0
 80021a0:	2110      	movs	r1, #16
 80021a2:	4846      	ldr	r0, [pc, #280]	@ (80022bc <RGB_one_light+0x16c>)
 80021a4:	f003 f8ae 	bl	8005304 <HAL_GPIO_WritePin>
				Delay_Ms(times);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fb7d 	bl	80028ac <Delay_Ms>

				RGB_OFF_L;
 80021b2:	2200      	movs	r2, #0
 80021b4:	2102      	movs	r1, #2
 80021b6:	4842      	ldr	r0, [pc, #264]	@ (80022c0 <RGB_one_light+0x170>)
 80021b8:	f003 f8a4 	bl	8005304 <HAL_GPIO_WritePin>
 80021bc:	2200      	movs	r2, #0
 80021be:	2180      	movs	r1, #128	@ 0x80
 80021c0:	483e      	ldr	r0, [pc, #248]	@ (80022bc <RGB_one_light+0x16c>)
 80021c2:	f003 f89f 	bl	8005304 <HAL_GPIO_WritePin>
 80021c6:	2200      	movs	r2, #0
 80021c8:	2104      	movs	r1, #4
 80021ca:	483d      	ldr	r0, [pc, #244]	@ (80022c0 <RGB_one_light+0x170>)
 80021cc:	f003 f89a 	bl	8005304 <HAL_GPIO_WritePin>
				Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	4b39      	ldr	r3, [pc, #228]	@ (80022b8 <RGB_one_light+0x168>)
 80021d4:	fba3 1302 	umull	r1, r3, r3, r2
 80021d8:	1ad1      	subs	r1, r2, r3
 80021da:	0849      	lsrs	r1, r1, #1
 80021dc:	440b      	add	r3, r1
 80021de:	0899      	lsrs	r1, r3, #2
 80021e0:	460b      	mov	r3, r1
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a5b      	subs	r3, r3, r1
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	2001      	movs	r0, #1
 80021ee:	f000 f961 	bl	80024b4 <Set_RGB>
				Delay_Ms(times);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fb58 	bl	80028ac <Delay_Ms>
			for(RGB_Color i=red;i<Max_color;i++)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	3301      	adds	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b06      	cmp	r3, #6
 8002206:	d9af      	bls.n	8002168 <RGB_one_light+0x18>
			RGB_OFF_R;
			Delay_Ms(times);
		}
	}

}
 8002208:	e052      	b.n	80022b0 <RGB_one_light+0x160>
		for(RGB_Color i=red;i<Max_color;i++)
 800220a:	2300      	movs	r3, #0
 800220c:	73bb      	strb	r3, [r7, #14]
 800220e:	e04c      	b.n	80022aa <RGB_one_light+0x15a>
			RGB_OFF_L;
 8002210:	2200      	movs	r2, #0
 8002212:	2102      	movs	r1, #2
 8002214:	482a      	ldr	r0, [pc, #168]	@ (80022c0 <RGB_one_light+0x170>)
 8002216:	f003 f875 	bl	8005304 <HAL_GPIO_WritePin>
 800221a:	2200      	movs	r2, #0
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	4827      	ldr	r0, [pc, #156]	@ (80022bc <RGB_one_light+0x16c>)
 8002220:	f003 f870 	bl	8005304 <HAL_GPIO_WritePin>
 8002224:	2200      	movs	r2, #0
 8002226:	2104      	movs	r1, #4
 8002228:	4825      	ldr	r0, [pc, #148]	@ (80022c0 <RGB_one_light+0x170>)
 800222a:	f003 f86b 	bl	8005304 <HAL_GPIO_WritePin>
			Set_RGB(RGB_R,(RGB_Color)((i)%Max_color));
 800222e:	7bba      	ldrb	r2, [r7, #14]
 8002230:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <RGB_one_light+0x168>)
 8002232:	fba3 1302 	umull	r1, r3, r3, r2
 8002236:	1ad1      	subs	r1, r2, r3
 8002238:	0849      	lsrs	r1, r1, #1
 800223a:	440b      	add	r3, r1
 800223c:	0899      	lsrs	r1, r3, #2
 800223e:	460b      	mov	r3, r1
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a5b      	subs	r3, r3, r1
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	4619      	mov	r1, r3
 800224a:	2001      	movs	r0, #1
 800224c:	f000 f932 	bl	80024b4 <Set_RGB>
			Delay_Ms(times);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	4618      	mov	r0, r3
 8002256:	f000 fb29 	bl	80028ac <Delay_Ms>
			Set_RGB(RGB_L,(RGB_Color)(i%Max_color));
 800225a:	7bba      	ldrb	r2, [r7, #14]
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <RGB_one_light+0x168>)
 800225e:	fba3 1302 	umull	r1, r3, r3, r2
 8002262:	1ad1      	subs	r1, r2, r3
 8002264:	0849      	lsrs	r1, r1, #1
 8002266:	440b      	add	r3, r1
 8002268:	0899      	lsrs	r1, r3, #2
 800226a:	460b      	mov	r3, r1
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	1a5b      	subs	r3, r3, r1
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	2002      	movs	r0, #2
 8002278:	f000 f91c 	bl	80024b4 <Set_RGB>
			RGB_OFF_R;
 800227c:	2200      	movs	r2, #0
 800227e:	2104      	movs	r1, #4
 8002280:	480e      	ldr	r0, [pc, #56]	@ (80022bc <RGB_one_light+0x16c>)
 8002282:	f003 f83f 	bl	8005304 <HAL_GPIO_WritePin>
 8002286:	2200      	movs	r2, #0
 8002288:	2108      	movs	r1, #8
 800228a:	480c      	ldr	r0, [pc, #48]	@ (80022bc <RGB_one_light+0x16c>)
 800228c:	f003 f83a 	bl	8005304 <HAL_GPIO_WritePin>
 8002290:	2200      	movs	r2, #0
 8002292:	2110      	movs	r1, #16
 8002294:	4809      	ldr	r0, [pc, #36]	@ (80022bc <RGB_one_light+0x16c>)
 8002296:	f003 f835 	bl	8005304 <HAL_GPIO_WritePin>
			Delay_Ms(times);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fb04 	bl	80028ac <Delay_Ms>
		for(RGB_Color i=red;i<Max_color;i++)
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	3301      	adds	r3, #1
 80022a8:	73bb      	strb	r3, [r7, #14]
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d9af      	bls.n	8002210 <RGB_one_light+0xc0>
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	24924925 	.word	0x24924925
 80022bc:	40011800 	.word	0x40011800
 80022c0:	40012000 	.word	0x40012000

080022c4 <user_control>:

void user_control(Color_effect_t effect)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
	switch((uint8_t)effect)
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	f200 80e6 	bhi.w	80024a4 <user_control+0x1e0>
 80022d8:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <user_control+0x1c>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	080022f9 	.word	0x080022f9
 80022e4:	0800233f 	.word	0x0800233f
 80022e8:	08002385 	.word	0x08002385
 80022ec:	080023cd 	.word	0x080023cd
 80022f0:	08002415 	.word	0x08002415
 80022f4:	0800245d 	.word	0x0800245d
	{
		case CUT_RGB:			RGB_color_ALL(400); RGB_OFF_ALL;break;
 80022f8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80022fc:	f7ff fe54 	bl	8001fa8 <RGB_color_ALL>
 8002300:	2200      	movs	r2, #0
 8002302:	2104      	movs	r1, #4
 8002304:	4869      	ldr	r0, [pc, #420]	@ (80024ac <user_control+0x1e8>)
 8002306:	f002 fffd 	bl	8005304 <HAL_GPIO_WritePin>
 800230a:	2200      	movs	r2, #0
 800230c:	2108      	movs	r1, #8
 800230e:	4867      	ldr	r0, [pc, #412]	@ (80024ac <user_control+0x1e8>)
 8002310:	f002 fff8 	bl	8005304 <HAL_GPIO_WritePin>
 8002314:	2200      	movs	r2, #0
 8002316:	2110      	movs	r1, #16
 8002318:	4864      	ldr	r0, [pc, #400]	@ (80024ac <user_control+0x1e8>)
 800231a:	f002 fff3 	bl	8005304 <HAL_GPIO_WritePin>
 800231e:	2200      	movs	r2, #0
 8002320:	2102      	movs	r1, #2
 8002322:	4863      	ldr	r0, [pc, #396]	@ (80024b0 <user_control+0x1ec>)
 8002324:	f002 ffee 	bl	8005304 <HAL_GPIO_WritePin>
 8002328:	2200      	movs	r2, #0
 800232a:	2180      	movs	r1, #128	@ 0x80
 800232c:	485f      	ldr	r0, [pc, #380]	@ (80024ac <user_control+0x1e8>)
 800232e:	f002 ffe9 	bl	8005304 <HAL_GPIO_WritePin>
 8002332:	2200      	movs	r2, #0
 8002334:	2104      	movs	r1, #4
 8002336:	485e      	ldr	r0, [pc, #376]	@ (80024b0 <user_control+0x1ec>)
 8002338:	f002 ffe4 	bl	8005304 <HAL_GPIO_WritePin>
 800233c:	e0b2      	b.n	80024a4 <user_control+0x1e0>
		case FOLLOE_RGB:		RGB_color_follow(350);RGB_OFF_ALL;break;
 800233e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8002342:	f7ff fe4d 	bl	8001fe0 <RGB_color_follow>
 8002346:	2200      	movs	r2, #0
 8002348:	2104      	movs	r1, #4
 800234a:	4858      	ldr	r0, [pc, #352]	@ (80024ac <user_control+0x1e8>)
 800234c:	f002 ffda 	bl	8005304 <HAL_GPIO_WritePin>
 8002350:	2200      	movs	r2, #0
 8002352:	2108      	movs	r1, #8
 8002354:	4855      	ldr	r0, [pc, #340]	@ (80024ac <user_control+0x1e8>)
 8002356:	f002 ffd5 	bl	8005304 <HAL_GPIO_WritePin>
 800235a:	2200      	movs	r2, #0
 800235c:	2110      	movs	r1, #16
 800235e:	4853      	ldr	r0, [pc, #332]	@ (80024ac <user_control+0x1e8>)
 8002360:	f002 ffd0 	bl	8005304 <HAL_GPIO_WritePin>
 8002364:	2200      	movs	r2, #0
 8002366:	2102      	movs	r1, #2
 8002368:	4851      	ldr	r0, [pc, #324]	@ (80024b0 <user_control+0x1ec>)
 800236a:	f002 ffcb 	bl	8005304 <HAL_GPIO_WritePin>
 800236e:	2200      	movs	r2, #0
 8002370:	2180      	movs	r1, #128	@ 0x80
 8002372:	484e      	ldr	r0, [pc, #312]	@ (80024ac <user_control+0x1e8>)
 8002374:	f002 ffc6 	bl	8005304 <HAL_GPIO_WritePin>
 8002378:	2200      	movs	r2, #0
 800237a:	2104      	movs	r1, #4
 800237c:	484c      	ldr	r0, [pc, #304]	@ (80024b0 <user_control+0x1ec>)
 800237e:	f002 ffc1 	bl	8005304 <HAL_GPIO_WritePin>
 8002382:	e08f      	b.n	80024a4 <user_control+0x1e0>
		case A_WATER:			RGB_color_water(0,500);RGB_OFF_ALL;break;
 8002384:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff fe67 	bl	800205c <RGB_color_water>
 800238e:	2200      	movs	r2, #0
 8002390:	2104      	movs	r1, #4
 8002392:	4846      	ldr	r0, [pc, #280]	@ (80024ac <user_control+0x1e8>)
 8002394:	f002 ffb6 	bl	8005304 <HAL_GPIO_WritePin>
 8002398:	2200      	movs	r2, #0
 800239a:	2108      	movs	r1, #8
 800239c:	4843      	ldr	r0, [pc, #268]	@ (80024ac <user_control+0x1e8>)
 800239e:	f002 ffb1 	bl	8005304 <HAL_GPIO_WritePin>
 80023a2:	2200      	movs	r2, #0
 80023a4:	2110      	movs	r1, #16
 80023a6:	4841      	ldr	r0, [pc, #260]	@ (80024ac <user_control+0x1e8>)
 80023a8:	f002 ffac 	bl	8005304 <HAL_GPIO_WritePin>
 80023ac:	2200      	movs	r2, #0
 80023ae:	2102      	movs	r1, #2
 80023b0:	483f      	ldr	r0, [pc, #252]	@ (80024b0 <user_control+0x1ec>)
 80023b2:	f002 ffa7 	bl	8005304 <HAL_GPIO_WritePin>
 80023b6:	2200      	movs	r2, #0
 80023b8:	2180      	movs	r1, #128	@ 0x80
 80023ba:	483c      	ldr	r0, [pc, #240]	@ (80024ac <user_control+0x1e8>)
 80023bc:	f002 ffa2 	bl	8005304 <HAL_GPIO_WritePin>
 80023c0:	2200      	movs	r2, #0
 80023c2:	2104      	movs	r1, #4
 80023c4:	483a      	ldr	r0, [pc, #232]	@ (80024b0 <user_control+0x1ec>)
 80023c6:	f002 ff9d 	bl	8005304 <HAL_GPIO_WritePin>
 80023ca:	e06b      	b.n	80024a4 <user_control+0x1e0>
		case B_WATER:			RGB_color_water(1,500);RGB_OFF_ALL;break;
 80023cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7ff fe43 	bl	800205c <RGB_color_water>
 80023d6:	2200      	movs	r2, #0
 80023d8:	2104      	movs	r1, #4
 80023da:	4834      	ldr	r0, [pc, #208]	@ (80024ac <user_control+0x1e8>)
 80023dc:	f002 ff92 	bl	8005304 <HAL_GPIO_WritePin>
 80023e0:	2200      	movs	r2, #0
 80023e2:	2108      	movs	r1, #8
 80023e4:	4831      	ldr	r0, [pc, #196]	@ (80024ac <user_control+0x1e8>)
 80023e6:	f002 ff8d 	bl	8005304 <HAL_GPIO_WritePin>
 80023ea:	2200      	movs	r2, #0
 80023ec:	2110      	movs	r1, #16
 80023ee:	482f      	ldr	r0, [pc, #188]	@ (80024ac <user_control+0x1e8>)
 80023f0:	f002 ff88 	bl	8005304 <HAL_GPIO_WritePin>
 80023f4:	2200      	movs	r2, #0
 80023f6:	2102      	movs	r1, #2
 80023f8:	482d      	ldr	r0, [pc, #180]	@ (80024b0 <user_control+0x1ec>)
 80023fa:	f002 ff83 	bl	8005304 <HAL_GPIO_WritePin>
 80023fe:	2200      	movs	r2, #0
 8002400:	2180      	movs	r1, #128	@ 0x80
 8002402:	482a      	ldr	r0, [pc, #168]	@ (80024ac <user_control+0x1e8>)
 8002404:	f002 ff7e 	bl	8005304 <HAL_GPIO_WritePin>
 8002408:	2200      	movs	r2, #0
 800240a:	2104      	movs	r1, #4
 800240c:	4828      	ldr	r0, [pc, #160]	@ (80024b0 <user_control+0x1ec>)
 800240e:	f002 ff79 	bl	8005304 <HAL_GPIO_WritePin>
 8002412:	e047      	b.n	80024a4 <user_control+0x1e0>
		case A_ONE_LIHGRT:		RGB_one_light(0,400);RGB_OFF_ALL;break;
 8002414:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002418:	2000      	movs	r0, #0
 800241a:	f7ff fe99 	bl	8002150 <RGB_one_light>
 800241e:	2200      	movs	r2, #0
 8002420:	2104      	movs	r1, #4
 8002422:	4822      	ldr	r0, [pc, #136]	@ (80024ac <user_control+0x1e8>)
 8002424:	f002 ff6e 	bl	8005304 <HAL_GPIO_WritePin>
 8002428:	2200      	movs	r2, #0
 800242a:	2108      	movs	r1, #8
 800242c:	481f      	ldr	r0, [pc, #124]	@ (80024ac <user_control+0x1e8>)
 800242e:	f002 ff69 	bl	8005304 <HAL_GPIO_WritePin>
 8002432:	2200      	movs	r2, #0
 8002434:	2110      	movs	r1, #16
 8002436:	481d      	ldr	r0, [pc, #116]	@ (80024ac <user_control+0x1e8>)
 8002438:	f002 ff64 	bl	8005304 <HAL_GPIO_WritePin>
 800243c:	2200      	movs	r2, #0
 800243e:	2102      	movs	r1, #2
 8002440:	481b      	ldr	r0, [pc, #108]	@ (80024b0 <user_control+0x1ec>)
 8002442:	f002 ff5f 	bl	8005304 <HAL_GPIO_WritePin>
 8002446:	2200      	movs	r2, #0
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	4818      	ldr	r0, [pc, #96]	@ (80024ac <user_control+0x1e8>)
 800244c:	f002 ff5a 	bl	8005304 <HAL_GPIO_WritePin>
 8002450:	2200      	movs	r2, #0
 8002452:	2104      	movs	r1, #4
 8002454:	4816      	ldr	r0, [pc, #88]	@ (80024b0 <user_control+0x1ec>)
 8002456:	f002 ff55 	bl	8005304 <HAL_GPIO_WritePin>
 800245a:	e023      	b.n	80024a4 <user_control+0x1e0>
		case B_ONE_LIHGRT:		RGB_one_light(1,400);RGB_OFF_ALL;break;
 800245c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002460:	2001      	movs	r0, #1
 8002462:	f7ff fe75 	bl	8002150 <RGB_one_light>
 8002466:	2200      	movs	r2, #0
 8002468:	2104      	movs	r1, #4
 800246a:	4810      	ldr	r0, [pc, #64]	@ (80024ac <user_control+0x1e8>)
 800246c:	f002 ff4a 	bl	8005304 <HAL_GPIO_WritePin>
 8002470:	2200      	movs	r2, #0
 8002472:	2108      	movs	r1, #8
 8002474:	480d      	ldr	r0, [pc, #52]	@ (80024ac <user_control+0x1e8>)
 8002476:	f002 ff45 	bl	8005304 <HAL_GPIO_WritePin>
 800247a:	2200      	movs	r2, #0
 800247c:	2110      	movs	r1, #16
 800247e:	480b      	ldr	r0, [pc, #44]	@ (80024ac <user_control+0x1e8>)
 8002480:	f002 ff40 	bl	8005304 <HAL_GPIO_WritePin>
 8002484:	2200      	movs	r2, #0
 8002486:	2102      	movs	r1, #2
 8002488:	4809      	ldr	r0, [pc, #36]	@ (80024b0 <user_control+0x1ec>)
 800248a:	f002 ff3b 	bl	8005304 <HAL_GPIO_WritePin>
 800248e:	2200      	movs	r2, #0
 8002490:	2180      	movs	r1, #128	@ 0x80
 8002492:	4806      	ldr	r0, [pc, #24]	@ (80024ac <user_control+0x1e8>)
 8002494:	f002 ff36 	bl	8005304 <HAL_GPIO_WritePin>
 8002498:	2200      	movs	r2, #0
 800249a:	2104      	movs	r1, #4
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <user_control+0x1ec>)
 800249e:	f002 ff31 	bl	8005304 <HAL_GPIO_WritePin>
 80024a2:	bf00      	nop
	}
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40011800 	.word	0x40011800
 80024b0:	40012000 	.word	0x40012000

080024b4 <Set_RGB>:
 *color：选择需要显示的颜色 Choose the color you want to display
 *
 *
 * */
void Set_RGB(car_RGB light, RGB_Color color)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71bb      	strb	r3, [r7, #6]
	uint8_t Light_RGB = light;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	73fb      	strb	r3, [r7, #15]
	switch (Light_RGB)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d010      	beq.n	80024f0 <Set_RGB+0x3c>
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	dc17      	bgt.n	8002502 <Set_RGB+0x4e>
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d002      	beq.n	80024dc <Set_RGB+0x28>
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d005      	beq.n	80024e6 <Set_RGB+0x32>
 80024da:	e012      	b.n	8002502 <Set_RGB+0x4e>
	{
	case RGB_R:
		Set_color_R(color);
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f836 	bl	8002550 <Set_color_R>
		break;
 80024e4:	e02c      	b.n	8002540 <Set_RGB+0x8c>
	case RGB_L:
		Set_color_L(color);
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 f8d1 	bl	8002690 <Set_color_L>
		break;
 80024ee:	e027      	b.n	8002540 <Set_RGB+0x8c>
	case RGB_Max:
		Set_color_R(color);
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f82c 	bl	8002550 <Set_color_R>
		Set_color_L(color);
 80024f8:	79bb      	ldrb	r3, [r7, #6]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f8c8 	bl	8002690 <Set_color_L>
		break;
 8002500:	e01e      	b.n	8002540 <Set_RGB+0x8c>
	default:
		RGB_OFF_ALL;
 8002502:	2200      	movs	r2, #0
 8002504:	2104      	movs	r1, #4
 8002506:	4810      	ldr	r0, [pc, #64]	@ (8002548 <Set_RGB+0x94>)
 8002508:	f002 fefc 	bl	8005304 <HAL_GPIO_WritePin>
 800250c:	2200      	movs	r2, #0
 800250e:	2108      	movs	r1, #8
 8002510:	480d      	ldr	r0, [pc, #52]	@ (8002548 <Set_RGB+0x94>)
 8002512:	f002 fef7 	bl	8005304 <HAL_GPIO_WritePin>
 8002516:	2200      	movs	r2, #0
 8002518:	2110      	movs	r1, #16
 800251a:	480b      	ldr	r0, [pc, #44]	@ (8002548 <Set_RGB+0x94>)
 800251c:	f002 fef2 	bl	8005304 <HAL_GPIO_WritePin>
 8002520:	2200      	movs	r2, #0
 8002522:	2102      	movs	r1, #2
 8002524:	4809      	ldr	r0, [pc, #36]	@ (800254c <Set_RGB+0x98>)
 8002526:	f002 feed 	bl	8005304 <HAL_GPIO_WritePin>
 800252a:	2200      	movs	r2, #0
 800252c:	2180      	movs	r1, #128	@ 0x80
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <Set_RGB+0x94>)
 8002530:	f002 fee8 	bl	8005304 <HAL_GPIO_WritePin>
 8002534:	2200      	movs	r2, #0
 8002536:	2104      	movs	r1, #4
 8002538:	4804      	ldr	r0, [pc, #16]	@ (800254c <Set_RGB+0x98>)
 800253a:	f002 fee3 	bl	8005304 <HAL_GPIO_WritePin>
	}
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40011800 	.word	0x40011800
 800254c:	40012000 	.word	0x40012000

08002550 <Set_color_R>:
/*
 * 打开右边的探照灯并显示颜色 Turn on the searchlight on the right and show the color
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_R(RGB_Color color)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	switch (color)
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b06      	cmp	r3, #6
 800255e:	f200 8081 	bhi.w	8002664 <Set_color_R+0x114>
 8002562:	a201      	add	r2, pc, #4	@ (adr r2, 8002568 <Set_color_R+0x18>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002585 	.word	0x08002585
 800256c:	080025a5 	.word	0x080025a5
 8002570:	080025c5 	.word	0x080025c5
 8002574:	080025e5 	.word	0x080025e5
 8002578:	08002605 	.word	0x08002605
 800257c:	08002625 	.word	0x08002625
 8002580:	08002645 	.word	0x08002645
	{
	case red:
		RRGB_SET(set, reset, reset);
 8002584:	2201      	movs	r2, #1
 8002586:	2104      	movs	r1, #4
 8002588:	4840      	ldr	r0, [pc, #256]	@ (800268c <Set_color_R+0x13c>)
 800258a:	f002 febb 	bl	8005304 <HAL_GPIO_WritePin>
 800258e:	2200      	movs	r2, #0
 8002590:	2108      	movs	r1, #8
 8002592:	483e      	ldr	r0, [pc, #248]	@ (800268c <Set_color_R+0x13c>)
 8002594:	f002 feb6 	bl	8005304 <HAL_GPIO_WritePin>
 8002598:	2200      	movs	r2, #0
 800259a:	2110      	movs	r1, #16
 800259c:	483b      	ldr	r0, [pc, #236]	@ (800268c <Set_color_R+0x13c>)
 800259e:	f002 feb1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 80025a2:	e06f      	b.n	8002684 <Set_color_R+0x134>
	case green:
		RRGB_SET(reset, set, reset);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2104      	movs	r1, #4
 80025a8:	4838      	ldr	r0, [pc, #224]	@ (800268c <Set_color_R+0x13c>)
 80025aa:	f002 feab 	bl	8005304 <HAL_GPIO_WritePin>
 80025ae:	2201      	movs	r2, #1
 80025b0:	2108      	movs	r1, #8
 80025b2:	4836      	ldr	r0, [pc, #216]	@ (800268c <Set_color_R+0x13c>)
 80025b4:	f002 fea6 	bl	8005304 <HAL_GPIO_WritePin>
 80025b8:	2200      	movs	r2, #0
 80025ba:	2110      	movs	r1, #16
 80025bc:	4833      	ldr	r0, [pc, #204]	@ (800268c <Set_color_R+0x13c>)
 80025be:	f002 fea1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 80025c2:	e05f      	b.n	8002684 <Set_color_R+0x134>
	case blue:
		RRGB_SET(reset, reset, set);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2104      	movs	r1, #4
 80025c8:	4830      	ldr	r0, [pc, #192]	@ (800268c <Set_color_R+0x13c>)
 80025ca:	f002 fe9b 	bl	8005304 <HAL_GPIO_WritePin>
 80025ce:	2200      	movs	r2, #0
 80025d0:	2108      	movs	r1, #8
 80025d2:	482e      	ldr	r0, [pc, #184]	@ (800268c <Set_color_R+0x13c>)
 80025d4:	f002 fe96 	bl	8005304 <HAL_GPIO_WritePin>
 80025d8:	2201      	movs	r2, #1
 80025da:	2110      	movs	r1, #16
 80025dc:	482b      	ldr	r0, [pc, #172]	@ (800268c <Set_color_R+0x13c>)
 80025de:	f002 fe91 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 80025e2:	e04f      	b.n	8002684 <Set_color_R+0x134>
	case yellow:
		RRGB_SET(set, set, reset);
 80025e4:	2201      	movs	r2, #1
 80025e6:	2104      	movs	r1, #4
 80025e8:	4828      	ldr	r0, [pc, #160]	@ (800268c <Set_color_R+0x13c>)
 80025ea:	f002 fe8b 	bl	8005304 <HAL_GPIO_WritePin>
 80025ee:	2201      	movs	r2, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	4826      	ldr	r0, [pc, #152]	@ (800268c <Set_color_R+0x13c>)
 80025f4:	f002 fe86 	bl	8005304 <HAL_GPIO_WritePin>
 80025f8:	2200      	movs	r2, #0
 80025fa:	2110      	movs	r1, #16
 80025fc:	4823      	ldr	r0, [pc, #140]	@ (800268c <Set_color_R+0x13c>)
 80025fe:	f002 fe81 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002602:	e03f      	b.n	8002684 <Set_color_R+0x134>
	case purple:
		RRGB_SET(set, reset, set);
 8002604:	2201      	movs	r2, #1
 8002606:	2104      	movs	r1, #4
 8002608:	4820      	ldr	r0, [pc, #128]	@ (800268c <Set_color_R+0x13c>)
 800260a:	f002 fe7b 	bl	8005304 <HAL_GPIO_WritePin>
 800260e:	2200      	movs	r2, #0
 8002610:	2108      	movs	r1, #8
 8002612:	481e      	ldr	r0, [pc, #120]	@ (800268c <Set_color_R+0x13c>)
 8002614:	f002 fe76 	bl	8005304 <HAL_GPIO_WritePin>
 8002618:	2201      	movs	r2, #1
 800261a:	2110      	movs	r1, #16
 800261c:	481b      	ldr	r0, [pc, #108]	@ (800268c <Set_color_R+0x13c>)
 800261e:	f002 fe71 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002622:	e02f      	b.n	8002684 <Set_color_R+0x134>
	case lake:
		RRGB_SET(reset, set, set);
 8002624:	2200      	movs	r2, #0
 8002626:	2104      	movs	r1, #4
 8002628:	4818      	ldr	r0, [pc, #96]	@ (800268c <Set_color_R+0x13c>)
 800262a:	f002 fe6b 	bl	8005304 <HAL_GPIO_WritePin>
 800262e:	2201      	movs	r2, #1
 8002630:	2108      	movs	r1, #8
 8002632:	4816      	ldr	r0, [pc, #88]	@ (800268c <Set_color_R+0x13c>)
 8002634:	f002 fe66 	bl	8005304 <HAL_GPIO_WritePin>
 8002638:	2201      	movs	r2, #1
 800263a:	2110      	movs	r1, #16
 800263c:	4813      	ldr	r0, [pc, #76]	@ (800268c <Set_color_R+0x13c>)
 800263e:	f002 fe61 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002642:	e01f      	b.n	8002684 <Set_color_R+0x134>
	case write:
		RRGB_SET(set, set, set);
 8002644:	2201      	movs	r2, #1
 8002646:	2104      	movs	r1, #4
 8002648:	4810      	ldr	r0, [pc, #64]	@ (800268c <Set_color_R+0x13c>)
 800264a:	f002 fe5b 	bl	8005304 <HAL_GPIO_WritePin>
 800264e:	2201      	movs	r2, #1
 8002650:	2108      	movs	r1, #8
 8002652:	480e      	ldr	r0, [pc, #56]	@ (800268c <Set_color_R+0x13c>)
 8002654:	f002 fe56 	bl	8005304 <HAL_GPIO_WritePin>
 8002658:	2201      	movs	r2, #1
 800265a:	2110      	movs	r1, #16
 800265c:	480b      	ldr	r0, [pc, #44]	@ (800268c <Set_color_R+0x13c>)
 800265e:	f002 fe51 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002662:	e00f      	b.n	8002684 <Set_color_R+0x134>
	default:
		RGB_OFF_R;
 8002664:	2200      	movs	r2, #0
 8002666:	2104      	movs	r1, #4
 8002668:	4808      	ldr	r0, [pc, #32]	@ (800268c <Set_color_R+0x13c>)
 800266a:	f002 fe4b 	bl	8005304 <HAL_GPIO_WritePin>
 800266e:	2200      	movs	r2, #0
 8002670:	2108      	movs	r1, #8
 8002672:	4806      	ldr	r0, [pc, #24]	@ (800268c <Set_color_R+0x13c>)
 8002674:	f002 fe46 	bl	8005304 <HAL_GPIO_WritePin>
 8002678:	2200      	movs	r2, #0
 800267a:	2110      	movs	r1, #16
 800267c:	4803      	ldr	r0, [pc, #12]	@ (800268c <Set_color_R+0x13c>)
 800267e:	f002 fe41 	bl	8005304 <HAL_GPIO_WritePin>
	}
}
 8002682:	bf00      	nop
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40011800 	.word	0x40011800

08002690 <Set_color_L>:
/*
 * 打开左边的探照灯并显示颜色 Turn on the left searchlight and show colors
 * color：选择需要显示的颜色 Select the color to be displayed
 * */
void Set_color_L(RGB_Color color)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
	switch (color)
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b06      	cmp	r3, #6
 800269e:	f200 8081 	bhi.w	80027a4 <Set_color_L+0x114>
 80026a2:	a201      	add	r2, pc, #4	@ (adr r2, 80026a8 <Set_color_L+0x18>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026c5 	.word	0x080026c5
 80026ac:	080026e5 	.word	0x080026e5
 80026b0:	08002705 	.word	0x08002705
 80026b4:	08002725 	.word	0x08002725
 80026b8:	08002745 	.word	0x08002745
 80026bc:	08002765 	.word	0x08002765
 80026c0:	08002785 	.word	0x08002785
	{
	case red:
		LRGB_SET(set, reset, reset);
 80026c4:	2201      	movs	r2, #1
 80026c6:	2102      	movs	r1, #2
 80026c8:	4840      	ldr	r0, [pc, #256]	@ (80027cc <Set_color_L+0x13c>)
 80026ca:	f002 fe1b 	bl	8005304 <HAL_GPIO_WritePin>
 80026ce:	2200      	movs	r2, #0
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	483f      	ldr	r0, [pc, #252]	@ (80027d0 <Set_color_L+0x140>)
 80026d4:	f002 fe16 	bl	8005304 <HAL_GPIO_WritePin>
 80026d8:	2200      	movs	r2, #0
 80026da:	2104      	movs	r1, #4
 80026dc:	483b      	ldr	r0, [pc, #236]	@ (80027cc <Set_color_L+0x13c>)
 80026de:	f002 fe11 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 80026e2:	e06f      	b.n	80027c4 <Set_color_L+0x134>
	case green:
		LRGB_SET(reset, set, reset);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2102      	movs	r1, #2
 80026e8:	4838      	ldr	r0, [pc, #224]	@ (80027cc <Set_color_L+0x13c>)
 80026ea:	f002 fe0b 	bl	8005304 <HAL_GPIO_WritePin>
 80026ee:	2201      	movs	r2, #1
 80026f0:	2180      	movs	r1, #128	@ 0x80
 80026f2:	4837      	ldr	r0, [pc, #220]	@ (80027d0 <Set_color_L+0x140>)
 80026f4:	f002 fe06 	bl	8005304 <HAL_GPIO_WritePin>
 80026f8:	2200      	movs	r2, #0
 80026fa:	2104      	movs	r1, #4
 80026fc:	4833      	ldr	r0, [pc, #204]	@ (80027cc <Set_color_L+0x13c>)
 80026fe:	f002 fe01 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002702:	e05f      	b.n	80027c4 <Set_color_L+0x134>
	case blue:
		LRGB_SET(reset, reset, set);
 8002704:	2200      	movs	r2, #0
 8002706:	2102      	movs	r1, #2
 8002708:	4830      	ldr	r0, [pc, #192]	@ (80027cc <Set_color_L+0x13c>)
 800270a:	f002 fdfb 	bl	8005304 <HAL_GPIO_WritePin>
 800270e:	2200      	movs	r2, #0
 8002710:	2180      	movs	r1, #128	@ 0x80
 8002712:	482f      	ldr	r0, [pc, #188]	@ (80027d0 <Set_color_L+0x140>)
 8002714:	f002 fdf6 	bl	8005304 <HAL_GPIO_WritePin>
 8002718:	2201      	movs	r2, #1
 800271a:	2104      	movs	r1, #4
 800271c:	482b      	ldr	r0, [pc, #172]	@ (80027cc <Set_color_L+0x13c>)
 800271e:	f002 fdf1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002722:	e04f      	b.n	80027c4 <Set_color_L+0x134>
	case yellow:
		LRGB_SET(set, set, 0);
 8002724:	2201      	movs	r2, #1
 8002726:	2102      	movs	r1, #2
 8002728:	4828      	ldr	r0, [pc, #160]	@ (80027cc <Set_color_L+0x13c>)
 800272a:	f002 fdeb 	bl	8005304 <HAL_GPIO_WritePin>
 800272e:	2201      	movs	r2, #1
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	4827      	ldr	r0, [pc, #156]	@ (80027d0 <Set_color_L+0x140>)
 8002734:	f002 fde6 	bl	8005304 <HAL_GPIO_WritePin>
 8002738:	2200      	movs	r2, #0
 800273a:	2104      	movs	r1, #4
 800273c:	4823      	ldr	r0, [pc, #140]	@ (80027cc <Set_color_L+0x13c>)
 800273e:	f002 fde1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002742:	e03f      	b.n	80027c4 <Set_color_L+0x134>
	case purple:
		LRGB_SET(set, reset, set);
 8002744:	2201      	movs	r2, #1
 8002746:	2102      	movs	r1, #2
 8002748:	4820      	ldr	r0, [pc, #128]	@ (80027cc <Set_color_L+0x13c>)
 800274a:	f002 fddb 	bl	8005304 <HAL_GPIO_WritePin>
 800274e:	2200      	movs	r2, #0
 8002750:	2180      	movs	r1, #128	@ 0x80
 8002752:	481f      	ldr	r0, [pc, #124]	@ (80027d0 <Set_color_L+0x140>)
 8002754:	f002 fdd6 	bl	8005304 <HAL_GPIO_WritePin>
 8002758:	2201      	movs	r2, #1
 800275a:	2104      	movs	r1, #4
 800275c:	481b      	ldr	r0, [pc, #108]	@ (80027cc <Set_color_L+0x13c>)
 800275e:	f002 fdd1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002762:	e02f      	b.n	80027c4 <Set_color_L+0x134>
	case lake:
		LRGB_SET(reset, set, set);
 8002764:	2200      	movs	r2, #0
 8002766:	2102      	movs	r1, #2
 8002768:	4818      	ldr	r0, [pc, #96]	@ (80027cc <Set_color_L+0x13c>)
 800276a:	f002 fdcb 	bl	8005304 <HAL_GPIO_WritePin>
 800276e:	2201      	movs	r2, #1
 8002770:	2180      	movs	r1, #128	@ 0x80
 8002772:	4817      	ldr	r0, [pc, #92]	@ (80027d0 <Set_color_L+0x140>)
 8002774:	f002 fdc6 	bl	8005304 <HAL_GPIO_WritePin>
 8002778:	2201      	movs	r2, #1
 800277a:	2104      	movs	r1, #4
 800277c:	4813      	ldr	r0, [pc, #76]	@ (80027cc <Set_color_L+0x13c>)
 800277e:	f002 fdc1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 8002782:	e01f      	b.n	80027c4 <Set_color_L+0x134>
	case write:
		LRGB_SET(set, set, set);
 8002784:	2201      	movs	r2, #1
 8002786:	2102      	movs	r1, #2
 8002788:	4810      	ldr	r0, [pc, #64]	@ (80027cc <Set_color_L+0x13c>)
 800278a:	f002 fdbb 	bl	8005304 <HAL_GPIO_WritePin>
 800278e:	2201      	movs	r2, #1
 8002790:	2180      	movs	r1, #128	@ 0x80
 8002792:	480f      	ldr	r0, [pc, #60]	@ (80027d0 <Set_color_L+0x140>)
 8002794:	f002 fdb6 	bl	8005304 <HAL_GPIO_WritePin>
 8002798:	2201      	movs	r2, #1
 800279a:	2104      	movs	r1, #4
 800279c:	480b      	ldr	r0, [pc, #44]	@ (80027cc <Set_color_L+0x13c>)
 800279e:	f002 fdb1 	bl	8005304 <HAL_GPIO_WritePin>
		break;
 80027a2:	e00f      	b.n	80027c4 <Set_color_L+0x134>
	default:
		RGB_OFF_L;
 80027a4:	2200      	movs	r2, #0
 80027a6:	2102      	movs	r1, #2
 80027a8:	4808      	ldr	r0, [pc, #32]	@ (80027cc <Set_color_L+0x13c>)
 80027aa:	f002 fdab 	bl	8005304 <HAL_GPIO_WritePin>
 80027ae:	2200      	movs	r2, #0
 80027b0:	2180      	movs	r1, #128	@ 0x80
 80027b2:	4807      	ldr	r0, [pc, #28]	@ (80027d0 <Set_color_L+0x140>)
 80027b4:	f002 fda6 	bl	8005304 <HAL_GPIO_WritePin>
 80027b8:	2200      	movs	r2, #0
 80027ba:	2104      	movs	r1, #4
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <Set_color_L+0x13c>)
 80027be:	f002 fda1 	bl	8005304 <HAL_GPIO_WritePin>
	}
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40012000 	.word	0x40012000
 80027d0:	40011800 	.word	0x40011800

080027d4 <BSP_Init>:
#include "bsp.h"

//Hardware Initialization
//Parameter:None
void BSP_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	Delay_Init();
 80027d8:	f000 f81e 	bl	8002818 <Delay_Init>

	PID_Param_Init();//电机PID初始化 Motor PID initialization
 80027dc:	f000 fcd8 	bl	8003190 <PID_Param_Init>
	Bsp_Tim_Init();//电机相关定时器初始化 Motor related timer initialization
 80027e0:	f000 ffca 	bl	8003778 <Bsp_Tim_Init>

	OLED_Init();
 80027e4:	f7fe fd78 	bl	80012d8 <OLED_Init>
	OLED_Draw_Line("PS2 control Car!",1,false,true);
 80027e8:	2301      	movs	r3, #1
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	4806      	ldr	r0, [pc, #24]	@ (8002808 <BSP_Init+0x34>)
 80027f0:	f7fe ff96 	bl	8001720 <OLED_Draw_Line>

	PS2_SetInit();//强制进入红绿模式 Forced entry into red green mode
 80027f4:	f7ff fbc8 	bl	8001f88 <PS2_SetInit>

	Motion_Set_Speed(0,0,0,0);//小车停止 Car stop
 80027f8:	2300      	movs	r3, #0
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2000      	movs	r0, #0
 8002800:	f000 f9ac 	bl	8002b5c <Motion_Set_Speed>

}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	0800d1e8 	.word	0x0800d1e8

0800280c <BSP_Loop>:

//Loop Run Function
//Parameter:None
void BSP_Loop(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
	User_PS2_Control();
 8002810:	f7fe ffae 	bl	8001770 <User_PS2_Control>
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <Delay_Init>:
// 函数功能:延迟初始化
// 传递参数:无
// Function function: Delay initialization
// Pass parameters: None
void Delay_Init(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	// Because it is the main frequency of 72MHz 一般是72
	//  Due to the presence of_ The systick has been configured in Init, so there is no need to reconfigure it here
	g_fac_us = 72; /* 由于在HAL_Init中已对systick做了配置，所以这里无需重新配置 */
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <Delay_Init+0x14>)
 800281e:	2248      	movs	r2, #72	@ 0x48
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000498 	.word	0x20000498

08002830 <Delay_Us>:
**Function Description: Delay Nus, where Nus is the number of us to delay (using clock picking method to do us delay)
**Input parameter: nus
**Output parameter: None
***********************************************************/
void Delay_Us(uint32_t nus)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	uint32_t ticks;
	uint32_t told, tnow, tcnt = 0;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
	uint32_t reload = SysTick->LOAD; /*The value of LOAD LOAD的值 */
 800283c:	4b19      	ldr	r3, [pc, #100]	@ (80028a4 <Delay_Us+0x74>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	617b      	str	r3, [r7, #20]
	ticks = nus * g_fac_us;			 /*Number of beats required 需要的节拍数 */
 8002842:	4b19      	ldr	r3, [pc, #100]	@ (80028a8 <Delay_Us+0x78>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	613b      	str	r3, [r7, #16]
	told = SysTick->VAL;			 /*Counter value at the beginning of entry 刚进入时的计数器值 */
 800284e:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <Delay_Us+0x74>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61fb      	str	r3, [r7, #28]
	while (1)
	{
		tnow = SysTick->VAL;
 8002854:	4b13      	ldr	r3, [pc, #76]	@ (80028a4 <Delay_Us+0x74>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	60fb      	str	r3, [r7, #12]
		if (tnow != told)
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	429a      	cmp	r2, r3
 8002860:	d0f8      	beq.n	8002854 <Delay_Us+0x24>
		{
			if (tnow < told)
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	429a      	cmp	r2, r3
 8002868:	d206      	bcs.n	8002878 <Delay_Us+0x48>
			{
				tcnt += told - tnow; /*Please note that SYSTEM is a decreasing counter 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	e007      	b.n	8002888 <Delay_Us+0x58>
			}
			else
			{
				tcnt += reload - tnow + told;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad2      	subs	r2, r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4413      	add	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
			}
			told = tnow;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	61fb      	str	r3, [r7, #28]
			if (tcnt >= ticks)
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	429a      	cmp	r2, r3
 8002892:	d200      	bcs.n	8002896 <Delay_Us+0x66>
		tnow = SysTick->VAL;
 8002894:	e7de      	b.n	8002854 <Delay_Us+0x24>
			{
				break; /*Exit if the time exceeds/equals the time to be delayed 时间超过/等于要延迟的时间,则退出 */
 8002896:	bf00      	nop
			}
		}
	}
}
 8002898:	bf00      	nop
 800289a:	3724      	adds	r7, #36	@ 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010
 80028a8:	20000498 	.word	0x20000498

080028ac <Delay_Ms>:
**Function Description: Delay Nus, where Nus is the number of us to delay (using clock picking method to do us delay)
**Input parameter: nus
**Output parameter: None
***********************************************************/
void Delay_Ms(uint16_t nms)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	80fb      	strh	r3, [r7, #6]
	Delay_Us((uint32_t)(nms * 1000)); /*Normal mode delay 普通方式延时 */
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ffb5 	bl	8002830 <Delay_Us>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <Encoder_Read_CNT>:
 * @Note:
 * @Parm: Motor id：电机的ID号:MOTOR_ID_M1
 * @Retval: Returns encoder count data  返回编码器计数数据
 */
static int16_t Encoder_Read_CNT(uint8_t Motor_id)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	int16_t Encoder_TIM = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	81fb      	strh	r3, [r7, #14]
	switch (Motor_id)
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d841      	bhi.n	8002968 <Encoder_Read_CNT+0x98>
 80028e4:	a201      	add	r2, pc, #4	@ (adr r2, 80028ec <Encoder_Read_CNT+0x1c>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	08002917 	.word	0x08002917
 80028f4:	08002935 	.word	0x08002935
 80028f8:	0800294f 	.word	0x0800294f
	{
	case MOTOR_ID_M1:
		Encoder_TIM = 0x7fff - (short)TIM4->CNT;
 80028fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002978 <Encoder_Read_CNT+0xa8>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	b29b      	uxth	r3, r3
 8002902:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002906:	337f      	adds	r3, #127	@ 0x7f
 8002908:	b29b      	uxth	r3, r3
 800290a:	81fb      	strh	r3, [r7, #14]
		TIM4->CNT = 0x7fff;
 800290c:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <Encoder_Read_CNT+0xa8>)
 800290e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002914:	e029      	b.n	800296a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M2:
		Encoder_TIM = 0x7fff - (short)TIM2->CNT;
 8002916:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800291a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291c:	b29b      	uxth	r3, r3
 800291e:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002922:	337f      	adds	r3, #127	@ 0x7f
 8002924:	b29b      	uxth	r3, r3
 8002926:	81fb      	strh	r3, [r7, #14]
		TIM2->CNT = 0x7fff;
 8002928:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800292c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002932:	e01a      	b.n	800296a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M3:
		Encoder_TIM = 0x7fff - (short)TIM5->CNT;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <Encoder_Read_CNT+0xac>)
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	b29b      	uxth	r3, r3
 800293a:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 800293e:	337f      	adds	r3, #127	@ 0x7f
 8002940:	b29b      	uxth	r3, r3
 8002942:	81fb      	strh	r3, [r7, #14]
		TIM5->CNT = 0x7fff;
 8002944:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <Encoder_Read_CNT+0xac>)
 8002946:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 800294c:	e00d      	b.n	800296a <Encoder_Read_CNT+0x9a>
	case MOTOR_ID_M4:
		Encoder_TIM = 0x7fff - (short)TIM3->CNT;
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <Encoder_Read_CNT+0xb0>)
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	b29b      	uxth	r3, r3
 8002954:	f5c3 43ff 	rsb	r3, r3, #32640	@ 0x7f80
 8002958:	337f      	adds	r3, #127	@ 0x7f
 800295a:	b29b      	uxth	r3, r3
 800295c:	81fb      	strh	r3, [r7, #14]
		TIM3->CNT = 0x7fff;
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <Encoder_Read_CNT+0xb0>)
 8002960:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002966:	e000      	b.n	800296a <Encoder_Read_CNT+0x9a>
	default:
		break;
 8002968:	bf00      	nop
	}
	return Encoder_TIM;
 800296a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40000800 	.word	0x40000800
 800297c:	40000c00 	.word	0x40000c00
 8002980:	40000400 	.word	0x40000400

08002984 <Encoder_Get_ALL>:
}

// 获取开机到现在总共的四路编码器计数。
// Get the total four - way encoder count up to now
void Encoder_Get_ALL(int *Encoder_all)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	Encoder_all[0] = g_Encoder_M1_Now;
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <Encoder_Get_ALL+0x38>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	601a      	str	r2, [r3, #0]
	Encoder_all[1] = g_Encoder_M2_Now;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3304      	adds	r3, #4
 8002998:	4a09      	ldr	r2, [pc, #36]	@ (80029c0 <Encoder_Get_ALL+0x3c>)
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	601a      	str	r2, [r3, #0]
	Encoder_all[2] = g_Encoder_M3_Now;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	3308      	adds	r3, #8
 80029a2:	4a08      	ldr	r2, [pc, #32]	@ (80029c4 <Encoder_Get_ALL+0x40>)
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	601a      	str	r2, [r3, #0]
	Encoder_all[3] = g_Encoder_M4_Now;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	330c      	adds	r3, #12
 80029ac:	4a06      	ldr	r2, [pc, #24]	@ (80029c8 <Encoder_Get_ALL+0x44>)
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	2000049c 	.word	0x2000049c
 80029c0:	200004a0 	.word	0x200004a0
 80029c4:	200004a4 	.word	0x200004a4
 80029c8:	200004a8 	.word	0x200004a8

080029cc <Encoder_Update_Count>:

// 更新编码器的计数总值。需每10毫秒调用一次
// Update the count value of the encoder. call every 10 milliseconds
void Encoder_Update_Count(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	g_Encoder_M1_Now -= Encoder_Read_CNT(MOTOR_ID_M1);
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff ff7d 	bl	80028d0 <Encoder_Read_CNT>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461a      	mov	r2, r3
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <Encoder_Update_Count+0x58>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	4a10      	ldr	r2, [pc, #64]	@ (8002a24 <Encoder_Update_Count+0x58>)
 80029e2:	6013      	str	r3, [r2, #0]
	g_Encoder_M2_Now -= Encoder_Read_CNT(MOTOR_ID_M2);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7ff ff73 	bl	80028d0 <Encoder_Read_CNT>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <Encoder_Update_Count+0x5c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <Encoder_Update_Count+0x5c>)
 80029f6:	6013      	str	r3, [r2, #0]
	g_Encoder_M3_Now += Encoder_Read_CNT(MOTOR_ID_M3);
 80029f8:	2002      	movs	r0, #2
 80029fa:	f7ff ff69 	bl	80028d0 <Encoder_Read_CNT>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <Encoder_Update_Count+0x60>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a08      	ldr	r2, [pc, #32]	@ (8002a2c <Encoder_Update_Count+0x60>)
 8002a0a:	6013      	str	r3, [r2, #0]
	g_Encoder_M4_Now += Encoder_Read_CNT(MOTOR_ID_M4);
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f7ff ff5f 	bl	80028d0 <Encoder_Read_CNT>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <Encoder_Update_Count+0x64>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <Encoder_Update_Count+0x64>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2000049c 	.word	0x2000049c
 8002a28:	200004a0 	.word	0x200004a0
 8002a2c:	200004a4 	.word	0x200004a4
 8002a30:	200004a8 	.word	0x200004a8

08002a34 <Motion_Get_Circle_Pulse>:
motor_data_t motor_data;

uint8_t g_yaw_adjust = 0;

static float Motion_Get_Circle_Pulse(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
    return ENCODER_CIRCLE_450;
 8002a38:	4b02      	ldr	r3, [pc, #8]	@ (8002a44 <Motion_Get_Circle_Pulse+0x10>)
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	44820000 	.word	0x44820000

08002a48 <Motion_Set_Yaw_Adjust>:
}

// 设置偏航角状态，如果使能则刷新target目标角度。
//Set the yaw angle status, and if enabled, refresh the target target angle.
void Motion_Set_Yaw_Adjust(uint8_t adjust)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
    if (adjust == 0)
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d103      	bne.n	8002a60 <Motion_Set_Yaw_Adjust+0x18>
    {
        g_yaw_adjust = 0;
 8002a58:	4b05      	ldr	r3, [pc, #20]	@ (8002a70 <Motion_Set_Yaw_Adjust+0x28>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <Motion_Set_Yaw_Adjust+0x1e>
    }
    else
    {
        g_yaw_adjust = 1;
 8002a60:	4b03      	ldr	r3, [pc, #12]	@ (8002a70 <Motion_Set_Yaw_Adjust+0x28>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    }
    if (g_yaw_adjust)
    {
        // PID_Yaw_Reset(获取当前IMU偏航角-yaw);
    }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr
 8002a70:	20000530 	.word	0x20000530

08002a74 <Motion_Set_Pwm>:
}

// 控制小车运动，Motor_X=[-3600, 3600]，超过范围则无效。
//Control the movement of the car, Motor_ X=[-3600, 3600], if it exceeds the range, it is invalid.
void Motion_Set_Pwm(int16_t Motor_1, int16_t Motor_2, int16_t Motor_3, int16_t Motor_4)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	80fb      	strh	r3, [r7, #6]
 8002a86:	4603      	mov	r3, r0
 8002a88:	80bb      	strh	r3, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	807b      	strh	r3, [r7, #2]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	803b      	strh	r3, [r7, #0]
    if (Motor_1 >= -MOTOR_MAX_PULSE && Motor_1 <= MOTOR_MAX_PULSE)
 8002a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a96:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002a9a:	db0a      	blt.n	8002ab2 <Motion_Set_Pwm+0x3e>
 8002a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002aa4:	dc05      	bgt.n	8002ab2 <Motion_Set_Pwm+0x3e>
    {
        Motor_Set_Pwm(MOTOR_ID_M1, Motor_1);
 8002aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	2000      	movs	r0, #0
 8002aae:	f000 fdcf 	bl	8003650 <Motor_Set_Pwm>
    }
    if (Motor_2 >= -MOTOR_MAX_PULSE && Motor_2 <= MOTOR_MAX_PULSE)
 8002ab2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ab6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002aba:	db0a      	blt.n	8002ad2 <Motion_Set_Pwm+0x5e>
 8002abc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ac0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002ac4:	dc05      	bgt.n	8002ad2 <Motion_Set_Pwm+0x5e>
    {
        Motor_Set_Pwm(MOTOR_ID_M2, Motor_2);
 8002ac6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aca:	4619      	mov	r1, r3
 8002acc:	2001      	movs	r0, #1
 8002ace:	f000 fdbf 	bl	8003650 <Motor_Set_Pwm>
    }
    if (Motor_3 >= -MOTOR_MAX_PULSE && Motor_3 <= MOTOR_MAX_PULSE)
 8002ad2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ad6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002ada:	db0a      	blt.n	8002af2 <Motion_Set_Pwm+0x7e>
 8002adc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ae0:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002ae4:	dc05      	bgt.n	8002af2 <Motion_Set_Pwm+0x7e>
    {
        Motor_Set_Pwm(MOTOR_ID_M3, Motor_3);
 8002ae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002aea:	4619      	mov	r1, r3
 8002aec:	2002      	movs	r0, #2
 8002aee:	f000 fdaf 	bl	8003650 <Motor_Set_Pwm>
    }
    if (Motor_4 >= -MOTOR_MAX_PULSE && Motor_4 <= MOTOR_MAX_PULSE)
 8002af2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002af6:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8002afa:	db0a      	blt.n	8002b12 <Motion_Set_Pwm+0x9e>
 8002afc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b00:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8002b04:	dc05      	bgt.n	8002b12 <Motion_Set_Pwm+0x9e>
    {
        Motor_Set_Pwm(MOTOR_ID_M4, Motor_4);
 8002b06:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f000 fd9f 	bl	8003650 <Motor_Set_Pwm>
    }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
	...

08002b1c <Motion_Stop>:

// Car Stop 小车停止
void Motion_Stop(uint8_t brake)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
    Motion_Set_Speed(0, 0, 0, 0);
 8002b26:	2300      	movs	r3, #0
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 f815 	bl	8002b5c <Motion_Set_Speed>
    PID_Clear_Motor(MAX_MOTOR);
 8002b32:	2004      	movs	r0, #4
 8002b34:	f000 fc64 	bl	8003400 <PID_Clear_Motor>
    g_start_ctrl = 0;
 8002b38:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <Motion_Stop+0x38>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	701a      	strb	r2, [r3, #0]
    g_yaw_adjust = 0;
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <Motion_Stop+0x3c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
    Motor_Stop(brake);
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fd36 	bl	80035b8 <Motor_Stop>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200004fc 	.word	0x200004fc
 8002b58:	20000530 	.word	0x20000530

08002b5c <Motion_Set_Speed>:

// speed_mX=[-1000, 1000], 单位为：mm/s
//speed_mX=[-10001000],Unit: mm/s
void Motion_Set_Speed(int16_t speed_m1, int16_t speed_m2, int16_t speed_m3, int16_t speed_m4)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4604      	mov	r4, r0
 8002b64:	4608      	mov	r0, r1
 8002b66:	4611      	mov	r1, r2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4623      	mov	r3, r4
 8002b6c:	80fb      	strh	r3, [r7, #6]
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80bb      	strh	r3, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]
 8002b76:	4613      	mov	r3, r2
 8002b78:	803b      	strh	r3, [r7, #0]
    g_start_ctrl = 1;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	@ (8002bdc <Motion_Set_Speed+0x80>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
    motor_data.speed_set[0] = speed_m1;
 8002b80:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <Motion_Set_Speed+0x84>)
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	8413      	strh	r3, [r2, #32]
    motor_data.speed_set[1] = speed_m2;
 8002b86:	4a16      	ldr	r2, [pc, #88]	@ (8002be0 <Motion_Set_Speed+0x84>)
 8002b88:	88bb      	ldrh	r3, [r7, #4]
 8002b8a:	8453      	strh	r3, [r2, #34]	@ 0x22
    motor_data.speed_set[2] = speed_m3;
 8002b8c:	4a14      	ldr	r2, [pc, #80]	@ (8002be0 <Motion_Set_Speed+0x84>)
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	8493      	strh	r3, [r2, #36]	@ 0x24
    motor_data.speed_set[3] = speed_m4;
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <Motion_Set_Speed+0x84>)
 8002b94:	883b      	ldrh	r3, [r7, #0]
 8002b96:	84d3      	strh	r3, [r2, #38]	@ 0x26
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	e016      	b.n	8002bcc <Motion_Set_Speed+0x70>
    {
        PID_Set_Motor_Target(i, motor_data.speed_set[i] * 1.0);
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	4a0f      	ldr	r2, [pc, #60]	@ (8002be0 <Motion_Set_Speed+0x84>)
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fc97 	bl	80004dc <__aeabi_i2d>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fd fff3 	bl	8000ba0 <__aeabi_d2f>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 fca9 	bl	8003518 <PID_Set_Motor_Target>
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d9e5      	bls.n	8002b9e <Motion_Set_Speed+0x42>
    }
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd90      	pop	{r4, r7, pc}
 8002bdc:	200004fc 	.word	0x200004fc
 8002be0:	20000508 	.word	0x20000508

08002be4 <Motion_Get_Speed>:
}

// 从编码器读取当前各轮子速度，单位mm/s
//Read the current speed of each wheel from the encoder, in mm/s
void Motion_Get_Speed(car_data_t *car)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	@ 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
    int i = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed_mm[MAX_MOTOR] = {0};
 8002bf0:	f107 0308 	add.w	r3, r7, #8
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
    float circle_mm = Motion_Get_Circle_MM();
 8002bfe:	f000 f8d3 	bl	8002da8 <Motion_Get_Circle_MM>
 8002c02:	6238      	str	r0, [r7, #32]
    float circle_pulse = Motion_Get_Circle_Pulse();
 8002c04:	f7ff ff16 	bl	8002a34 <Motion_Get_Circle_Pulse>
 8002c08:	61f8      	str	r0, [r7, #28]
    float robot_APB = Motion_Get_APB();
 8002c0a:	f000 f8c3 	bl	8002d94 <Motion_Get_APB>
 8002c0e:	61b8      	str	r0, [r7, #24]

    Motion_Get_Encoder();
 8002c10:	f000 f8d4 	bl	8002dbc <Motion_Get_Encoder>

    // 计算轮子速度，单位mm/s。
    //Calculate the wheel speed in mm/s.
    for (i = 0; i < 4; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c18:	e01e      	b.n	8002c58 <Motion_Get_Speed+0x74>
    {
        speed_mm[i] = (g_Encoder_All_Offset[i]) * 100 * circle_mm / circle_pulse;
 8002c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8002d84 <Motion_Get_Speed+0x1a0>)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	2264      	movs	r2, #100	@ 0x64
 8002c24:	fb02 f303 	mul.w	r3, r2, r3
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f8c3 	bl	8000db4 <__aeabi_i2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f912 	bl	8000e5c <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	69f9      	ldr	r1, [r7, #28]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe f9c1 	bl	8000fc4 <__aeabi_fdiv>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	3328      	adds	r3, #40	@ 0x28
 8002c4c:	443b      	add	r3, r7
 8002c4e:	f843 2c20 	str.w	r2, [r3, #-32]
    for (i = 0; i < 4; i++)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	3301      	adds	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	dddd      	ble.n	8002c1a <Motion_Get_Speed+0x36>
    }

    car->Vx = (speed_mm[0] + speed_mm[1] + speed_mm[2] + speed_mm[3]) / 4;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fd fff1 	bl	8000c4c <__addsf3>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fd ffea 	bl	8000c4c <__addsf3>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7fd ffe3 	bl	8000c4c <__addsf3>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe f999 	bl	8000fc4 <__aeabi_fdiv>
 8002c92:	4603      	mov	r3, r0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe faa7 	bl	80011e8 <__aeabi_f2iz>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	b21a      	sxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	801a      	strh	r2, [r3, #0]
    car->Vy = -(speed_mm[0] - speed_mm[1] - speed_mm[2] + speed_mm[3]) / 4;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd ffcd 	bl	8000c48 <__aeabi_fsub>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f7fd ffc6 	bl	8000c48 <__aeabi_fsub>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7fd ffc1 	bl	8000c4c <__addsf3>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002cd0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe f975 	bl	8000fc4 <__aeabi_fdiv>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe fa83 	bl	80011e8 <__aeabi_f2iz>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	b21a      	sxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	805a      	strh	r2, [r3, #2]
    car->Vz = -(speed_mm[0] + speed_mm[1] - speed_mm[2] - speed_mm[3]) / 4.0f / robot_APB * 1000;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd ffab 	bl	8000c4c <__addsf3>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fd ffa2 	bl	8000c48 <__aeabi_fsub>
 8002d04:	4603      	mov	r3, r0
 8002d06:	461a      	mov	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f7fd ff9b 	bl	8000c48 <__aeabi_fsub>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002d18:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe f951 	bl	8000fc4 <__aeabi_fdiv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	69b9      	ldr	r1, [r7, #24]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe f94c 	bl	8000fc4 <__aeabi_fdiv>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4916      	ldr	r1, [pc, #88]	@ (8002d88 <Motion_Get_Speed+0x1a4>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe f893 	bl	8000e5c <__aeabi_fmul>
 8002d36:	4603      	mov	r3, r0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fa55 	bl	80011e8 <__aeabi_f2iz>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	b21a      	sxth	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	809a      	strh	r2, [r3, #4]

    if (g_start_ctrl)
 8002d46:	4b11      	ldr	r3, [pc, #68]	@ (8002d8c <Motion_Get_Speed+0x1a8>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <Motion_Get_Speed+0x196>
    {
        for (i = 0; i < MAX_MOTOR; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d52:	e00c      	b.n	8002d6e <Motion_Get_Speed+0x18a>
        {
            motor_data.speed_mm_s[i] = speed_mm[i];
 8002d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3328      	adds	r3, #40	@ 0x28
 8002d5a:	443b      	add	r3, r7
 8002d5c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8002d60:	490b      	ldr	r1, [pc, #44]	@ (8002d90 <Motion_Get_Speed+0x1ac>)
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (i = 0; i < MAX_MOTOR; i++)
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	ddef      	ble.n	8002d54 <Motion_Get_Speed+0x170>
        }
        PID_Calc_Motor(&motor_data);
 8002d74:	4806      	ldr	r0, [pc, #24]	@ (8002d90 <Motion_Get_Speed+0x1ac>)
 8002d76:	f000 fb1b 	bl	80033b0 <PID_Calc_Motor>
    }
}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	@ 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200004ec 	.word	0x200004ec
 8002d88:	447a0000 	.word	0x447a0000
 8002d8c:	200004fc 	.word	0x200004fc
 8002d90:	20000508 	.word	0x20000508

08002d94 <Motion_Get_APB>:

// 返回当前小车轮子轴间距和的一半
//Returns half of the sum of the current wheel spacing of the small car
float Motion_Get_APB(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
    return STM32Car_APB;
 8002d98:	4b02      	ldr	r3, [pc, #8]	@ (8002da4 <Motion_Get_APB+0x10>)
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	431f0000 	.word	0x431f0000

08002da8 <Motion_Get_Circle_MM>:

// 返回当前小车轮子转一圈的多少毫米
//Returns the number of millimeters the current car wheel has rotated once
float Motion_Get_Circle_MM(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
    return MECANUM_CIRCLE_MM;
 8002dac:	4b02      	ldr	r3, [pc, #8]	@ (8002db8 <Motion_Get_Circle_MM+0x10>)
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	434c33f8 	.word	0x434c33f8

08002dbc <Motion_Get_Encoder>:

// 获取编码器数据，并计算偏差脉冲数
//Obtain encoder data and calculate the number of deviation pulses
void Motion_Get_Encoder(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
    Encoder_Get_ALL(g_Encoder_All_Now);
 8002dc2:	4813      	ldr	r0, [pc, #76]	@ (8002e10 <Motion_Get_Encoder+0x54>)
 8002dc4:	f7ff fdde 	bl	8002984 <Encoder_Get_ALL>

    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	71fb      	strb	r3, [r7, #7]
 8002dcc:	e017      	b.n	8002dfe <Motion_Get_Encoder+0x42>
    {
        // 记录两次测试时间差的脉冲数
    	//Record the number of pulses between two test times
        g_Encoder_All_Offset[i] = g_Encoder_All_Now[i] - g_Encoder_All_Last[i];
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002e10 <Motion_Get_Encoder+0x54>)
 8002dd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8002e14 <Motion_Get_Encoder+0x58>)
 8002dda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	1a8a      	subs	r2, r1, r2
 8002de2:	490d      	ldr	r1, [pc, #52]	@ (8002e18 <Motion_Get_Encoder+0x5c>)
 8002de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        // 记录上次编码器数据
        //Record Last Encoder Data
        g_Encoder_All_Last[i] = g_Encoder_All_Now[i];
 8002de8:	79fa      	ldrb	r2, [r7, #7]
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4908      	ldr	r1, [pc, #32]	@ (8002e10 <Motion_Get_Encoder+0x54>)
 8002dee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002df2:	4908      	ldr	r1, [pc, #32]	@ (8002e14 <Motion_Get_Encoder+0x58>)
 8002df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (uint8_t i = 0; i < MAX_MOTOR; i++)
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	71fb      	strb	r3, [r7, #7]
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d9e4      	bls.n	8002dce <Motion_Get_Encoder+0x12>
    }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200004cc 	.word	0x200004cc
 8002e14:	200004dc 	.word	0x200004dc
 8002e18:	200004ec 	.word	0x200004ec

08002e1c <wheel_State>:
// 控制小车运动状态
// 速度控制：speed=0~1000。
//Control the movement status of the car.
//Speed control: speed=0-1000.
void wheel_State(uint8_t state, uint16_t speed)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	460a      	mov	r2, r1
 8002e26:	71fb      	strb	r3, [r7, #7]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80bb      	strh	r3, [r7, #4]
    g_speed_setup = speed;
 8002e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f2c <wheel_State+0x110>)
 8002e2e:	88bb      	ldrh	r3, [r7, #4]
 8002e30:	8013      	strh	r3, [r2, #0]
    switch (state)
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d873      	bhi.n	8002f20 <wheel_State+0x104>
 8002e38:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <wheel_State+0x24>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e61 	.word	0x08002e61
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e8b 	.word	0x08002e8b
 8002e4c:	08002e9f 	.word	0x08002e9f
 8002e50:	08002ebf 	.word	0x08002ebf
 8002e54:	08002ed9 	.word	0x08002ed9
 8002e58:	08002ef7 	.word	0x08002ef7
 8002e5c:	08002f19 	.word	0x08002f19
    {
    case MOTION_STOP:
        g_speed_setup = 0;
 8002e60:	4b32      	ldr	r3, [pc, #200]	@ (8002f2c <wheel_State+0x110>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	801a      	strh	r2, [r3, #0]
        Motion_Stop(speed == 0 ? STOP_FREE : STOP_BRAKE);
 8002e66:	88bb      	ldrh	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fe52 	bl	8002b1c <Motion_Stop>
        break;
 8002e78:	e053      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_RUN:
        wheel_Ctrl(speed, 0, 0);
 8002e7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f854 	bl	8002f30 <wheel_Ctrl>
        break;
 8002e88:	e04b      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_BACK:
        wheel_Ctrl(-speed, 0, 0);
 8002e8a:	88bb      	ldrh	r3, [r7, #4]
 8002e8c:	425b      	negs	r3, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f84a 	bl	8002f30 <wheel_Ctrl>
        break;
 8002e9c:	e041      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_LEFT:
    	wheel_Ctrl(speed/2, 0, -speed*2);
 8002e9e:	88bb      	ldrh	r3, [r7, #4]
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	b218      	sxth	r0, r3
 8002ea6:	88bb      	ldrh	r3, [r7, #4]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	03d2      	lsls	r2, r2, #15
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	f000 f83a 	bl	8002f30 <wheel_Ctrl>
        break;
 8002ebc:	e031      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_RIGHT:
    	wheel_Ctrl(speed/2, 0, speed*2);
 8002ebe:	88bb      	ldrh	r3, [r7, #4]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	b218      	sxth	r0, r3
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b21b      	sxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	f000 f82d 	bl	8002f30 <wheel_Ctrl>

        break;
 8002ed6:	e024      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_SPIN_LEFT:
        Motion_Set_Yaw_Adjust(0);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7ff fdb5 	bl	8002a48 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, speed * 5);
 8002ede:	88bb      	ldrh	r3, [r7, #4]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	b21b      	sxth	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	2100      	movs	r1, #0
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f000 f81e 	bl	8002f30 <wheel_Ctrl>
        break;
 8002ef4:	e015      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_SPIN_RIGHT:
        Motion_Set_Yaw_Adjust(0);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7ff fda6 	bl	8002a48 <Motion_Set_Yaw_Adjust>
        wheel_Ctrl(0, 0, -speed * 5);
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	461a      	mov	r2, r3
 8002f00:	0392      	lsls	r2, r2, #14
 8002f02:	1ad2      	subs	r2, r2, r3
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2000      	movs	r0, #0
 8002f12:	f000 f80d 	bl	8002f30 <wheel_Ctrl>
        break;
 8002f16:	e004      	b.n	8002f22 <wheel_State+0x106>
    case MOTION_BRAKE:
        Motion_Stop(STOP_BRAKE);
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f7ff fdff 	bl	8002b1c <Motion_Stop>
        break;
 8002f1e:	e000      	b.n	8002f22 <wheel_State+0x106>
    default:
        break;
 8002f20:	bf00      	nop
    }
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200004c8 	.word	0x200004c8

08002f30 <wheel_Ctrl>:


void wheel_Ctrl(int16_t V_x, int16_t V_y, int16_t V_z)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	80bb      	strh	r3, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	807b      	strh	r3, [r7, #2]
    float robot_APB = Motion_Get_APB();
 8002f42:	f7ff ff27 	bl	8002d94 <Motion_Get_APB>
 8002f46:	60f8      	str	r0, [r7, #12]
//    speed_lr = -V_y;
    speed_lr = 0;
 8002f48:	4b6f      	ldr	r3, [pc, #444]	@ (8003108 <wheel_Ctrl+0x1d8>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
    speed_fb = V_x;
 8002f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd ff2d 	bl	8000db4 <__aeabi_i2f>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800310c <wheel_Ctrl+0x1dc>)
 8002f5e:	6013      	str	r3, [r2, #0]
    speed_spin = (V_z / 1000.0f) * robot_APB;
 8002f60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd ff25 	bl	8000db4 <__aeabi_i2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4968      	ldr	r1, [pc, #416]	@ (8003110 <wheel_Ctrl+0x1e0>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe f828 	bl	8000fc4 <__aeabi_fdiv>
 8002f74:	4603      	mov	r3, r0
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd ff6f 	bl	8000e5c <__aeabi_fmul>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b64      	ldr	r3, [pc, #400]	@ (8003114 <wheel_Ctrl+0x1e4>)
 8002f84:	601a      	str	r2, [r3, #0]
    if (V_x == 0 && V_y == 0 && V_z == 0)
 8002f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <wheel_Ctrl+0x76>
 8002f8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <wheel_Ctrl+0x76>
 8002f96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <wheel_Ctrl+0x76>
    {
        Motion_Stop(STOP_BRAKE);
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f7ff fdbc 	bl	8002b1c <Motion_Stop>
        return;
 8002fa4:	e0ad      	b.n	8003102 <wheel_Ctrl+0x1d2>
    }

    speed_L1_setup = speed_fb + speed_lr + speed_spin;
 8002fa6:	4b59      	ldr	r3, [pc, #356]	@ (800310c <wheel_Ctrl+0x1dc>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a57      	ldr	r2, [pc, #348]	@ (8003108 <wheel_Ctrl+0x1d8>)
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd fe4b 	bl	8000c4c <__addsf3>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b56      	ldr	r3, [pc, #344]	@ (8003114 <wheel_Ctrl+0x1e4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7fd fe43 	bl	8000c4c <__addsf3>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe f90d 	bl	80011e8 <__aeabi_f2iz>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	4a51      	ldr	r2, [pc, #324]	@ (8003118 <wheel_Ctrl+0x1e8>)
 8002fd2:	6013      	str	r3, [r2, #0]
    speed_L2_setup = speed_fb - speed_lr + speed_spin;
 8002fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800310c <wheel_Ctrl+0x1dc>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8003108 <wheel_Ctrl+0x1d8>)
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fe32 	bl	8000c48 <__aeabi_fsub>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <wheel_Ctrl+0x1e4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	4610      	mov	r0, r2
 8002ff0:	f7fd fe2c 	bl	8000c4c <__addsf3>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f8f6 	bl	80011e8 <__aeabi_f2iz>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4a47      	ldr	r2, [pc, #284]	@ (800311c <wheel_Ctrl+0x1ec>)
 8003000:	6013      	str	r3, [r2, #0]
    speed_R1_setup = speed_fb - speed_lr - speed_spin;
 8003002:	4b42      	ldr	r3, [pc, #264]	@ (800310c <wheel_Ctrl+0x1dc>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a40      	ldr	r2, [pc, #256]	@ (8003108 <wheel_Ctrl+0x1d8>)
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fe1b 	bl	8000c48 <__aeabi_fsub>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	4b3f      	ldr	r3, [pc, #252]	@ (8003114 <wheel_Ctrl+0x1e4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f7fd fe13 	bl	8000c48 <__aeabi_fsub>
 8003022:	4603      	mov	r3, r0
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe f8df 	bl	80011e8 <__aeabi_f2iz>
 800302a:	4603      	mov	r3, r0
 800302c:	4a3c      	ldr	r2, [pc, #240]	@ (8003120 <wheel_Ctrl+0x1f0>)
 800302e:	6013      	str	r3, [r2, #0]
    speed_R2_setup = speed_fb + speed_lr - speed_spin;
 8003030:	4b36      	ldr	r3, [pc, #216]	@ (800310c <wheel_Ctrl+0x1dc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a34      	ldr	r2, [pc, #208]	@ (8003108 <wheel_Ctrl+0x1d8>)
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fe06 	bl	8000c4c <__addsf3>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	4b33      	ldr	r3, [pc, #204]	@ (8003114 <wheel_Ctrl+0x1e4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7fd fdfc 	bl	8000c48 <__aeabi_fsub>
 8003050:	4603      	mov	r3, r0
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f8c8 	bl	80011e8 <__aeabi_f2iz>
 8003058:	4603      	mov	r3, r0
 800305a:	4a32      	ldr	r2, [pc, #200]	@ (8003124 <wheel_Ctrl+0x1f4>)
 800305c:	6013      	str	r3, [r2, #0]

    if (speed_L1_setup > 1000)
 800305e:	4b2e      	ldr	r3, [pc, #184]	@ (8003118 <wheel_Ctrl+0x1e8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003066:	dd03      	ble.n	8003070 <wheel_Ctrl+0x140>
        speed_L1_setup = 1000;
 8003068:	4b2b      	ldr	r3, [pc, #172]	@ (8003118 <wheel_Ctrl+0x1e8>)
 800306a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800306e:	601a      	str	r2, [r3, #0]
    if (speed_L1_setup < -1000)
 8003070:	4b29      	ldr	r3, [pc, #164]	@ (8003118 <wheel_Ctrl+0x1e8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8003078:	da02      	bge.n	8003080 <wheel_Ctrl+0x150>
        speed_L1_setup = -1000;
 800307a:	4b27      	ldr	r3, [pc, #156]	@ (8003118 <wheel_Ctrl+0x1e8>)
 800307c:	4a2a      	ldr	r2, [pc, #168]	@ (8003128 <wheel_Ctrl+0x1f8>)
 800307e:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup > 1000)
 8003080:	4b26      	ldr	r3, [pc, #152]	@ (800311c <wheel_Ctrl+0x1ec>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003088:	dd03      	ble.n	8003092 <wheel_Ctrl+0x162>
        speed_L2_setup = 1000;
 800308a:	4b24      	ldr	r3, [pc, #144]	@ (800311c <wheel_Ctrl+0x1ec>)
 800308c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003090:	601a      	str	r2, [r3, #0]
    if (speed_L2_setup < -1000)
 8003092:	4b22      	ldr	r3, [pc, #136]	@ (800311c <wheel_Ctrl+0x1ec>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 800309a:	da02      	bge.n	80030a2 <wheel_Ctrl+0x172>
        speed_L2_setup = -1000;
 800309c:	4b1f      	ldr	r3, [pc, #124]	@ (800311c <wheel_Ctrl+0x1ec>)
 800309e:	4a22      	ldr	r2, [pc, #136]	@ (8003128 <wheel_Ctrl+0x1f8>)
 80030a0:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup > 1000)
 80030a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <wheel_Ctrl+0x1f0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030aa:	dd03      	ble.n	80030b4 <wheel_Ctrl+0x184>
        speed_R1_setup = 1000;
 80030ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <wheel_Ctrl+0x1f0>)
 80030ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030b2:	601a      	str	r2, [r3, #0]
    if (speed_R1_setup < -1000)
 80030b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <wheel_Ctrl+0x1f0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80030bc:	da02      	bge.n	80030c4 <wheel_Ctrl+0x194>
        speed_R1_setup = -1000;
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <wheel_Ctrl+0x1f0>)
 80030c0:	4a19      	ldr	r2, [pc, #100]	@ (8003128 <wheel_Ctrl+0x1f8>)
 80030c2:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup > 1000)
 80030c4:	4b17      	ldr	r3, [pc, #92]	@ (8003124 <wheel_Ctrl+0x1f4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030cc:	dd03      	ble.n	80030d6 <wheel_Ctrl+0x1a6>
        speed_R2_setup = 1000;
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <wheel_Ctrl+0x1f4>)
 80030d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030d4:	601a      	str	r2, [r3, #0]
    if (speed_R2_setup < -1000)
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <wheel_Ctrl+0x1f4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80030de:	da02      	bge.n	80030e6 <wheel_Ctrl+0x1b6>
        speed_R2_setup = -1000;
 80030e0:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <wheel_Ctrl+0x1f4>)
 80030e2:	4a11      	ldr	r2, [pc, #68]	@ (8003128 <wheel_Ctrl+0x1f8>)
 80030e4:	601a      	str	r2, [r3, #0]

    Motion_Set_Speed(speed_L1_setup, speed_L2_setup, speed_R1_setup, speed_R2_setup);
 80030e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <wheel_Ctrl+0x1e8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b218      	sxth	r0, r3
 80030ec:	4b0b      	ldr	r3, [pc, #44]	@ (800311c <wheel_Ctrl+0x1ec>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b219      	sxth	r1, r3
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <wheel_Ctrl+0x1f0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	b21a      	sxth	r2, r3
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <wheel_Ctrl+0x1f4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	f7ff fd2d 	bl	8002b5c <Motion_Set_Speed>
}
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	200004ac 	.word	0x200004ac
 800310c:	200004b0 	.word	0x200004b0
 8003110:	447a0000 	.word	0x447a0000
 8003114:	200004b4 	.word	0x200004b4
 8003118:	200004b8 	.word	0x200004b8
 800311c:	200004bc 	.word	0x200004bc
 8003120:	200004c0 	.word	0x200004c0
 8003124:	200004c4 	.word	0x200004c4
 8003128:	fffffc18 	.word	0xfffffc18

0800312c <Motion_Handle>:

// 运动控制句柄，每10ms调用一次，主要处理速度相关的数据
//Motion control handle, called every 10ms, mainly processing speed related data
void Motion_Handle(void)
{
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	af00      	add	r7, sp, #0
    Motion_Get_Speed(&car_data);
 8003130:	4814      	ldr	r0, [pc, #80]	@ (8003184 <Motion_Handle+0x58>)
 8003132:	f7ff fd57 	bl	8002be4 <Motion_Get_Speed>

    if (g_start_ctrl)
 8003136:	4b14      	ldr	r3, [pc, #80]	@ (8003188 <Motion_Handle+0x5c>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <Motion_Handle+0x54>
    {
        Motion_Set_Pwm(motor_data.speed_pwm[0], motor_data.speed_pwm[1], motor_data.speed_pwm[2], motor_data.speed_pwm[3]);
 800313e:	4b13      	ldr	r3, [pc, #76]	@ (800318c <Motion_Handle+0x60>)
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f850 	bl	80011e8 <__aeabi_f2iz>
 8003148:	4603      	mov	r3, r0
 800314a:	b21c      	sxth	r4, r3
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <Motion_Handle+0x60>)
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe f849 	bl	80011e8 <__aeabi_f2iz>
 8003156:	4603      	mov	r3, r0
 8003158:	b21d      	sxth	r5, r3
 800315a:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <Motion_Handle+0x60>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe f842 	bl	80011e8 <__aeabi_f2iz>
 8003164:	4603      	mov	r3, r0
 8003166:	b21e      	sxth	r6, r3
 8003168:	4b08      	ldr	r3, [pc, #32]	@ (800318c <Motion_Handle+0x60>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fe f83b 	bl	80011e8 <__aeabi_f2iz>
 8003172:	4603      	mov	r3, r0
 8003174:	b21b      	sxth	r3, r3
 8003176:	4632      	mov	r2, r6
 8003178:	4629      	mov	r1, r5
 800317a:	4620      	mov	r0, r4
 800317c:	f7ff fc7a 	bl	8002a74 <Motion_Set_Pwm>
    }
}
 8003180:	bf00      	nop
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003184:	20000500 	.word	0x20000500
 8003188:	200004fc 	.word	0x200004fc
 800318c:	20000508 	.word	0x20000508

08003190 <PID_Param_Init>:
PID pid_Yaw = {0, 0.4, 0, 0.1, 0, 0, 0};

// 初始化PID参数
//Initialize PID parameters
void PID_Param_Init(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
    /* 速度相关初始化参数 */
	//Speed dependent initialization parameters
    for (int i = 0; i < MAX_MOTOR; i++)
 8003196:	2300      	movs	r3, #0
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	e062      	b.n	8003262 <PID_Param_Init+0xd2>
    {
        pid_motor[i].target_val = 0.0;
 800319c:	493a      	ldr	r1, [pc, #232]	@ (8003288 <PID_Param_Init+0xf8>)
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
        pid_motor[i].pwm_output = 0.0;
 80031b0:	4935      	ldr	r1, [pc, #212]	@ (8003288 <PID_Param_Init+0xf8>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	3308      	adds	r3, #8
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
        pid_motor[i].err = 0.0;
 80031c6:	4930      	ldr	r1, [pc, #192]	@ (8003288 <PID_Param_Init+0xf8>)
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	3318      	adds	r3, #24
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_last = 0.0;
 80031dc:	492a      	ldr	r1, [pc, #168]	@ (8003288 <PID_Param_Init+0xf8>)
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	440b      	add	r3, r1
 80031ea:	331c      	adds	r3, #28
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
        pid_motor[i].err_next = 0.0;
 80031f2:	4925      	ldr	r1, [pc, #148]	@ (8003288 <PID_Param_Init+0xf8>)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	3320      	adds	r3, #32
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
        pid_motor[i].integral = 0.0;
 8003208:	491f      	ldr	r1, [pc, #124]	@ (8003288 <PID_Param_Init+0xf8>)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	3324      	adds	r3, #36	@ 0x24
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	601a      	str	r2, [r3, #0]

        pid_motor[i].Kp = PID_DEF_KP;
 800321e:	491a      	ldr	r1, [pc, #104]	@ (8003288 <PID_Param_Init+0xf8>)
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	330c      	adds	r3, #12
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <PID_Param_Init+0xfc>)
 8003230:	601a      	str	r2, [r3, #0]
        pid_motor[i].Ki = PID_DEF_KI;
 8003232:	4915      	ldr	r1, [pc, #84]	@ (8003288 <PID_Param_Init+0xf8>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	3310      	adds	r3, #16
 8003242:	4a13      	ldr	r2, [pc, #76]	@ (8003290 <PID_Param_Init+0x100>)
 8003244:	601a      	str	r2, [r3, #0]
        pid_motor[i].Kd = PID_DEF_KD;
 8003246:	4910      	ldr	r1, [pc, #64]	@ (8003288 <PID_Param_Init+0xf8>)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	3314      	adds	r3, #20
 8003256:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800325a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTOR; i++)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3301      	adds	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b03      	cmp	r3, #3
 8003266:	dd99      	ble.n	800319c <PID_Param_Init+0xc>
    }

    pid_Yaw.Proportion = PID_YAW_DEF_KP;
 8003268:	4b0a      	ldr	r3, [pc, #40]	@ (8003294 <PID_Param_Init+0x104>)
 800326a:	4a0b      	ldr	r2, [pc, #44]	@ (8003298 <PID_Param_Init+0x108>)
 800326c:	605a      	str	r2, [r3, #4]
    pid_Yaw.Integral = PID_YAW_DEF_KI;
 800326e:	4b09      	ldr	r3, [pc, #36]	@ (8003294 <PID_Param_Init+0x104>)
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
    pid_Yaw.Derivative = PID_YAW_DEF_KD;
 8003276:	4b07      	ldr	r3, [pc, #28]	@ (8003294 <PID_Param_Init+0x104>)
 8003278:	4a08      	ldr	r2, [pc, #32]	@ (800329c <PID_Param_Init+0x10c>)
 800327a:	60da      	str	r2, [r3, #12]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000534 	.word	0x20000534
 800328c:	3f4ccccd 	.word	0x3f4ccccd
 8003290:	3d75c28f 	.word	0x3d75c28f
 8003294:	20000030 	.word	0x20000030
 8003298:	3ecccccd 	.word	0x3ecccccd
 800329c:	3dcccccd 	.word	0x3dcccccd

080032a0 <PID_Incre_Calc>:
    return pid->target_val; // Set the current target value 设置当前的目标值
}

// Incremental PID calculation formula 增量式PID计算公式
float PID_Incre_Calc(PID_t *pid, float actual_val)
{
 80032a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
    /*计算目标值与实际值的误差*/
	//Calculate the error between the target value and the actual value
    pid->err = pid->target_val - actual_val;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fcc8 	bl	8000c48 <__aeabi_fsub>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
    /*PID算法实现*/
    //PID algorithm implementation
    pid->pwm_output += pid->Kp * (pid->err - pid->err_next) + pid->Ki * pid->err + pid->Kd * (pid->err - 2 * pid->err_next + pid->err_last);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689c      	ldr	r4, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68dd      	ldr	r5, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7fd fcb8 	bl	8000c48 <__aeabi_fsub>
 80032d8:	4603      	mov	r3, r0
 80032da:	4619      	mov	r1, r3
 80032dc:	4628      	mov	r0, r5
 80032de:	f7fd fdbd 	bl	8000e5c <__aeabi_fmul>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461d      	mov	r5, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7fd fdb3 	bl	8000e5c <__aeabi_fmul>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4619      	mov	r1, r3
 80032fa:	4628      	mov	r0, r5
 80032fc:	f7fd fca6 	bl	8000c4c <__addsf3>
 8003300:	4603      	mov	r3, r0
 8003302:	4698      	mov	r8, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695d      	ldr	r5, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699e      	ldr	r6, [r3, #24]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4619      	mov	r1, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd fc9a 	bl	8000c4c <__addsf3>
 8003318:	4603      	mov	r3, r0
 800331a:	4619      	mov	r1, r3
 800331c:	4630      	mov	r0, r6
 800331e:	f7fd fc93 	bl	8000c48 <__aeabi_fsub>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f7fd fc8d 	bl	8000c4c <__addsf3>
 8003332:	4603      	mov	r3, r0
 8003334:	4619      	mov	r1, r3
 8003336:	4628      	mov	r0, r5
 8003338:	f7fd fd90 	bl	8000e5c <__aeabi_fmul>
 800333c:	4603      	mov	r3, r0
 800333e:	4619      	mov	r1, r3
 8003340:	4640      	mov	r0, r8
 8003342:	f7fd fc83 	bl	8000c4c <__addsf3>
 8003346:	4603      	mov	r3, r0
 8003348:	4619      	mov	r1, r3
 800334a:	4620      	mov	r0, r4
 800334c:	f7fd fc7e 	bl	8000c4c <__addsf3>
 8003350:	4603      	mov	r3, r0
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]
    /*传递误差*/
    //transmission error
    pid->err_last = pid->err_next;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	61da      	str	r2, [r3, #28]
    pid->err_next = pid->err;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	621a      	str	r2, [r3, #32]

    /*返回PWM输出值*/
    /*Return PWM output value*/

    if (pid->pwm_output > (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	490e      	ldr	r1, [pc, #56]	@ (80033a8 <PID_Incre_Calc+0x108>)
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd ff30 	bl	80011d4 <__aeabi_fcmpgt>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <PID_Incre_Calc+0xe0>
        pid->pwm_output = (MOTOR_MAX_PULSE - MOTOR_IGNORE_PULSE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a0a      	ldr	r2, [pc, #40]	@ (80033a8 <PID_Incre_Calc+0x108>)
 800337e:	609a      	str	r2, [r3, #8]
    if (pid->pwm_output < (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4909      	ldr	r1, [pc, #36]	@ (80033ac <PID_Incre_Calc+0x10c>)
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd ff06 	bl	8001198 <__aeabi_fcmplt>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <PID_Incre_Calc+0xf8>
        pid->pwm_output = (MOTOR_IGNORE_PULSE - MOTOR_MAX_PULSE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a05      	ldr	r2, [pc, #20]	@ (80033ac <PID_Incre_Calc+0x10c>)
 8003396:	609a      	str	r2, [r3, #8]

    return pid->pwm_output;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033a6:	bf00      	nop
 80033a8:	44c80000 	.word	0x44c80000
 80033ac:	c4c80000 	.word	0xc4c80000

080033b0 <PID_Calc_Motor>:
    return pid->output_val;
}

// PID计算输出值 PID calculation output value
void PID_Calc_Motor(motor_data_t *motor)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
    // {
    //     pid_out[i] = PID_Location_Calc(&pid_motor[i], 0);
    //     PID_Set_Motor_Target(i, pid_out[i]);
    // }

    for (i = 0; i < MAX_MOTOR; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e016      	b.n	80033ec <PID_Calc_Motor+0x3c>
    {
        motor->speed_pwm[i] = PID_Incre_Calc(&pid_motor[i], motor->speed_mm_s[i]);
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4a0c      	ldr	r2, [pc, #48]	@ (80033fc <PID_Calc_Motor+0x4c>)
 80033ca:	1898      	adds	r0, r3, r2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7ff ff63 	bl	80032a0 <PID_Incre_Calc>
 80033da:	4601      	mov	r1, r0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	3204      	adds	r2, #4
 80033e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < MAX_MOTOR; i++)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3301      	adds	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	dde5      	ble.n	80033be <PID_Calc_Motor+0xe>
    }
}
 80033f2:	bf00      	nop
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000534 	.word	0x20000534

08003400 <PID_Clear_Motor>:
}

// 清除PID数据
//Clear PID data
void PID_Clear_Motor(uint8_t motor_id)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d87b      	bhi.n	8003508 <PID_Clear_Motor+0x108>
        return;

    if (motor_id == MAX_MOTOR)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d140      	bne.n	8003498 <PID_Clear_Motor+0x98>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e039      	b.n	8003490 <PID_Clear_Motor+0x90>
        {
            pid_motor[i].pwm_output = 0.0;
 800341c:	493d      	ldr	r1, [pc, #244]	@ (8003514 <PID_Clear_Motor+0x114>)
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	440b      	add	r3, r1
 800342a:	3308      	adds	r3, #8
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
            pid_motor[i].err = 0.0;
 8003432:	4938      	ldr	r1, [pc, #224]	@ (8003514 <PID_Clear_Motor+0x114>)
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	440b      	add	r3, r1
 8003440:	3318      	adds	r3, #24
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_last = 0.0;
 8003448:	4932      	ldr	r1, [pc, #200]	@ (8003514 <PID_Clear_Motor+0x114>)
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	440b      	add	r3, r1
 8003456:	331c      	adds	r3, #28
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
            pid_motor[i].err_next = 0.0;
 800345e:	492d      	ldr	r1, [pc, #180]	@ (8003514 <PID_Clear_Motor+0x114>)
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	3320      	adds	r3, #32
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
            pid_motor[i].integral = 0.0;
 8003474:	4927      	ldr	r1, [pc, #156]	@ (8003514 <PID_Clear_Motor+0x114>)
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	3324      	adds	r3, #36	@ 0x24
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3301      	adds	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b03      	cmp	r3, #3
 8003494:	ddc2      	ble.n	800341c <PID_Clear_Motor+0x1c>
 8003496:	e038      	b.n	800350a <PID_Clear_Motor+0x10a>
        }
    }
    else
    {
        pid_motor[motor_id].pwm_output = 0.0;
 8003498:	79fa      	ldrb	r2, [r7, #7]
 800349a:	491e      	ldr	r1, [pc, #120]	@ (8003514 <PID_Clear_Motor+0x114>)
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	440b      	add	r3, r1
 80034a6:	3308      	adds	r3, #8
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err = 0.0;
 80034ae:	79fa      	ldrb	r2, [r7, #7]
 80034b0:	4918      	ldr	r1, [pc, #96]	@ (8003514 <PID_Clear_Motor+0x114>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	440b      	add	r3, r1
 80034bc:	3318      	adds	r3, #24
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_last = 0.0;
 80034c4:	79fa      	ldrb	r2, [r7, #7]
 80034c6:	4913      	ldr	r1, [pc, #76]	@ (8003514 <PID_Clear_Motor+0x114>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	331c      	adds	r3, #28
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].err_next = 0.0;
 80034da:	79fa      	ldrb	r2, [r7, #7]
 80034dc:	490d      	ldr	r1, [pc, #52]	@ (8003514 <PID_Clear_Motor+0x114>)
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	440b      	add	r3, r1
 80034e8:	3320      	adds	r3, #32
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
        pid_motor[motor_id].integral = 0.0;
 80034f0:	79fa      	ldrb	r2, [r7, #7]
 80034f2:	4908      	ldr	r1, [pc, #32]	@ (8003514 <PID_Clear_Motor+0x114>)
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	440b      	add	r3, r1
 80034fe:	3324      	adds	r3, #36	@ 0x24
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e000      	b.n	800350a <PID_Clear_Motor+0x10a>
        return;
 8003508:	bf00      	nop
    }
}
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000534 	.word	0x20000534

08003518 <PID_Set_Motor_Target>:

// 设置PID目标速度，单位为：mm/s
//Set PID target speed in mm/s
void PID_Set_Motor_Target(uint8_t motor_id, float target)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	71fb      	strb	r3, [r7, #7]
    if (motor_id > MAX_MOTOR)
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d81f      	bhi.n	800356a <PID_Set_Motor_Target+0x52>
        return;

    if (motor_id == MAX_MOTOR)
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	2b04      	cmp	r3, #4
 800352e:	d112      	bne.n	8003556 <PID_Set_Motor_Target+0x3e>
    {
        for (int i = 0; i < MAX_MOTOR; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e00b      	b.n	800354e <PID_Set_Motor_Target+0x36>
        {
            pid_motor[i].target_val = target;
 8003536:	490f      	ldr	r1, [pc, #60]	@ (8003574 <PID_Set_Motor_Target+0x5c>)
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < MAX_MOTOR; i++)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b03      	cmp	r3, #3
 8003552:	ddf0      	ble.n	8003536 <PID_Set_Motor_Target+0x1e>
 8003554:	e00a      	b.n	800356c <PID_Set_Motor_Target+0x54>
        }
    }
    else
    {
        pid_motor[motor_id].target_val = target;
 8003556:	79fa      	ldrb	r2, [r7, #7]
 8003558:	4906      	ldr	r1, [pc, #24]	@ (8003574 <PID_Set_Motor_Target+0x5c>)
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	440b      	add	r3, r1
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e000      	b.n	800356c <PID_Set_Motor_Target+0x54>
        return;
 800356a:	bf00      	nop
    }
}
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000534 	.word	0x20000534

08003578 <Motor_Ignore_Dead_Zone>:

#include "bsp_motor.h"

// Ignore PWM dead band  忽略PWM信号死区
static int16_t Motor_Ignore_Dead_Zone(int16_t pulse)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
    if (pulse > 0)
 8003582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003586:	2b00      	cmp	r3, #0
 8003588:	dd05      	ble.n	8003596 <Motor_Ignore_Dead_Zone+0x1e>
        return pulse + MOTOR_IGNORE_PULSE;
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8003590:	b29b      	uxth	r3, r3
 8003592:	b21b      	sxth	r3, r3
 8003594:	e00a      	b.n	80035ac <Motor_Ignore_Dead_Zone+0x34>
    if (pulse < 0)
 8003596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	da05      	bge.n	80035aa <Motor_Ignore_Dead_Zone+0x32>
        return pulse - MOTOR_IGNORE_PULSE;
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b21b      	sxth	r3, r3
 80035a8:	e000      	b.n	80035ac <Motor_Ignore_Dead_Zone+0x34>
    return 0;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
	...

080035b8 <Motor_Stop>:

// All motors stopped  所有电机停止
void Motor_Stop(uint8_t brake)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	71fb      	strb	r3, [r7, #7]
    if (brake != 0)
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <Motor_Stop+0x14>
        brake = 1;
 80035c8:	2301      	movs	r3, #1
 80035ca:	71fb      	strb	r3, [r7, #7]
    PWM_M1_A = brake * MOTOR_MAX_PULSE;
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80035d2:	fb03 f202 	mul.w	r2, r3, r2
 80035d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003648 <Motor_Stop+0x90>)
 80035d8:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M1_B = brake * MOTOR_MAX_PULSE;
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80035e0:	fb03 f202 	mul.w	r2, r3, r2
 80035e4:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <Motor_Stop+0x90>)
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M2_A = brake * MOTOR_MAX_PULSE;
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80035ee:	fb03 f202 	mul.w	r2, r3, r2
 80035f2:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <Motor_Stop+0x90>)
 80035f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M2_B = brake * MOTOR_MAX_PULSE;
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80035fc:	fb03 f202 	mul.w	r2, r3, r2
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <Motor_Stop+0x90>)
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
    PWM_M3_A = brake * MOTOR_MAX_PULSE;
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800360a:	fb03 f202 	mul.w	r2, r3, r2
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <Motor_Stop+0x94>)
 8003610:	635a      	str	r2, [r3, #52]	@ 0x34
    PWM_M3_B = brake * MOTOR_MAX_PULSE;
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003618:	fb03 f202 	mul.w	r2, r3, r2
 800361c:	4b0b      	ldr	r3, [pc, #44]	@ (800364c <Motor_Stop+0x94>)
 800361e:	639a      	str	r2, [r3, #56]	@ 0x38
    PWM_M4_A = brake * MOTOR_MAX_PULSE;
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003626:	fb03 f202 	mul.w	r2, r3, r2
 800362a:	4b08      	ldr	r3, [pc, #32]	@ (800364c <Motor_Stop+0x94>)
 800362c:	63da      	str	r2, [r3, #60]	@ 0x3c
    PWM_M4_B = brake * MOTOR_MAX_PULSE;
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003634:	fb03 f202 	mul.w	r2, r3, r2
 8003638:	4b04      	ldr	r3, [pc, #16]	@ (800364c <Motor_Stop+0x94>)
 800363a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40013400 	.word	0x40013400
 800364c:	40012c00 	.word	0x40012c00

08003650 <Motor_Set_Pwm>:

// 设置电机速度，speed:±（3600-MOTOR_IGNORE_PULSE）, 0为停止
// Set motor speed, speed:± (3600-MOTOR_IGNORE_PULSE), 0 indicates stop
void Motor_Set_Pwm(uint8_t id, int16_t speed)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	460a      	mov	r2, r1
 800365a:	71fb      	strb	r3, [r7, #7]
 800365c:	4613      	mov	r3, r2
 800365e:	80bb      	strh	r3, [r7, #4]
    int16_t pulse = Motor_Ignore_Dead_Zone(speed);
 8003660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff87 	bl	8003578 <Motor_Ignore_Dead_Zone>
 800366a:	4603      	mov	r3, r0
 800366c:	81fb      	strh	r3, [r7, #14]
    // Limit input  限制输入
    if (pulse >= MOTOR_MAX_PULSE)
 800366e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003672:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8003676:	db02      	blt.n	800367e <Motor_Set_Pwm+0x2e>
        pulse = MOTOR_MAX_PULSE;
 8003678:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800367c:	81fb      	strh	r3, [r7, #14]
    if (pulse <= -MOTOR_MAX_PULSE)
 800367e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003682:	f513 6f61 	cmn.w	r3, #3600	@ 0xe10
 8003686:	dc02      	bgt.n	800368e <Motor_Set_Pwm+0x3e>
        pulse = -MOTOR_MAX_PULSE;
 8003688:	f24f 13f0 	movw	r3, #61936	@ 0xf1f0
 800368c:	81fb      	strh	r3, [r7, #14]

    switch (id)
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d867      	bhi.n	8003764 <Motor_Set_Pwm+0x114>
 8003694:	a201      	add	r2, pc, #4	@ (adr r2, 800369c <Motor_Set_Pwm+0x4c>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036df 	.word	0x080036df
 80036a4:	08003711 	.word	0x08003711
 80036a8:	0800373b 	.word	0x0800373b
    {
    case MOTOR_ID_M1:
    {
        pulse = -pulse;
 80036ac:	89fb      	ldrh	r3, [r7, #14]
 80036ae:	425b      	negs	r3, r3
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80036b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db07      	blt.n	80036cc <Motor_Set_Pwm+0x7c>
        {
            PWM_M1_A = pulse;
 80036bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003770 <Motor_Set_Pwm+0x120>)
 80036be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036c2:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M1_B = 0;
 80036c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <Motor_Set_Pwm+0x120>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M1_A = 0;
            PWM_M1_B = -pulse;
        }
        break;
 80036ca:	e04c      	b.n	8003766 <Motor_Set_Pwm+0x116>
            PWM_M1_A = 0;
 80036cc:	4b28      	ldr	r3, [pc, #160]	@ (8003770 <Motor_Set_Pwm+0x120>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M1_B = -pulse;
 80036d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036d6:	425a      	negs	r2, r3
 80036d8:	4b25      	ldr	r3, [pc, #148]	@ (8003770 <Motor_Set_Pwm+0x120>)
 80036da:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80036dc:	e043      	b.n	8003766 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M2:
    {
        pulse = -pulse;
 80036de:	89fb      	ldrh	r3, [r7, #14]
 80036e0:	425b      	negs	r3, r3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	81fb      	strh	r3, [r7, #14]
        if (pulse >= 0)
 80036e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db07      	blt.n	80036fe <Motor_Set_Pwm+0xae>
        {
            PWM_M2_A = pulse;
 80036ee:	4a20      	ldr	r2, [pc, #128]	@ (8003770 <Motor_Set_Pwm+0x120>)
 80036f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M2_B = 0;
 80036f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <Motor_Set_Pwm+0x120>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M2_A = 0;
            PWM_M2_B = -pulse;
        }
        break;
 80036fc:	e033      	b.n	8003766 <Motor_Set_Pwm+0x116>
            PWM_M2_A = 0;
 80036fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <Motor_Set_Pwm+0x120>)
 8003700:	2200      	movs	r2, #0
 8003702:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M2_B = -pulse;
 8003704:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003708:	425a      	negs	r2, r3
 800370a:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <Motor_Set_Pwm+0x120>)
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 800370e:	e02a      	b.n	8003766 <Motor_Set_Pwm+0x116>
    }

    case MOTOR_ID_M3:
    {

        if (pulse >= 0)
 8003710:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003714:	2b00      	cmp	r3, #0
 8003716:	db07      	blt.n	8003728 <Motor_Set_Pwm+0xd8>
        {
            PWM_M3_A = pulse;
 8003718:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <Motor_Set_Pwm+0x124>)
 800371a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800371e:	6353      	str	r3, [r2, #52]	@ 0x34
            PWM_M3_B = 0;
 8003720:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <Motor_Set_Pwm+0x124>)
 8003722:	2200      	movs	r2, #0
 8003724:	639a      	str	r2, [r3, #56]	@ 0x38
        else
        {
            PWM_M3_A = 0;
            PWM_M3_B = -pulse;
        }
        break;
 8003726:	e01e      	b.n	8003766 <Motor_Set_Pwm+0x116>
            PWM_M3_A = 0;
 8003728:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <Motor_Set_Pwm+0x124>)
 800372a:	2200      	movs	r2, #0
 800372c:	635a      	str	r2, [r3, #52]	@ 0x34
            PWM_M3_B = -pulse;
 800372e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003732:	425a      	negs	r2, r3
 8003734:	4b0f      	ldr	r3, [pc, #60]	@ (8003774 <Motor_Set_Pwm+0x124>)
 8003736:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003738:	e015      	b.n	8003766 <Motor_Set_Pwm+0x116>
    }
    case MOTOR_ID_M4:
    {

        if (pulse >= 0)
 800373a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800373e:	2b00      	cmp	r3, #0
 8003740:	db07      	blt.n	8003752 <Motor_Set_Pwm+0x102>
        {
            PWM_M4_A = pulse;
 8003742:	4a0c      	ldr	r2, [pc, #48]	@ (8003774 <Motor_Set_Pwm+0x124>)
 8003744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003748:	63d3      	str	r3, [r2, #60]	@ 0x3c
            PWM_M4_B = 0;
 800374a:	4b0a      	ldr	r3, [pc, #40]	@ (8003774 <Motor_Set_Pwm+0x124>)
 800374c:	2200      	movs	r2, #0
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40
        else
        {
            PWM_M4_A = 0;
            PWM_M4_B = -pulse;
        }
        break;
 8003750:	e009      	b.n	8003766 <Motor_Set_Pwm+0x116>
            PWM_M4_A = 0;
 8003752:	4b08      	ldr	r3, [pc, #32]	@ (8003774 <Motor_Set_Pwm+0x124>)
 8003754:	2200      	movs	r2, #0
 8003756:	63da      	str	r2, [r3, #60]	@ 0x3c
            PWM_M4_B = -pulse;
 8003758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800375c:	425a      	negs	r2, r3
 800375e:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <Motor_Set_Pwm+0x124>)
 8003760:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8003762:	e000      	b.n	8003766 <Motor_Set_Pwm+0x116>
    }

    default:
        break;
 8003764:	bf00      	nop
    }
}
 8003766:	bf00      	nop
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40013400 	.word	0x40013400
 8003774:	40012c00 	.word	0x40012c00

08003778 <Bsp_Tim_Init>:
/*
 * 初始化定时器123458 Initialize TIM1.2.3.4.5.8
 * */
void Bsp_Tim_Init(void)

{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
	// 启动tim1的pwm输出 Start the pwm output of tim1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800377c:	2100      	movs	r1, #0
 800377e:	4824      	ldr	r0, [pc, #144]	@ (8003810 <Bsp_Tim_Init+0x98>)
 8003780:	f003 faf4 	bl	8006d6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003784:	2104      	movs	r1, #4
 8003786:	4822      	ldr	r0, [pc, #136]	@ (8003810 <Bsp_Tim_Init+0x98>)
 8003788:	f003 faf0 	bl	8006d6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800378c:	2108      	movs	r1, #8
 800378e:	4820      	ldr	r0, [pc, #128]	@ (8003810 <Bsp_Tim_Init+0x98>)
 8003790:	f003 faec 	bl	8006d6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003794:	210c      	movs	r1, #12
 8003796:	481e      	ldr	r0, [pc, #120]	@ (8003810 <Bsp_Tim_Init+0x98>)
 8003798:	f003 fae8 	bl	8006d6c <HAL_TIM_PWM_Start>

	// 启动tim8的pwm输出 Start the pwm output of tim8
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800379c:	2100      	movs	r1, #0
 800379e:	481d      	ldr	r0, [pc, #116]	@ (8003814 <Bsp_Tim_Init+0x9c>)
 80037a0:	f003 fae4 	bl	8006d6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80037a4:	2104      	movs	r1, #4
 80037a6:	481b      	ldr	r0, [pc, #108]	@ (8003814 <Bsp_Tim_Init+0x9c>)
 80037a8:	f003 fae0 	bl	8006d6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80037ac:	2108      	movs	r1, #8
 80037ae:	4819      	ldr	r0, [pc, #100]	@ (8003814 <Bsp_Tim_Init+0x9c>)
 80037b0:	f003 fadc 	bl	8006d6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80037b4:	210c      	movs	r1, #12
 80037b6:	4817      	ldr	r0, [pc, #92]	@ (8003814 <Bsp_Tim_Init+0x9c>)
 80037b8:	f003 fad8 	bl	8006d6c <HAL_TIM_PWM_Start>

	TIM2->CNT = 0x7fff;
 80037bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim2的编码器模式 Start the encoder mode of tim2
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80037c6:	2104      	movs	r1, #4
 80037c8:	4813      	ldr	r0, [pc, #76]	@ (8003818 <Bsp_Tim_Init+0xa0>)
 80037ca:	f003 fd9b 	bl	8007304 <HAL_TIM_Encoder_Start>

	TIM3->CNT = 0x7fff;
 80037ce:	4b13      	ldr	r3, [pc, #76]	@ (800381c <Bsp_Tim_Init+0xa4>)
 80037d0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim3的编码器模式 Start the encoder mode of tim3
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80037d6:	2104      	movs	r1, #4
 80037d8:	4811      	ldr	r0, [pc, #68]	@ (8003820 <Bsp_Tim_Init+0xa8>)
 80037da:	f003 fd93 	bl	8007304 <HAL_TIM_Encoder_Start>

	TIM4->CNT = 0x7fff;
 80037de:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <Bsp_Tim_Init+0xac>)
 80037e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80037e4:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim4的编码器模式 Start the encoder mode of tim4
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80037e6:	2104      	movs	r1, #4
 80037e8:	480f      	ldr	r0, [pc, #60]	@ (8003828 <Bsp_Tim_Init+0xb0>)
 80037ea:	f003 fd8b 	bl	8007304 <HAL_TIM_Encoder_Start>

	TIM5->CNT = 0x7fff;
 80037ee:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <Bsp_Tim_Init+0xb4>)
 80037f0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80037f4:	625a      	str	r2, [r3, #36]	@ 0x24
	// 启动tim5的编码器模式 Start the encoder mode of tim5
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80037f6:	2104      	movs	r1, #4
 80037f8:	480d      	ldr	r0, [pc, #52]	@ (8003830 <Bsp_Tim_Init+0xb8>)
 80037fa:	f003 fd83 	bl	8007304 <HAL_TIM_Encoder_Start>


	//启动定时6中断
	HAL_TIM_Base_Start_IT(&htim6);
 80037fe:	480d      	ldr	r0, [pc, #52]	@ (8003834 <Bsp_Tim_Init+0xbc>)
 8003800:	f003 f944 	bl	8006a8c <HAL_TIM_Base_Start_IT>

	//Init Timer 7 for Ultrason
	HAL_TIM_Base_Start_IT(&htim7);
 8003804:	480c      	ldr	r0, [pc, #48]	@ (8003838 <Bsp_Tim_Init+0xc0>)
 8003806:	f003 f941 	bl	8006a8c <HAL_TIM_Base_Start_IT>
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000634 	.word	0x20000634
 8003814:	2000082c 	.word	0x2000082c
 8003818:	2000067c 	.word	0x2000067c
 800381c:	40000400 	.word	0x40000400
 8003820:	200006c4 	.word	0x200006c4
 8003824:	40000800 	.word	0x40000800
 8003828:	2000070c 	.word	0x2000070c
 800382c:	40000c00 	.word	0x40000c00
 8003830:	20000754 	.word	0x20000754
 8003834:	2000079c 	.word	0x2000079c
 8003838:	200007e4 	.word	0x200007e4

0800383c <HAL_TIM_PeriodElapsedCallback>:



//基本定时器中断回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)//10ms
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0c      	ldr	r2, [pc, #48]	@ (800387c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d103      	bne.n	8003856 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		Encoder_Update_Count();//10ms测速
 800384e:	f7ff f8bd 	bl	80029cc <Encoder_Update_Count>
		Motion_Handle();//调用PID控制速度
 8003852:	f7ff fc6b 	bl	800312c <Motion_Handle>

	}


	if (htim->Instance == TIM7)//10us
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a09      	ldr	r2, [pc, #36]	@ (8003880 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d108      	bne.n	8003872 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		if (ultrasonic_flag) // 开始测距--超声波
 8003860:	4b08      	ldr	r3, [pc, #32]	@ (8003884 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			ultrasonic_num++;
 8003868:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a06      	ldr	r2, [pc, #24]	@ (8003888 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003870:	6013      	str	r3, [r2, #0]
		}
	}
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40001000 	.word	0x40001000
 8003880:	40001400 	.word	0x40001400
 8003884:	200005d8 	.word	0x200005d8
 8003888:	200005d4 	.word	0x200005d4

0800388c <Get_distance>:
 * 得到测5次平均值
 *
 * Get the average of 5 measurements
 * */
float Get_distance(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
	float distance = 0, aveg = 0;
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
	uint16_t tim, count;
	uint8_t i = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	72fb      	strb	r3, [r7, #11]

	while (i != 5)
 80038a2:	e061      	b.n	8003968 <Get_distance+0xdc>
	{
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 80038a4:	2201      	movs	r2, #1
 80038a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038aa:	4836      	ldr	r0, [pc, #216]	@ (8003984 <Get_distance+0xf8>)
 80038ac:	f001 fd2a 	bl	8005304 <HAL_GPIO_WritePin>
		Delay_Us(20);
 80038b0:	2014      	movs	r0, #20
 80038b2:	f7fe ffbd 	bl	8002830 <Delay_Us>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80038b6:	2200      	movs	r2, #0
 80038b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80038bc:	4831      	ldr	r0, [pc, #196]	@ (8003984 <Get_distance+0xf8>)
 80038be:	f001 fd21 	bl	8005304 <HAL_GPIO_WritePin>

		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET)
 80038c2:	bf00      	nop
 80038c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80038c8:	482e      	ldr	r0, [pc, #184]	@ (8003984 <Get_distance+0xf8>)
 80038ca:	f001 fcfb 	bl	80052c4 <HAL_GPIO_ReadPin>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f7      	beq.n	80038c4 <Get_distance+0x38>
			;
		ultrasonic_flag = 1;
 80038d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <Get_distance+0xfc>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]

		i += 1;
 80038da:	7afb      	ldrb	r3, [r7, #11]
 80038dc:	3301      	adds	r3, #1
 80038de:	72fb      	strb	r3, [r7, #11]
		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 80038e0:	e010      	b.n	8003904 <Get_distance+0x78>
		{
			count = ultrasonic_num;
 80038e2:	4b2a      	ldr	r3, [pc, #168]	@ (800398c <Get_distance+0x100>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	803b      	strh	r3, [r7, #0]
			if (count >= 10000)
 80038e8:	883b      	ldrh	r3, [r7, #0]
 80038ea:	f242 720f 	movw	r2, #9999	@ 0x270f
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d908      	bls.n	8003904 <Get_distance+0x78>
			{
				ultrasonic_flag = 0;
 80038f2:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <Get_distance+0xfc>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
				ultrasonic_num = 0;
 80038f8:	4b24      	ldr	r3, [pc, #144]	@ (800398c <Get_distance+0x100>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
				return 0;
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e03b      	b.n	800397c <Get_distance+0xf0>
		while (HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET)
 8003904:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003908:	481e      	ldr	r0, [pc, #120]	@ (8003984 <Get_distance+0xf8>)
 800390a:	f001 fcdb 	bl	80052c4 <HAL_GPIO_ReadPin>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d0e6      	beq.n	80038e2 <Get_distance+0x56>
			}
		}

		ultrasonic_flag = 0;
 8003914:	4b1c      	ldr	r3, [pc, #112]	@ (8003988 <Get_distance+0xfc>)
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
		tim = TIM7->CNT;
 800391a:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <Get_distance+0x104>)
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391e:	807b      	strh	r3, [r7, #2]
		distance = (tim + ultrasonic_num * 10) / 58.5;
 8003920:	8879      	ldrh	r1, [r7, #2]
 8003922:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <Get_distance+0x100>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	440b      	add	r3, r1
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fdc3 	bl	80004bc <__aeabi_ui2d>
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <Get_distance+0x108>)
 800393c:	f7fc ff62 	bl	8000804 <__aeabi_ddiv>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4610      	mov	r0, r2
 8003946:	4619      	mov	r1, r3
 8003948:	f7fd f92a 	bl	8000ba0 <__aeabi_d2f>
 800394c:	4603      	mov	r3, r0
 800394e:	607b      	str	r3, [r7, #4]
		aveg = distance + aveg;
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7fd f97a 	bl	8000c4c <__addsf3>
 8003958:	4603      	mov	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]
		ultrasonic_num = 0;
 800395c:	4b0b      	ldr	r3, [pc, #44]	@ (800398c <Get_distance+0x100>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
		HAL_Delay(10);
 8003962:	200a      	movs	r0, #10
 8003964:	f001 f8ba 	bl	8004adc <HAL_Delay>
	while (i != 5)
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	2b05      	cmp	r3, #5
 800396c:	d19a      	bne.n	80038a4 <Get_distance+0x18>
	}
	distance = aveg / 5;
 800396e:	490a      	ldr	r1, [pc, #40]	@ (8003998 <Get_distance+0x10c>)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fd fb27 	bl	8000fc4 <__aeabi_fdiv>
 8003976:	4603      	mov	r3, r0
 8003978:	607b      	str	r3, [r7, #4]
	return distance;
 800397a:	687b      	ldr	r3, [r7, #4]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40011c00 	.word	0x40011c00
 8003988:	200005d8 	.word	0x200005d8
 800398c:	200005d4 	.word	0x200005d4
 8003990:	40001400 	.word	0x40001400
 8003994:	404d4000 	.word	0x404d4000
 8003998:	40a00000 	.word	0x40a00000

0800399c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08c      	sub	sp, #48	@ 0x30
 80039a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a2:	f107 0320 	add.w	r3, r7, #32
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	4a5e      	ldr	r2, [pc, #376]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ba:	6193      	str	r3, [r2, #24]
 80039bc:	4b5c      	ldr	r3, [pc, #368]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c4:	61fb      	str	r3, [r7, #28]
 80039c6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4b59      	ldr	r3, [pc, #356]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	4a58      	ldr	r2, [pc, #352]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6193      	str	r3, [r2, #24]
 80039d4:	4b56      	ldr	r3, [pc, #344]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039e0:	4b53      	ldr	r3, [pc, #332]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	4a52      	ldr	r2, [pc, #328]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ea:	6193      	str	r3, [r2, #24]
 80039ec:	4b50      	ldr	r3, [pc, #320]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003b30 <MX_GPIO_Init+0x194>)
 80039fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a02:	6193      	str	r3, [r2, #24]
 8003a04:	4b4a      	ldr	r3, [pc, #296]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a10:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	4a46      	ldr	r2, [pc, #280]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	6193      	str	r3, [r2, #24]
 8003a1c:	4b44      	ldr	r3, [pc, #272]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a2e:	f043 0310 	orr.w	r3, r3, #16
 8003a32:	6193      	str	r3, [r2, #24]
 8003a34:	4b3e      	ldr	r3, [pc, #248]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a40:	4b3b      	ldr	r3, [pc, #236]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4a3a      	ldr	r2, [pc, #232]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6193      	str	r3, [r2, #24]
 8003a4c:	4b38      	ldr	r3, [pc, #224]	@ (8003b30 <MX_GPIO_Init+0x194>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin, GPIO_PIN_RESET);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	219c      	movs	r1, #156	@ 0x9c
 8003a5c:	4835      	ldr	r0, [pc, #212]	@ (8003b34 <MX_GPIO_Init+0x198>)
 8003a5e:	f001 fc51 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PS2_CS_Pin|PS2_CLK_Pin|PS2_DO_Pin, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	21b0      	movs	r1, #176	@ 0xb0
 8003a66:	4834      	ldr	r0, [pc, #208]	@ (8003b38 <MX_GPIO_Init+0x19c>)
 8003a68:	f001 fc4c 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a72:	4832      	ldr	r0, [pc, #200]	@ (8003b3c <MX_GPIO_Init+0x1a0>)
 8003a74:	f001 fc46 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LRGB_R_Pin|LRGB_B_Pin, GPIO_PIN_RESET);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2106      	movs	r1, #6
 8003a7c:	4830      	ldr	r0, [pc, #192]	@ (8003b40 <MX_GPIO_Init+0x1a4>)
 8003a7e:	f001 fc41 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = RRGB_R_Pin|RRGB_G_Pin|RRGB_B_Pin|LRGB_G_Pin;
 8003a82:	239c      	movs	r3, #156	@ 0x9c
 8003a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a86:	2301      	movs	r3, #1
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a92:	f107 0320 	add.w	r3, r7, #32
 8003a96:	4619      	mov	r1, r3
 8003a98:	4826      	ldr	r0, [pc, #152]	@ (8003b34 <MX_GPIO_Init+0x198>)
 8003a9a:	f001 f97f 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PS2_CS_Pin|PS2_CLK_Pin|PS2_DO_Pin;
 8003a9e:	23b0      	movs	r3, #176	@ 0xb0
 8003aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	f107 0320 	add.w	r3, r7, #32
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4820      	ldr	r0, [pc, #128]	@ (8003b38 <MX_GPIO_Init+0x19c>)
 8003ab6:	f001 f971 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DI_Pin;
 8003aba:	2340      	movs	r3, #64	@ 0x40
 8003abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PS2_DI_GPIO_Port, &GPIO_InitStruct);
 8003ac6:	f107 0320 	add.w	r3, r7, #32
 8003aca:	4619      	mov	r1, r3
 8003acc:	481a      	ldr	r0, [pc, #104]	@ (8003b38 <MX_GPIO_Init+0x19c>)
 8003ace:	f001 f965 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8003ad2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8003ae4:	f107 0320 	add.w	r3, r7, #32
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4814      	ldr	r0, [pc, #80]	@ (8003b3c <MX_GPIO_Init+0x1a0>)
 8003aec:	f001 f956 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8003af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8003afe:	f107 0320 	add.w	r3, r7, #32
 8003b02:	4619      	mov	r1, r3
 8003b04:	480d      	ldr	r0, [pc, #52]	@ (8003b3c <MX_GPIO_Init+0x1a0>)
 8003b06:	f001 f949 	bl	8004d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LRGB_R_Pin|LRGB_B_Pin;
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003b16:	2301      	movs	r3, #1
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003b1a:	f107 0320 	add.w	r3, r7, #32
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4807      	ldr	r0, [pc, #28]	@ (8003b40 <MX_GPIO_Init+0x1a4>)
 8003b22:	f001 f93b 	bl	8004d9c <HAL_GPIO_Init>

}
 8003b26:	bf00      	nop
 8003b28:	3730      	adds	r7, #48	@ 0x30
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40011800 	.word	0x40011800
 8003b38:	40010800 	.word	0x40010800
 8003b3c:	40011c00 	.word	0x40011c00
 8003b40:	40012000 	.word	0x40012000

08003b44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b48:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b4a:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <MX_I2C1_Init+0x54>)
 8003b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b50:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <MX_I2C1_Init+0x58>)
 8003b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b74:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b80:	4804      	ldr	r0, [pc, #16]	@ (8003b94 <MX_I2C1_Init+0x50>)
 8003b82:	f001 fbeb 	bl	800535c <HAL_I2C_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b8c:	f000 f8aa 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200005dc 	.word	0x200005dc
 8003b98:	40005400 	.word	0x40005400
 8003b9c:	00061a80 	.word	0x00061a80

08003ba0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 0310 	add.w	r3, r7, #16
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <HAL_I2C_MspInit+0x70>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d123      	bne.n	8003c08 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc0:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <HAL_I2C_MspInit+0x74>)
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <HAL_I2C_MspInit+0x74>)
 8003bc6:	f043 0308 	orr.w	r3, r3, #8
 8003bca:	6193      	str	r3, [r2, #24]
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <HAL_I2C_MspInit+0x74>)
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin;
 8003bd8:	23c0      	movs	r3, #192	@ 0xc0
 8003bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bdc:	2312      	movs	r3, #18
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003be0:	2303      	movs	r3, #3
 8003be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be4:	f107 0310 	add.w	r3, r7, #16
 8003be8:	4619      	mov	r1, r3
 8003bea:	480b      	ldr	r0, [pc, #44]	@ (8003c18 <HAL_I2C_MspInit+0x78>)
 8003bec:	f001 f8d6 	bl	8004d9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bf0:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_I2C_MspInit+0x74>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	@ (8003c14 <HAL_I2C_MspInit+0x74>)
 8003bf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bfa:	61d3      	str	r3, [r2, #28]
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_I2C_MspInit+0x74>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40005400 	.word	0x40005400
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010c00 	.word	0x40010c00

08003c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c20:	f000 fefa 	bl	8004a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c24:	f000 f819 	bl	8003c5a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c28:	f7ff feb8 	bl	800399c <MX_GPIO_Init>
  MX_TIM1_Init();
 8003c2c:	f000 f9a6 	bl	8003f7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c30:	f000 fa68 	bl	8004104 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c34:	f000 faba 	bl	80041ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8003c38:	f000 fb0c 	bl	8004254 <MX_TIM4_Init>
  MX_TIM5_Init();
 8003c3c:	f000 fb5e 	bl	80042fc <MX_TIM5_Init>
  MX_TIM6_Init();
 8003c40:	f000 fbb0 	bl	80043a4 <MX_TIM6_Init>
  MX_TIM8_Init();
 8003c44:	f000 fc18 	bl	8004478 <MX_TIM8_Init>
  MX_I2C1_Init();
 8003c48:	f7ff ff7c 	bl	8003b44 <MX_I2C1_Init>
  MX_TIM7_Init();
 8003c4c:	f000 fbe0 	bl	8004410 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_Init();
 8003c50:	f7fe fdc0 	bl	80027d4 <BSP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_Loop();
 8003c54:	f7fe fdda 	bl	800280c <BSP_Loop>
 8003c58:	e7fc      	b.n	8003c54 <main+0x38>

08003c5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b090      	sub	sp, #64	@ 0x40
 8003c5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c60:	f107 0318 	add.w	r3, r7, #24
 8003c64:	2228      	movs	r2, #40	@ 0x28
 8003c66:	2100      	movs	r1, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f005 fed6 	bl	8009a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	60da      	str	r2, [r3, #12]
 8003c7a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c84:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c98:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c9e:	f107 0318 	add.w	r3, r7, #24
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f002 f890 	bl	8005dc8 <HAL_RCC_OscConfig>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003cae:	f000 f819 	bl	8003ce4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cb2:	230f      	movs	r3, #15
 8003cb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cc8:	1d3b      	adds	r3, r7, #4
 8003cca:	2102      	movs	r1, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f002 fbe9 	bl	80064a4 <HAL_RCC_ClockConfig>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003cd8:	f000 f804 	bl	8003ce4 <Error_Handler>
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3740      	adds	r7, #64	@ 0x40
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ce8:	b672      	cpsid	i
}
 8003cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <Error_Handler+0x8>

08003cf0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d0a:	4b16      	ldr	r3, [pc, #88]	@ (8003d64 <HAL_MspInit+0x60>)
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	@ (8003d64 <HAL_MspInit+0x60>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6193      	str	r3, [r2, #24]
 8003d16:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <HAL_MspInit+0x60>)
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	@ (8003d64 <HAL_MspInit+0x60>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	4a0f      	ldr	r2, [pc, #60]	@ (8003d64 <HAL_MspInit+0x60>)
 8003d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	61d3      	str	r3, [r2, #28]
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <HAL_MspInit+0x60>)
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8003d3a:	2005      	movs	r0, #5
 8003d3c:	f000 ffbe 	bl	8004cbc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d40:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <HAL_MspInit+0x64>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4a04      	ldr	r2, [pc, #16]	@ (8003d68 <HAL_MspInit+0x64>)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010000 	.word	0x40010000

08003d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <NMI_Handler+0x4>

08003d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <HardFault_Handler+0x4>

08003d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d80:	bf00      	nop
 8003d82:	e7fd      	b.n	8003d80 <MemManage_Handler+0x4>

08003d84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <BusFault_Handler+0x4>

08003d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d90:	bf00      	nop
 8003d92:	e7fd      	b.n	8003d90 <UsageFault_Handler+0x4>

08003d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003db0:	bf00      	nop
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003dbc:	f000 fe72 	bl	8004aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dc8:	4802      	ldr	r0, [pc, #8]	@ (8003dd4 <TIM6_IRQHandler+0x10>)
 8003dca:	f003 fb59 	bl	8007480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003dce:	bf00      	nop
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000079c 	.word	0x2000079c

08003dd8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ddc:	4802      	ldr	r0, [pc, #8]	@ (8003de8 <TIM7_IRQHandler+0x10>)
 8003dde:	f003 fb4f 	bl	8007480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	200007e4 	.word	0x200007e4

08003dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
	return 1;
 8003df0:	2301      	movs	r3, #1
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <_kill>:

int _kill(int pid, int sig)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e04:	f005 fe5c 	bl	8009ac0 <__errno>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2216      	movs	r2, #22
 8003e0c:	601a      	str	r2, [r3, #0]
	return -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <_exit>:

void _exit (int status)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b082      	sub	sp, #8
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e22:	f04f 31ff 	mov.w	r1, #4294967295
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ffe7 	bl	8003dfa <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e2c:	bf00      	nop
 8003e2e:	e7fd      	b.n	8003e2c <_exit+0x12>

08003e30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	e00a      	b.n	8003e58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e42:	f3af 8000 	nop.w
 8003e46:	4601      	mov	r1, r0
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	60ba      	str	r2, [r7, #8]
 8003e4e:	b2ca      	uxtb	r2, r1
 8003e50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	3301      	adds	r3, #1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	dbf0      	blt.n	8003e42 <_read+0x12>
	}

return len;
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e009      	b.n	8003e90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	60ba      	str	r2, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	dbf1      	blt.n	8003e7c <_write+0x12>
	}
	return len;
 8003e98:	687b      	ldr	r3, [r7, #4]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_close>:

int _close(int file)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ec8:	605a      	str	r2, [r3, #4]
	return 0;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <_isatty>:

int _isatty(int file)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
	return 1;
 8003ede:	2301      	movs	r3, #1
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
	return 0;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f0c:	4a14      	ldr	r2, [pc, #80]	@ (8003f60 <_sbrk+0x5c>)
 8003f0e:	4b15      	ldr	r3, [pc, #84]	@ (8003f64 <_sbrk+0x60>)
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f18:	4b13      	ldr	r3, [pc, #76]	@ (8003f68 <_sbrk+0x64>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f20:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <_sbrk+0x64>)
 8003f22:	4a12      	ldr	r2, [pc, #72]	@ (8003f6c <_sbrk+0x68>)
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <_sbrk+0x64>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d207      	bcs.n	8003f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f34:	f005 fdc4 	bl	8009ac0 <__errno>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	e009      	b.n	8003f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f44:	4b08      	ldr	r3, [pc, #32]	@ (8003f68 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f4a:	4b07      	ldr	r3, [pc, #28]	@ (8003f68 <_sbrk+0x64>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a05      	ldr	r2, [pc, #20]	@ (8003f68 <_sbrk+0x64>)
 8003f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20010000 	.word	0x20010000
 8003f64:	00000400 	.word	0x00000400
 8003f68:	20000630 	.word	0x20000630
 8003f6c:	200009c8 	.word	0x200009c8

08003f70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b096      	sub	sp, #88	@ 0x58
 8003f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f82:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f90:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	615a      	str	r2, [r3, #20]
 8003fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f005 fd30 	bl	8009a1a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fba:	4b50      	ldr	r3, [pc, #320]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fbc:	4a50      	ldr	r2, [pc, #320]	@ (8004100 <MX_TIM1_Init+0x184>)
 8003fbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003fc0:	4b4e      	ldr	r3, [pc, #312]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 8003fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fce:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8003fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd4:	4b49      	ldr	r3, [pc, #292]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fda:	4b48      	ldr	r3, [pc, #288]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003fe0:	4b46      	ldr	r3, [pc, #280]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fe2:	2280      	movs	r2, #128	@ 0x80
 8003fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fe6:	4845      	ldr	r0, [pc, #276]	@ (80040fc <MX_TIM1_Init+0x180>)
 8003fe8:	f002 fc7c 	bl	80068e4 <HAL_TIM_Base_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003ff2:	f7ff fe77 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ffc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004000:	4619      	mov	r1, r3
 8004002:	483e      	ldr	r0, [pc, #248]	@ (80040fc <MX_TIM1_Init+0x180>)
 8004004:	f003 fce6 	bl	80079d4 <HAL_TIM_ConfigClockSource>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800400e:	f7ff fe69 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004012:	483a      	ldr	r0, [pc, #232]	@ (80040fc <MX_TIM1_Init+0x180>)
 8004014:	f002 fdcc 	bl	8006bb0 <HAL_TIM_PWM_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800401e:	f7ff fe61 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004022:	2300      	movs	r3, #0
 8004024:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800402a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800402e:	4619      	mov	r1, r3
 8004030:	4832      	ldr	r0, [pc, #200]	@ (80040fc <MX_TIM1_Init+0x180>)
 8004032:	f004 fbb3 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800403c:	f7ff fe52 	bl	8003ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004040:	2360      	movs	r3, #96	@ 0x60
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004048:	2300      	movs	r3, #0
 800404a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800404c:	2300      	movs	r3, #0
 800404e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004050:	2300      	movs	r3, #0
 8004052:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004058:	2300      	movs	r3, #0
 800405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800405c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004060:	2200      	movs	r2, #0
 8004062:	4619      	mov	r1, r3
 8004064:	4825      	ldr	r0, [pc, #148]	@ (80040fc <MX_TIM1_Init+0x180>)
 8004066:	f003 fb13 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8004070:	f7ff fe38 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004078:	2204      	movs	r2, #4
 800407a:	4619      	mov	r1, r3
 800407c:	481f      	ldr	r0, [pc, #124]	@ (80040fc <MX_TIM1_Init+0x180>)
 800407e:	f003 fb07 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004088:	f7ff fe2c 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800408c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004090:	2208      	movs	r2, #8
 8004092:	4619      	mov	r1, r3
 8004094:	4819      	ldr	r0, [pc, #100]	@ (80040fc <MX_TIM1_Init+0x180>)
 8004096:	f003 fafb 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80040a0:	f7ff fe20 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a8:	220c      	movs	r2, #12
 80040aa:	4619      	mov	r1, r3
 80040ac:	4813      	ldr	r0, [pc, #76]	@ (80040fc <MX_TIM1_Init+0x180>)
 80040ae:	f003 faef 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80040b8:	f7ff fe14 	bl	8003ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040c8:	2300      	movs	r3, #0
 80040ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	4619      	mov	r1, r3
 80040de:	4807      	ldr	r0, [pc, #28]	@ (80040fc <MX_TIM1_Init+0x180>)
 80040e0:	f004 fc2c 	bl	800893c <HAL_TIMEx_ConfigBreakDeadTime>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80040ea:	f7ff fdfb 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040ee:	4803      	ldr	r0, [pc, #12]	@ (80040fc <MX_TIM1_Init+0x180>)
 80040f0:	f000 fc02 	bl	80048f8 <HAL_TIM_MspPostInit>

}
 80040f4:	bf00      	nop
 80040f6:	3758      	adds	r7, #88	@ 0x58
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000634 	.word	0x20000634
 8004100:	40012c00 	.word	0x40012c00

08004104 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	@ 0x30
 8004108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800410a:	f107 030c 	add.w	r3, r7, #12
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f005 fc81 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004120:	4b21      	ldr	r3, [pc, #132]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 8004122:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 800412a:	2200      	movs	r2, #0
 800412c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412e:	4b1e      	ldr	r3, [pc, #120]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004134:	4b1c      	ldr	r3, [pc, #112]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 8004136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800413a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800413c:	4b1a      	ldr	r3, [pc, #104]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004142:	4b19      	ldr	r3, [pc, #100]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 8004144:	2200      	movs	r2, #0
 8004146:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004148:	2303      	movs	r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004154:	2300      	movs	r3, #0
 8004156:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004160:	2301      	movs	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004164:	2300      	movs	r3, #0
 8004166:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800416c:	f107 030c 	add.w	r3, r7, #12
 8004170:	4619      	mov	r1, r3
 8004172:	480d      	ldr	r0, [pc, #52]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 8004174:	f002 ff22 	bl	8006fbc <HAL_TIM_Encoder_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800417e:	f7ff fdb1 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800418a:	1d3b      	adds	r3, r7, #4
 800418c:	4619      	mov	r1, r3
 800418e:	4806      	ldr	r0, [pc, #24]	@ (80041a8 <MX_TIM2_Init+0xa4>)
 8004190:	f004 fb04 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800419a:	f7ff fda3 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800419e:	bf00      	nop
 80041a0:	3730      	adds	r7, #48	@ 0x30
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000067c 	.word	0x2000067c

080041ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	@ 0x30
 80041b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80041b2:	f107 030c 	add.w	r3, r7, #12
 80041b6:	2224      	movs	r2, #36	@ 0x24
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f005 fc2d 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80041c8:	4b20      	ldr	r3, [pc, #128]	@ (800424c <MX_TIM3_Init+0xa0>)
 80041ca:	4a21      	ldr	r2, [pc, #132]	@ (8004250 <MX_TIM3_Init+0xa4>)
 80041cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80041ce:	4b1f      	ldr	r3, [pc, #124]	@ (800424c <MX_TIM3_Init+0xa0>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <MX_TIM3_Init+0xa0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80041da:	4b1c      	ldr	r3, [pc, #112]	@ (800424c <MX_TIM3_Init+0xa0>)
 80041dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e2:	4b1a      	ldr	r3, [pc, #104]	@ (800424c <MX_TIM3_Init+0xa0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041e8:	4b18      	ldr	r3, [pc, #96]	@ (800424c <MX_TIM3_Init+0xa0>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80041ee:	2303      	movs	r3, #3
 80041f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80041f6:	2301      	movs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004202:	2300      	movs	r3, #0
 8004204:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004206:	2301      	movs	r3, #1
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800420a:	2300      	movs	r3, #0
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	4619      	mov	r1, r3
 8004218:	480c      	ldr	r0, [pc, #48]	@ (800424c <MX_TIM3_Init+0xa0>)
 800421a:	f002 fecf 	bl	8006fbc <HAL_TIM_Encoder_Init>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004224:	f7ff fd5e 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004228:	2300      	movs	r3, #0
 800422a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4805      	ldr	r0, [pc, #20]	@ (800424c <MX_TIM3_Init+0xa0>)
 8004236:	f004 fab1 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004240:	f7ff fd50 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004244:	bf00      	nop
 8004246:	3730      	adds	r7, #48	@ 0x30
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	200006c4 	.word	0x200006c4
 8004250:	40000400 	.word	0x40000400

08004254 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	@ 0x30
 8004258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800425a:	f107 030c 	add.w	r3, r7, #12
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f005 fbd9 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004270:	4b20      	ldr	r3, [pc, #128]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 8004272:	4a21      	ldr	r2, [pc, #132]	@ (80042f8 <MX_TIM4_Init+0xa4>)
 8004274:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004276:	4b1f      	ldr	r3, [pc, #124]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 8004278:	2200      	movs	r2, #0
 800427a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004282:	4b1c      	ldr	r3, [pc, #112]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 8004284:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004288:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800428a:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004290:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 8004292:	2200      	movs	r2, #0
 8004294:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004296:	2303      	movs	r3, #3
 8004298:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800429e:	2301      	movs	r3, #1
 80042a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042aa:	2300      	movs	r3, #0
 80042ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042ae:	2301      	movs	r3, #1
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042b2:	2300      	movs	r3, #0
 80042b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80042ba:	f107 030c 	add.w	r3, r7, #12
 80042be:	4619      	mov	r1, r3
 80042c0:	480c      	ldr	r0, [pc, #48]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 80042c2:	f002 fe7b 	bl	8006fbc <HAL_TIM_Encoder_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80042cc:	f7ff fd0a 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80042d8:	1d3b      	adds	r3, r7, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	@ (80042f4 <MX_TIM4_Init+0xa0>)
 80042de:	f004 fa5d 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80042e8:	f7ff fcfc 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80042ec:	bf00      	nop
 80042ee:	3730      	adds	r7, #48	@ 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	2000070c 	.word	0x2000070c
 80042f8:	40000800 	.word	0x40000800

080042fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	@ 0x30
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	2224      	movs	r2, #36	@ 0x24
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f005 fb85 	bl	8009a1a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004318:	4b20      	ldr	r3, [pc, #128]	@ (800439c <MX_TIM5_Init+0xa0>)
 800431a:	4a21      	ldr	r2, [pc, #132]	@ (80043a0 <MX_TIM5_Init+0xa4>)
 800431c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800431e:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <MX_TIM5_Init+0xa0>)
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004324:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <MX_TIM5_Init+0xa0>)
 8004326:	2200      	movs	r2, #0
 8004328:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800432a:	4b1c      	ldr	r3, [pc, #112]	@ (800439c <MX_TIM5_Init+0xa0>)
 800432c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004330:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004332:	4b1a      	ldr	r3, [pc, #104]	@ (800439c <MX_TIM5_Init+0xa0>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004338:	4b18      	ldr	r3, [pc, #96]	@ (800439c <MX_TIM5_Init+0xa0>)
 800433a:	2200      	movs	r2, #0
 800433c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800433e:	2303      	movs	r3, #3
 8004340:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004342:	2300      	movs	r3, #0
 8004344:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004346:	2301      	movs	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004356:	2301      	movs	r3, #1
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800435a:	2300      	movs	r3, #0
 800435c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	4619      	mov	r1, r3
 8004368:	480c      	ldr	r0, [pc, #48]	@ (800439c <MX_TIM5_Init+0xa0>)
 800436a:	f002 fe27 	bl	8006fbc <HAL_TIM_Encoder_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004374:	f7ff fcb6 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800437c:	2300      	movs	r3, #0
 800437e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4805      	ldr	r0, [pc, #20]	@ (800439c <MX_TIM5_Init+0xa0>)
 8004386:	f004 fa09 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8004390:	f7ff fca8 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004394:	bf00      	nop
 8004396:	3730      	adds	r7, #48	@ 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000754 	.word	0x20000754
 80043a0:	40000c00 	.word	0x40000c00

080043a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043aa:	463b      	mov	r3, r7
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043b2:	4b15      	ldr	r3, [pc, #84]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043b4:	4a15      	ldr	r2, [pc, #84]	@ (800440c <MX_TIM6_Init+0x68>)
 80043b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043ba:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80043be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c0:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80043c6:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043c8:	2263      	movs	r2, #99	@ 0x63
 80043ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043d2:	480d      	ldr	r0, [pc, #52]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043d4:	f002 fa86 	bl	80068e4 <HAL_TIM_Base_Init>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80043de:	f7ff fc81 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043e2:	2300      	movs	r3, #0
 80043e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e6:	2300      	movs	r3, #0
 80043e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043ea:	463b      	mov	r3, r7
 80043ec:	4619      	mov	r1, r3
 80043ee:	4806      	ldr	r0, [pc, #24]	@ (8004408 <MX_TIM6_Init+0x64>)
 80043f0:	f004 f9d4 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80043fa:	f7ff fc73 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000079c 	.word	0x2000079c
 800440c:	40001000 	.word	0x40001000

08004410 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004416:	463b      	mov	r3, r7
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800441e:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <MX_TIM7_Init+0x60>)
 8004420:	4a14      	ldr	r2, [pc, #80]	@ (8004474 <MX_TIM7_Init+0x64>)
 8004422:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 71;
 8004424:	4b12      	ldr	r3, [pc, #72]	@ (8004470 <MX_TIM7_Init+0x60>)
 8004426:	2247      	movs	r2, #71	@ 0x47
 8004428:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800442a:	4b11      	ldr	r3, [pc, #68]	@ (8004470 <MX_TIM7_Init+0x60>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8004430:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <MX_TIM7_Init+0x60>)
 8004432:	2209      	movs	r2, #9
 8004434:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004436:	4b0e      	ldr	r3, [pc, #56]	@ (8004470 <MX_TIM7_Init+0x60>)
 8004438:	2200      	movs	r2, #0
 800443a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800443c:	480c      	ldr	r0, [pc, #48]	@ (8004470 <MX_TIM7_Init+0x60>)
 800443e:	f002 fa51 	bl	80068e4 <HAL_TIM_Base_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004448:	f7ff fc4c 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444c:	2300      	movs	r3, #0
 800444e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004450:	2300      	movs	r3, #0
 8004452:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004454:	463b      	mov	r3, r7
 8004456:	4619      	mov	r1, r3
 8004458:	4805      	ldr	r0, [pc, #20]	@ (8004470 <MX_TIM7_Init+0x60>)
 800445a:	f004 f99f 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004464:	f7ff fc3e 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004468:	bf00      	nop
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	200007e4 	.word	0x200007e4
 8004474:	40001400 	.word	0x40001400

08004478 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b096      	sub	sp, #88	@ 0x58
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	605a      	str	r2, [r3, #4]
 80044a0:	609a      	str	r2, [r3, #8]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	611a      	str	r2, [r3, #16]
 80044a6:	615a      	str	r2, [r3, #20]
 80044a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	2220      	movs	r2, #32
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f005 fab2 	bl	8009a1a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044b6:	4b50      	ldr	r3, [pc, #320]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044b8:	4a50      	ldr	r2, [pc, #320]	@ (80045fc <MX_TIM8_Init+0x184>)
 80044ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80044bc:	4b4e      	ldr	r3, [pc, #312]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044be:	2200      	movs	r2, #0
 80044c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c2:	4b4d      	ldr	r3, [pc, #308]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3600-1;
 80044c8:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044ca:	f640 620f 	movw	r2, #3599	@ 0xe0f
 80044ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d0:	4b49      	ldr	r3, [pc, #292]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044d6:	4b48      	ldr	r3, [pc, #288]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044dc:	4b46      	ldr	r3, [pc, #280]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044de:	2280      	movs	r2, #128	@ 0x80
 80044e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044e2:	4845      	ldr	r0, [pc, #276]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80044e4:	f002 f9fe 	bl	80068e4 <HAL_TIM_Base_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80044ee:	f7ff fbf9 	bl	8003ce4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80044fc:	4619      	mov	r1, r3
 80044fe:	483e      	ldr	r0, [pc, #248]	@ (80045f8 <MX_TIM8_Init+0x180>)
 8004500:	f003 fa68 	bl	80079d4 <HAL_TIM_ConfigClockSource>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800450a:	f7ff fbeb 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800450e:	483a      	ldr	r0, [pc, #232]	@ (80045f8 <MX_TIM8_Init+0x180>)
 8004510:	f002 fb4e 	bl	8006bb0 <HAL_TIM_PWM_Init>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800451a:	f7ff fbe3 	bl	8003ce4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004526:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800452a:	4619      	mov	r1, r3
 800452c:	4832      	ldr	r0, [pc, #200]	@ (80045f8 <MX_TIM8_Init+0x180>)
 800452e:	f004 f935 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8004538:	f7ff fbd4 	bl	8003ce4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800453c:	2360      	movs	r3, #96	@ 0x60
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004544:	2300      	movs	r3, #0
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004548:	2300      	movs	r3, #0
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800454c:	2300      	movs	r3, #0
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004550:	2300      	movs	r3, #0
 8004552:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004554:	2300      	movs	r3, #0
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800455c:	2200      	movs	r2, #0
 800455e:	4619      	mov	r1, r3
 8004560:	4825      	ldr	r0, [pc, #148]	@ (80045f8 <MX_TIM8_Init+0x180>)
 8004562:	f003 f895 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800456c:	f7ff fbba 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004574:	2204      	movs	r2, #4
 8004576:	4619      	mov	r1, r3
 8004578:	481f      	ldr	r0, [pc, #124]	@ (80045f8 <MX_TIM8_Init+0x180>)
 800457a:	f003 f889 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8004584:	f7ff fbae 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800458c:	2208      	movs	r2, #8
 800458e:	4619      	mov	r1, r3
 8004590:	4819      	ldr	r0, [pc, #100]	@ (80045f8 <MX_TIM8_Init+0x180>)
 8004592:	f003 f87d 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 800459c:	f7ff fba2 	bl	8003ce4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045a4:	220c      	movs	r2, #12
 80045a6:	4619      	mov	r1, r3
 80045a8:	4813      	ldr	r0, [pc, #76]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80045aa:	f003 f871 	bl	8007690 <HAL_TIM_PWM_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80045b4:	f7ff fb96 	bl	8003ce4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80045d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80045d6:	1d3b      	adds	r3, r7, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4807      	ldr	r0, [pc, #28]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80045dc:	f004 f9ae 	bl	800893c <HAL_TIMEx_ConfigBreakDeadTime>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80045e6:	f7ff fb7d 	bl	8003ce4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80045ea:	4803      	ldr	r0, [pc, #12]	@ (80045f8 <MX_TIM8_Init+0x180>)
 80045ec:	f000 f984 	bl	80048f8 <HAL_TIM_MspPostInit>

}
 80045f0:	bf00      	nop
 80045f2:	3758      	adds	r7, #88	@ 0x58
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	2000082c 	.word	0x2000082c
 80045fc:	40013400 	.word	0x40013400

08004600 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2c      	ldr	r2, [pc, #176]	@ (80046c0 <HAL_TIM_Base_MspInit+0xc0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10c      	bne.n	800462c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004612:	4b2c      	ldr	r3, [pc, #176]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	4a2b      	ldr	r2, [pc, #172]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004618:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800461c:	6193      	str	r3, [r2, #24]
 800461e:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800462a:	e044      	b.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a25      	ldr	r2, [pc, #148]	@ (80046c8 <HAL_TIM_Base_MspInit+0xc8>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d114      	bne.n	8004660 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004636:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	4a22      	ldr	r2, [pc, #136]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 800463c:	f043 0310 	orr.w	r3, r3, #16
 8004640:	61d3      	str	r3, [r2, #28]
 8004642:	4b20      	ldr	r3, [pc, #128]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 2, 2);
 800464e:	2202      	movs	r2, #2
 8004650:	2102      	movs	r1, #2
 8004652:	2036      	movs	r0, #54	@ 0x36
 8004654:	f000 fb52 	bl	8004cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004658:	2036      	movs	r0, #54	@ 0x36
 800465a:	f000 fb7b 	bl	8004d54 <HAL_NVIC_EnableIRQ>
}
 800465e:	e02a      	b.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a19      	ldr	r2, [pc, #100]	@ (80046cc <HAL_TIM_Base_MspInit+0xcc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d114      	bne.n	8004694 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800466a:	4b16      	ldr	r3, [pc, #88]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	4a15      	ldr	r2, [pc, #84]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004670:	f043 0320 	orr.w	r3, r3, #32
 8004674:	61d3      	str	r3, [r2, #28]
 8004676:	4b13      	ldr	r3, [pc, #76]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8004682:	2200      	movs	r2, #0
 8004684:	2101      	movs	r1, #1
 8004686:	2037      	movs	r0, #55	@ 0x37
 8004688:	f000 fb38 	bl	8004cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800468c:	2037      	movs	r0, #55	@ 0x37
 800468e:	f000 fb61 	bl	8004d54 <HAL_NVIC_EnableIRQ>
}
 8004692:	e010      	b.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <HAL_TIM_Base_MspInit+0xd0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10b      	bne.n	80046b6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800469e:	4b09      	ldr	r3, [pc, #36]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	4a08      	ldr	r2, [pc, #32]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 80046a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046a8:	6193      	str	r3, [r2, #24]
 80046aa:	4b06      	ldr	r3, [pc, #24]	@ (80046c4 <HAL_TIM_Base_MspInit+0xc4>)
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
}
 80046b6:	bf00      	nop
 80046b8:	3718      	adds	r7, #24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40012c00 	.word	0x40012c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40001000 	.word	0x40001000
 80046cc:	40001400 	.word	0x40001400
 80046d0:	40013400 	.word	0x40013400

080046d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b092      	sub	sp, #72	@ 0x48
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f2:	d14f      	bne.n	8004794 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046f4:	4b78      	ldr	r3, [pc, #480]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4a77      	ldr	r2, [pc, #476]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	61d3      	str	r3, [r2, #28]
 8004700:	4b75      	ldr	r3, [pc, #468]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800470a:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470c:	4b72      	ldr	r3, [pc, #456]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	4a71      	ldr	r2, [pc, #452]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004712:	f043 0304 	orr.w	r3, r3, #4
 8004716:	6193      	str	r3, [r2, #24]
 8004718:	4b6f      	ldr	r3, [pc, #444]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004724:	4b6c      	ldr	r3, [pc, #432]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	4a6b      	ldr	r2, [pc, #428]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800472a:	f043 0308 	orr.w	r3, r3, #8
 800472e:	6193      	str	r3, [r2, #24]
 8004730:	4b69      	ldr	r3, [pc, #420]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAL_2A_Pin;
 800473c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004742:	2300      	movs	r3, #0
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004746:	2300      	movs	r3, #0
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2A_GPIO_Port, &GPIO_InitStruct);
 800474a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800474e:	4619      	mov	r1, r3
 8004750:	4862      	ldr	r0, [pc, #392]	@ (80048dc <HAL_TIM_Encoder_MspInit+0x208>)
 8004752:	f000 fb23 	bl	8004d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAL_2B_Pin;
 8004756:	2308      	movs	r3, #8
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800475a:	2300      	movs	r3, #0
 800475c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(HAL_2B_GPIO_Port, &GPIO_InitStruct);
 8004762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004766:	4619      	mov	r1, r3
 8004768:	485d      	ldr	r0, [pc, #372]	@ (80048e0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800476a:	f000 fb17 	bl	8004d9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800476e:	4b5d      	ldr	r3, [pc, #372]	@ (80048e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800477c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004786:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800478c:	4a55      	ldr	r2, [pc, #340]	@ (80048e4 <HAL_TIM_Encoder_MspInit+0x210>)
 800478e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004792:	e09d      	b.n	80048d0 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM3)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a53      	ldr	r2, [pc, #332]	@ (80048e8 <HAL_TIM_Encoder_MspInit+0x214>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d136      	bne.n	800480c <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800479e:	4b4e      	ldr	r3, [pc, #312]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	4a4d      	ldr	r2, [pc, #308]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	61d3      	str	r3, [r2, #28]
 80047aa:	4b4b      	ldr	r3, [pc, #300]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047b6:	4b48      	ldr	r3, [pc, #288]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	4a47      	ldr	r2, [pc, #284]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80047bc:	f043 0308 	orr.w	r3, r3, #8
 80047c0:	6193      	str	r3, [r2, #24]
 80047c2:	4b45      	ldr	r3, [pc, #276]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = HAL_4A_Pin|HAL_4B_Pin;
 80047ce:	2330      	movs	r3, #48	@ 0x30
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047d2:	2300      	movs	r3, #0
 80047d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047de:	4619      	mov	r1, r3
 80047e0:	483f      	ldr	r0, [pc, #252]	@ (80048e0 <HAL_TIM_Encoder_MspInit+0x20c>)
 80047e2:	f000 fadb 	bl	8004d9c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80047e6:	4b3f      	ldr	r3, [pc, #252]	@ (80048e4 <HAL_TIM_Encoder_MspInit+0x210>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80047f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047f6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80047fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80047fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004802:	643b      	str	r3, [r7, #64]	@ 0x40
 8004804:	4a37      	ldr	r2, [pc, #220]	@ (80048e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8004806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004808:	6053      	str	r3, [r2, #4]
}
 800480a:	e061      	b.n	80048d0 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM4)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a36      	ldr	r2, [pc, #216]	@ (80048ec <HAL_TIM_Encoder_MspInit+0x218>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d133      	bne.n	800487e <HAL_TIM_Encoder_MspInit+0x1aa>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004816:	4b30      	ldr	r3, [pc, #192]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4a2f      	ldr	r2, [pc, #188]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800481c:	f043 0304 	orr.w	r3, r3, #4
 8004820:	61d3      	str	r3, [r2, #28]
 8004822:	4b2d      	ldr	r3, [pc, #180]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800482e:	4b2a      	ldr	r3, [pc, #168]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	4a29      	ldr	r2, [pc, #164]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004834:	f043 0320 	orr.w	r3, r3, #32
 8004838:	6193      	str	r3, [r2, #24]
 800483a:	4b27      	ldr	r3, [pc, #156]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HAL_1A_Pin|HAL_1B_Pin;
 8004846:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800484a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484c:	2300      	movs	r3, #0
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004858:	4619      	mov	r1, r3
 800485a:	4825      	ldr	r0, [pc, #148]	@ (80048f0 <HAL_TIM_Encoder_MspInit+0x21c>)
 800485c:	f000 fa9e 	bl	8004d9c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8004860:	4b20      	ldr	r3, [pc, #128]	@ (80048e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	647b      	str	r3, [r7, #68]	@ 0x44
 8004866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004868:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
 800486e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004870:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIM_Encoder_MspInit+0x210>)
 8004878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487a:	6053      	str	r3, [r2, #4]
}
 800487c:	e028      	b.n	80048d0 <HAL_TIM_Encoder_MspInit+0x1fc>
  else if(tim_encoderHandle->Instance==TIM5)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1c      	ldr	r2, [pc, #112]	@ (80048f4 <HAL_TIM_Encoder_MspInit+0x220>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d123      	bne.n	80048d0 <HAL_TIM_Encoder_MspInit+0x1fc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004888:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	4a12      	ldr	r2, [pc, #72]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 800488e:	f043 0308 	orr.w	r3, r3, #8
 8004892:	61d3      	str	r3, [r2, #28]
 8004894:	4b10      	ldr	r3, [pc, #64]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a0:	4b0d      	ldr	r3, [pc, #52]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	4a0c      	ldr	r2, [pc, #48]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	6193      	str	r3, [r2, #24]
 80048ac:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <HAL_TIM_Encoder_MspInit+0x204>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HAL_3A_Pin|HAL_3B_Pin;
 80048b8:	2303      	movs	r3, #3
 80048ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048bc:	2300      	movs	r3, #0
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048c8:	4619      	mov	r1, r3
 80048ca:	4804      	ldr	r0, [pc, #16]	@ (80048dc <HAL_TIM_Encoder_MspInit+0x208>)
 80048cc:	f000 fa66 	bl	8004d9c <HAL_GPIO_Init>
}
 80048d0:	bf00      	nop
 80048d2:	3748      	adds	r7, #72	@ 0x48
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	40010800 	.word	0x40010800
 80048e0:	40010c00 	.word	0x40010c00
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40011400 	.word	0x40011400
 80048f4:	40000c00 	.word	0x40000c00

080048f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b08a      	sub	sp, #40	@ 0x28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	605a      	str	r2, [r3, #4]
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <HAL_TIM_MspPostInit+0xbc>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d12b      	bne.n	8004970 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004918:	4b27      	ldr	r3, [pc, #156]	@ (80049b8 <HAL_TIM_MspPostInit+0xc0>)
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	4a26      	ldr	r2, [pc, #152]	@ (80049b8 <HAL_TIM_MspPostInit+0xc0>)
 800491e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004922:	6193      	str	r3, [r2, #24]
 8004924:	4b24      	ldr	r3, [pc, #144]	@ (80049b8 <HAL_TIM_MspPostInit+0xc0>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Motor3_A_Pin|Motor3_B_Pin|Motor4_A_Pin|Motor4_B_Pin;
 8004930:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004936:	2302      	movs	r3, #2
 8004938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493a:	2302      	movs	r3, #2
 800493c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800493e:	f107 0314 	add.w	r3, r7, #20
 8004942:	4619      	mov	r1, r3
 8004944:	481d      	ldr	r0, [pc, #116]	@ (80049bc <HAL_TIM_MspPostInit+0xc4>)
 8004946:	f000 fa29 	bl	8004d9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 800494a:	4b1d      	ldr	r3, [pc, #116]	@ (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
 8004968:	4a15      	ldr	r2, [pc, #84]	@ (80049c0 <HAL_TIM_MspPostInit+0xc8>)
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800496e:	e01d      	b.n	80049ac <HAL_TIM_MspPostInit+0xb4>
  else if(timHandle->Instance==TIM8)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a13      	ldr	r2, [pc, #76]	@ (80049c4 <HAL_TIM_MspPostInit+0xcc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d118      	bne.n	80049ac <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800497a:	4b0f      	ldr	r3, [pc, #60]	@ (80049b8 <HAL_TIM_MspPostInit+0xc0>)
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	4a0e      	ldr	r2, [pc, #56]	@ (80049b8 <HAL_TIM_MspPostInit+0xc0>)
 8004980:	f043 0310 	orr.w	r3, r3, #16
 8004984:	6193      	str	r3, [r2, #24]
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_TIM_MspPostInit+0xc0>)
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor1_A_Pin|Motor1_B_Pin|Motor2_A_Pin|Motor2_B_Pin;
 8004992:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8004996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004998:	2302      	movs	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499c:	2302      	movs	r3, #2
 800499e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a0:	f107 0314 	add.w	r3, r7, #20
 80049a4:	4619      	mov	r1, r3
 80049a6:	4808      	ldr	r0, [pc, #32]	@ (80049c8 <HAL_TIM_MspPostInit+0xd0>)
 80049a8:	f000 f9f8 	bl	8004d9c <HAL_GPIO_Init>
}
 80049ac:	bf00      	nop
 80049ae:	3728      	adds	r7, #40	@ 0x28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40011800 	.word	0x40011800
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40013400 	.word	0x40013400
 80049c8:	40011000 	.word	0x40011000

080049cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049cc:	f7ff fad0 	bl	8003f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049d0:	480b      	ldr	r0, [pc, #44]	@ (8004a00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80049d2:	490c      	ldr	r1, [pc, #48]	@ (8004a04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80049d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a08 <LoopFillZerobss+0x16>)
  movs r3, #0
 80049d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049d8:	e002      	b.n	80049e0 <LoopCopyDataInit>

080049da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049de:	3304      	adds	r3, #4

080049e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e4:	d3f9      	bcc.n	80049da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049e6:	4a09      	ldr	r2, [pc, #36]	@ (8004a0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80049e8:	4c09      	ldr	r4, [pc, #36]	@ (8004a10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049ec:	e001      	b.n	80049f2 <LoopFillZerobss>

080049ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049f0:	3204      	adds	r2, #4

080049f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f4:	d3fb      	bcc.n	80049ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049f6:	f005 f869 	bl	8009acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049fa:	f7ff f90f 	bl	8003c1c <main>
  bx lr
 80049fe:	4770      	bx	lr
  ldr r0, =_sdata
 8004a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a04:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8004a08:	0800df30 	.word	0x0800df30
  ldr r2, =_sbss
 8004a0c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8004a10:	200009c4 	.word	0x200009c4

08004a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a14:	e7fe      	b.n	8004a14 <ADC1_2_IRQHandler>
	...

08004a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a1c:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <HAL_Init+0x28>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a07      	ldr	r2, [pc, #28]	@ (8004a40 <HAL_Init+0x28>)
 8004a22:	f043 0310 	orr.w	r3, r3, #16
 8004a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a28:	2003      	movs	r0, #3
 8004a2a:	f000 f947 	bl	8004cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2e:	2003      	movs	r0, #3
 8004a30:	f000 f808 	bl	8004a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a34:	f7ff f966 	bl	8003d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40022000 	.word	0x40022000

08004a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <HAL_InitTick+0x54>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <HAL_InitTick+0x58>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	4619      	mov	r1, r3
 8004a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f98e 	bl	8004d84 <HAL_SYSTICK_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e00e      	b.n	8004a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b0f      	cmp	r3, #15
 8004a76:	d80a      	bhi.n	8004a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a78:	2200      	movs	r2, #0
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	f000 f93c 	bl	8004cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a84:	4a06      	ldr	r2, [pc, #24]	@ (8004aa0 <HAL_InitTick+0x5c>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	2000004c 	.word	0x2000004c
 8004a9c:	20000054 	.word	0x20000054
 8004aa0:	20000050 	.word	0x20000050

08004aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <HAL_IncTick+0x1c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <HAL_IncTick+0x20>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	4a03      	ldr	r2, [pc, #12]	@ (8004ac4 <HAL_IncTick+0x20>)
 8004ab6:	6013      	str	r3, [r2, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	20000054 	.word	0x20000054
 8004ac4:	20000874 	.word	0x20000874

08004ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b02      	ldr	r3, [pc, #8]	@ (8004ad8 <HAL_GetTick+0x10>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	20000874 	.word	0x20000874

08004adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae4:	f7ff fff0 	bl	8004ac8 <HAL_GetTick>
 8004ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d005      	beq.n	8004b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_Delay+0x44>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b02:	bf00      	nop
 8004b04:	f7ff ffe0 	bl	8004ac8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d8f7      	bhi.n	8004b04 <HAL_Delay+0x28>
  {
  }
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000054 	.word	0x20000054

08004b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b34:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b56:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x44>)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	60d3      	str	r3, [r2, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000ed00 	.word	0xe000ed00

08004b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b70:	4b04      	ldr	r3, [pc, #16]	@ (8004b84 <__NVIC_GetPriorityGrouping+0x18>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	0a1b      	lsrs	r3, r3, #8
 8004b76:	f003 0307 	and.w	r3, r3, #7
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db0b      	blt.n	8004bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4906      	ldr	r1, [pc, #24]	@ (8004bbc <__NVIC_EnableIRQ+0x34>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2001      	movs	r0, #1
 8004baa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr
 8004bbc:	e000e100 	.word	0xe000e100

08004bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db0a      	blt.n	8004bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	490c      	ldr	r1, [pc, #48]	@ (8004c0c <__NVIC_SetPriority+0x4c>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	0112      	lsls	r2, r2, #4
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	440b      	add	r3, r1
 8004be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be8:	e00a      	b.n	8004c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4908      	ldr	r1, [pc, #32]	@ (8004c10 <__NVIC_SetPriority+0x50>)
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	3b04      	subs	r3, #4
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	761a      	strb	r2, [r3, #24]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000e100 	.word	0xe000e100
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	@ 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f1c3 0307 	rsb	r3, r3, #7
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	bf28      	it	cs
 8004c32:	2304      	movcs	r3, #4
 8004c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d902      	bls.n	8004c44 <NVIC_EncodePriority+0x30>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3b03      	subs	r3, #3
 8004c42:	e000      	b.n	8004c46 <NVIC_EncodePriority+0x32>
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	401a      	ands	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	43d9      	mvns	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	4313      	orrs	r3, r2
         );
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3724      	adds	r7, #36	@ 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3b01      	subs	r3, #1
 8004c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c88:	d301      	bcc.n	8004c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e00f      	b.n	8004cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <SysTick_Config+0x40>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c96:	210f      	movs	r1, #15
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	f7ff ff90 	bl	8004bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <SysTick_Config+0x40>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ca6:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <SysTick_Config+0x40>)
 8004ca8:	2207      	movs	r2, #7
 8004caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	e000e010 	.word	0xe000e010

08004cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b07      	cmp	r3, #7
 8004cc8:	d00f      	beq.n	8004cea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d00c      	beq.n	8004cea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d009      	beq.n	8004cea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d006      	beq.n	8004cea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d003      	beq.n	8004cea <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004ce2:	2191      	movs	r1, #145	@ 0x91
 8004ce4:	4804      	ldr	r0, [pc, #16]	@ (8004cf8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004ce6:	f7ff f803 	bl	8003cf0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff1a 	bl	8004b24 <__NVIC_SetPriorityGrouping>
}
 8004cf0:	bf00      	nop
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	0800d1fc 	.word	0x0800d1fc

08004cfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b0f      	cmp	r3, #15
 8004d12:	d903      	bls.n	8004d1c <HAL_NVIC_SetPriority+0x20>
 8004d14:	21a9      	movs	r1, #169	@ 0xa9
 8004d16:	480e      	ldr	r0, [pc, #56]	@ (8004d50 <HAL_NVIC_SetPriority+0x54>)
 8004d18:	f7fe ffea 	bl	8003cf0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b0f      	cmp	r3, #15
 8004d20:	d903      	bls.n	8004d2a <HAL_NVIC_SetPriority+0x2e>
 8004d22:	21aa      	movs	r1, #170	@ 0xaa
 8004d24:	480a      	ldr	r0, [pc, #40]	@ (8004d50 <HAL_NVIC_SetPriority+0x54>)
 8004d26:	f7fe ffe3 	bl	8003cf0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d2a:	f7ff ff1f 	bl	8004b6c <__NVIC_GetPriorityGrouping>
 8004d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	6978      	ldr	r0, [r7, #20]
 8004d36:	f7ff ff6d 	bl	8004c14 <NVIC_EncodePriority>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7ff ff3c 	bl	8004bc0 <__NVIC_SetPriority>
}
 8004d48:	bf00      	nop
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	0800d1fc 	.word	0x0800d1fc

08004d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	da03      	bge.n	8004d6e <HAL_NVIC_EnableIRQ+0x1a>
 8004d66:	21bd      	movs	r1, #189	@ 0xbd
 8004d68:	4805      	ldr	r0, [pc, #20]	@ (8004d80 <HAL_NVIC_EnableIRQ+0x2c>)
 8004d6a:	f7fe ffc1 	bl	8003cf0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff ff08 	bl	8004b88 <__NVIC_EnableIRQ>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	0800d1fc 	.word	0x0800d1fc

08004d84 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff73 	bl	8004c78 <SysTick_Config>
 8004d92:	4603      	mov	r3, r0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	@ 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004daa:	2300      	movs	r3, #0
 8004dac:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a94      	ldr	r2, [pc, #592]	@ (8005004 <HAL_GPIO_Init+0x268>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a93      	ldr	r2, [pc, #588]	@ (8005008 <HAL_GPIO_Init+0x26c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d017      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a92      	ldr	r2, [pc, #584]	@ (800500c <HAL_GPIO_Init+0x270>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a91      	ldr	r2, [pc, #580]	@ (8005010 <HAL_GPIO_Init+0x274>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a90      	ldr	r2, [pc, #576]	@ (8005014 <HAL_GPIO_Init+0x278>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a8f      	ldr	r2, [pc, #572]	@ (8005018 <HAL_GPIO_Init+0x27c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a8e      	ldr	r2, [pc, #568]	@ (800501c <HAL_GPIO_Init+0x280>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x52>
 8004de6:	21bd      	movs	r1, #189	@ 0xbd
 8004de8:	488d      	ldr	r0, [pc, #564]	@ (8005020 <HAL_GPIO_Init+0x284>)
 8004dea:	f7fe ff81 	bl	8003cf0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_GPIO_Init+0x66>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e00:	d303      	bcc.n	8004e0a <HAL_GPIO_Init+0x6e>
 8004e02:	21be      	movs	r1, #190	@ 0xbe
 8004e04:	4886      	ldr	r0, [pc, #536]	@ (8005020 <HAL_GPIO_Init+0x284>)
 8004e06:	f7fe ff73 	bl	8003cf0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8236 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f000 8231 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b11      	cmp	r3, #17
 8004e24:	f000 822c 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	f000 8227 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b12      	cmp	r3, #18
 8004e38:	f000 8222 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	4a78      	ldr	r2, [pc, #480]	@ (8005024 <HAL_GPIO_Init+0x288>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	f000 821c 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	4a76      	ldr	r2, [pc, #472]	@ (8005028 <HAL_GPIO_Init+0x28c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	f000 8216 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a74      	ldr	r2, [pc, #464]	@ (800502c <HAL_GPIO_Init+0x290>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	f000 8210 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a72      	ldr	r2, [pc, #456]	@ (8005030 <HAL_GPIO_Init+0x294>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	f000 820a 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a70      	ldr	r2, [pc, #448]	@ (8005034 <HAL_GPIO_Init+0x298>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	f000 8204 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a6e      	ldr	r2, [pc, #440]	@ (8005038 <HAL_GPIO_Init+0x29c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	f000 81fe 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	f000 81f9 	beq.w	8005280 <HAL_GPIO_Init+0x4e4>
 8004e8e:	21bf      	movs	r1, #191	@ 0xbf
 8004e90:	4863      	ldr	r0, [pc, #396]	@ (8005020 <HAL_GPIO_Init+0x284>)
 8004e92:	f7fe ff2d 	bl	8003cf0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e96:	e1f3      	b.n	8005280 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004e98:	2201      	movs	r2, #1
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f040 81e2 	bne.w	800527a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a52      	ldr	r2, [pc, #328]	@ (8005004 <HAL_GPIO_Init+0x268>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01b      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a51      	ldr	r2, [pc, #324]	@ (8005008 <HAL_GPIO_Init+0x26c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d017      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a50      	ldr	r2, [pc, #320]	@ (800500c <HAL_GPIO_Init+0x270>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8005010 <HAL_GPIO_Init+0x274>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a4e      	ldr	r2, [pc, #312]	@ (8005014 <HAL_GPIO_Init+0x278>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4d      	ldr	r2, [pc, #308]	@ (8005018 <HAL_GPIO_Init+0x27c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800501c <HAL_GPIO_Init+0x280>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <HAL_GPIO_Init+0x15a>
 8004eee:	21cd      	movs	r1, #205	@ 0xcd
 8004ef0:	484b      	ldr	r0, [pc, #300]	@ (8005020 <HAL_GPIO_Init+0x284>)
 8004ef2:	f7fe fefd 	bl	8003cf0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4a4f      	ldr	r2, [pc, #316]	@ (8005038 <HAL_GPIO_Init+0x29c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	f000 80c7 	beq.w	8005090 <HAL_GPIO_Init+0x2f4>
 8004f02:	4a4d      	ldr	r2, [pc, #308]	@ (8005038 <HAL_GPIO_Init+0x29c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	f200 80ed 	bhi.w	80050e4 <HAL_GPIO_Init+0x348>
 8004f0a:	4a48      	ldr	r2, [pc, #288]	@ (800502c <HAL_GPIO_Init+0x290>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f000 80bf 	beq.w	8005090 <HAL_GPIO_Init+0x2f4>
 8004f12:	4a46      	ldr	r2, [pc, #280]	@ (800502c <HAL_GPIO_Init+0x290>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	f200 80e5 	bhi.w	80050e4 <HAL_GPIO_Init+0x348>
 8004f1a:	4a46      	ldr	r2, [pc, #280]	@ (8005034 <HAL_GPIO_Init+0x298>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	f000 80b7 	beq.w	8005090 <HAL_GPIO_Init+0x2f4>
 8004f22:	4a44      	ldr	r2, [pc, #272]	@ (8005034 <HAL_GPIO_Init+0x298>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	f200 80dd 	bhi.w	80050e4 <HAL_GPIO_Init+0x348>
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005028 <HAL_GPIO_Init+0x28c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	f000 80af 	beq.w	8005090 <HAL_GPIO_Init+0x2f4>
 8004f32:	4a3d      	ldr	r2, [pc, #244]	@ (8005028 <HAL_GPIO_Init+0x28c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	f200 80d5 	bhi.w	80050e4 <HAL_GPIO_Init+0x348>
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005030 <HAL_GPIO_Init+0x294>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	f000 80a7 	beq.w	8005090 <HAL_GPIO_Init+0x2f4>
 8004f42:	4a3b      	ldr	r2, [pc, #236]	@ (8005030 <HAL_GPIO_Init+0x294>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	f200 80cd 	bhi.w	80050e4 <HAL_GPIO_Init+0x348>
 8004f4a:	2b12      	cmp	r3, #18
 8004f4c:	d82c      	bhi.n	8004fa8 <HAL_GPIO_Init+0x20c>
 8004f4e:	2b12      	cmp	r3, #18
 8004f50:	f200 80c8 	bhi.w	80050e4 <HAL_GPIO_Init+0x348>
 8004f54:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <HAL_GPIO_Init+0x1c0>)
 8004f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5a:	bf00      	nop
 8004f5c:	08005091 	.word	0x08005091
 8004f60:	08004fb1 	.word	0x08004fb1
 8004f64:	0800503d 	.word	0x0800503d
 8004f68:	080050df 	.word	0x080050df
 8004f6c:	080050e5 	.word	0x080050e5
 8004f70:	080050e5 	.word	0x080050e5
 8004f74:	080050e5 	.word	0x080050e5
 8004f78:	080050e5 	.word	0x080050e5
 8004f7c:	080050e5 	.word	0x080050e5
 8004f80:	080050e5 	.word	0x080050e5
 8004f84:	080050e5 	.word	0x080050e5
 8004f88:	080050e5 	.word	0x080050e5
 8004f8c:	080050e5 	.word	0x080050e5
 8004f90:	080050e5 	.word	0x080050e5
 8004f94:	080050e5 	.word	0x080050e5
 8004f98:	080050e5 	.word	0x080050e5
 8004f9c:	080050e5 	.word	0x080050e5
 8004fa0:	08004fd9 	.word	0x08004fd9
 8004fa4:	08005067 	.word	0x08005067
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8005024 <HAL_GPIO_Init+0x288>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d070      	beq.n	8005090 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004fae:	e099      	b.n	80050e4 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_GPIO_Init+0x234>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d007      	beq.n	8004fd0 <HAL_GPIO_Init+0x234>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d003      	beq.n	8004fd0 <HAL_GPIO_Init+0x234>
 8004fc8:	21d5      	movs	r1, #213	@ 0xd5
 8004fca:	4815      	ldr	r0, [pc, #84]	@ (8005020 <HAL_GPIO_Init+0x284>)
 8004fcc:	f7fe fe90 	bl	8003cf0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	623b      	str	r3, [r7, #32]
          break;
 8004fd6:	e086      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d00b      	beq.n	8004ff8 <HAL_GPIO_Init+0x25c>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d007      	beq.n	8004ff8 <HAL_GPIO_Init+0x25c>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x25c>
 8004ff0:	21dc      	movs	r1, #220	@ 0xdc
 8004ff2:	480b      	ldr	r0, [pc, #44]	@ (8005020 <HAL_GPIO_Init+0x284>)
 8004ff4:	f7fe fe7c 	bl	8003cf0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	623b      	str	r3, [r7, #32]
          break;
 8005000:	e071      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
 8005002:	bf00      	nop
 8005004:	40010800 	.word	0x40010800
 8005008:	40010c00 	.word	0x40010c00
 800500c:	40011000 	.word	0x40011000
 8005010:	40011400 	.word	0x40011400
 8005014:	40011800 	.word	0x40011800
 8005018:	40011c00 	.word	0x40011c00
 800501c:	40012000 	.word	0x40012000
 8005020:	0800d238 	.word	0x0800d238
 8005024:	10110000 	.word	0x10110000
 8005028:	10210000 	.word	0x10210000
 800502c:	10310000 	.word	0x10310000
 8005030:	10120000 	.word	0x10120000
 8005034:	10220000 	.word	0x10220000
 8005038:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d00b      	beq.n	800505c <HAL_GPIO_Init+0x2c0>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d007      	beq.n	800505c <HAL_GPIO_Init+0x2c0>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	2b03      	cmp	r3, #3
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x2c0>
 8005054:	21e3      	movs	r1, #227	@ 0xe3
 8005056:	4891      	ldr	r0, [pc, #580]	@ (800529c <HAL_GPIO_Init+0x500>)
 8005058:	f7fe fe4a 	bl	8003cf0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	3308      	adds	r3, #8
 8005062:	623b      	str	r3, [r7, #32]
          break;
 8005064:	e03f      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d00b      	beq.n	8005086 <HAL_GPIO_Init+0x2ea>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d007      	beq.n	8005086 <HAL_GPIO_Init+0x2ea>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0x2ea>
 800507e:	21ea      	movs	r1, #234	@ 0xea
 8005080:	4886      	ldr	r0, [pc, #536]	@ (800529c <HAL_GPIO_Init+0x500>)
 8005082:	f7fe fe35 	bl	8003cf0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	330c      	adds	r3, #12
 800508c:	623b      	str	r3, [r7, #32]
          break;
 800508e:	e02a      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_GPIO_Init+0x314>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d007      	beq.n	80050b0 <HAL_GPIO_Init+0x314>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x314>
 80050a8:	21f7      	movs	r1, #247	@ 0xf7
 80050aa:	487c      	ldr	r0, [pc, #496]	@ (800529c <HAL_GPIO_Init+0x500>)
 80050ac:	f7fe fe20 	bl	8003cf0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80050b8:	2304      	movs	r3, #4
 80050ba:	623b      	str	r3, [r7, #32]
          break;
 80050bc:	e013      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d105      	bne.n	80050d2 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050c6:	2308      	movs	r3, #8
 80050c8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	611a      	str	r2, [r3, #16]
          break;
 80050d0:	e009      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050d2:	2308      	movs	r3, #8
 80050d4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	615a      	str	r2, [r3, #20]
          break;
 80050dc:	e003      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
          break;
 80050e2:	e000      	b.n	80050e6 <HAL_GPIO_Init+0x34a>
          break;
 80050e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2bff      	cmp	r3, #255	@ 0xff
 80050ea:	d801      	bhi.n	80050f0 <HAL_GPIO_Init+0x354>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	e001      	b.n	80050f4 <HAL_GPIO_Init+0x358>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2bff      	cmp	r3, #255	@ 0xff
 80050fa:	d802      	bhi.n	8005102 <HAL_GPIO_Init+0x366>
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	e002      	b.n	8005108 <HAL_GPIO_Init+0x36c>
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	3b08      	subs	r3, #8
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	210f      	movs	r1, #15
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	fa01 f303 	lsl.w	r3, r1, r3
 8005116:	43db      	mvns	r3, r3
 8005118:	401a      	ands	r2, r3
 800511a:	6a39      	ldr	r1, [r7, #32]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	fa01 f303 	lsl.w	r3, r1, r3
 8005122:	431a      	orrs	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a2 	beq.w	800527a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005136:	4b5a      	ldr	r3, [pc, #360]	@ (80052a0 <HAL_GPIO_Init+0x504>)
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	4a59      	ldr	r2, [pc, #356]	@ (80052a0 <HAL_GPIO_Init+0x504>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6193      	str	r3, [r2, #24]
 8005142:	4b57      	ldr	r3, [pc, #348]	@ (80052a0 <HAL_GPIO_Init+0x504>)
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800514e:	4a55      	ldr	r2, [pc, #340]	@ (80052a4 <HAL_GPIO_Init+0x508>)
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	3302      	adds	r3, #2
 8005156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800515a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	220f      	movs	r2, #15
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4013      	ands	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a4c      	ldr	r2, [pc, #304]	@ (80052a8 <HAL_GPIO_Init+0x50c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d01f      	beq.n	80051ba <HAL_GPIO_Init+0x41e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a4b      	ldr	r2, [pc, #300]	@ (80052ac <HAL_GPIO_Init+0x510>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d019      	beq.n	80051b6 <HAL_GPIO_Init+0x41a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a4a      	ldr	r2, [pc, #296]	@ (80052b0 <HAL_GPIO_Init+0x514>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <HAL_GPIO_Init+0x416>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a49      	ldr	r2, [pc, #292]	@ (80052b4 <HAL_GPIO_Init+0x518>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00d      	beq.n	80051ae <HAL_GPIO_Init+0x412>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a48      	ldr	r2, [pc, #288]	@ (80052b8 <HAL_GPIO_Init+0x51c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <HAL_GPIO_Init+0x40e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a47      	ldr	r2, [pc, #284]	@ (80052bc <HAL_GPIO_Init+0x520>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d101      	bne.n	80051a6 <HAL_GPIO_Init+0x40a>
 80051a2:	2305      	movs	r3, #5
 80051a4:	e00a      	b.n	80051bc <HAL_GPIO_Init+0x420>
 80051a6:	2306      	movs	r3, #6
 80051a8:	e008      	b.n	80051bc <HAL_GPIO_Init+0x420>
 80051aa:	2304      	movs	r3, #4
 80051ac:	e006      	b.n	80051bc <HAL_GPIO_Init+0x420>
 80051ae:	2303      	movs	r3, #3
 80051b0:	e004      	b.n	80051bc <HAL_GPIO_Init+0x420>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e002      	b.n	80051bc <HAL_GPIO_Init+0x420>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <HAL_GPIO_Init+0x420>
 80051ba:	2300      	movs	r3, #0
 80051bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051be:	f002 0203 	and.w	r2, r2, #3
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	4093      	lsls	r3, r2
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80051cc:	4935      	ldr	r1, [pc, #212]	@ (80052a4 <HAL_GPIO_Init+0x508>)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	3302      	adds	r3, #2
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80051e6:	4b36      	ldr	r3, [pc, #216]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	4935      	ldr	r1, [pc, #212]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	608b      	str	r3, [r1, #8]
 80051f2:	e006      	b.n	8005202 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051f4:	4b32      	ldr	r3, [pc, #200]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	4930      	ldr	r1, [pc, #192]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 80051fe:	4013      	ands	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800520e:	4b2c      	ldr	r3, [pc, #176]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	492b      	ldr	r1, [pc, #172]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	60cb      	str	r3, [r1, #12]
 800521a:	e006      	b.n	800522a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800521c:	4b28      	ldr	r3, [pc, #160]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 800521e:	68da      	ldr	r2, [r3, #12]
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	43db      	mvns	r3, r3
 8005224:	4926      	ldr	r1, [pc, #152]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005226:	4013      	ands	r3, r2
 8005228:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005236:	4b22      	ldr	r3, [pc, #136]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4921      	ldr	r1, [pc, #132]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]
 8005242:	e006      	b.n	8005252 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005244:	4b1e      	ldr	r3, [pc, #120]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	43db      	mvns	r3, r3
 800524c:	491c      	ldr	r1, [pc, #112]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 800524e:	4013      	ands	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d006      	beq.n	800526c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800525e:	4b18      	ldr	r3, [pc, #96]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4917      	ldr	r1, [pc, #92]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	e006      	b.n	800527a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800526c:	4b14      	ldr	r3, [pc, #80]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	43db      	mvns	r3, r3
 8005274:	4912      	ldr	r1, [pc, #72]	@ (80052c0 <HAL_GPIO_Init+0x524>)
 8005276:	4013      	ands	r3, r2
 8005278:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	3301      	adds	r3, #1
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	f47f ae04 	bne.w	8004e98 <HAL_GPIO_Init+0xfc>
  }
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	@ 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	0800d238 	.word	0x0800d238
 80052a0:	40021000 	.word	0x40021000
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40010800 	.word	0x40010800
 80052ac:	40010c00 	.word	0x40010c00
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40011400 	.word	0x40011400
 80052b8:	40011800 	.word	0x40011800
 80052bc:	40011c00 	.word	0x40011c00
 80052c0:	40010400 	.word	0x40010400

080052c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80052d0:	887b      	ldrh	r3, [r7, #2]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d104      	bne.n	80052e0 <HAL_GPIO_ReadPin+0x1c>
 80052d6:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 80052da:	4809      	ldr	r0, [pc, #36]	@ (8005300 <HAL_GPIO_ReadPin+0x3c>)
 80052dc:	f7fe fd08 	bl	8003cf0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e001      	b.n	80052f6 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	0800d238 	.word	0x0800d238

08005304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
 8005310:	4613      	mov	r3, r2
 8005312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005314:	887b      	ldrh	r3, [r7, #2]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_GPIO_WritePin+0x20>
 800531a:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 800531e:	480e      	ldr	r0, [pc, #56]	@ (8005358 <HAL_GPIO_WritePin+0x54>)
 8005320:	f7fe fce6 	bl	8003cf0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005324:	787b      	ldrb	r3, [r7, #1]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_GPIO_WritePin+0x36>
 800532a:	787b      	ldrb	r3, [r7, #1]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d004      	beq.n	800533a <HAL_GPIO_WritePin+0x36>
 8005330:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8005334:	4808      	ldr	r0, [pc, #32]	@ (8005358 <HAL_GPIO_WritePin+0x54>)
 8005336:	f7fe fcdb 	bl	8003cf0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800533a:	787b      	ldrb	r3, [r7, #1]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005340:	887a      	ldrh	r2, [r7, #2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005346:	e003      	b.n	8005350 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005348:	887b      	ldrh	r3, [r7, #2]
 800534a:	041a      	lsls	r2, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	611a      	str	r2, [r3, #16]
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	0800d238 	.word	0x0800d238

0800535c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e1b4      	b.n	80056d8 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a9b      	ldr	r2, [pc, #620]	@ (80055e0 <HAL_I2C_Init+0x284>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d009      	beq.n	800538c <HAL_I2C_Init+0x30>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a99      	ldr	r2, [pc, #612]	@ (80055e4 <HAL_I2C_Init+0x288>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d004      	beq.n	800538c <HAL_I2C_Init+0x30>
 8005382:	f240 11db 	movw	r1, #475	@ 0x1db
 8005386:	4898      	ldr	r0, [pc, #608]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 8005388:	f7fe fcb2 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_I2C_Init+0x42>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a94      	ldr	r2, [pc, #592]	@ (80055ec <HAL_I2C_Init+0x290>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d904      	bls.n	80053a8 <HAL_I2C_Init+0x4c>
 800539e:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80053a2:	4891      	ldr	r0, [pc, #580]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 80053a4:	f7fe fca4 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_I2C_Init+0x68>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053b8:	d004      	beq.n	80053c4 <HAL_I2C_Init+0x68>
 80053ba:	f240 11dd 	movw	r1, #477	@ 0x1dd
 80053be:	488a      	ldr	r0, [pc, #552]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 80053c0:	f7fe fc96 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053cc:	d304      	bcc.n	80053d8 <HAL_I2C_Init+0x7c>
 80053ce:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80053d2:	4885      	ldr	r0, [pc, #532]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 80053d4:	f7fe fc8c 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80053e0:	d009      	beq.n	80053f6 <HAL_I2C_Init+0x9a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80053ea:	d004      	beq.n	80053f6 <HAL_I2C_Init+0x9a>
 80053ec:	f240 11df 	movw	r1, #479	@ 0x1df
 80053f0:	487d      	ldr	r0, [pc, #500]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 80053f2:	f7fe fc7d 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <HAL_I2C_Init+0xb4>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d004      	beq.n	8005410 <HAL_I2C_Init+0xb4>
 8005406:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800540a:	4877      	ldr	r0, [pc, #476]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 800540c:	f7fe fc70 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_I2C_Init+0xca>
 800541c:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8005420:	4871      	ldr	r0, [pc, #452]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 8005422:	f7fe fc65 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_I2C_Init+0xe4>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	2b40      	cmp	r3, #64	@ 0x40
 8005434:	d004      	beq.n	8005440 <HAL_I2C_Init+0xe4>
 8005436:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800543a:	486b      	ldr	r0, [pc, #428]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 800543c:	f7fe fc58 	bl	8003cf0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_I2C_Init+0xfe>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	2b80      	cmp	r3, #128	@ 0x80
 800544e:	d004      	beq.n	800545a <HAL_I2C_Init+0xfe>
 8005450:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8005454:	4864      	ldr	r0, [pc, #400]	@ (80055e8 <HAL_I2C_Init+0x28c>)
 8005456:	f7fe fc4b 	bl	8003cf0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fe fb96 	bl	8003ba0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	@ 0x24
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800549a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054ac:	f001 f9e8 	bl	8006880 <HAL_RCC_GetPCLK1Freq>
 80054b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4a4e      	ldr	r2, [pc, #312]	@ (80055f0 <HAL_I2C_Init+0x294>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d807      	bhi.n	80054cc <HAL_I2C_Init+0x170>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a4d      	ldr	r2, [pc, #308]	@ (80055f4 <HAL_I2C_Init+0x298>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	bf94      	ite	ls
 80054c4:	2301      	movls	r3, #1
 80054c6:	2300      	movhi	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e006      	b.n	80054da <HAL_I2C_Init+0x17e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4a4a      	ldr	r2, [pc, #296]	@ (80055f8 <HAL_I2C_Init+0x29c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bf94      	ite	ls
 80054d4:	2301      	movls	r3, #1
 80054d6:	2300      	movhi	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e0fa      	b.n	80056d8 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a45      	ldr	r2, [pc, #276]	@ (80055fc <HAL_I2C_Init+0x2a0>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0c9b      	lsrs	r3, r3, #18
 80054ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	430a      	orrs	r2, r1
 8005500:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	4a37      	ldr	r2, [pc, #220]	@ (80055f0 <HAL_I2C_Init+0x294>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d802      	bhi.n	800551c <HAL_I2C_Init+0x1c0>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3301      	adds	r3, #1
 800551a:	e009      	b.n	8005530 <HAL_I2C_Init+0x1d4>
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	4a36      	ldr	r2, [pc, #216]	@ (8005600 <HAL_I2C_Init+0x2a4>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	099b      	lsrs	r3, r3, #6
 800552e:	3301      	adds	r3, #1
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	430b      	orrs	r3, r1
 8005536:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005542:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	4929      	ldr	r1, [pc, #164]	@ (80055f0 <HAL_I2C_Init+0x294>)
 800554c:	428b      	cmp	r3, r1
 800554e:	d819      	bhi.n	8005584 <HAL_I2C_Init+0x228>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1e59      	subs	r1, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	fbb1 f3f3 	udiv	r3, r1, r3
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005564:	400b      	ands	r3, r1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_I2C_Init+0x224>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1e59      	subs	r1, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	fbb1 f3f3 	udiv	r3, r1, r3
 8005578:	3301      	adds	r3, #1
 800557a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800557e:	e064      	b.n	800564a <HAL_I2C_Init+0x2ee>
 8005580:	2304      	movs	r3, #4
 8005582:	e062      	b.n	800564a <HAL_I2C_Init+0x2ee>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d111      	bne.n	80055b0 <HAL_I2C_Init+0x254>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1e58      	subs	r0, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	440b      	add	r3, r1
 800559a:	fbb0 f3f3 	udiv	r3, r0, r3
 800559e:	3301      	adds	r3, #1
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	bf0c      	ite	eq
 80055a8:	2301      	moveq	r3, #1
 80055aa:	2300      	movne	r3, #0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	e012      	b.n	80055d6 <HAL_I2C_Init+0x27a>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1e58      	subs	r0, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6859      	ldr	r1, [r3, #4]
 80055b8:	460b      	mov	r3, r1
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	0099      	lsls	r1, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055c6:	3301      	adds	r3, #1
 80055c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d014      	beq.n	8005604 <HAL_I2C_Init+0x2a8>
 80055da:	2301      	movs	r3, #1
 80055dc:	e035      	b.n	800564a <HAL_I2C_Init+0x2ee>
 80055de:	bf00      	nop
 80055e0:	40005400 	.word	0x40005400
 80055e4:	40005800 	.word	0x40005800
 80055e8:	0800d274 	.word	0x0800d274
 80055ec:	00061a80 	.word	0x00061a80
 80055f0:	000186a0 	.word	0x000186a0
 80055f4:	001e847f 	.word	0x001e847f
 80055f8:	003d08ff 	.word	0x003d08ff
 80055fc:	431bde83 	.word	0x431bde83
 8005600:	10624dd3 	.word	0x10624dd3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10e      	bne.n	800562a <HAL_I2C_Init+0x2ce>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1e58      	subs	r0, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	440b      	add	r3, r1
 800561a:	fbb0 f3f3 	udiv	r3, r0, r3
 800561e:	3301      	adds	r3, #1
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005628:	e00f      	b.n	800564a <HAL_I2C_Init+0x2ee>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1e58      	subs	r0, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6859      	ldr	r1, [r3, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	440b      	add	r3, r1
 8005638:	0099      	lsls	r1, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005640:	3301      	adds	r3, #1
 8005642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	6809      	ldr	r1, [r1, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005678:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6911      	ldr	r1, [r2, #16]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68d2      	ldr	r2, [r2, #12]
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	430b      	orrs	r3, r1
 800568c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	695a      	ldr	r2, [r3, #20]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	431a      	orrs	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0201 	orr.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	817b      	strh	r3, [r7, #10]
 80056f2:	460b      	mov	r3, r1
 80056f4:	813b      	strh	r3, [r7, #8]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056fa:	f7ff f9e5 	bl	8004ac8 <HAL_GetTick>
 80056fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d007      	beq.n	8005716 <HAL_I2C_Mem_Write+0x36>
 8005706:	88fb      	ldrh	r3, [r7, #6]
 8005708:	2b10      	cmp	r3, #16
 800570a:	d004      	beq.n	8005716 <HAL_I2C_Mem_Write+0x36>
 800570c:	f640 2106 	movw	r1, #2566	@ 0xa06
 8005710:	4873      	ldr	r0, [pc, #460]	@ (80058e0 <HAL_I2C_Mem_Write+0x200>)
 8005712:	f7fe faed 	bl	8003cf0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b20      	cmp	r3, #32
 8005720:	f040 80d9 	bne.w	80058d6 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	2319      	movs	r3, #25
 800572a:	2201      	movs	r2, #1
 800572c:	496d      	ldr	r1, [pc, #436]	@ (80058e4 <HAL_I2C_Mem_Write+0x204>)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f972 	bl	8005a18 <I2C_WaitOnFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	e0cc      	b.n	80058d8 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_I2C_Mem_Write+0x6c>
 8005748:	2302      	movs	r3, #2
 800574a:	e0c5      	b.n	80058d8 <HAL_I2C_Mem_Write+0x1f8>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b01      	cmp	r3, #1
 8005760:	d007      	beq.n	8005772 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005780:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2221      	movs	r2, #33	@ 0x21
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2240      	movs	r2, #64	@ 0x40
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a3a      	ldr	r2, [r7, #32]
 800579c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a4d      	ldr	r2, [pc, #308]	@ (80058e8 <HAL_I2C_Mem_Write+0x208>)
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057b4:	88f8      	ldrh	r0, [r7, #6]
 80057b6:	893a      	ldrh	r2, [r7, #8]
 80057b8:	8979      	ldrh	r1, [r7, #10]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	4603      	mov	r3, r0
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f891 	bl	80058ec <I2C_RequestMemoryWrite>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d052      	beq.n	8005876 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e081      	b.n	80058d8 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fa37 	bl	8005c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00d      	beq.n	8005800 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d107      	bne.n	80057fc <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e06b      	b.n	80058d8 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	781a      	ldrb	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b04      	cmp	r3, #4
 800583c:	d11b      	bne.n	8005876 <HAL_I2C_Mem_Write+0x196>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d017      	beq.n	8005876 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	781a      	ldrb	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005860:	3b01      	subs	r3, #1
 8005862:	b29a      	uxth	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1aa      	bne.n	80057d4 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fa2a 	bl	8005cdc <I2C_WaitOnBTFFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2b04      	cmp	r3, #4
 8005894:	d107      	bne.n	80058a6 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e016      	b.n	80058d8 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	0800d274 	.word	0x0800d274
 80058e4:	00100002 	.word	0x00100002
 80058e8:	ffff0000 	.word	0xffff0000

080058ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	4608      	mov	r0, r1
 80058f6:	4611      	mov	r1, r2
 80058f8:	461a      	mov	r2, r3
 80058fa:	4603      	mov	r3, r0
 80058fc:	817b      	strh	r3, [r7, #10]
 80058fe:	460b      	mov	r3, r1
 8005900:	813b      	strh	r3, [r7, #8]
 8005902:	4613      	mov	r3, r2
 8005904:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005914:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2200      	movs	r2, #0
 800591e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 f878 	bl	8005a18 <I2C_WaitOnFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005938:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800593c:	d103      	bne.n	8005946 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e05f      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800594a:	897b      	ldrh	r3, [r7, #10]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005958:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	6a3a      	ldr	r2, [r7, #32]
 800595e:	492d      	ldr	r1, [pc, #180]	@ (8005a14 <I2C_RequestMemoryWrite+0x128>)
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f8d3 	bl	8005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e04c      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f95e 	bl	8005c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00d      	beq.n	80059b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	2b04      	cmp	r3, #4
 800599c:	d107      	bne.n	80059ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e02b      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d105      	bne.n	80059c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b8:	893b      	ldrh	r3, [r7, #8]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
 80059c2:	e021      	b.n	8005a08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059d4:	6a39      	ldr	r1, [r7, #32]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f938 	bl	8005c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00d      	beq.n	80059fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d107      	bne.n	80059fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e005      	b.n	8005a0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	00010002 	.word	0x00010002

08005a18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a28:	e048      	b.n	8005abc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d044      	beq.n	8005abc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a32:	f7ff f849 	bl	8004ac8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d302      	bcc.n	8005a48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d139      	bne.n	8005abc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10d      	bne.n	8005a6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	43da      	mvns	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	e00c      	b.n	8005a88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	43da      	mvns	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d116      	bne.n	8005abc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e023      	b.n	8005b04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d10d      	bne.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	43da      	mvns	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	e00c      	b.n	8005afc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	43da      	mvns	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4013      	ands	r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	79fb      	ldrb	r3, [r7, #7]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d093      	beq.n	8005a2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
 8005b18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b1a:	e071      	b.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b2a:	d123      	bne.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b60:	f043 0204 	orr.w	r2, r3, #4
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e067      	b.n	8005c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d041      	beq.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b7c:	f7fe ffa4 	bl	8004ac8 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d302      	bcc.n	8005b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d136      	bne.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10c      	bne.n	8005bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	bf14      	ite	ne
 8005bae:	2301      	movne	r3, #1
 8005bb0:	2300      	moveq	r3, #0
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	e00b      	b.n	8005bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	43da      	mvns	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf14      	ite	ne
 8005bc8:	2301      	movne	r3, #1
 8005bca:	2300      	moveq	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d016      	beq.n	8005c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bec:	f043 0220 	orr.w	r2, r3, #32
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e021      	b.n	8005c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	0c1b      	lsrs	r3, r3, #16
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d10c      	bne.n	8005c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	43da      	mvns	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bf14      	ite	ne
 8005c1c:	2301      	movne	r3, #1
 8005c1e:	2300      	moveq	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	e00b      	b.n	8005c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	43da      	mvns	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bf14      	ite	ne
 8005c36:	2301      	movne	r3, #1
 8005c38:	2300      	moveq	r3, #0
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f47f af6d 	bne.w	8005b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c58:	e034      	b.n	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f886 	bl	8005d6c <I2C_IsAcknowledgeFailed>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e034      	b.n	8005cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c70:	d028      	beq.n	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c72:	f7fe ff29 	bl	8004ac8 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d302      	bcc.n	8005c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11d      	bne.n	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b80      	cmp	r3, #128	@ 0x80
 8005c94:	d016      	beq.n	8005cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	f043 0220 	orr.w	r2, r3, #32
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e007      	b.n	8005cd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cce:	2b80      	cmp	r3, #128	@ 0x80
 8005cd0:	d1c3      	bne.n	8005c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ce8:	e034      	b.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f83e 	bl	8005d6c <I2C_IsAcknowledgeFailed>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e034      	b.n	8005d64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d028      	beq.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d02:	f7fe fee1 	bl	8004ac8 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11d      	bne.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d016      	beq.n	8005d54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e007      	b.n	8005d64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d1c3      	bne.n	8005cea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d82:	d11b      	bne.n	8005dbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	f043 0204 	orr.w	r2, r3, #4
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e35a      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01c      	beq.n	8005e1c <HAL_RCC_OscConfig+0x54>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d116      	bne.n	8005e1c <HAL_RCC_OscConfig+0x54>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d110      	bne.n	8005e1c <HAL_RCC_OscConfig+0x54>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10a      	bne.n	8005e1c <HAL_RCC_OscConfig+0x54>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d104      	bne.n	8005e1c <HAL_RCC_OscConfig+0x54>
 8005e12:	f240 1165 	movw	r1, #357	@ 0x165
 8005e16:	488f      	ldr	r0, [pc, #572]	@ (8006054 <HAL_RCC_OscConfig+0x28c>)
 8005e18:	f7fd ff6a 	bl	8003cf0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 809a 	beq.w	8005f5e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <HAL_RCC_OscConfig+0x88>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e3a:	d009      	beq.n	8005e50 <HAL_RCC_OscConfig+0x88>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e44:	d004      	beq.n	8005e50 <HAL_RCC_OscConfig+0x88>
 8005e46:	f240 116b 	movw	r1, #363	@ 0x16b
 8005e4a:	4882      	ldr	r0, [pc, #520]	@ (8006054 <HAL_RCC_OscConfig+0x28c>)
 8005e4c:	f7fd ff50 	bl	8003cf0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e50:	4b81      	ldr	r3, [pc, #516]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 030c 	and.w	r3, r3, #12
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d00c      	beq.n	8005e76 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e5c:	4b7e      	ldr	r3, [pc, #504]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d112      	bne.n	8005e8e <HAL_RCC_OscConfig+0xc6>
 8005e68:	4b7b      	ldr	r3, [pc, #492]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d10b      	bne.n	8005e8e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e76:	4b78      	ldr	r3, [pc, #480]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d06c      	beq.n	8005f5c <HAL_RCC_OscConfig+0x194>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d168      	bne.n	8005f5c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e300      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0xde>
 8005e98:	4b6f      	ldr	r3, [pc, #444]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e02e      	b.n	8005f04 <HAL_RCC_OscConfig+0x13c>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x100>
 8005eae:	4b6a      	ldr	r3, [pc, #424]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a69      	ldr	r2, [pc, #420]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b67      	ldr	r3, [pc, #412]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a66      	ldr	r2, [pc, #408]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e01d      	b.n	8005f04 <HAL_RCC_OscConfig+0x13c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCC_OscConfig+0x124>
 8005ed2:	4b61      	ldr	r3, [pc, #388]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a60      	ldr	r2, [pc, #384]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	4b5e      	ldr	r3, [pc, #376]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a5d      	ldr	r2, [pc, #372]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e00b      	b.n	8005f04 <HAL_RCC_OscConfig+0x13c>
 8005eec:	4b5a      	ldr	r3, [pc, #360]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a59      	ldr	r2, [pc, #356]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b57      	ldr	r3, [pc, #348]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a56      	ldr	r2, [pc, #344]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0c:	f7fe fddc 	bl	8004ac8 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fe fdd8 	bl	8004ac8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	@ 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e2b4      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	4b4c      	ldr	r3, [pc, #304]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0x14c>
 8005f32:	e014      	b.n	8005f5e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fe fdc8 	bl	8004ac8 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f3c:	f7fe fdc4 	bl	8004ac8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	@ 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e2a0      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f4e:	4b42      	ldr	r3, [pc, #264]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x174>
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8080 	beq.w	800606c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCC_OscConfig+0x1be>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d004      	beq.n	8005f86 <HAL_RCC_OscConfig+0x1be>
 8005f7c:	f240 119f 	movw	r1, #415	@ 0x19f
 8005f80:	4834      	ldr	r0, [pc, #208]	@ (8006054 <HAL_RCC_OscConfig+0x28c>)
 8005f82:	f7fd feb5 	bl	8003cf0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	2b1f      	cmp	r3, #31
 8005f8c:	d904      	bls.n	8005f98 <HAL_RCC_OscConfig+0x1d0>
 8005f8e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8005f92:	4830      	ldr	r0, [pc, #192]	@ (8006054 <HAL_RCC_OscConfig+0x28c>)
 8005f94:	f7fd feac 	bl	8003cf0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f98:	4b2f      	ldr	r3, [pc, #188]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00b      	beq.n	8005fbc <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f003 030c 	and.w	r3, r3, #12
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d11c      	bne.n	8005fea <HAL_RCC_OscConfig+0x222>
 8005fb0:	4b29      	ldr	r3, [pc, #164]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d116      	bne.n	8005fea <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fbc:	4b26      	ldr	r3, [pc, #152]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x20c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e25d      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd4:	4b20      	ldr	r3, [pc, #128]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	491d      	ldr	r1, [pc, #116]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fe8:	e040      	b.n	800606c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <HAL_RCC_OscConfig+0x294>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fe fd66 	bl	8004ac8 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006000:	f7fe fd62 	bl	8004ac8 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e23e      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006012:	4b11      	ldr	r3, [pc, #68]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800601e:	4b0e      	ldr	r3, [pc, #56]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	490a      	ldr	r1, [pc, #40]	@ (8006058 <HAL_RCC_OscConfig+0x290>)
 800602e:	4313      	orrs	r3, r2
 8006030:	600b      	str	r3, [r1, #0]
 8006032:	e01b      	b.n	800606c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006034:	4b09      	ldr	r3, [pc, #36]	@ (800605c <HAL_RCC_OscConfig+0x294>)
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603a:	f7fe fd45 	bl	8004ac8 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006040:	e00e      	b.n	8006060 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006042:	f7fe fd41 	bl	8004ac8 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d907      	bls.n	8006060 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e21d      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
 8006054:	0800d2ac 	.word	0x0800d2ac
 8006058:	40021000 	.word	0x40021000
 800605c:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006060:	4b7d      	ldr	r3, [pc, #500]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1ea      	bne.n	8006042 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d040      	beq.n	80060fa <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_RCC_OscConfig+0x2ca>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d004      	beq.n	8006092 <HAL_RCC_OscConfig+0x2ca>
 8006088:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800608c:	4873      	ldr	r0, [pc, #460]	@ (800625c <HAL_RCC_OscConfig+0x494>)
 800608e:	f7fd fe2f 	bl	8003cf0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d019      	beq.n	80060ce <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800609a:	4b71      	ldr	r3, [pc, #452]	@ (8006260 <HAL_RCC_OscConfig+0x498>)
 800609c:	2201      	movs	r2, #1
 800609e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a0:	f7fe fd12 	bl	8004ac8 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060a8:	f7fe fd0e 	bl	8004ac8 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e1ea      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ba:	4b67      	ldr	r3, [pc, #412]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060c6:	2001      	movs	r0, #1
 80060c8:	f000 fbee 	bl	80068a8 <RCC_Delay>
 80060cc:	e015      	b.n	80060fa <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ce:	4b64      	ldr	r3, [pc, #400]	@ (8006260 <HAL_RCC_OscConfig+0x498>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d4:	f7fe fcf8 	bl	8004ac8 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060dc:	f7fe fcf4 	bl	8004ac8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1d0      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060ee:	4b5a      	ldr	r3, [pc, #360]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 80bf 	beq.w	8006286 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006108:	2300      	movs	r3, #0
 800610a:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <HAL_RCC_OscConfig+0x366>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d008      	beq.n	800612e <HAL_RCC_OscConfig+0x366>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b05      	cmp	r3, #5
 8006122:	d004      	beq.n	800612e <HAL_RCC_OscConfig+0x366>
 8006124:	f240 210f 	movw	r1, #527	@ 0x20f
 8006128:	484c      	ldr	r0, [pc, #304]	@ (800625c <HAL_RCC_OscConfig+0x494>)
 800612a:	f7fd fde1 	bl	8003cf0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612e:	4b4a      	ldr	r3, [pc, #296]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10d      	bne.n	8006156 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	4b47      	ldr	r3, [pc, #284]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	4a46      	ldr	r2, [pc, #280]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 8006140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006144:	61d3      	str	r3, [r2, #28]
 8006146:	4b44      	ldr	r3, [pc, #272]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006152:	2301      	movs	r3, #1
 8006154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006156:	4b43      	ldr	r3, [pc, #268]	@ (8006264 <HAL_RCC_OscConfig+0x49c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615e:	2b00      	cmp	r3, #0
 8006160:	d118      	bne.n	8006194 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006162:	4b40      	ldr	r3, [pc, #256]	@ (8006264 <HAL_RCC_OscConfig+0x49c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a3f      	ldr	r2, [pc, #252]	@ (8006264 <HAL_RCC_OscConfig+0x49c>)
 8006168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800616c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800616e:	f7fe fcab 	bl	8004ac8 <HAL_GetTick>
 8006172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006174:	e008      	b.n	8006188 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006176:	f7fe fca7 	bl	8004ac8 <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b64      	cmp	r3, #100	@ 0x64
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e183      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006188:	4b36      	ldr	r3, [pc, #216]	@ (8006264 <HAL_RCC_OscConfig+0x49c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f0      	beq.n	8006176 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d106      	bne.n	80061aa <HAL_RCC_OscConfig+0x3e2>
 800619c:	4b2e      	ldr	r3, [pc, #184]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061a2:	f043 0301 	orr.w	r3, r3, #1
 80061a6:	6213      	str	r3, [r2, #32]
 80061a8:	e02d      	b.n	8006206 <HAL_RCC_OscConfig+0x43e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10c      	bne.n	80061cc <HAL_RCC_OscConfig+0x404>
 80061b2:	4b29      	ldr	r3, [pc, #164]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	4a28      	ldr	r2, [pc, #160]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6213      	str	r3, [r2, #32]
 80061be:	4b26      	ldr	r3, [pc, #152]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	4a25      	ldr	r2, [pc, #148]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061c4:	f023 0304 	bic.w	r3, r3, #4
 80061c8:	6213      	str	r3, [r2, #32]
 80061ca:	e01c      	b.n	8006206 <HAL_RCC_OscConfig+0x43e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b05      	cmp	r3, #5
 80061d2:	d10c      	bne.n	80061ee <HAL_RCC_OscConfig+0x426>
 80061d4:	4b20      	ldr	r3, [pc, #128]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	4a1f      	ldr	r2, [pc, #124]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	6213      	str	r3, [r2, #32]
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061e6:	f043 0301 	orr.w	r3, r3, #1
 80061ea:	6213      	str	r3, [r2, #32]
 80061ec:	e00b      	b.n	8006206 <HAL_RCC_OscConfig+0x43e>
 80061ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	4a19      	ldr	r2, [pc, #100]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	6213      	str	r3, [r2, #32]
 80061fa:	4b17      	ldr	r3, [pc, #92]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	4a16      	ldr	r2, [pc, #88]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 8006200:	f023 0304 	bic.w	r3, r3, #4
 8006204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d015      	beq.n	800623a <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800620e:	f7fe fc5b 	bl	8004ac8 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006214:	e00a      	b.n	800622c <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006216:	f7fe fc57 	bl	8004ac8 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006224:	4293      	cmp	r3, r2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e131      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622c:	4b0a      	ldr	r3, [pc, #40]	@ (8006258 <HAL_RCC_OscConfig+0x490>)
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0ee      	beq.n	8006216 <HAL_RCC_OscConfig+0x44e>
 8006238:	e01c      	b.n	8006274 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800623a:	f7fe fc45 	bl	8004ac8 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006240:	e012      	b.n	8006268 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006242:	f7fe fc41 	bl	8004ac8 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006250:	4293      	cmp	r3, r2
 8006252:	d909      	bls.n	8006268 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e11b      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
 8006258:	40021000 	.word	0x40021000
 800625c:	0800d2ac 	.word	0x0800d2ac
 8006260:	42420480 	.word	0x42420480
 8006264:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006268:	4b8b      	ldr	r3, [pc, #556]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f003 0302 	and.w	r3, r3, #2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e6      	bne.n	8006242 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d105      	bne.n	8006286 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800627a:	4b87      	ldr	r3, [pc, #540]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4a86      	ldr	r2, [pc, #536]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 8006280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006284:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69db      	ldr	r3, [r3, #28]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00c      	beq.n	80062a8 <HAL_RCC_OscConfig+0x4e0>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d008      	beq.n	80062a8 <HAL_RCC_OscConfig+0x4e0>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d004      	beq.n	80062a8 <HAL_RCC_OscConfig+0x4e0>
 800629e:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80062a2:	487e      	ldr	r0, [pc, #504]	@ (800649c <HAL_RCC_OscConfig+0x6d4>)
 80062a4:	f7fd fd24 	bl	8003cf0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 80ee 	beq.w	800648e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062b2:	4b79      	ldr	r3, [pc, #484]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	f000 80ce 	beq.w	800645c <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	f040 80b2 	bne.w	800642e <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <HAL_RCC_OscConfig+0x51e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062da:	d004      	beq.n	80062e6 <HAL_RCC_OscConfig+0x51e>
 80062dc:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80062e0:	486e      	ldr	r0, [pc, #440]	@ (800649c <HAL_RCC_OscConfig+0x6d4>)
 80062e2:	f7fd fd05 	bl	8003cf0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04a      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80062f6:	d045      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006300:	d040      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006306:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800630a:	d03b      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006314:	d036      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800631e:	d031      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006328:	d02c      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006332:	d027      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800633c:	d022      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006346:	d01d      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006350:	d018      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800635a:	d013      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006364:	d00e      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636a:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800636e:	d009      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8006378:	d004      	beq.n	8006384 <HAL_RCC_OscConfig+0x5bc>
 800637a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800637e:	4847      	ldr	r0, [pc, #284]	@ (800649c <HAL_RCC_OscConfig+0x6d4>)
 8006380:	f7fd fcb6 	bl	8003cf0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006384:	4b46      	ldr	r3, [pc, #280]	@ (80064a0 <HAL_RCC_OscConfig+0x6d8>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638a:	f7fe fb9d 	bl	8004ac8 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006392:	f7fe fb99 	bl	8004ac8 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e075      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b8:	d116      	bne.n	80063e8 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d009      	beq.n	80063d6 <HAL_RCC_OscConfig+0x60e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ca:	d004      	beq.n	80063d6 <HAL_RCC_OscConfig+0x60e>
 80063cc:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80063d0:	4832      	ldr	r0, [pc, #200]	@ (800649c <HAL_RCC_OscConfig+0x6d4>)
 80063d2:	f7fd fc8d 	bl	8003cf0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063d6:	4b30      	ldr	r3, [pc, #192]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	492d      	ldr	r1, [pc, #180]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a19      	ldr	r1, [r3, #32]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	430b      	orrs	r3, r1
 80063fa:	4927      	ldr	r1, [pc, #156]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006400:	4b27      	ldr	r3, [pc, #156]	@ (80064a0 <HAL_RCC_OscConfig+0x6d8>)
 8006402:	2201      	movs	r2, #1
 8006404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006406:	f7fe fb5f 	bl	8004ac8 <HAL_GetTick>
 800640a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800640c:	e008      	b.n	8006420 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800640e:	f7fe fb5b 	bl	8004ac8 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b02      	cmp	r3, #2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e037      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006420:	4b1d      	ldr	r3, [pc, #116]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0f0      	beq.n	800640e <HAL_RCC_OscConfig+0x646>
 800642c:	e02f      	b.n	800648e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642e:	4b1c      	ldr	r3, [pc, #112]	@ (80064a0 <HAL_RCC_OscConfig+0x6d8>)
 8006430:	2200      	movs	r2, #0
 8006432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006434:	f7fe fb48 	bl	8004ac8 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800643a:	e008      	b.n	800644e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800643c:	f7fe fb44 	bl	8004ac8 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d901      	bls.n	800644e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e020      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800644e:	4b12      	ldr	r3, [pc, #72]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1f0      	bne.n	800643c <HAL_RCC_OscConfig+0x674>
 800645a:	e018      	b.n	800648e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e013      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006468:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <HAL_RCC_OscConfig+0x6d0>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	429a      	cmp	r2, r3
 800647a:	d106      	bne.n	800648a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006486:	429a      	cmp	r2, r3
 8006488:	d001      	beq.n	800648e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	40021000 	.word	0x40021000
 800649c:	0800d2ac 	.word	0x0800d2ac
 80064a0:	42420060 	.word	0x42420060

080064a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e176      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d116      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x4e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d110      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x4e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x4e>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d104      	bne.n	80064f2 <HAL_RCC_ClockConfig+0x4e>
 80064e8:	f240 3136 	movw	r1, #822	@ 0x336
 80064ec:	4874      	ldr	r0, [pc, #464]	@ (80066c0 <HAL_RCC_ClockConfig+0x21c>)
 80064ee:	f7fd fbff 	bl	8003cf0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <HAL_RCC_ClockConfig+0x6a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d007      	beq.n	800650e <HAL_RCC_ClockConfig+0x6a>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d004      	beq.n	800650e <HAL_RCC_ClockConfig+0x6a>
 8006504:	f240 3137 	movw	r1, #823	@ 0x337
 8006508:	486d      	ldr	r0, [pc, #436]	@ (80066c0 <HAL_RCC_ClockConfig+0x21c>)
 800650a:	f7fd fbf1 	bl	8003cf0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800650e:	4b6d      	ldr	r3, [pc, #436]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d910      	bls.n	800653e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651c:	4b69      	ldr	r3, [pc, #420]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 0207 	bic.w	r2, r3, #7
 8006524:	4967      	ldr	r1, [pc, #412]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652c:	4b65      	ldr	r3, [pc, #404]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d001      	beq.n	800653e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e133      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d049      	beq.n	80065de <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d005      	beq.n	8006562 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006556:	4b5c      	ldr	r3, [pc, #368]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	4a5b      	ldr	r2, [pc, #364]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 800655c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006560:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800656e:	4b56      	ldr	r3, [pc, #344]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4a55      	ldr	r2, [pc, #340]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 8006574:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006578:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d024      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b80      	cmp	r3, #128	@ 0x80
 8006588:	d020      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	2b90      	cmp	r3, #144	@ 0x90
 8006590:	d01c      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	2ba0      	cmp	r3, #160	@ 0xa0
 8006598:	d018      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	2bb0      	cmp	r3, #176	@ 0xb0
 80065a0:	d014      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065a8:	d010      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	2bd0      	cmp	r3, #208	@ 0xd0
 80065b0:	d00c      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2be0      	cmp	r3, #224	@ 0xe0
 80065b8:	d008      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2bf0      	cmp	r3, #240	@ 0xf0
 80065c0:	d004      	beq.n	80065cc <HAL_RCC_ClockConfig+0x128>
 80065c2:	f240 315d 	movw	r1, #861	@ 0x35d
 80065c6:	483e      	ldr	r0, [pc, #248]	@ (80066c0 <HAL_RCC_ClockConfig+0x21c>)
 80065c8:	f7fd fb92 	bl	8003cf0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065cc:	4b3e      	ldr	r3, [pc, #248]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	493b      	ldr	r1, [pc, #236]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d051      	beq.n	800668e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_RCC_ClockConfig+0x168>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d008      	beq.n	800660c <HAL_RCC_ClockConfig+0x168>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d004      	beq.n	800660c <HAL_RCC_ClockConfig+0x168>
 8006602:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8006606:	482e      	ldr	r0, [pc, #184]	@ (80066c0 <HAL_RCC_ClockConfig+0x21c>)
 8006608:	f7fd fb72 	bl	8003cf0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d107      	bne.n	8006624 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006614:	4b2c      	ldr	r3, [pc, #176]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d115      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e0c0      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d107      	bne.n	800663c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662c:	4b26      	ldr	r3, [pc, #152]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e0b4      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800663c:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e0ac      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800664c:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f023 0203 	bic.w	r2, r3, #3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	491b      	ldr	r1, [pc, #108]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 800665a:	4313      	orrs	r3, r2
 800665c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800665e:	f7fe fa33 	bl	8004ac8 <HAL_GetTick>
 8006662:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006664:	e00a      	b.n	800667c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006666:	f7fe fa2f 	bl	8004ac8 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006674:	4293      	cmp	r3, r2
 8006676:	d901      	bls.n	800667c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e094      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800667c:	4b12      	ldr	r3, [pc, #72]	@ (80066c8 <HAL_RCC_ClockConfig+0x224>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f003 020c 	and.w	r2, r3, #12
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	429a      	cmp	r2, r3
 800668c:	d1eb      	bne.n	8006666 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0307 	and.w	r3, r3, #7
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d217      	bcs.n	80066cc <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800669c:	4b09      	ldr	r3, [pc, #36]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f023 0207 	bic.w	r2, r3, #7
 80066a4:	4907      	ldr	r1, [pc, #28]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ac:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <HAL_RCC_ClockConfig+0x220>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d008      	beq.n	80066cc <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e073      	b.n	80067a6 <HAL_RCC_ClockConfig+0x302>
 80066be:	bf00      	nop
 80066c0:	0800d2ac 	.word	0x0800d2ac
 80066c4:	40022000 	.word	0x40022000
 80066c8:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0304 	and.w	r3, r3, #4
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d025      	beq.n	8006724 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d018      	beq.n	8006712 <HAL_RCC_ClockConfig+0x26e>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e8:	d013      	beq.n	8006712 <HAL_RCC_ClockConfig+0x26e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80066f2:	d00e      	beq.n	8006712 <HAL_RCC_ClockConfig+0x26e>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066fc:	d009      	beq.n	8006712 <HAL_RCC_ClockConfig+0x26e>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006706:	d004      	beq.n	8006712 <HAL_RCC_ClockConfig+0x26e>
 8006708:	f240 31a2 	movw	r1, #930	@ 0x3a2
 800670c:	4828      	ldr	r0, [pc, #160]	@ (80067b0 <HAL_RCC_ClockConfig+0x30c>)
 800670e:	f7fd faef 	bl	8003cf0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006712:	4b28      	ldr	r3, [pc, #160]	@ (80067b4 <HAL_RCC_ClockConfig+0x310>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	4925      	ldr	r1, [pc, #148]	@ (80067b4 <HAL_RCC_ClockConfig+0x310>)
 8006720:	4313      	orrs	r3, r2
 8006722:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d026      	beq.n	800677e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d018      	beq.n	800676a <HAL_RCC_ClockConfig+0x2c6>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006740:	d013      	beq.n	800676a <HAL_RCC_ClockConfig+0x2c6>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800674a:	d00e      	beq.n	800676a <HAL_RCC_ClockConfig+0x2c6>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006754:	d009      	beq.n	800676a <HAL_RCC_ClockConfig+0x2c6>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800675e:	d004      	beq.n	800676a <HAL_RCC_ClockConfig+0x2c6>
 8006760:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8006764:	4812      	ldr	r0, [pc, #72]	@ (80067b0 <HAL_RCC_ClockConfig+0x30c>)
 8006766:	f7fd fac3 	bl	8003cf0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800676a:	4b12      	ldr	r3, [pc, #72]	@ (80067b4 <HAL_RCC_ClockConfig+0x310>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	490e      	ldr	r1, [pc, #56]	@ (80067b4 <HAL_RCC_ClockConfig+0x310>)
 800677a:	4313      	orrs	r3, r2
 800677c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800677e:	f000 f821 	bl	80067c4 <HAL_RCC_GetSysClockFreq>
 8006782:	4602      	mov	r2, r0
 8006784:	4b0b      	ldr	r3, [pc, #44]	@ (80067b4 <HAL_RCC_ClockConfig+0x310>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	091b      	lsrs	r3, r3, #4
 800678a:	f003 030f 	and.w	r3, r3, #15
 800678e:	490a      	ldr	r1, [pc, #40]	@ (80067b8 <HAL_RCC_ClockConfig+0x314>)
 8006790:	5ccb      	ldrb	r3, [r1, r3]
 8006792:	fa22 f303 	lsr.w	r3, r2, r3
 8006796:	4a09      	ldr	r2, [pc, #36]	@ (80067bc <HAL_RCC_ClockConfig+0x318>)
 8006798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800679a:	4b09      	ldr	r3, [pc, #36]	@ (80067c0 <HAL_RCC_ClockConfig+0x31c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe f950 	bl	8004a44 <HAL_InitTick>

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	0800d2ac 	.word	0x0800d2ac
 80067b4:	40021000 	.word	0x40021000
 80067b8:	0800dac4 	.word	0x0800dac4
 80067bc:	2000004c 	.word	0x2000004c
 80067c0:	20000050 	.word	0x20000050

080067c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	2300      	movs	r3, #0
 80067d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80067de:	4b1e      	ldr	r3, [pc, #120]	@ (8006858 <HAL_RCC_GetSysClockFreq+0x94>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d002      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0x30>
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d003      	beq.n	80067fa <HAL_RCC_GetSysClockFreq+0x36>
 80067f2:	e027      	b.n	8006844 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80067f4:	4b19      	ldr	r3, [pc, #100]	@ (800685c <HAL_RCC_GetSysClockFreq+0x98>)
 80067f6:	613b      	str	r3, [r7, #16]
      break;
 80067f8:	e027      	b.n	800684a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	0c9b      	lsrs	r3, r3, #18
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	4a17      	ldr	r2, [pc, #92]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006804:	5cd3      	ldrb	r3, [r2, r3]
 8006806:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d010      	beq.n	8006834 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006812:	4b11      	ldr	r3, [pc, #68]	@ (8006858 <HAL_RCC_GetSysClockFreq+0x94>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	0c5b      	lsrs	r3, r3, #17
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	4a11      	ldr	r2, [pc, #68]	@ (8006864 <HAL_RCC_GetSysClockFreq+0xa0>)
 800681e:	5cd3      	ldrb	r3, [r2, r3]
 8006820:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a0d      	ldr	r2, [pc, #52]	@ (800685c <HAL_RCC_GetSysClockFreq+0x98>)
 8006826:	fb03 f202 	mul.w	r2, r3, r2
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e004      	b.n	800683e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a0c      	ldr	r2, [pc, #48]	@ (8006868 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	613b      	str	r3, [r7, #16]
      break;
 8006842:	e002      	b.n	800684a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006844:	4b05      	ldr	r3, [pc, #20]	@ (800685c <HAL_RCC_GetSysClockFreq+0x98>)
 8006846:	613b      	str	r3, [r7, #16]
      break;
 8006848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800684a:	693b      	ldr	r3, [r7, #16]
}
 800684c:	4618      	mov	r0, r3
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40021000 	.word	0x40021000
 800685c:	007a1200 	.word	0x007a1200
 8006860:	0800dadc 	.word	0x0800dadc
 8006864:	0800daec 	.word	0x0800daec
 8006868:	003d0900 	.word	0x003d0900

0800686c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006870:	4b02      	ldr	r3, [pc, #8]	@ (800687c <HAL_RCC_GetHCLKFreq+0x10>)
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr
 800687c:	2000004c 	.word	0x2000004c

08006880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006884:	f7ff fff2 	bl	800686c <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	0a1b      	lsrs	r3, r3, #8
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4903      	ldr	r1, [pc, #12]	@ (80068a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800689c:	4618      	mov	r0, r3
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000
 80068a4:	0800dad4 	.word	0x0800dad4

080068a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80068b0:	4b0a      	ldr	r3, [pc, #40]	@ (80068dc <RCC_Delay+0x34>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a0a      	ldr	r2, [pc, #40]	@ (80068e0 <RCC_Delay+0x38>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0a5b      	lsrs	r3, r3, #9
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	fb02 f303 	mul.w	r3, r2, r3
 80068c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80068c4:	bf00      	nop
  }
  while (Delay --);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1e5a      	subs	r2, r3, #1
 80068ca:	60fa      	str	r2, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f9      	bne.n	80068c4 <RCC_Delay+0x1c>
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	2000004c 	.word	0x2000004c
 80068e0:	10624dd3 	.word	0x10624dd3

080068e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d101      	bne.n	80068f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e0b5      	b.n	8006a62 <HAL_TIM_Base_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a5c      	ldr	r2, [pc, #368]	@ (8006a6c <HAL_TIM_Base_Init+0x188>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d027      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a5a      	ldr	r2, [pc, #360]	@ (8006a70 <HAL_TIM_Base_Init+0x18c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d022      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006912:	d01d      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a56      	ldr	r2, [pc, #344]	@ (8006a74 <HAL_TIM_Base_Init+0x190>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d018      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a55      	ldr	r2, [pc, #340]	@ (8006a78 <HAL_TIM_Base_Init+0x194>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d013      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a53      	ldr	r2, [pc, #332]	@ (8006a7c <HAL_TIM_Base_Init+0x198>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00e      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a52      	ldr	r2, [pc, #328]	@ (8006a80 <HAL_TIM_Base_Init+0x19c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d009      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a50      	ldr	r2, [pc, #320]	@ (8006a84 <HAL_TIM_Base_Init+0x1a0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d004      	beq.n	8006950 <HAL_TIM_Base_Init+0x6c>
 8006946:	f240 1113 	movw	r1, #275	@ 0x113
 800694a:	484f      	ldr	r0, [pc, #316]	@ (8006a88 <HAL_TIM_Base_Init+0x1a4>)
 800694c:	f7fd f9d0 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d014      	beq.n	8006982 <HAL_TIM_Base_Init+0x9e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b10      	cmp	r3, #16
 800695e:	d010      	beq.n	8006982 <HAL_TIM_Base_Init+0x9e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b20      	cmp	r3, #32
 8006966:	d00c      	beq.n	8006982 <HAL_TIM_Base_Init+0x9e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b40      	cmp	r3, #64	@ 0x40
 800696e:	d008      	beq.n	8006982 <HAL_TIM_Base_Init+0x9e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b60      	cmp	r3, #96	@ 0x60
 8006976:	d004      	beq.n	8006982 <HAL_TIM_Base_Init+0x9e>
 8006978:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800697c:	4842      	ldr	r0, [pc, #264]	@ (8006a88 <HAL_TIM_Base_Init+0x1a4>)
 800697e:	f7fd f9b7 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00e      	beq.n	80069a8 <HAL_TIM_Base_Init+0xc4>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006992:	d009      	beq.n	80069a8 <HAL_TIM_Base_Init+0xc4>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699c:	d004      	beq.n	80069a8 <HAL_TIM_Base_Init+0xc4>
 800699e:	f240 1115 	movw	r1, #277	@ 0x115
 80069a2:	4839      	ldr	r0, [pc, #228]	@ (8006a88 <HAL_TIM_Base_Init+0x1a4>)
 80069a4:	f7fd f9a4 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_TIM_Base_Init+0xd6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b8:	d304      	bcc.n	80069c4 <HAL_TIM_Base_Init+0xe0>
 80069ba:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80069be:	4832      	ldr	r0, [pc, #200]	@ (8006a88 <HAL_TIM_Base_Init+0x1a4>)
 80069c0:	f7fd f996 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_TIM_Base_Init+0xfa>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b80      	cmp	r3, #128	@ 0x80
 80069d2:	d004      	beq.n	80069de <HAL_TIM_Base_Init+0xfa>
 80069d4:	f240 1117 	movw	r1, #279	@ 0x117
 80069d8:	482b      	ldr	r0, [pc, #172]	@ (8006a88 <HAL_TIM_Base_Init+0x1a4>)
 80069da:	f7fd f989 	bl	8003cf0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_TIM_Base_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fd fe04 	bl	8004600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f001 fb1c 	bl	8008048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40013400 	.word	0x40013400
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40001000 	.word	0x40001000
 8006a84:	40001400 	.word	0x40001400
 8006a88:	0800d2e4 	.word	0x0800d2e4

08006a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a3d      	ldr	r2, [pc, #244]	@ (8006b90 <HAL_TIM_Base_Start_IT+0x104>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d027      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a3c      	ldr	r2, [pc, #240]	@ (8006b94 <HAL_TIM_Base_Start_IT+0x108>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d022      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ab0:	d01d      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a38      	ldr	r2, [pc, #224]	@ (8006b98 <HAL_TIM_Base_Start_IT+0x10c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d018      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a36      	ldr	r2, [pc, #216]	@ (8006b9c <HAL_TIM_Base_Start_IT+0x110>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d013      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a35      	ldr	r2, [pc, #212]	@ (8006ba0 <HAL_TIM_Base_Start_IT+0x114>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00e      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a33      	ldr	r2, [pc, #204]	@ (8006ba4 <HAL_TIM_Base_Start_IT+0x118>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d009      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a32      	ldr	r2, [pc, #200]	@ (8006ba8 <HAL_TIM_Base_Start_IT+0x11c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d004      	beq.n	8006aee <HAL_TIM_Base_Start_IT+0x62>
 8006ae4:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8006ae8:	4830      	ldr	r0, [pc, #192]	@ (8006bac <HAL_TIM_Base_Start_IT+0x120>)
 8006aea:	f7fd f901 	bl	8003cf0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d001      	beq.n	8006afe <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e044      	b.n	8006b88 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2202      	movs	r2, #2
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <HAL_TIM_Base_Start_IT+0x104>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xc6>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1b      	ldr	r2, [pc, #108]	@ (8006b94 <HAL_TIM_Base_Start_IT+0x108>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xc6>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b32:	d00e      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xc6>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a17      	ldr	r2, [pc, #92]	@ (8006b98 <HAL_TIM_Base_Start_IT+0x10c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xc6>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a16      	ldr	r2, [pc, #88]	@ (8006b9c <HAL_TIM_Base_Start_IT+0x110>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xc6>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a14      	ldr	r2, [pc, #80]	@ (8006ba0 <HAL_TIM_Base_Start_IT+0x114>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d111      	bne.n	8006b76 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	d010      	beq.n	8006b86 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0201 	orr.w	r2, r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	e007      	b.n	8006b86 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0201 	orr.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40012c00 	.word	0x40012c00
 8006b94:	40013400 	.word	0x40013400
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	40001000 	.word	0x40001000
 8006ba8:	40001400 	.word	0x40001400
 8006bac:	0800d2e4 	.word	0x0800d2e4

08006bb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e0b5      	b.n	8006d2e <HAL_TIM_PWM_Init+0x17e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a5c      	ldr	r2, [pc, #368]	@ (8006d38 <HAL_TIM_PWM_Init+0x188>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d027      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8006d3c <HAL_TIM_PWM_Init+0x18c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bde:	d01d      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a56      	ldr	r2, [pc, #344]	@ (8006d40 <HAL_TIM_PWM_Init+0x190>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a55      	ldr	r2, [pc, #340]	@ (8006d44 <HAL_TIM_PWM_Init+0x194>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a53      	ldr	r2, [pc, #332]	@ (8006d48 <HAL_TIM_PWM_Init+0x198>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a52      	ldr	r2, [pc, #328]	@ (8006d4c <HAL_TIM_PWM_Init+0x19c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a50      	ldr	r2, [pc, #320]	@ (8006d50 <HAL_TIM_PWM_Init+0x1a0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_PWM_Init+0x6c>
 8006c12:	f240 512c 	movw	r1, #1324	@ 0x52c
 8006c16:	484f      	ldr	r0, [pc, #316]	@ (8006d54 <HAL_TIM_PWM_Init+0x1a4>)
 8006c18:	f7fd f86a 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d014      	beq.n	8006c4e <HAL_TIM_PWM_Init+0x9e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d010      	beq.n	8006c4e <HAL_TIM_PWM_Init+0x9e>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d00c      	beq.n	8006c4e <HAL_TIM_PWM_Init+0x9e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b40      	cmp	r3, #64	@ 0x40
 8006c3a:	d008      	beq.n	8006c4e <HAL_TIM_PWM_Init+0x9e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b60      	cmp	r3, #96	@ 0x60
 8006c42:	d004      	beq.n	8006c4e <HAL_TIM_PWM_Init+0x9e>
 8006c44:	f240 512d 	movw	r1, #1325	@ 0x52d
 8006c48:	4842      	ldr	r0, [pc, #264]	@ (8006d54 <HAL_TIM_PWM_Init+0x1a4>)
 8006c4a:	f7fd f851 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00e      	beq.n	8006c74 <HAL_TIM_PWM_Init+0xc4>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c5e:	d009      	beq.n	8006c74 <HAL_TIM_PWM_Init+0xc4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c68:	d004      	beq.n	8006c74 <HAL_TIM_PWM_Init+0xc4>
 8006c6a:	f240 512e 	movw	r1, #1326	@ 0x52e
 8006c6e:	4839      	ldr	r0, [pc, #228]	@ (8006d54 <HAL_TIM_PWM_Init+0x1a4>)
 8006c70:	f7fd f83e 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIM_PWM_Init+0xd6>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c84:	d304      	bcc.n	8006c90 <HAL_TIM_PWM_Init+0xe0>
 8006c86:	f240 512f 	movw	r1, #1327	@ 0x52f
 8006c8a:	4832      	ldr	r0, [pc, #200]	@ (8006d54 <HAL_TIM_PWM_Init+0x1a4>)
 8006c8c:	f7fd f830 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d008      	beq.n	8006caa <HAL_TIM_PWM_Init+0xfa>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b80      	cmp	r3, #128	@ 0x80
 8006c9e:	d004      	beq.n	8006caa <HAL_TIM_PWM_Init+0xfa>
 8006ca0:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8006ca4:	482b      	ldr	r0, [pc, #172]	@ (8006d54 <HAL_TIM_PWM_Init+0x1a4>)
 8006ca6:	f7fd f823 	bl	8003cf0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_TIM_PWM_Init+0x114>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f84a 	bl	8006d58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	f001 f9b6 	bl	8008048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	40012c00 	.word	0x40012c00
 8006d3c:	40013400 	.word	0x40013400
 8006d40:	40000400 	.word	0x40000400
 8006d44:	40000800 	.word	0x40000800
 8006d48:	40000c00 	.word	0x40000c00
 8006d4c:	40001000 	.word	0x40001000
 8006d50:	40001400 	.word	0x40001400
 8006d54:	0800d2e4 	.word	0x0800d2e4

08006d58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a8a      	ldr	r2, [pc, #552]	@ (8006fa4 <HAL_TIM_PWM_Start+0x238>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d10b      	bne.n	8006d98 <HAL_TIM_PWM_Start+0x2c>
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d062      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d05f      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b08      	cmp	r3, #8
 8006d90:	d05c      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b0c      	cmp	r3, #12
 8006d96:	d059      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a82      	ldr	r2, [pc, #520]	@ (8006fa8 <HAL_TIM_PWM_Start+0x23c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d10b      	bne.n	8006dba <HAL_TIM_PWM_Start+0x4e>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d051      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d04e      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d04b      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	2b0c      	cmp	r3, #12
 8006db8:	d048      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc2:	d10b      	bne.n	8006ddc <HAL_TIM_PWM_Start+0x70>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d040      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d03d      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d03a      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b0c      	cmp	r3, #12
 8006dda:	d037      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a72      	ldr	r2, [pc, #456]	@ (8006fac <HAL_TIM_PWM_Start+0x240>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10b      	bne.n	8006dfe <HAL_TIM_PWM_Start+0x92>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02f      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d02c      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d029      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2b0c      	cmp	r3, #12
 8006dfc:	d026      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a6b      	ldr	r2, [pc, #428]	@ (8006fb0 <HAL_TIM_PWM_Start+0x244>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d10b      	bne.n	8006e20 <HAL_TIM_PWM_Start+0xb4>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01e      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d01b      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	2b08      	cmp	r3, #8
 8006e18:	d018      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b0c      	cmp	r3, #12
 8006e1e:	d015      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a63      	ldr	r2, [pc, #396]	@ (8006fb4 <HAL_TIM_PWM_Start+0x248>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10b      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xd6>
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00d      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d00a      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d007      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b0c      	cmp	r3, #12
 8006e40:	d004      	beq.n	8006e4c <HAL_TIM_PWM_Start+0xe0>
 8006e42:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8006e46:	485c      	ldr	r0, [pc, #368]	@ (8006fb8 <HAL_TIM_PWM_Start+0x24c>)
 8006e48:	f7fc ff52 	bl	8003cf0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d109      	bne.n	8006e66 <HAL_TIM_PWM_Start+0xfa>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	bf14      	ite	ne
 8006e5e:	2301      	movne	r3, #1
 8006e60:	2300      	moveq	r3, #0
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	e022      	b.n	8006eac <HAL_TIM_PWM_Start+0x140>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d109      	bne.n	8006e80 <HAL_TIM_PWM_Start+0x114>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	e015      	b.n	8006eac <HAL_TIM_PWM_Start+0x140>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d109      	bne.n	8006e9a <HAL_TIM_PWM_Start+0x12e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	bf14      	ite	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	2300      	moveq	r3, #0
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	e008      	b.n	8006eac <HAL_TIM_PWM_Start+0x140>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e072      	b.n	8006f9a <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x158>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ec2:	e013      	b.n	8006eec <HAL_TIM_PWM_Start+0x180>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d104      	bne.n	8006ed4 <HAL_TIM_PWM_Start+0x168>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ed2:	e00b      	b.n	8006eec <HAL_TIM_PWM_Start+0x180>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	2b08      	cmp	r3, #8
 8006ed8:	d104      	bne.n	8006ee4 <HAL_TIM_PWM_Start+0x178>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2202      	movs	r2, #2
 8006ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee2:	e003      	b.n	8006eec <HAL_TIM_PWM_Start+0x180>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fbf1 	bl	80086dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a29      	ldr	r2, [pc, #164]	@ (8006fa4 <HAL_TIM_PWM_Start+0x238>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d004      	beq.n	8006f0e <HAL_TIM_PWM_Start+0x1a2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a27      	ldr	r2, [pc, #156]	@ (8006fa8 <HAL_TIM_PWM_Start+0x23c>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d101      	bne.n	8006f12 <HAL_TIM_PWM_Start+0x1a6>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e000      	b.n	8006f14 <HAL_TIM_PWM_Start+0x1a8>
 8006f12:	2300      	movs	r3, #0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d007      	beq.n	8006f28 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006fa4 <HAL_TIM_PWM_Start+0x238>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d018      	beq.n	8006f64 <HAL_TIM_PWM_Start+0x1f8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa8 <HAL_TIM_PWM_Start+0x23c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d013      	beq.n	8006f64 <HAL_TIM_PWM_Start+0x1f8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f44:	d00e      	beq.n	8006f64 <HAL_TIM_PWM_Start+0x1f8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <HAL_TIM_PWM_Start+0x240>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d009      	beq.n	8006f64 <HAL_TIM_PWM_Start+0x1f8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <HAL_TIM_PWM_Start+0x244>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d004      	beq.n	8006f64 <HAL_TIM_PWM_Start+0x1f8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a15      	ldr	r2, [pc, #84]	@ (8006fb4 <HAL_TIM_PWM_Start+0x248>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d111      	bne.n	8006f88 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2b06      	cmp	r3, #6
 8006f74:	d010      	beq.n	8006f98 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f86:	e007      	b.n	8006f98 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40012c00 	.word	0x40012c00
 8006fa8:	40013400 	.word	0x40013400
 8006fac:	40000400 	.word	0x40000400
 8006fb0:	40000800 	.word	0x40000800
 8006fb4:	40000c00 	.word	0x40000c00
 8006fb8:	0800d2e4 	.word	0x0800d2e4

08006fbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e194      	b.n	80072fa <HAL_TIM_Encoder_Init+0x33e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80071d4 <HAL_TIM_Encoder_Init+0x218>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01d      	beq.n	8007016 <HAL_TIM_Encoder_Init+0x5a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a7e      	ldr	r2, [pc, #504]	@ (80071d8 <HAL_TIM_Encoder_Init+0x21c>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d018      	beq.n	8007016 <HAL_TIM_Encoder_Init+0x5a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fec:	d013      	beq.n	8007016 <HAL_TIM_Encoder_Init+0x5a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a7a      	ldr	r2, [pc, #488]	@ (80071dc <HAL_TIM_Encoder_Init+0x220>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00e      	beq.n	8007016 <HAL_TIM_Encoder_Init+0x5a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a78      	ldr	r2, [pc, #480]	@ (80071e0 <HAL_TIM_Encoder_Init+0x224>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d009      	beq.n	8007016 <HAL_TIM_Encoder_Init+0x5a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a77      	ldr	r2, [pc, #476]	@ (80071e4 <HAL_TIM_Encoder_Init+0x228>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <HAL_TIM_Encoder_Init+0x5a>
 800700c:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8007010:	4875      	ldr	r0, [pc, #468]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007012:	f7fc fe6d 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d014      	beq.n	8007048 <HAL_TIM_Encoder_Init+0x8c>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2b10      	cmp	r3, #16
 8007024:	d010      	beq.n	8007048 <HAL_TIM_Encoder_Init+0x8c>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b20      	cmp	r3, #32
 800702c:	d00c      	beq.n	8007048 <HAL_TIM_Encoder_Init+0x8c>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2b40      	cmp	r3, #64	@ 0x40
 8007034:	d008      	beq.n	8007048 <HAL_TIM_Encoder_Init+0x8c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b60      	cmp	r3, #96	@ 0x60
 800703c:	d004      	beq.n	8007048 <HAL_TIM_Encoder_Init+0x8c>
 800703e:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 8007042:	4869      	ldr	r0, [pc, #420]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007044:	f7fc fe54 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00e      	beq.n	800706e <HAL_TIM_Encoder_Init+0xb2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007058:	d009      	beq.n	800706e <HAL_TIM_Encoder_Init+0xb2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007062:	d004      	beq.n	800706e <HAL_TIM_Encoder_Init+0xb2>
 8007064:	f640 31da 	movw	r1, #3034	@ 0xbda
 8007068:	485f      	ldr	r0, [pc, #380]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 800706a:	f7fc fe41 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d008      	beq.n	8007088 <HAL_TIM_Encoder_Init+0xcc>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b80      	cmp	r3, #128	@ 0x80
 800707c:	d004      	beq.n	8007088 <HAL_TIM_Encoder_Init+0xcc>
 800707e:	f640 31db 	movw	r1, #3035	@ 0xbdb
 8007082:	4859      	ldr	r0, [pc, #356]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007084:	f7fc fe34 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d00c      	beq.n	80070aa <HAL_TIM_Encoder_Init+0xee>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d008      	beq.n	80070aa <HAL_TIM_Encoder_Init+0xee>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b03      	cmp	r3, #3
 800709e:	d004      	beq.n	80070aa <HAL_TIM_Encoder_Init+0xee>
 80070a0:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80070a4:	4850      	ldr	r0, [pc, #320]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 80070a6:	f7fc fe23 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d00c      	beq.n	80070cc <HAL_TIM_Encoder_Init+0x110>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d008      	beq.n	80070cc <HAL_TIM_Encoder_Init+0x110>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d004      	beq.n	80070cc <HAL_TIM_Encoder_Init+0x110>
 80070c2:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 80070c6:	4848      	ldr	r0, [pc, #288]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 80070c8:	f7fc fe12 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d00c      	beq.n	80070ee <HAL_TIM_Encoder_Init+0x132>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d008      	beq.n	80070ee <HAL_TIM_Encoder_Init+0x132>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d004      	beq.n	80070ee <HAL_TIM_Encoder_Init+0x132>
 80070e4:	f640 31de 	movw	r1, #3038	@ 0xbde
 80070e8:	483f      	ldr	r0, [pc, #252]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 80070ea:	f7fc fe01 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <HAL_TIM_Encoder_Init+0x14c>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d004      	beq.n	8007108 <HAL_TIM_Encoder_Init+0x14c>
 80070fe:	f640 31df 	movw	r1, #3039	@ 0xbdf
 8007102:	4839      	ldr	r0, [pc, #228]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007104:	f7fc fdf4 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <HAL_TIM_Encoder_Init+0x166>
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	695b      	ldr	r3, [r3, #20]
 8007114:	2b02      	cmp	r3, #2
 8007116:	d004      	beq.n	8007122 <HAL_TIM_Encoder_Init+0x166>
 8007118:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 800711c:	4832      	ldr	r0, [pc, #200]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 800711e:	f7fc fde7 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d010      	beq.n	800714c <HAL_TIM_Encoder_Init+0x190>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b04      	cmp	r3, #4
 8007130:	d00c      	beq.n	800714c <HAL_TIM_Encoder_Init+0x190>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	2b08      	cmp	r3, #8
 8007138:	d008      	beq.n	800714c <HAL_TIM_Encoder_Init+0x190>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2b0c      	cmp	r3, #12
 8007140:	d004      	beq.n	800714c <HAL_TIM_Encoder_Init+0x190>
 8007142:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 8007146:	4828      	ldr	r0, [pc, #160]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007148:	f7fc fdd2 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d010      	beq.n	8007176 <HAL_TIM_Encoder_Init+0x1ba>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d00c      	beq.n	8007176 <HAL_TIM_Encoder_Init+0x1ba>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d008      	beq.n	8007176 <HAL_TIM_Encoder_Init+0x1ba>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	69db      	ldr	r3, [r3, #28]
 8007168:	2b0c      	cmp	r3, #12
 800716a:	d004      	beq.n	8007176 <HAL_TIM_Encoder_Init+0x1ba>
 800716c:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8007170:	481d      	ldr	r0, [pc, #116]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007172:	f7fc fdbd 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d904      	bls.n	8007188 <HAL_TIM_Encoder_Init+0x1cc>
 800717e:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8007182:	4819      	ldr	r0, [pc, #100]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007184:	f7fc fdb4 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	2b0f      	cmp	r3, #15
 800718e:	d904      	bls.n	800719a <HAL_TIM_Encoder_Init+0x1de>
 8007190:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 8007194:	4814      	ldr	r0, [pc, #80]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 8007196:	f7fc fdab 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d004      	beq.n	80071ac <HAL_TIM_Encoder_Init+0x1f0>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071aa:	d304      	bcc.n	80071b6 <HAL_TIM_Encoder_Init+0x1fa>
 80071ac:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 80071b0:	480d      	ldr	r0, [pc, #52]	@ (80071e8 <HAL_TIM_Encoder_Init+0x22c>)
 80071b2:	f7fc fd9d 	bl	8003cf0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d114      	bne.n	80071ec <HAL_TIM_Encoder_Init+0x230>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fd fa82 	bl	80046d4 <HAL_TIM_Encoder_MspInit>
 80071d0:	e00c      	b.n	80071ec <HAL_TIM_Encoder_Init+0x230>
 80071d2:	bf00      	nop
 80071d4:	40012c00 	.word	0x40012c00
 80071d8:	40013400 	.word	0x40013400
 80071dc:	40000400 	.word	0x40000400
 80071e0:	40000800 	.word	0x40000800
 80071e4:	40000c00 	.word	0x40000c00
 80071e8:	0800d2e4 	.word	0x0800d2e4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6812      	ldr	r2, [r2, #0]
 80071fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f000 ff18 	bl	8008048 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007240:	f023 0303 	bic.w	r3, r3, #3
 8007244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	4313      	orrs	r3, r2
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	4313      	orrs	r3, r2
 8007256:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800725e:	f023 030c 	bic.w	r3, r3, #12
 8007262:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800726a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800726e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	4313      	orrs	r3, r2
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	011a      	lsls	r2, r3, #4
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	031b      	lsls	r3, r3, #12
 800728e:	4313      	orrs	r3, r2
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800729c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	4313      	orrs	r3, r2
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop

08007304 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007314:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800731c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007324:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800732c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a4d      	ldr	r2, [pc, #308]	@ (8007468 <HAL_TIM_Encoder_Start+0x164>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d01d      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x70>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a4b      	ldr	r2, [pc, #300]	@ (800746c <HAL_TIM_Encoder_Start+0x168>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d018      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x70>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734a:	d013      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x70>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a47      	ldr	r2, [pc, #284]	@ (8007470 <HAL_TIM_Encoder_Start+0x16c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00e      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x70>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a46      	ldr	r2, [pc, #280]	@ (8007474 <HAL_TIM_Encoder_Start+0x170>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d009      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x70>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a44      	ldr	r2, [pc, #272]	@ (8007478 <HAL_TIM_Encoder_Start+0x174>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d004      	beq.n	8007374 <HAL_TIM_Encoder_Start+0x70>
 800736a:	f640 4195 	movw	r1, #3221	@ 0xc95
 800736e:	4843      	ldr	r0, [pc, #268]	@ (800747c <HAL_TIM_Encoder_Start+0x178>)
 8007370:	f7fc fcbe 	bl	8003cf0 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d110      	bne.n	800739c <HAL_TIM_Encoder_Start+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d102      	bne.n	8007386 <HAL_TIM_Encoder_Start+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007380:	7b7b      	ldrb	r3, [r7, #13]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d001      	beq.n	800738a <HAL_TIM_Encoder_Start+0x86>
    {
      return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e069      	b.n	800745e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800739a:	e031      	b.n	8007400 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	2b04      	cmp	r3, #4
 80073a0:	d110      	bne.n	80073c4 <HAL_TIM_Encoder_Start+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d102      	bne.n	80073ae <HAL_TIM_Encoder_Start+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073a8:	7b3b      	ldrb	r3, [r7, #12]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d001      	beq.n	80073b2 <HAL_TIM_Encoder_Start+0xae>
    {
      return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e055      	b.n	800745e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2202      	movs	r2, #2
 80073be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073c2:	e01d      	b.n	8007400 <HAL_TIM_Encoder_Start+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d108      	bne.n	80073dc <HAL_TIM_Encoder_Start+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d105      	bne.n	80073dc <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073d0:	7b7b      	ldrb	r3, [r7, #13]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d102      	bne.n	80073dc <HAL_TIM_Encoder_Start+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073d6:	7b3b      	ldrb	r3, [r7, #12]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d001      	beq.n	80073e0 <HAL_TIM_Encoder_Start+0xdc>
    {
      return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e03e      	b.n	800745e <HAL_TIM_Encoder_Start+0x15a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_Encoder_Start+0x10a>
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b04      	cmp	r3, #4
 800740a:	d008      	beq.n	800741e <HAL_TIM_Encoder_Start+0x11a>
 800740c:	e00f      	b.n	800742e <HAL_TIM_Encoder_Start+0x12a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2201      	movs	r2, #1
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f001 f960 	bl	80086dc <TIM_CCxChannelCmd>
      break;
 800741c:	e016      	b.n	800744c <HAL_TIM_Encoder_Start+0x148>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2201      	movs	r2, #1
 8007424:	2104      	movs	r1, #4
 8007426:	4618      	mov	r0, r3
 8007428:	f001 f958 	bl	80086dc <TIM_CCxChannelCmd>
      break;
 800742c:	e00e      	b.n	800744c <HAL_TIM_Encoder_Start+0x148>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2201      	movs	r2, #1
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f001 f950 	bl	80086dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2201      	movs	r2, #1
 8007442:	2104      	movs	r1, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f001 f949 	bl	80086dc <TIM_CCxChannelCmd>
      break;
 800744a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	40012c00 	.word	0x40012c00
 800746c:	40013400 	.word	0x40013400
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800
 8007478:	40000c00 	.word	0x40000c00
 800747c:	0800d2e4 	.word	0x0800d2e4

08007480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b02      	cmp	r3, #2
 8007494:	d122      	bne.n	80074dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d11b      	bne.n	80074dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0202 	mvn.w	r2, #2
 80074ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fda5 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fd98 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fda7 	bl	8008024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b04      	cmp	r3, #4
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0204 	mvn.w	r2, #4
 8007500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2202      	movs	r2, #2
 8007506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fd7b 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 fd6e 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fd7d 	bl	8008024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b08      	cmp	r3, #8
 800753c:	d122      	bne.n	8007584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b08      	cmp	r3, #8
 800754a:	d11b      	bne.n	8007584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0208 	mvn.w	r2, #8
 8007554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2204      	movs	r2, #4
 800755a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fd51 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fd44 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fd53 	bl	8008024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b10      	cmp	r3, #16
 8007590:	d122      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b10      	cmp	r3, #16
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0210 	mvn.w	r2, #16
 80075a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2208      	movs	r2, #8
 80075ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fd27 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fd1a 	bl	8008000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fd29 	bl	8008024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d10e      	bne.n	8007604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d107      	bne.n	8007604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0201 	mvn.w	r2, #1
 80075fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fc f91c 	bl	800383c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760e:	2b80      	cmp	r3, #128	@ 0x80
 8007610:	d10e      	bne.n	8007630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761c:	2b80      	cmp	r3, #128	@ 0x80
 800761e:	d107      	bne.n	8007630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fa5b 	bl	8008ae6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d10e      	bne.n	800765c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b40      	cmp	r3, #64	@ 0x40
 800764a:	d107      	bne.n	800765c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fced 	bl	8008036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b20      	cmp	r3, #32
 8007668:	d10e      	bne.n	8007688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b20      	cmp	r3, #32
 8007676:	d107      	bne.n	8007688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f06f 0220 	mvn.w	r2, #32
 8007680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fa26 	bl	8008ad4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007688:	bf00      	nop
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d00d      	beq.n	80076c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b08      	cmp	r3, #8
 80076b0:	d00a      	beq.n	80076c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b0c      	cmp	r3, #12
 80076b6:	d007      	beq.n	80076c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b3c      	cmp	r3, #60	@ 0x3c
 80076bc:	d004      	beq.n	80076c8 <HAL_TIM_PWM_ConfigChannel+0x38>
 80076be:	f241 017e 	movw	r1, #4222	@ 0x107e
 80076c2:	4890      	ldr	r0, [pc, #576]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80076c4:	f7fc fb14 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b60      	cmp	r3, #96	@ 0x60
 80076ce:	d008      	beq.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x52>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b70      	cmp	r3, #112	@ 0x70
 80076d6:	d004      	beq.n	80076e2 <HAL_TIM_PWM_ConfigChannel+0x52>
 80076d8:	f241 017f 	movw	r1, #4223	@ 0x107f
 80076dc:	4889      	ldr	r0, [pc, #548]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80076de:	f7fc fb07 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d004      	beq.n	80076fc <HAL_TIM_PWM_ConfigChannel+0x6c>
 80076f2:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 80076f6:	4883      	ldr	r0, [pc, #524]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80076f8:	f7fc fafa 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d008      	beq.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x86>
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b04      	cmp	r3, #4
 800770a:	d004      	beq.n	8007716 <HAL_TIM_PWM_ConfigChannel+0x86>
 800770c:	f241 0181 	movw	r1, #4225	@ 0x1081
 8007710:	487c      	ldr	r0, [pc, #496]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007712:	f7fc faed 	bl	8003cf0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_TIM_PWM_ConfigChannel+0x94>
 8007720:	2302      	movs	r3, #2
 8007722:	e147      	b.n	80079b4 <HAL_TIM_PWM_ConfigChannel+0x324>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b0c      	cmp	r3, #12
 8007730:	f200 8138 	bhi.w	80079a4 <HAL_TIM_PWM_ConfigChannel+0x314>
 8007734:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	08007771 	.word	0x08007771
 8007740:	080079a5 	.word	0x080079a5
 8007744:	080079a5 	.word	0x080079a5
 8007748:	080079a5 	.word	0x080079a5
 800774c:	080077f7 	.word	0x080077f7
 8007750:	080079a5 	.word	0x080079a5
 8007754:	080079a5 	.word	0x080079a5
 8007758:	080079a5 	.word	0x080079a5
 800775c:	0800787f 	.word	0x0800787f
 8007760:	080079a5 	.word	0x080079a5
 8007764:	080079a5 	.word	0x080079a5
 8007768:	080079a5 	.word	0x080079a5
 800776c:	0800791d 	.word	0x0800791d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a64      	ldr	r2, [pc, #400]	@ (8007908 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01d      	beq.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x126>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a63      	ldr	r2, [pc, #396]	@ (800790c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d018      	beq.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x126>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800778c:	d013      	beq.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x126>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a5f      	ldr	r2, [pc, #380]	@ (8007910 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x126>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a5d      	ldr	r2, [pc, #372]	@ (8007914 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x126>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a5c      	ldr	r2, [pc, #368]	@ (8007918 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIM_PWM_ConfigChannel+0x126>
 80077ac:	f241 018b 	movw	r1, #4235	@ 0x108b
 80077b0:	4854      	ldr	r0, [pc, #336]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80077b2:	f7fc fa9d 	bl	8003cf0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 fcbd 	bl	800813c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699a      	ldr	r2, [r3, #24]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0208 	orr.w	r2, r2, #8
 80077d0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0204 	bic.w	r2, r2, #4
 80077e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6999      	ldr	r1, [r3, #24]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	619a      	str	r2, [r3, #24]
      break;
 80077f4:	e0d9      	b.n	80079aa <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a43      	ldr	r2, [pc, #268]	@ (8007908 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d01d      	beq.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a41      	ldr	r2, [pc, #260]	@ (800790c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d018      	beq.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007812:	d013      	beq.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a3d      	ldr	r2, [pc, #244]	@ (8007910 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00e      	beq.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a3c      	ldr	r2, [pc, #240]	@ (8007914 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a3a      	ldr	r2, [pc, #232]	@ (8007918 <HAL_TIM_PWM_ConfigChannel+0x288>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_TIM_PWM_ConfigChannel+0x1ac>
 8007832:	f241 019c 	movw	r1, #4252	@ 0x109c
 8007836:	4833      	ldr	r0, [pc, #204]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007838:	f7fc fa5a 	bl	8003cf0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 fd14 	bl	8008270 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6999      	ldr	r1, [r3, #24]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	021a      	lsls	r2, r3, #8
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	619a      	str	r2, [r3, #24]
      break;
 800787c:	e095      	b.n	80079aa <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a21      	ldr	r2, [pc, #132]	@ (8007908 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d01d      	beq.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x234>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1f      	ldr	r2, [pc, #124]	@ (800790c <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x234>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789a:	d013      	beq.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x234>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007910 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x234>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007914 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x234>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a18      	ldr	r2, [pc, #96]	@ (8007918 <HAL_TIM_PWM_ConfigChannel+0x288>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_TIM_PWM_ConfigChannel+0x234>
 80078ba:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 80078be:	4811      	ldr	r0, [pc, #68]	@ (8007904 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80078c0:	f7fc fa16 	bl	8003cf0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fd6e 	bl	80083ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0208 	orr.w	r2, r2, #8
 80078de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69da      	ldr	r2, [r3, #28]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0204 	bic.w	r2, r2, #4
 80078ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69d9      	ldr	r1, [r3, #28]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691a      	ldr	r2, [r3, #16]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	61da      	str	r2, [r3, #28]
      break;
 8007902:	e052      	b.n	80079aa <HAL_TIM_PWM_ConfigChannel+0x31a>
 8007904:	0800d2e4 	.word	0x0800d2e4
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a26      	ldr	r2, [pc, #152]	@ (80079bc <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d01d      	beq.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a25      	ldr	r2, [pc, #148]	@ (80079c0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d018      	beq.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007938:	d013      	beq.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a21      	ldr	r2, [pc, #132]	@ (80079c4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00e      	beq.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1f      	ldr	r2, [pc, #124]	@ (80079c8 <HAL_TIM_PWM_ConfigChannel+0x338>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1e      	ldr	r2, [pc, #120]	@ (80079cc <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8007958:	f241 01be 	movw	r1, #4286	@ 0x10be
 800795c:	481c      	ldr	r0, [pc, #112]	@ (80079d0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 800795e:	f7fc f9c7 	bl	8003cf0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68b9      	ldr	r1, [r7, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fdbd 	bl	80084e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800797c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800798c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69d9      	ldr	r1, [r3, #28]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	021a      	lsls	r2, r3, #8
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	61da      	str	r2, [r3, #28]
      break;
 80079a2:	e002      	b.n	80079aa <HAL_TIM_PWM_ConfigChannel+0x31a>
    }

    default:
      status = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
      break;
 80079a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40012c00 	.word	0x40012c00
 80079c0:	40013400 	.word	0x40013400
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	0800d2e4 	.word	0x0800d2e4

080079d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_TIM_ConfigClockSource+0x1c>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e2f6      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x60a>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a08:	d029      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b70      	cmp	r3, #112	@ 0x70
 8007a10:	d025      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a1a:	d020      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b40      	cmp	r3, #64	@ 0x40
 8007a22:	d01c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b50      	cmp	r3, #80	@ 0x50
 8007a2a:	d018      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b60      	cmp	r3, #96	@ 0x60
 8007a32:	d014      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d010      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b10      	cmp	r3, #16
 8007a42:	d00c      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d008      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b30      	cmp	r3, #48	@ 0x30
 8007a52:	d004      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x8a>
 8007a54:	f241 41be 	movw	r1, #5310	@ 0x14be
 8007a58:	487c      	ldr	r0, [pc, #496]	@ (8007c4c <HAL_TIM_ConfigClockSource+0x278>)
 8007a5a:	f7fc f949 	bl	8003cf0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a86:	f000 80f1 	beq.w	8007c6c <HAL_TIM_ConfigClockSource+0x298>
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a8e:	f200 8299 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a96:	d02d      	beq.n	8007af4 <HAL_TIM_ConfigClockSource+0x120>
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9c:	f200 8292 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007aa0:	2b70      	cmp	r3, #112	@ 0x70
 8007aa2:	d05d      	beq.n	8007b60 <HAL_TIM_ConfigClockSource+0x18c>
 8007aa4:	2b70      	cmp	r3, #112	@ 0x70
 8007aa6:	f200 828d 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007aaa:	2b60      	cmp	r3, #96	@ 0x60
 8007aac:	f000 81a5 	beq.w	8007dfa <HAL_TIM_ConfigClockSource+0x426>
 8007ab0:	2b60      	cmp	r3, #96	@ 0x60
 8007ab2:	f200 8287 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007ab6:	2b50      	cmp	r3, #80	@ 0x50
 8007ab8:	f000 8149 	beq.w	8007d4e <HAL_TIM_ConfigClockSource+0x37a>
 8007abc:	2b50      	cmp	r3, #80	@ 0x50
 8007abe:	f200 8281 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007ac2:	2b40      	cmp	r3, #64	@ 0x40
 8007ac4:	f000 81fc 	beq.w	8007ec0 <HAL_TIM_ConfigClockSource+0x4ec>
 8007ac8:	2b40      	cmp	r3, #64	@ 0x40
 8007aca:	f200 827b 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007ace:	2b30      	cmp	r3, #48	@ 0x30
 8007ad0:	f000 824c 	beq.w	8007f6c <HAL_TIM_ConfigClockSource+0x598>
 8007ad4:	2b30      	cmp	r3, #48	@ 0x30
 8007ad6:	f200 8275 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	f000 8246 	beq.w	8007f6c <HAL_TIM_ConfigClockSource+0x598>
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	f200 826f 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8240 	beq.w	8007f6c <HAL_TIM_ConfigClockSource+0x598>
 8007aec:	2b10      	cmp	r3, #16
 8007aee:	f000 823d 	beq.w	8007f6c <HAL_TIM_ConfigClockSource+0x598>
 8007af2:	e267      	b.n	8007fc4 <HAL_TIM_ConfigClockSource+0x5f0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a55      	ldr	r2, [pc, #340]	@ (8007c50 <HAL_TIM_ConfigClockSource+0x27c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	f000 8265 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a53      	ldr	r2, [pc, #332]	@ (8007c54 <HAL_TIM_ConfigClockSource+0x280>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	f000 825f 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b14:	f000 8259 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a4e      	ldr	r2, [pc, #312]	@ (8007c58 <HAL_TIM_ConfigClockSource+0x284>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	f000 8253 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a4c      	ldr	r2, [pc, #304]	@ (8007c5c <HAL_TIM_ConfigClockSource+0x288>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	f000 824d 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a4a      	ldr	r2, [pc, #296]	@ (8007c60 <HAL_TIM_ConfigClockSource+0x28c>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	f000 8247 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a48      	ldr	r2, [pc, #288]	@ (8007c64 <HAL_TIM_ConfigClockSource+0x290>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	f000 8241 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a46      	ldr	r2, [pc, #280]	@ (8007c68 <HAL_TIM_ConfigClockSource+0x294>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	f000 823b 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
 8007b54:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8007b58:	483c      	ldr	r0, [pc, #240]	@ (8007c4c <HAL_TIM_ConfigClockSource+0x278>)
 8007b5a:	f7fc f8c9 	bl	8003cf0 <assert_failed>
      break;
 8007b5e:	e234      	b.n	8007fca <HAL_TIM_ConfigClockSource+0x5f6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a3a      	ldr	r2, [pc, #232]	@ (8007c50 <HAL_TIM_ConfigClockSource+0x27c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d01d      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a39      	ldr	r2, [pc, #228]	@ (8007c54 <HAL_TIM_ConfigClockSource+0x280>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d018      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b7c:	d013      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a35      	ldr	r2, [pc, #212]	@ (8007c58 <HAL_TIM_ConfigClockSource+0x284>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a33      	ldr	r2, [pc, #204]	@ (8007c5c <HAL_TIM_ConfigClockSource+0x288>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d009      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a32      	ldr	r2, [pc, #200]	@ (8007c60 <HAL_TIM_ConfigClockSource+0x28c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d004      	beq.n	8007ba6 <HAL_TIM_ConfigClockSource+0x1d2>
 8007b9c:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8007ba0:	482a      	ldr	r0, [pc, #168]	@ (8007c4c <HAL_TIM_ConfigClockSource+0x278>)
 8007ba2:	f7fc f8a5 	bl	8003cf0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d013      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x202>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb6:	d00e      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x202>
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bc0:	d009      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x202>
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007bca:	d004      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x202>
 8007bcc:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8007bd0:	481e      	ldr	r0, [pc, #120]	@ (8007c4c <HAL_TIM_ConfigClockSource+0x278>)
 8007bd2:	f7fc f88d 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bde:	d014      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0x236>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0x236>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0x236>
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d008      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0x236>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b0a      	cmp	r3, #10
 8007bfe:	d004      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0x236>
 8007c00:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8007c04:	4811      	ldr	r0, [pc, #68]	@ (8007c4c <HAL_TIM_ConfigClockSource+0x278>)
 8007c06:	f7fc f873 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	2b0f      	cmp	r3, #15
 8007c10:	d904      	bls.n	8007c1c <HAL_TIM_ConfigClockSource+0x248>
 8007c12:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8007c16:	480d      	ldr	r0, [pc, #52]	@ (8007c4c <HAL_TIM_ConfigClockSource+0x278>)
 8007c18:	f7fc f86a 	bl	8003cf0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c2c:	f000 fd37 	bl	800869e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007c3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	609a      	str	r2, [r3, #8]
      break;
 8007c48:	e1c0      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
 8007c4a:	bf00      	nop
 8007c4c:	0800d2e4 	.word	0x0800d2e4
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	40013400 	.word	0x40013400
 8007c58:	40000400 	.word	0x40000400
 8007c5c:	40000800 	.word	0x40000800
 8007c60:	40000c00 	.word	0x40000c00
 8007c64:	40001000 	.word	0x40001000
 8007c68:	40001400 	.word	0x40001400
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a8d      	ldr	r2, [pc, #564]	@ (8007ea8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d01d      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x2de>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a8c      	ldr	r2, [pc, #560]	@ (8007eac <HAL_TIM_ConfigClockSource+0x4d8>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x2de>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x2de>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a88      	ldr	r2, [pc, #544]	@ (8007eb0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x2de>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a86      	ldr	r2, [pc, #536]	@ (8007eb4 <HAL_TIM_ConfigClockSource+0x4e0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x2de>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a85      	ldr	r2, [pc, #532]	@ (8007eb8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIM_ConfigClockSource+0x2de>
 8007ca8:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8007cac:	4883      	ldr	r0, [pc, #524]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007cae:	f7fc f81f 	bl	8003cf0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d013      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x30e>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cc2:	d00e      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x30e>
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ccc:	d009      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x30e>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cd6:	d004      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0x30e>
 8007cd8:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8007cdc:	4877      	ldr	r0, [pc, #476]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007cde:	f7fc f807 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cea:	d014      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x342>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d010      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x342>
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00c      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x342>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d008      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x342>
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	2b0a      	cmp	r3, #10
 8007d0a:	d004      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0x342>
 8007d0c:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8007d10:	486a      	ldr	r0, [pc, #424]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007d12:	f7fb ffed 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	2b0f      	cmp	r3, #15
 8007d1c:	d904      	bls.n	8007d28 <HAL_TIM_ConfigClockSource+0x354>
 8007d1e:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8007d22:	4866      	ldr	r0, [pc, #408]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007d24:	f7fb ffe4 	bl	8003cf0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d38:	f000 fcb1 	bl	800869e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d4a:	609a      	str	r2, [r3, #8]
      break;
 8007d4c:	e13e      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a55      	ldr	r2, [pc, #340]	@ (8007ea8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d01d      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x3c0>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a53      	ldr	r2, [pc, #332]	@ (8007eac <HAL_TIM_ConfigClockSource+0x4d8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d018      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x3c0>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d6a:	d013      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x3c0>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a4f      	ldr	r2, [pc, #316]	@ (8007eb0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d00e      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x3c0>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a4e      	ldr	r2, [pc, #312]	@ (8007eb4 <HAL_TIM_ConfigClockSource+0x4e0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d009      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x3c0>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a4c      	ldr	r2, [pc, #304]	@ (8007eb8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d004      	beq.n	8007d94 <HAL_TIM_ConfigClockSource+0x3c0>
 8007d8a:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8007d8e:	484b      	ldr	r0, [pc, #300]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007d90:	f7fb ffae 	bl	8003cf0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9c:	d014      	beq.n	8007dc8 <HAL_TIM_ConfigClockSource+0x3f4>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d010      	beq.n	8007dc8 <HAL_TIM_ConfigClockSource+0x3f4>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00c      	beq.n	8007dc8 <HAL_TIM_ConfigClockSource+0x3f4>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d008      	beq.n	8007dc8 <HAL_TIM_ConfigClockSource+0x3f4>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b0a      	cmp	r3, #10
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_ConfigClockSource+0x3f4>
 8007dbe:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8007dc2:	483e      	ldr	r0, [pc, #248]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007dc4:	f7fb ff94 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	2b0f      	cmp	r3, #15
 8007dce:	d904      	bls.n	8007dda <HAL_TIM_ConfigClockSource+0x406>
 8007dd0:	f241 5101 	movw	r1, #5377	@ 0x1501
 8007dd4:	4839      	ldr	r0, [pc, #228]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007dd6:	f7fb ff8b 	bl	8003cf0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007de6:	461a      	mov	r2, r3
 8007de8:	f000 fbe2 	bl	80085b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2150      	movs	r1, #80	@ 0x50
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 fc39 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 8007df8:	e0e8      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8007ea8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d01d      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0x46c>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a28      	ldr	r2, [pc, #160]	@ (8007eac <HAL_TIM_ConfigClockSource+0x4d8>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d018      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0x46c>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e16:	d013      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0x46c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	@ (8007eb0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00e      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0x46c>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a23      	ldr	r2, [pc, #140]	@ (8007eb4 <HAL_TIM_ConfigClockSource+0x4e0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d009      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0x46c>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_TIM_ConfigClockSource+0x46c>
 8007e36:	f241 510d 	movw	r1, #5389	@ 0x150d
 8007e3a:	4820      	ldr	r0, [pc, #128]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007e3c:	f7fb ff58 	bl	8003cf0 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e48:	d014      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x4a0>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x4a0>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x4a0>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d008      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x4a0>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	2b0a      	cmp	r3, #10
 8007e68:	d004      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x4a0>
 8007e6a:	f241 5110 	movw	r1, #5392	@ 0x1510
 8007e6e:	4813      	ldr	r0, [pc, #76]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007e70:	f7fb ff3e 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	2b0f      	cmp	r3, #15
 8007e7a:	d904      	bls.n	8007e86 <HAL_TIM_ConfigClockSource+0x4b2>
 8007e7c:	f241 5111 	movw	r1, #5393	@ 0x1511
 8007e80:	480e      	ldr	r0, [pc, #56]	@ (8007ebc <HAL_TIM_ConfigClockSource+0x4e8>)
 8007e82:	f7fb ff35 	bl	8003cf0 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e92:	461a      	mov	r2, r3
 8007e94:	f000 fbba 	bl	800860c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2160      	movs	r1, #96	@ 0x60
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fbe3 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 8007ea4:	e092      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
 8007ea6:	bf00      	nop
 8007ea8:	40012c00 	.word	0x40012c00
 8007eac:	40013400 	.word	0x40013400
 8007eb0:	40000400 	.word	0x40000400
 8007eb4:	40000800 	.word	0x40000800
 8007eb8:	40000c00 	.word	0x40000c00
 8007ebc:	0800d2e4 	.word	0x0800d2e4
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a48      	ldr	r2, [pc, #288]	@ (8007fe8 <HAL_TIM_ConfigClockSource+0x614>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01d      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x532>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a47      	ldr	r2, [pc, #284]	@ (8007fec <HAL_TIM_ConfigClockSource+0x618>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d018      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x532>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007edc:	d013      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x532>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a43      	ldr	r2, [pc, #268]	@ (8007ff0 <HAL_TIM_ConfigClockSource+0x61c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00e      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x532>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a41      	ldr	r2, [pc, #260]	@ (8007ff4 <HAL_TIM_ConfigClockSource+0x620>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d009      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x532>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a40      	ldr	r2, [pc, #256]	@ (8007ff8 <HAL_TIM_ConfigClockSource+0x624>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d004      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x532>
 8007efc:	f241 511d 	movw	r1, #5405	@ 0x151d
 8007f00:	483e      	ldr	r0, [pc, #248]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x628>)
 8007f02:	f7fb fef5 	bl	8003cf0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f0e:	d014      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x566>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d010      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x566>
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00c      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x566>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d008      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x566>
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	2b0a      	cmp	r3, #10
 8007f2e:	d004      	beq.n	8007f3a <HAL_TIM_ConfigClockSource+0x566>
 8007f30:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 8007f34:	4831      	ldr	r0, [pc, #196]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x628>)
 8007f36:	f7fb fedb 	bl	8003cf0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	d904      	bls.n	8007f4c <HAL_TIM_ConfigClockSource+0x578>
 8007f42:	f241 5121 	movw	r1, #5409	@ 0x1521
 8007f46:	482d      	ldr	r0, [pc, #180]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x628>)
 8007f48:	f7fb fed2 	bl	8003cf0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f000 fb29 	bl	80085b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2140      	movs	r1, #64	@ 0x40
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fb80 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 8007f6a:	e02f      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe8 <HAL_TIM_ConfigClockSource+0x614>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d01d      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x5de>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8007fec <HAL_TIM_ConfigClockSource+0x618>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x5de>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f88:	d013      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x5de>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ff0 <HAL_TIM_ConfigClockSource+0x61c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00e      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x5de>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a16      	ldr	r2, [pc, #88]	@ (8007ff4 <HAL_TIM_ConfigClockSource+0x620>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x5de>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a15      	ldr	r2, [pc, #84]	@ (8007ff8 <HAL_TIM_ConfigClockSource+0x624>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x5de>
 8007fa8:	f241 5130 	movw	r1, #5424	@ 0x1530
 8007fac:	4813      	ldr	r0, [pc, #76]	@ (8007ffc <HAL_TIM_ConfigClockSource+0x628>)
 8007fae:	f7fb fe9f 	bl	8003cf0 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	f000 fb54 	bl	800866a <TIM_ITRx_SetConfig>
      break;
 8007fc2:	e003      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
    }

    default:
      status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc8:	e000      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x5f8>
      break;
 8007fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40012c00 	.word	0x40012c00
 8007fec:	40013400 	.word	0x40013400
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	0800d2e4 	.word	0x0800d2e4

08008000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a33      	ldr	r2, [pc, #204]	@ (8008128 <TIM_Base_SetConfig+0xe0>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d013      	beq.n	8008088 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a32      	ldr	r2, [pc, #200]	@ (800812c <TIM_Base_SetConfig+0xe4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00f      	beq.n	8008088 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806e:	d00b      	beq.n	8008088 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a2f      	ldr	r2, [pc, #188]	@ (8008130 <TIM_Base_SetConfig+0xe8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_Base_SetConfig+0x40>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a2e      	ldr	r2, [pc, #184]	@ (8008134 <TIM_Base_SetConfig+0xec>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_Base_SetConfig+0x40>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a2d      	ldr	r2, [pc, #180]	@ (8008138 <TIM_Base_SetConfig+0xf0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d108      	bne.n	800809a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a22      	ldr	r2, [pc, #136]	@ (8008128 <TIM_Base_SetConfig+0xe0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d013      	beq.n	80080ca <TIM_Base_SetConfig+0x82>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a21      	ldr	r2, [pc, #132]	@ (800812c <TIM_Base_SetConfig+0xe4>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00f      	beq.n	80080ca <TIM_Base_SetConfig+0x82>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b0:	d00b      	beq.n	80080ca <TIM_Base_SetConfig+0x82>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008130 <TIM_Base_SetConfig+0xe8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d007      	beq.n	80080ca <TIM_Base_SetConfig+0x82>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008134 <TIM_Base_SetConfig+0xec>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d003      	beq.n	80080ca <TIM_Base_SetConfig+0x82>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008138 <TIM_Base_SetConfig+0xf0>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d108      	bne.n	80080dc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4313      	orrs	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689a      	ldr	r2, [r3, #8]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a09      	ldr	r2, [pc, #36]	@ (8008128 <TIM_Base_SetConfig+0xe0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0xc8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a08      	ldr	r2, [pc, #32]	@ (800812c <TIM_Base_SetConfig+0xe4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d103      	bne.n	8008118 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	691a      	ldr	r2, [r3, #16]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	615a      	str	r2, [r3, #20]
}
 800811e:	bf00      	nop
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr
 8008128:	40012c00 	.word	0x40012c00
 800812c:	40013400 	.word	0x40013400
 8008130:	40000400 	.word	0x40000400
 8008134:	40000800 	.word	0x40000800
 8008138:	40000c00 	.word	0x40000c00

0800813c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0201 	bic.w	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f023 0302 	bic.w	r3, r3, #2
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a34      	ldr	r2, [pc, #208]	@ (8008264 <TIM_OC1_SetConfig+0x128>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d003      	beq.n	80081a0 <TIM_OC1_SetConfig+0x64>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a33      	ldr	r2, [pc, #204]	@ (8008268 <TIM_OC1_SetConfig+0x12c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d119      	bne.n	80081d4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d008      	beq.n	80081ba <TIM_OC1_SetConfig+0x7e>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d004      	beq.n	80081ba <TIM_OC1_SetConfig+0x7e>
 80081b0:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 80081b4:	482d      	ldr	r0, [pc, #180]	@ (800826c <TIM_OC1_SetConfig+0x130>)
 80081b6:	f7fb fd9b 	bl	8003cf0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 0308 	bic.w	r3, r3, #8
 80081c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	f023 0304 	bic.w	r3, r3, #4
 80081d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a23      	ldr	r2, [pc, #140]	@ (8008264 <TIM_OC1_SetConfig+0x128>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_OC1_SetConfig+0xa8>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <TIM_OC1_SetConfig+0x12c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d12d      	bne.n	8008240 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081ec:	d008      	beq.n	8008200 <TIM_OC1_SetConfig+0xc4>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d004      	beq.n	8008200 <TIM_OC1_SetConfig+0xc4>
 80081f6:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 80081fa:	481c      	ldr	r0, [pc, #112]	@ (800826c <TIM_OC1_SetConfig+0x130>)
 80081fc:	f7fb fd78 	bl	8003cf0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	695b      	ldr	r3, [r3, #20]
 8008204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008208:	d008      	beq.n	800821c <TIM_OC1_SetConfig+0xe0>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <TIM_OC1_SetConfig+0xe0>
 8008212:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 8008216:	4815      	ldr	r0, [pc, #84]	@ (800826c <TIM_OC1_SetConfig+0x130>)
 8008218:	f7fb fd6a 	bl	8003cf0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800822a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	4313      	orrs	r3, r2
 8008234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4313      	orrs	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	3718      	adds	r7, #24
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40013400 	.word	0x40013400
 800826c:	0800d2e4 	.word	0x0800d2e4

08008270 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f023 0210 	bic.w	r2, r3, #16
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800829e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f023 0320 	bic.w	r3, r3, #32
 80082ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a35      	ldr	r2, [pc, #212]	@ (80083a0 <TIM_OC2_SetConfig+0x130>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d003      	beq.n	80082d8 <TIM_OC2_SetConfig+0x68>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a34      	ldr	r2, [pc, #208]	@ (80083a4 <TIM_OC2_SetConfig+0x134>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d11a      	bne.n	800830e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <TIM_OC2_SetConfig+0x82>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d004      	beq.n	80082f2 <TIM_OC2_SetConfig+0x82>
 80082e8:	f641 3110 	movw	r1, #6928	@ 0x1b10
 80082ec:	482e      	ldr	r0, [pc, #184]	@ (80083a8 <TIM_OC2_SetConfig+0x138>)
 80082ee:	f7fb fcff 	bl	8003cf0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800830c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a23      	ldr	r2, [pc, #140]	@ (80083a0 <TIM_OC2_SetConfig+0x130>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d003      	beq.n	800831e <TIM_OC2_SetConfig+0xae>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a22      	ldr	r2, [pc, #136]	@ (80083a4 <TIM_OC2_SetConfig+0x134>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d12f      	bne.n	800837e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008326:	d008      	beq.n	800833a <TIM_OC2_SetConfig+0xca>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d004      	beq.n	800833a <TIM_OC2_SetConfig+0xca>
 8008330:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 8008334:	481c      	ldr	r0, [pc, #112]	@ (80083a8 <TIM_OC2_SetConfig+0x138>)
 8008336:	f7fb fcdb 	bl	8003cf0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008342:	d008      	beq.n	8008356 <TIM_OC2_SetConfig+0xe6>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d004      	beq.n	8008356 <TIM_OC2_SetConfig+0xe6>
 800834c:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 8008350:	4815      	ldr	r0, [pc, #84]	@ (80083a8 <TIM_OC2_SetConfig+0x138>)
 8008352:	f7fb fccd 	bl	8003cf0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800835c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40012c00 	.word	0x40012c00
 80083a4:	40013400 	.word	0x40013400
 80083a8:	0800d2e4 	.word	0x0800d2e4

080083ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a1b      	ldr	r3, [r3, #32]
 80083c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0303 	bic.w	r3, r3, #3
 80083e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	021b      	lsls	r3, r3, #8
 80083fc:	697a      	ldr	r2, [r7, #20]
 80083fe:	4313      	orrs	r3, r2
 8008400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a35      	ldr	r2, [pc, #212]	@ (80084dc <TIM_OC3_SetConfig+0x130>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d003      	beq.n	8008412 <TIM_OC3_SetConfig+0x66>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a34      	ldr	r2, [pc, #208]	@ (80084e0 <TIM_OC3_SetConfig+0x134>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d11a      	bne.n	8008448 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d008      	beq.n	800842c <TIM_OC3_SetConfig+0x80>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	2b08      	cmp	r3, #8
 8008420:	d004      	beq.n	800842c <TIM_OC3_SetConfig+0x80>
 8008422:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 8008426:	482f      	ldr	r0, [pc, #188]	@ (80084e4 <TIM_OC3_SetConfig+0x138>)
 8008428:	f7fb fc62 	bl	8003cf0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008446:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a24      	ldr	r2, [pc, #144]	@ (80084dc <TIM_OC3_SetConfig+0x130>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d003      	beq.n	8008458 <TIM_OC3_SetConfig+0xac>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a23      	ldr	r2, [pc, #140]	@ (80084e0 <TIM_OC3_SetConfig+0x134>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d12f      	bne.n	80084b8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008460:	d008      	beq.n	8008474 <TIM_OC3_SetConfig+0xc8>
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d004      	beq.n	8008474 <TIM_OC3_SetConfig+0xc8>
 800846a:	f641 3169 	movw	r1, #7017	@ 0x1b69
 800846e:	481d      	ldr	r0, [pc, #116]	@ (80084e4 <TIM_OC3_SetConfig+0x138>)
 8008470:	f7fb fc3e 	bl	8003cf0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800847c:	d008      	beq.n	8008490 <TIM_OC3_SetConfig+0xe4>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <TIM_OC3_SetConfig+0xe4>
 8008486:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 800848a:	4816      	ldr	r0, [pc, #88]	@ (80084e4 <TIM_OC3_SetConfig+0x138>)
 800848c:	f7fb fc30 	bl	8003cf0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008496:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800849e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	621a      	str	r2, [r3, #32]
}
 80084d2:	bf00      	nop
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40013400 	.word	0x40013400
 80084e4:	0800d2e4 	.word	0x0800d2e4

080084e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800851e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	68fa      	ldr	r2, [r7, #12]
 8008528:	4313      	orrs	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	031b      	lsls	r3, r3, #12
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	4313      	orrs	r3, r2
 800853e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a18      	ldr	r2, [pc, #96]	@ (80085a4 <TIM_OC4_SetConfig+0xbc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d003      	beq.n	8008550 <TIM_OC4_SetConfig+0x68>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a17      	ldr	r2, [pc, #92]	@ (80085a8 <TIM_OC4_SetConfig+0xc0>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d117      	bne.n	8008580 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008558:	d008      	beq.n	800856c <TIM_OC4_SetConfig+0x84>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d004      	beq.n	800856c <TIM_OC4_SetConfig+0x84>
 8008562:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 8008566:	4811      	ldr	r0, [pc, #68]	@ (80085ac <TIM_OC4_SetConfig+0xc4>)
 8008568:	f7fb fbc2 	bl	8003cf0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	019b      	lsls	r3, r3, #6
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	621a      	str	r2, [r3, #32]
}
 800859a:	bf00      	nop
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00
 80085a8:	40013400 	.word	0x40013400
 80085ac:	0800d2e4 	.word	0x0800d2e4

080085b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f023 0201 	bic.w	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f023 030a 	bic.w	r3, r3, #10
 80085ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	621a      	str	r2, [r3, #32]
}
 8008602:	bf00      	nop
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	bc80      	pop	{r7}
 800860a:	4770      	bx	lr

0800860c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0210 	bic.w	r2, r3, #16
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	031b      	lsls	r3, r3, #12
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	621a      	str	r2, [r3, #32]
}
 8008660:	bf00      	nop
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr

0800866a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800866a:	b480      	push	{r7}
 800866c:	b085      	sub	sp, #20
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	f043 0307 	orr.w	r3, r3, #7
 800868c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	609a      	str	r2, [r3, #8]
}
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800869e:	b480      	push	{r7}
 80086a0:	b087      	sub	sp, #28
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
 80086aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	021a      	lsls	r2, r3, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	431a      	orrs	r2, r3
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	609a      	str	r2, [r3, #8]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4a26      	ldr	r2, [pc, #152]	@ (8008784 <TIM_CCxChannelCmd+0xa8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d018      	beq.n	8008722 <TIM_CCxChannelCmd+0x46>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4a25      	ldr	r2, [pc, #148]	@ (8008788 <TIM_CCxChannelCmd+0xac>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d014      	beq.n	8008722 <TIM_CCxChannelCmd+0x46>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fe:	d010      	beq.n	8008722 <TIM_CCxChannelCmd+0x46>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a22      	ldr	r2, [pc, #136]	@ (800878c <TIM_CCxChannelCmd+0xb0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00c      	beq.n	8008722 <TIM_CCxChannelCmd+0x46>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4a21      	ldr	r2, [pc, #132]	@ (8008790 <TIM_CCxChannelCmd+0xb4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d008      	beq.n	8008722 <TIM_CCxChannelCmd+0x46>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4a20      	ldr	r2, [pc, #128]	@ (8008794 <TIM_CCxChannelCmd+0xb8>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d004      	beq.n	8008722 <TIM_CCxChannelCmd+0x46>
 8008718:	f641 5192 	movw	r1, #7570	@ 0x1d92
 800871c:	481e      	ldr	r0, [pc, #120]	@ (8008798 <TIM_CCxChannelCmd+0xbc>)
 800871e:	f7fb fae7 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d010      	beq.n	800874a <TIM_CCxChannelCmd+0x6e>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b04      	cmp	r3, #4
 800872c:	d00d      	beq.n	800874a <TIM_CCxChannelCmd+0x6e>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2b08      	cmp	r3, #8
 8008732:	d00a      	beq.n	800874a <TIM_CCxChannelCmd+0x6e>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b0c      	cmp	r3, #12
 8008738:	d007      	beq.n	800874a <TIM_CCxChannelCmd+0x6e>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b3c      	cmp	r3, #60	@ 0x3c
 800873e:	d004      	beq.n	800874a <TIM_CCxChannelCmd+0x6e>
 8008740:	f641 5193 	movw	r1, #7571	@ 0x1d93
 8008744:	4814      	ldr	r0, [pc, #80]	@ (8008798 <TIM_CCxChannelCmd+0xbc>)
 8008746:	f7fb fad3 	bl	8003cf0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	f003 031f 	and.w	r3, r3, #31
 8008750:	2201      	movs	r2, #1
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6a1a      	ldr	r2, [r3, #32]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	43db      	mvns	r3, r3
 8008760:	401a      	ands	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6a1a      	ldr	r2, [r3, #32]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	f003 031f 	and.w	r3, r3, #31
 8008770:	6879      	ldr	r1, [r7, #4]
 8008772:	fa01 f303 	lsl.w	r3, r1, r3
 8008776:	431a      	orrs	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	621a      	str	r2, [r3, #32]
}
 800877c:	bf00      	nop
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	40012c00 	.word	0x40012c00
 8008788:	40013400 	.word	0x40013400
 800878c:	40000400 	.word	0x40000400
 8008790:	40000800 	.word	0x40000800
 8008794:	40000c00 	.word	0x40000c00
 8008798:	0800d2e4 	.word	0x0800d2e4

0800879c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a5c      	ldr	r2, [pc, #368]	@ (800891c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d027      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a5a      	ldr	r2, [pc, #360]	@ (8008920 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d022      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c2:	d01d      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a56      	ldr	r2, [pc, #344]	@ (8008924 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a55      	ldr	r2, [pc, #340]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a53      	ldr	r2, [pc, #332]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a52      	ldr	r2, [pc, #328]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a50      	ldr	r2, [pc, #320]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80087f6:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 80087fa:	484f      	ldr	r0, [pc, #316]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80087fc:	f7fb fa78 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d020      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b10      	cmp	r3, #16
 800880e:	d01c      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b20      	cmp	r3, #32
 8008816:	d018      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b30      	cmp	r3, #48	@ 0x30
 800881e:	d014      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b40      	cmp	r3, #64	@ 0x40
 8008826:	d010      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b50      	cmp	r3, #80	@ 0x50
 800882e:	d00c      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b60      	cmp	r3, #96	@ 0x60
 8008836:	d008      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b70      	cmp	r3, #112	@ 0x70
 800883e:	d004      	beq.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008840:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8008844:	483c      	ldr	r0, [pc, #240]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008846:	f7fb fa53 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b80      	cmp	r3, #128	@ 0x80
 8008850:	d008      	beq.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d004      	beq.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800885a:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 800885e:	4836      	ldr	r0, [pc, #216]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008860:	f7fb fa46 	bl	8003cf0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800886a:	2b01      	cmp	r3, #1
 800886c:	d101      	bne.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800886e:	2302      	movs	r3, #2
 8008870:	e050      	b.n	8008914 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2202      	movs	r2, #2
 800887e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d018      	beq.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a19      	ldr	r2, [pc, #100]	@ (8008920 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d013      	beq.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c8:	d00e      	beq.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a15      	ldr	r2, [pc, #84]	@ (8008924 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d009      	beq.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a13      	ldr	r2, [pc, #76]	@ (8008928 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a12      	ldr	r2, [pc, #72]	@ (800892c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d10c      	bne.n	8008902 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40012c00 	.word	0x40012c00
 8008920:	40013400 	.word	0x40013400
 8008924:	40000400 	.word	0x40000400
 8008928:	40000800 	.word	0x40000800
 800892c:	40000c00 	.word	0x40000c00
 8008930:	40001000 	.word	0x40001000
 8008934:	40001400 	.word	0x40001400
 8008938:	0800d31c 	.word	0x0800d31c

0800893c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a5e      	ldr	r2, [pc, #376]	@ (8008ac8 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d009      	beq.n	8008968 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a5c      	ldr	r2, [pc, #368]	@ (8008acc <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d004      	beq.n	8008968 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800895e:	f240 71f1 	movw	r1, #2033	@ 0x7f1
 8008962:	485b      	ldr	r0, [pc, #364]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008964:	f7fb f9c4 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008970:	d008      	beq.n	8008984 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800897a:	f240 71f2 	movw	r1, #2034	@ 0x7f2
 800897e:	4854      	ldr	r0, [pc, #336]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008980:	f7fb f9b6 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800898c:	d008      	beq.n	80089a0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d004      	beq.n	80089a0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8008996:	f240 71f3 	movw	r1, #2035	@ 0x7f3
 800899a:	484d      	ldr	r0, [pc, #308]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800899c:	f7fb f9a8 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d013      	beq.n	80089d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b0:	d00e      	beq.n	80089d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ba:	d009      	beq.n	80089d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089c4:	d004      	beq.n	80089d0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80089c6:	f240 71f4 	movw	r1, #2036	@ 0x7f4
 80089ca:	4841      	ldr	r0, [pc, #260]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80089cc:	f7fb f990 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	2bff      	cmp	r3, #255	@ 0xff
 80089d6:	d904      	bls.n	80089e2 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80089d8:	f240 71f5 	movw	r1, #2037	@ 0x7f5
 80089dc:	483c      	ldr	r0, [pc, #240]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80089de:	f7fb f987 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ea:	d008      	beq.n	80089fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80089f4:	f240 71f6 	movw	r1, #2038	@ 0x7f6
 80089f8:	4835      	ldr	r0, [pc, #212]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80089fa:	f7fb f979 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d009      	beq.n	8008a1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a0e:	d004      	beq.n	8008a1a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008a10:	f240 71f7 	movw	r1, #2039	@ 0x7f7
 8008a14:	482e      	ldr	r0, [pc, #184]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008a16:	f7fb f96b 	bl	8003cf0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a22:	d008      	beq.n	8008a36 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d004      	beq.n	8008a36 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008a2c:	f44f 61ff 	mov.w	r1, #2040	@ 0x7f8
 8008a30:	4827      	ldr	r0, [pc, #156]	@ (8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008a32:	f7fb f95d 	bl	8003cf0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e03d      	b.n	8008ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40012c00 	.word	0x40012c00
 8008acc:	40013400 	.word	0x40013400
 8008ad0:	0800d31c 	.word	0x0800d31c

08008ad4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr

08008ae6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bc80      	pop	{r7}
 8008af6:	4770      	bx	lr

08008af8 <__cvt>:
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afe:	461d      	mov	r5, r3
 8008b00:	bfbb      	ittet	lt
 8008b02:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008b06:	461d      	movlt	r5, r3
 8008b08:	2300      	movge	r3, #0
 8008b0a:	232d      	movlt	r3, #45	@ 0x2d
 8008b0c:	b088      	sub	sp, #32
 8008b0e:	4614      	mov	r4, r2
 8008b10:	bfb8      	it	lt
 8008b12:	4614      	movlt	r4, r2
 8008b14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b16:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008b18:	7013      	strb	r3, [r2, #0]
 8008b1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008b20:	f023 0820 	bic.w	r8, r3, #32
 8008b24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b28:	d005      	beq.n	8008b36 <__cvt+0x3e>
 8008b2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b2e:	d100      	bne.n	8008b32 <__cvt+0x3a>
 8008b30:	3601      	adds	r6, #1
 8008b32:	2302      	movs	r3, #2
 8008b34:	e000      	b.n	8008b38 <__cvt+0x40>
 8008b36:	2303      	movs	r3, #3
 8008b38:	aa07      	add	r2, sp, #28
 8008b3a:	9204      	str	r2, [sp, #16]
 8008b3c:	aa06      	add	r2, sp, #24
 8008b3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008b42:	e9cd 3600 	strd	r3, r6, [sp]
 8008b46:	4622      	mov	r2, r4
 8008b48:	462b      	mov	r3, r5
 8008b4a:	f001 f881 	bl	8009c50 <_dtoa_r>
 8008b4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b52:	4607      	mov	r7, r0
 8008b54:	d119      	bne.n	8008b8a <__cvt+0x92>
 8008b56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b58:	07db      	lsls	r3, r3, #31
 8008b5a:	d50e      	bpl.n	8008b7a <__cvt+0x82>
 8008b5c:	eb00 0906 	add.w	r9, r0, r6
 8008b60:	2200      	movs	r2, #0
 8008b62:	2300      	movs	r3, #0
 8008b64:	4620      	mov	r0, r4
 8008b66:	4629      	mov	r1, r5
 8008b68:	f7f7 ff8a 	bl	8000a80 <__aeabi_dcmpeq>
 8008b6c:	b108      	cbz	r0, 8008b72 <__cvt+0x7a>
 8008b6e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008b72:	2230      	movs	r2, #48	@ 0x30
 8008b74:	9b07      	ldr	r3, [sp, #28]
 8008b76:	454b      	cmp	r3, r9
 8008b78:	d31e      	bcc.n	8008bb8 <__cvt+0xc0>
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008b80:	1bdb      	subs	r3, r3, r7
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	b008      	add	sp, #32
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b8e:	eb00 0906 	add.w	r9, r0, r6
 8008b92:	d1e5      	bne.n	8008b60 <__cvt+0x68>
 8008b94:	7803      	ldrb	r3, [r0, #0]
 8008b96:	2b30      	cmp	r3, #48	@ 0x30
 8008b98:	d10a      	bne.n	8008bb0 <__cvt+0xb8>
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	f7f7 ff6d 	bl	8000a80 <__aeabi_dcmpeq>
 8008ba6:	b918      	cbnz	r0, 8008bb0 <__cvt+0xb8>
 8008ba8:	f1c6 0601 	rsb	r6, r6, #1
 8008bac:	f8ca 6000 	str.w	r6, [sl]
 8008bb0:	f8da 3000 	ldr.w	r3, [sl]
 8008bb4:	4499      	add	r9, r3
 8008bb6:	e7d3      	b.n	8008b60 <__cvt+0x68>
 8008bb8:	1c59      	adds	r1, r3, #1
 8008bba:	9107      	str	r1, [sp, #28]
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e7d9      	b.n	8008b74 <__cvt+0x7c>

08008bc0 <__exponent>:
 8008bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc2:	2900      	cmp	r1, #0
 8008bc4:	bfb6      	itet	lt
 8008bc6:	232d      	movlt	r3, #45	@ 0x2d
 8008bc8:	232b      	movge	r3, #43	@ 0x2b
 8008bca:	4249      	neglt	r1, r1
 8008bcc:	2909      	cmp	r1, #9
 8008bce:	7002      	strb	r2, [r0, #0]
 8008bd0:	7043      	strb	r3, [r0, #1]
 8008bd2:	dd29      	ble.n	8008c28 <__exponent+0x68>
 8008bd4:	f10d 0307 	add.w	r3, sp, #7
 8008bd8:	461d      	mov	r5, r3
 8008bda:	270a      	movs	r7, #10
 8008bdc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008be0:	461a      	mov	r2, r3
 8008be2:	fb07 1416 	mls	r4, r7, r6, r1
 8008be6:	3430      	adds	r4, #48	@ 0x30
 8008be8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bec:	460c      	mov	r4, r1
 8008bee:	2c63      	cmp	r4, #99	@ 0x63
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bf6:	dcf1      	bgt.n	8008bdc <__exponent+0x1c>
 8008bf8:	3130      	adds	r1, #48	@ 0x30
 8008bfa:	1e94      	subs	r4, r2, #2
 8008bfc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c00:	4623      	mov	r3, r4
 8008c02:	1c41      	adds	r1, r0, #1
 8008c04:	42ab      	cmp	r3, r5
 8008c06:	d30a      	bcc.n	8008c1e <__exponent+0x5e>
 8008c08:	f10d 0309 	add.w	r3, sp, #9
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	42ac      	cmp	r4, r5
 8008c10:	bf88      	it	hi
 8008c12:	2300      	movhi	r3, #0
 8008c14:	3302      	adds	r3, #2
 8008c16:	4403      	add	r3, r0
 8008c18:	1a18      	subs	r0, r3, r0
 8008c1a:	b003      	add	sp, #12
 8008c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c1e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c22:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c26:	e7ed      	b.n	8008c04 <__exponent+0x44>
 8008c28:	2330      	movs	r3, #48	@ 0x30
 8008c2a:	3130      	adds	r1, #48	@ 0x30
 8008c2c:	7083      	strb	r3, [r0, #2]
 8008c2e:	70c1      	strb	r1, [r0, #3]
 8008c30:	1d03      	adds	r3, r0, #4
 8008c32:	e7f1      	b.n	8008c18 <__exponent+0x58>

08008c34 <_printf_float>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	b091      	sub	sp, #68	@ 0x44
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008c40:	4616      	mov	r6, r2
 8008c42:	461f      	mov	r7, r3
 8008c44:	4605      	mov	r5, r0
 8008c46:	f000 fef1 	bl	8009a2c <_localeconv_r>
 8008c4a:	6803      	ldr	r3, [r0, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	9308      	str	r3, [sp, #32]
 8008c50:	f7f7 faea 	bl	8000228 <strlen>
 8008c54:	2300      	movs	r3, #0
 8008c56:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c58:	f8d8 3000 	ldr.w	r3, [r8]
 8008c5c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c5e:	3307      	adds	r3, #7
 8008c60:	f023 0307 	bic.w	r3, r3, #7
 8008c64:	f103 0208 	add.w	r2, r3, #8
 8008c68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c6c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c70:	f8c8 2000 	str.w	r2, [r8]
 8008c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c7e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8008f00 <_printf_float+0x2cc>)
 8008c90:	f7f7 ff28 	bl	8000ae4 <__aeabi_dcmpun>
 8008c94:	bb70      	cbnz	r0, 8008cf4 <_printf_float+0xc0>
 8008c96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9e:	4b98      	ldr	r3, [pc, #608]	@ (8008f00 <_printf_float+0x2cc>)
 8008ca0:	f7f7 ff02 	bl	8000aa8 <__aeabi_dcmple>
 8008ca4:	bb30      	cbnz	r0, 8008cf4 <_printf_float+0xc0>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4640      	mov	r0, r8
 8008cac:	4649      	mov	r1, r9
 8008cae:	f7f7 fef1 	bl	8000a94 <__aeabi_dcmplt>
 8008cb2:	b110      	cbz	r0, 8008cba <_printf_float+0x86>
 8008cb4:	232d      	movs	r3, #45	@ 0x2d
 8008cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cba:	4a92      	ldr	r2, [pc, #584]	@ (8008f04 <_printf_float+0x2d0>)
 8008cbc:	4b92      	ldr	r3, [pc, #584]	@ (8008f08 <_printf_float+0x2d4>)
 8008cbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cc2:	bf94      	ite	ls
 8008cc4:	4690      	movls	r8, r2
 8008cc6:	4698      	movhi	r8, r3
 8008cc8:	2303      	movs	r3, #3
 8008cca:	f04f 0900 	mov.w	r9, #0
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	f02b 0304 	bic.w	r3, fp, #4
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	4633      	mov	r3, r6
 8008cd8:	4621      	mov	r1, r4
 8008cda:	4628      	mov	r0, r5
 8008cdc:	9700      	str	r7, [sp, #0]
 8008cde:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008ce0:	f000 f9d4 	bl	800908c <_printf_common>
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	f040 8090 	bne.w	8008e0a <_printf_float+0x1d6>
 8008cea:	f04f 30ff 	mov.w	r0, #4294967295
 8008cee:	b011      	add	sp, #68	@ 0x44
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 fef2 	bl	8000ae4 <__aeabi_dcmpun>
 8008d00:	b148      	cbz	r0, 8008d16 <_printf_float+0xe2>
 8008d02:	464b      	mov	r3, r9
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfb8      	it	lt
 8008d08:	232d      	movlt	r3, #45	@ 0x2d
 8008d0a:	4a80      	ldr	r2, [pc, #512]	@ (8008f0c <_printf_float+0x2d8>)
 8008d0c:	bfb8      	it	lt
 8008d0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008d12:	4b7f      	ldr	r3, [pc, #508]	@ (8008f10 <_printf_float+0x2dc>)
 8008d14:	e7d3      	b.n	8008cbe <_printf_float+0x8a>
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	d13f      	bne.n	8008da0 <_printf_float+0x16c>
 8008d20:	2306      	movs	r3, #6
 8008d22:	6063      	str	r3, [r4, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	9206      	str	r2, [sp, #24]
 8008d2e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008d30:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008d34:	aa0d      	add	r2, sp, #52	@ 0x34
 8008d36:	9203      	str	r2, [sp, #12]
 8008d38:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008d3c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	4642      	mov	r2, r8
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4628      	mov	r0, r5
 8008d48:	464b      	mov	r3, r9
 8008d4a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008d4c:	f7ff fed4 	bl	8008af8 <__cvt>
 8008d50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d52:	4680      	mov	r8, r0
 8008d54:	2947      	cmp	r1, #71	@ 0x47
 8008d56:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008d58:	d128      	bne.n	8008dac <_printf_float+0x178>
 8008d5a:	1cc8      	adds	r0, r1, #3
 8008d5c:	db02      	blt.n	8008d64 <_printf_float+0x130>
 8008d5e:	6863      	ldr	r3, [r4, #4]
 8008d60:	4299      	cmp	r1, r3
 8008d62:	dd40      	ble.n	8008de6 <_printf_float+0x1b2>
 8008d64:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d68:	fa5f fa8a 	uxtb.w	sl, sl
 8008d6c:	4652      	mov	r2, sl
 8008d6e:	3901      	subs	r1, #1
 8008d70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d74:	910d      	str	r1, [sp, #52]	@ 0x34
 8008d76:	f7ff ff23 	bl	8008bc0 <__exponent>
 8008d7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d7c:	4681      	mov	r9, r0
 8008d7e:	1813      	adds	r3, r2, r0
 8008d80:	2a01      	cmp	r2, #1
 8008d82:	6123      	str	r3, [r4, #16]
 8008d84:	dc02      	bgt.n	8008d8c <_printf_float+0x158>
 8008d86:	6822      	ldr	r2, [r4, #0]
 8008d88:	07d2      	lsls	r2, r2, #31
 8008d8a:	d501      	bpl.n	8008d90 <_printf_float+0x15c>
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d09e      	beq.n	8008cd6 <_printf_float+0xa2>
 8008d98:	232d      	movs	r3, #45	@ 0x2d
 8008d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d9e:	e79a      	b.n	8008cd6 <_printf_float+0xa2>
 8008da0:	2947      	cmp	r1, #71	@ 0x47
 8008da2:	d1bf      	bne.n	8008d24 <_printf_float+0xf0>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1bd      	bne.n	8008d24 <_printf_float+0xf0>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7ba      	b.n	8008d22 <_printf_float+0xee>
 8008dac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008db0:	d9dc      	bls.n	8008d6c <_printf_float+0x138>
 8008db2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008db6:	d118      	bne.n	8008dea <_printf_float+0x1b6>
 8008db8:	2900      	cmp	r1, #0
 8008dba:	6863      	ldr	r3, [r4, #4]
 8008dbc:	dd0b      	ble.n	8008dd6 <_printf_float+0x1a2>
 8008dbe:	6121      	str	r1, [r4, #16]
 8008dc0:	b913      	cbnz	r3, 8008dc8 <_printf_float+0x194>
 8008dc2:	6822      	ldr	r2, [r4, #0]
 8008dc4:	07d0      	lsls	r0, r2, #31
 8008dc6:	d502      	bpl.n	8008dce <_printf_float+0x19a>
 8008dc8:	3301      	adds	r3, #1
 8008dca:	440b      	add	r3, r1
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	f04f 0900 	mov.w	r9, #0
 8008dd2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008dd4:	e7dc      	b.n	8008d90 <_printf_float+0x15c>
 8008dd6:	b913      	cbnz	r3, 8008dde <_printf_float+0x1aa>
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	07d2      	lsls	r2, r2, #31
 8008ddc:	d501      	bpl.n	8008de2 <_printf_float+0x1ae>
 8008dde:	3302      	adds	r3, #2
 8008de0:	e7f4      	b.n	8008dcc <_printf_float+0x198>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e7f2      	b.n	8008dcc <_printf_float+0x198>
 8008de6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008dea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dec:	4299      	cmp	r1, r3
 8008dee:	db05      	blt.n	8008dfc <_printf_float+0x1c8>
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	6121      	str	r1, [r4, #16]
 8008df4:	07d8      	lsls	r0, r3, #31
 8008df6:	d5ea      	bpl.n	8008dce <_printf_float+0x19a>
 8008df8:	1c4b      	adds	r3, r1, #1
 8008dfa:	e7e7      	b.n	8008dcc <_printf_float+0x198>
 8008dfc:	2900      	cmp	r1, #0
 8008dfe:	bfcc      	ite	gt
 8008e00:	2201      	movgt	r2, #1
 8008e02:	f1c1 0202 	rsble	r2, r1, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	e7e0      	b.n	8008dcc <_printf_float+0x198>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	055a      	lsls	r2, r3, #21
 8008e0e:	d407      	bmi.n	8008e20 <_printf_float+0x1ec>
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	4642      	mov	r2, r8
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	d12b      	bne.n	8008e76 <_printf_float+0x242>
 8008e1e:	e764      	b.n	8008cea <_printf_float+0xb6>
 8008e20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e24:	f240 80dc 	bls.w	8008fe0 <_printf_float+0x3ac>
 8008e28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f7f7 fe26 	bl	8000a80 <__aeabi_dcmpeq>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d033      	beq.n	8008ea0 <_printf_float+0x26c>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	4a35      	ldr	r2, [pc, #212]	@ (8008f14 <_printf_float+0x2e0>)
 8008e40:	47b8      	blx	r7
 8008e42:	3001      	adds	r0, #1
 8008e44:	f43f af51 	beq.w	8008cea <_printf_float+0xb6>
 8008e48:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008e4c:	4543      	cmp	r3, r8
 8008e4e:	db02      	blt.n	8008e56 <_printf_float+0x222>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	07d8      	lsls	r0, r3, #31
 8008e54:	d50f      	bpl.n	8008e76 <_printf_float+0x242>
 8008e56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008e5a:	4631      	mov	r1, r6
 8008e5c:	4628      	mov	r0, r5
 8008e5e:	47b8      	blx	r7
 8008e60:	3001      	adds	r0, #1
 8008e62:	f43f af42 	beq.w	8008cea <_printf_float+0xb6>
 8008e66:	f04f 0900 	mov.w	r9, #0
 8008e6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e6e:	f104 0a1a 	add.w	sl, r4, #26
 8008e72:	45c8      	cmp	r8, r9
 8008e74:	dc09      	bgt.n	8008e8a <_printf_float+0x256>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	079b      	lsls	r3, r3, #30
 8008e7a:	f100 8102 	bmi.w	8009082 <_printf_float+0x44e>
 8008e7e:	68e0      	ldr	r0, [r4, #12]
 8008e80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e82:	4298      	cmp	r0, r3
 8008e84:	bfb8      	it	lt
 8008e86:	4618      	movlt	r0, r3
 8008e88:	e731      	b.n	8008cee <_printf_float+0xba>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b8      	blx	r7
 8008e94:	3001      	adds	r0, #1
 8008e96:	f43f af28 	beq.w	8008cea <_printf_float+0xb6>
 8008e9a:	f109 0901 	add.w	r9, r9, #1
 8008e9e:	e7e8      	b.n	8008e72 <_printf_float+0x23e>
 8008ea0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dc38      	bgt.n	8008f18 <_printf_float+0x2e4>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	4a19      	ldr	r2, [pc, #100]	@ (8008f14 <_printf_float+0x2e0>)
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f43f af1a 	beq.w	8008cea <_printf_float+0xb6>
 8008eb6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008eba:	ea59 0303 	orrs.w	r3, r9, r3
 8008ebe:	d102      	bne.n	8008ec6 <_printf_float+0x292>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	07d9      	lsls	r1, r3, #31
 8008ec4:	d5d7      	bpl.n	8008e76 <_printf_float+0x242>
 8008ec6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008eca:	4631      	mov	r1, r6
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	f43f af0a 	beq.w	8008cea <_printf_float+0xb6>
 8008ed6:	f04f 0a00 	mov.w	sl, #0
 8008eda:	f104 0b1a 	add.w	fp, r4, #26
 8008ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	4553      	cmp	r3, sl
 8008ee4:	dc01      	bgt.n	8008eea <_printf_float+0x2b6>
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	e793      	b.n	8008e12 <_printf_float+0x1de>
 8008eea:	2301      	movs	r3, #1
 8008eec:	465a      	mov	r2, fp
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	f43f aef8 	beq.w	8008cea <_printf_float+0xb6>
 8008efa:	f10a 0a01 	add.w	sl, sl, #1
 8008efe:	e7ee      	b.n	8008ede <_printf_float+0x2aa>
 8008f00:	7fefffff 	.word	0x7fefffff
 8008f04:	0800daee 	.word	0x0800daee
 8008f08:	0800daf2 	.word	0x0800daf2
 8008f0c:	0800daf6 	.word	0x0800daf6
 8008f10:	0800dafa 	.word	0x0800dafa
 8008f14:	0800dafe 	.word	0x0800dafe
 8008f18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008f1e:	4553      	cmp	r3, sl
 8008f20:	bfa8      	it	ge
 8008f22:	4653      	movge	r3, sl
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	4699      	mov	r9, r3
 8008f28:	dc36      	bgt.n	8008f98 <_printf_float+0x364>
 8008f2a:	f04f 0b00 	mov.w	fp, #0
 8008f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f32:	f104 021a 	add.w	r2, r4, #26
 8008f36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f3a:	eba3 0309 	sub.w	r3, r3, r9
 8008f3e:	455b      	cmp	r3, fp
 8008f40:	dc31      	bgt.n	8008fa6 <_printf_float+0x372>
 8008f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f44:	459a      	cmp	sl, r3
 8008f46:	dc3a      	bgt.n	8008fbe <_printf_float+0x38a>
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	07da      	lsls	r2, r3, #31
 8008f4c:	d437      	bmi.n	8008fbe <_printf_float+0x38a>
 8008f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f50:	ebaa 0903 	sub.w	r9, sl, r3
 8008f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f56:	ebaa 0303 	sub.w	r3, sl, r3
 8008f5a:	4599      	cmp	r9, r3
 8008f5c:	bfa8      	it	ge
 8008f5e:	4699      	movge	r9, r3
 8008f60:	f1b9 0f00 	cmp.w	r9, #0
 8008f64:	dc33      	bgt.n	8008fce <_printf_float+0x39a>
 8008f66:	f04f 0800 	mov.w	r8, #0
 8008f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f6e:	f104 0b1a 	add.w	fp, r4, #26
 8008f72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f74:	ebaa 0303 	sub.w	r3, sl, r3
 8008f78:	eba3 0309 	sub.w	r3, r3, r9
 8008f7c:	4543      	cmp	r3, r8
 8008f7e:	f77f af7a 	ble.w	8008e76 <_printf_float+0x242>
 8008f82:	2301      	movs	r3, #1
 8008f84:	465a      	mov	r2, fp
 8008f86:	4631      	mov	r1, r6
 8008f88:	4628      	mov	r0, r5
 8008f8a:	47b8      	blx	r7
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f43f aeac 	beq.w	8008cea <_printf_float+0xb6>
 8008f92:	f108 0801 	add.w	r8, r8, #1
 8008f96:	e7ec      	b.n	8008f72 <_printf_float+0x33e>
 8008f98:	4642      	mov	r2, r8
 8008f9a:	4631      	mov	r1, r6
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	47b8      	blx	r7
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1c2      	bne.n	8008f2a <_printf_float+0x2f6>
 8008fa4:	e6a1      	b.n	8008cea <_printf_float+0xb6>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4631      	mov	r1, r6
 8008faa:	4628      	mov	r0, r5
 8008fac:	920a      	str	r2, [sp, #40]	@ 0x28
 8008fae:	47b8      	blx	r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	f43f ae9a 	beq.w	8008cea <_printf_float+0xb6>
 8008fb6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fb8:	f10b 0b01 	add.w	fp, fp, #1
 8008fbc:	e7bb      	b.n	8008f36 <_printf_float+0x302>
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	47b8      	blx	r7
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d1c0      	bne.n	8008f4e <_printf_float+0x31a>
 8008fcc:	e68d      	b.n	8008cea <_printf_float+0xb6>
 8008fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008fd0:	464b      	mov	r3, r9
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	4442      	add	r2, r8
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d1c3      	bne.n	8008f66 <_printf_float+0x332>
 8008fde:	e684      	b.n	8008cea <_printf_float+0xb6>
 8008fe0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008fe4:	f1ba 0f01 	cmp.w	sl, #1
 8008fe8:	dc01      	bgt.n	8008fee <_printf_float+0x3ba>
 8008fea:	07db      	lsls	r3, r3, #31
 8008fec:	d536      	bpl.n	800905c <_printf_float+0x428>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4642      	mov	r2, r8
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	f43f ae76 	beq.w	8008cea <_printf_float+0xb6>
 8008ffe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009002:	4631      	mov	r1, r6
 8009004:	4628      	mov	r0, r5
 8009006:	47b8      	blx	r7
 8009008:	3001      	adds	r0, #1
 800900a:	f43f ae6e 	beq.w	8008cea <_printf_float+0xb6>
 800900e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009012:	2200      	movs	r2, #0
 8009014:	2300      	movs	r3, #0
 8009016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800901a:	f7f7 fd31 	bl	8000a80 <__aeabi_dcmpeq>
 800901e:	b9c0      	cbnz	r0, 8009052 <_printf_float+0x41e>
 8009020:	4653      	mov	r3, sl
 8009022:	f108 0201 	add.w	r2, r8, #1
 8009026:	4631      	mov	r1, r6
 8009028:	4628      	mov	r0, r5
 800902a:	47b8      	blx	r7
 800902c:	3001      	adds	r0, #1
 800902e:	d10c      	bne.n	800904a <_printf_float+0x416>
 8009030:	e65b      	b.n	8008cea <_printf_float+0xb6>
 8009032:	2301      	movs	r3, #1
 8009034:	465a      	mov	r2, fp
 8009036:	4631      	mov	r1, r6
 8009038:	4628      	mov	r0, r5
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	f43f ae54 	beq.w	8008cea <_printf_float+0xb6>
 8009042:	f108 0801 	add.w	r8, r8, #1
 8009046:	45d0      	cmp	r8, sl
 8009048:	dbf3      	blt.n	8009032 <_printf_float+0x3fe>
 800904a:	464b      	mov	r3, r9
 800904c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009050:	e6e0      	b.n	8008e14 <_printf_float+0x1e0>
 8009052:	f04f 0800 	mov.w	r8, #0
 8009056:	f104 0b1a 	add.w	fp, r4, #26
 800905a:	e7f4      	b.n	8009046 <_printf_float+0x412>
 800905c:	2301      	movs	r3, #1
 800905e:	4642      	mov	r2, r8
 8009060:	e7e1      	b.n	8009026 <_printf_float+0x3f2>
 8009062:	2301      	movs	r3, #1
 8009064:	464a      	mov	r2, r9
 8009066:	4631      	mov	r1, r6
 8009068:	4628      	mov	r0, r5
 800906a:	47b8      	blx	r7
 800906c:	3001      	adds	r0, #1
 800906e:	f43f ae3c 	beq.w	8008cea <_printf_float+0xb6>
 8009072:	f108 0801 	add.w	r8, r8, #1
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	4543      	cmp	r3, r8
 800907e:	dcf0      	bgt.n	8009062 <_printf_float+0x42e>
 8009080:	e6fd      	b.n	8008e7e <_printf_float+0x24a>
 8009082:	f04f 0800 	mov.w	r8, #0
 8009086:	f104 0919 	add.w	r9, r4, #25
 800908a:	e7f4      	b.n	8009076 <_printf_float+0x442>

0800908c <_printf_common>:
 800908c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009090:	4616      	mov	r6, r2
 8009092:	4698      	mov	r8, r3
 8009094:	688a      	ldr	r2, [r1, #8]
 8009096:	690b      	ldr	r3, [r1, #16]
 8009098:	4607      	mov	r7, r0
 800909a:	4293      	cmp	r3, r2
 800909c:	bfb8      	it	lt
 800909e:	4613      	movlt	r3, r2
 80090a0:	6033      	str	r3, [r6, #0]
 80090a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80090a6:	460c      	mov	r4, r1
 80090a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090ac:	b10a      	cbz	r2, 80090b2 <_printf_common+0x26>
 80090ae:	3301      	adds	r3, #1
 80090b0:	6033      	str	r3, [r6, #0]
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	0699      	lsls	r1, r3, #26
 80090b6:	bf42      	ittt	mi
 80090b8:	6833      	ldrmi	r3, [r6, #0]
 80090ba:	3302      	addmi	r3, #2
 80090bc:	6033      	strmi	r3, [r6, #0]
 80090be:	6825      	ldr	r5, [r4, #0]
 80090c0:	f015 0506 	ands.w	r5, r5, #6
 80090c4:	d106      	bne.n	80090d4 <_printf_common+0x48>
 80090c6:	f104 0a19 	add.w	sl, r4, #25
 80090ca:	68e3      	ldr	r3, [r4, #12]
 80090cc:	6832      	ldr	r2, [r6, #0]
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	42ab      	cmp	r3, r5
 80090d2:	dc2b      	bgt.n	800912c <_printf_common+0xa0>
 80090d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	3b00      	subs	r3, #0
 80090dc:	bf18      	it	ne
 80090de:	2301      	movne	r3, #1
 80090e0:	0692      	lsls	r2, r2, #26
 80090e2:	d430      	bmi.n	8009146 <_printf_common+0xba>
 80090e4:	4641      	mov	r1, r8
 80090e6:	4638      	mov	r0, r7
 80090e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090ec:	47c8      	blx	r9
 80090ee:	3001      	adds	r0, #1
 80090f0:	d023      	beq.n	800913a <_printf_common+0xae>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	6922      	ldr	r2, [r4, #16]
 80090f6:	f003 0306 	and.w	r3, r3, #6
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	bf14      	ite	ne
 80090fe:	2500      	movne	r5, #0
 8009100:	6833      	ldreq	r3, [r6, #0]
 8009102:	f04f 0600 	mov.w	r6, #0
 8009106:	bf08      	it	eq
 8009108:	68e5      	ldreq	r5, [r4, #12]
 800910a:	f104 041a 	add.w	r4, r4, #26
 800910e:	bf08      	it	eq
 8009110:	1aed      	subeq	r5, r5, r3
 8009112:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009116:	bf08      	it	eq
 8009118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800911c:	4293      	cmp	r3, r2
 800911e:	bfc4      	itt	gt
 8009120:	1a9b      	subgt	r3, r3, r2
 8009122:	18ed      	addgt	r5, r5, r3
 8009124:	42b5      	cmp	r5, r6
 8009126:	d11a      	bne.n	800915e <_printf_common+0xd2>
 8009128:	2000      	movs	r0, #0
 800912a:	e008      	b.n	800913e <_printf_common+0xb2>
 800912c:	2301      	movs	r3, #1
 800912e:	4652      	mov	r2, sl
 8009130:	4641      	mov	r1, r8
 8009132:	4638      	mov	r0, r7
 8009134:	47c8      	blx	r9
 8009136:	3001      	adds	r0, #1
 8009138:	d103      	bne.n	8009142 <_printf_common+0xb6>
 800913a:	f04f 30ff 	mov.w	r0, #4294967295
 800913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009142:	3501      	adds	r5, #1
 8009144:	e7c1      	b.n	80090ca <_printf_common+0x3e>
 8009146:	2030      	movs	r0, #48	@ 0x30
 8009148:	18e1      	adds	r1, r4, r3
 800914a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800914e:	1c5a      	adds	r2, r3, #1
 8009150:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009154:	4422      	add	r2, r4
 8009156:	3302      	adds	r3, #2
 8009158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800915c:	e7c2      	b.n	80090e4 <_printf_common+0x58>
 800915e:	2301      	movs	r3, #1
 8009160:	4622      	mov	r2, r4
 8009162:	4641      	mov	r1, r8
 8009164:	4638      	mov	r0, r7
 8009166:	47c8      	blx	r9
 8009168:	3001      	adds	r0, #1
 800916a:	d0e6      	beq.n	800913a <_printf_common+0xae>
 800916c:	3601      	adds	r6, #1
 800916e:	e7d9      	b.n	8009124 <_printf_common+0x98>

08009170 <_printf_i>:
 8009170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009174:	7e0f      	ldrb	r7, [r1, #24]
 8009176:	4691      	mov	r9, r2
 8009178:	2f78      	cmp	r7, #120	@ 0x78
 800917a:	4680      	mov	r8, r0
 800917c:	460c      	mov	r4, r1
 800917e:	469a      	mov	sl, r3
 8009180:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009182:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009186:	d807      	bhi.n	8009198 <_printf_i+0x28>
 8009188:	2f62      	cmp	r7, #98	@ 0x62
 800918a:	d80a      	bhi.n	80091a2 <_printf_i+0x32>
 800918c:	2f00      	cmp	r7, #0
 800918e:	f000 80d3 	beq.w	8009338 <_printf_i+0x1c8>
 8009192:	2f58      	cmp	r7, #88	@ 0x58
 8009194:	f000 80ba 	beq.w	800930c <_printf_i+0x19c>
 8009198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800919c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80091a0:	e03a      	b.n	8009218 <_printf_i+0xa8>
 80091a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80091a6:	2b15      	cmp	r3, #21
 80091a8:	d8f6      	bhi.n	8009198 <_printf_i+0x28>
 80091aa:	a101      	add	r1, pc, #4	@ (adr r1, 80091b0 <_printf_i+0x40>)
 80091ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091b0:	08009209 	.word	0x08009209
 80091b4:	0800921d 	.word	0x0800921d
 80091b8:	08009199 	.word	0x08009199
 80091bc:	08009199 	.word	0x08009199
 80091c0:	08009199 	.word	0x08009199
 80091c4:	08009199 	.word	0x08009199
 80091c8:	0800921d 	.word	0x0800921d
 80091cc:	08009199 	.word	0x08009199
 80091d0:	08009199 	.word	0x08009199
 80091d4:	08009199 	.word	0x08009199
 80091d8:	08009199 	.word	0x08009199
 80091dc:	0800931f 	.word	0x0800931f
 80091e0:	08009247 	.word	0x08009247
 80091e4:	080092d9 	.word	0x080092d9
 80091e8:	08009199 	.word	0x08009199
 80091ec:	08009199 	.word	0x08009199
 80091f0:	08009341 	.word	0x08009341
 80091f4:	08009199 	.word	0x08009199
 80091f8:	08009247 	.word	0x08009247
 80091fc:	08009199 	.word	0x08009199
 8009200:	08009199 	.word	0x08009199
 8009204:	080092e1 	.word	0x080092e1
 8009208:	6833      	ldr	r3, [r6, #0]
 800920a:	1d1a      	adds	r2, r3, #4
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6032      	str	r2, [r6, #0]
 8009210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009214:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009218:	2301      	movs	r3, #1
 800921a:	e09e      	b.n	800935a <_printf_i+0x1ea>
 800921c:	6833      	ldr	r3, [r6, #0]
 800921e:	6820      	ldr	r0, [r4, #0]
 8009220:	1d19      	adds	r1, r3, #4
 8009222:	6031      	str	r1, [r6, #0]
 8009224:	0606      	lsls	r6, r0, #24
 8009226:	d501      	bpl.n	800922c <_printf_i+0xbc>
 8009228:	681d      	ldr	r5, [r3, #0]
 800922a:	e003      	b.n	8009234 <_printf_i+0xc4>
 800922c:	0645      	lsls	r5, r0, #25
 800922e:	d5fb      	bpl.n	8009228 <_printf_i+0xb8>
 8009230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009234:	2d00      	cmp	r5, #0
 8009236:	da03      	bge.n	8009240 <_printf_i+0xd0>
 8009238:	232d      	movs	r3, #45	@ 0x2d
 800923a:	426d      	negs	r5, r5
 800923c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009240:	230a      	movs	r3, #10
 8009242:	4859      	ldr	r0, [pc, #356]	@ (80093a8 <_printf_i+0x238>)
 8009244:	e011      	b.n	800926a <_printf_i+0xfa>
 8009246:	6821      	ldr	r1, [r4, #0]
 8009248:	6833      	ldr	r3, [r6, #0]
 800924a:	0608      	lsls	r0, r1, #24
 800924c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009250:	d402      	bmi.n	8009258 <_printf_i+0xe8>
 8009252:	0649      	lsls	r1, r1, #25
 8009254:	bf48      	it	mi
 8009256:	b2ad      	uxthmi	r5, r5
 8009258:	2f6f      	cmp	r7, #111	@ 0x6f
 800925a:	6033      	str	r3, [r6, #0]
 800925c:	bf14      	ite	ne
 800925e:	230a      	movne	r3, #10
 8009260:	2308      	moveq	r3, #8
 8009262:	4851      	ldr	r0, [pc, #324]	@ (80093a8 <_printf_i+0x238>)
 8009264:	2100      	movs	r1, #0
 8009266:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800926a:	6866      	ldr	r6, [r4, #4]
 800926c:	2e00      	cmp	r6, #0
 800926e:	bfa8      	it	ge
 8009270:	6821      	ldrge	r1, [r4, #0]
 8009272:	60a6      	str	r6, [r4, #8]
 8009274:	bfa4      	itt	ge
 8009276:	f021 0104 	bicge.w	r1, r1, #4
 800927a:	6021      	strge	r1, [r4, #0]
 800927c:	b90d      	cbnz	r5, 8009282 <_printf_i+0x112>
 800927e:	2e00      	cmp	r6, #0
 8009280:	d04b      	beq.n	800931a <_printf_i+0x1aa>
 8009282:	4616      	mov	r6, r2
 8009284:	fbb5 f1f3 	udiv	r1, r5, r3
 8009288:	fb03 5711 	mls	r7, r3, r1, r5
 800928c:	5dc7      	ldrb	r7, [r0, r7]
 800928e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009292:	462f      	mov	r7, r5
 8009294:	42bb      	cmp	r3, r7
 8009296:	460d      	mov	r5, r1
 8009298:	d9f4      	bls.n	8009284 <_printf_i+0x114>
 800929a:	2b08      	cmp	r3, #8
 800929c:	d10b      	bne.n	80092b6 <_printf_i+0x146>
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	07df      	lsls	r7, r3, #31
 80092a2:	d508      	bpl.n	80092b6 <_printf_i+0x146>
 80092a4:	6923      	ldr	r3, [r4, #16]
 80092a6:	6861      	ldr	r1, [r4, #4]
 80092a8:	4299      	cmp	r1, r3
 80092aa:	bfde      	ittt	le
 80092ac:	2330      	movle	r3, #48	@ 0x30
 80092ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80092b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80092b6:	1b92      	subs	r2, r2, r6
 80092b8:	6122      	str	r2, [r4, #16]
 80092ba:	464b      	mov	r3, r9
 80092bc:	4621      	mov	r1, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	f8cd a000 	str.w	sl, [sp]
 80092c4:	aa03      	add	r2, sp, #12
 80092c6:	f7ff fee1 	bl	800908c <_printf_common>
 80092ca:	3001      	adds	r0, #1
 80092cc:	d14a      	bne.n	8009364 <_printf_i+0x1f4>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	b004      	add	sp, #16
 80092d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	f043 0320 	orr.w	r3, r3, #32
 80092de:	6023      	str	r3, [r4, #0]
 80092e0:	2778      	movs	r7, #120	@ 0x78
 80092e2:	4832      	ldr	r0, [pc, #200]	@ (80093ac <_printf_i+0x23c>)
 80092e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	6831      	ldr	r1, [r6, #0]
 80092ec:	061f      	lsls	r7, r3, #24
 80092ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80092f2:	d402      	bmi.n	80092fa <_printf_i+0x18a>
 80092f4:	065f      	lsls	r7, r3, #25
 80092f6:	bf48      	it	mi
 80092f8:	b2ad      	uxthmi	r5, r5
 80092fa:	6031      	str	r1, [r6, #0]
 80092fc:	07d9      	lsls	r1, r3, #31
 80092fe:	bf44      	itt	mi
 8009300:	f043 0320 	orrmi.w	r3, r3, #32
 8009304:	6023      	strmi	r3, [r4, #0]
 8009306:	b11d      	cbz	r5, 8009310 <_printf_i+0x1a0>
 8009308:	2310      	movs	r3, #16
 800930a:	e7ab      	b.n	8009264 <_printf_i+0xf4>
 800930c:	4826      	ldr	r0, [pc, #152]	@ (80093a8 <_printf_i+0x238>)
 800930e:	e7e9      	b.n	80092e4 <_printf_i+0x174>
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	f023 0320 	bic.w	r3, r3, #32
 8009316:	6023      	str	r3, [r4, #0]
 8009318:	e7f6      	b.n	8009308 <_printf_i+0x198>
 800931a:	4616      	mov	r6, r2
 800931c:	e7bd      	b.n	800929a <_printf_i+0x12a>
 800931e:	6833      	ldr	r3, [r6, #0]
 8009320:	6825      	ldr	r5, [r4, #0]
 8009322:	1d18      	adds	r0, r3, #4
 8009324:	6961      	ldr	r1, [r4, #20]
 8009326:	6030      	str	r0, [r6, #0]
 8009328:	062e      	lsls	r6, r5, #24
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	d501      	bpl.n	8009332 <_printf_i+0x1c2>
 800932e:	6019      	str	r1, [r3, #0]
 8009330:	e002      	b.n	8009338 <_printf_i+0x1c8>
 8009332:	0668      	lsls	r0, r5, #25
 8009334:	d5fb      	bpl.n	800932e <_printf_i+0x1be>
 8009336:	8019      	strh	r1, [r3, #0]
 8009338:	2300      	movs	r3, #0
 800933a:	4616      	mov	r6, r2
 800933c:	6123      	str	r3, [r4, #16]
 800933e:	e7bc      	b.n	80092ba <_printf_i+0x14a>
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	2100      	movs	r1, #0
 8009344:	1d1a      	adds	r2, r3, #4
 8009346:	6032      	str	r2, [r6, #0]
 8009348:	681e      	ldr	r6, [r3, #0]
 800934a:	6862      	ldr	r2, [r4, #4]
 800934c:	4630      	mov	r0, r6
 800934e:	f000 fbe4 	bl	8009b1a <memchr>
 8009352:	b108      	cbz	r0, 8009358 <_printf_i+0x1e8>
 8009354:	1b80      	subs	r0, r0, r6
 8009356:	6060      	str	r0, [r4, #4]
 8009358:	6863      	ldr	r3, [r4, #4]
 800935a:	6123      	str	r3, [r4, #16]
 800935c:	2300      	movs	r3, #0
 800935e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009362:	e7aa      	b.n	80092ba <_printf_i+0x14a>
 8009364:	4632      	mov	r2, r6
 8009366:	4649      	mov	r1, r9
 8009368:	4640      	mov	r0, r8
 800936a:	6923      	ldr	r3, [r4, #16]
 800936c:	47d0      	blx	sl
 800936e:	3001      	adds	r0, #1
 8009370:	d0ad      	beq.n	80092ce <_printf_i+0x15e>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	079b      	lsls	r3, r3, #30
 8009376:	d413      	bmi.n	80093a0 <_printf_i+0x230>
 8009378:	68e0      	ldr	r0, [r4, #12]
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	4298      	cmp	r0, r3
 800937e:	bfb8      	it	lt
 8009380:	4618      	movlt	r0, r3
 8009382:	e7a6      	b.n	80092d2 <_printf_i+0x162>
 8009384:	2301      	movs	r3, #1
 8009386:	4632      	mov	r2, r6
 8009388:	4649      	mov	r1, r9
 800938a:	4640      	mov	r0, r8
 800938c:	47d0      	blx	sl
 800938e:	3001      	adds	r0, #1
 8009390:	d09d      	beq.n	80092ce <_printf_i+0x15e>
 8009392:	3501      	adds	r5, #1
 8009394:	68e3      	ldr	r3, [r4, #12]
 8009396:	9903      	ldr	r1, [sp, #12]
 8009398:	1a5b      	subs	r3, r3, r1
 800939a:	42ab      	cmp	r3, r5
 800939c:	dcf2      	bgt.n	8009384 <_printf_i+0x214>
 800939e:	e7eb      	b.n	8009378 <_printf_i+0x208>
 80093a0:	2500      	movs	r5, #0
 80093a2:	f104 0619 	add.w	r6, r4, #25
 80093a6:	e7f5      	b.n	8009394 <_printf_i+0x224>
 80093a8:	0800db00 	.word	0x0800db00
 80093ac:	0800db11 	.word	0x0800db11

080093b0 <_scanf_float>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	b087      	sub	sp, #28
 80093b6:	9303      	str	r3, [sp, #12]
 80093b8:	688b      	ldr	r3, [r1, #8]
 80093ba:	4617      	mov	r7, r2
 80093bc:	1e5a      	subs	r2, r3, #1
 80093be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80093c2:	bf82      	ittt	hi
 80093c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80093c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80093cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80093d0:	460a      	mov	r2, r1
 80093d2:	f04f 0500 	mov.w	r5, #0
 80093d6:	bf88      	it	hi
 80093d8:	608b      	strhi	r3, [r1, #8]
 80093da:	680b      	ldr	r3, [r1, #0]
 80093dc:	4680      	mov	r8, r0
 80093de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80093e2:	f842 3b1c 	str.w	r3, [r2], #28
 80093e6:	460c      	mov	r4, r1
 80093e8:	bf98      	it	ls
 80093ea:	f04f 0b00 	movls.w	fp, #0
 80093ee:	4616      	mov	r6, r2
 80093f0:	46aa      	mov	sl, r5
 80093f2:	46a9      	mov	r9, r5
 80093f4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80093f8:	9201      	str	r2, [sp, #4]
 80093fa:	9502      	str	r5, [sp, #8]
 80093fc:	68a2      	ldr	r2, [r4, #8]
 80093fe:	b152      	cbz	r2, 8009416 <_scanf_float+0x66>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	2b4e      	cmp	r3, #78	@ 0x4e
 8009406:	d865      	bhi.n	80094d4 <_scanf_float+0x124>
 8009408:	2b40      	cmp	r3, #64	@ 0x40
 800940a:	d83d      	bhi.n	8009488 <_scanf_float+0xd8>
 800940c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009410:	b2c8      	uxtb	r0, r1
 8009412:	280e      	cmp	r0, #14
 8009414:	d93b      	bls.n	800948e <_scanf_float+0xde>
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	d003      	beq.n	8009424 <_scanf_float+0x74>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009422:	6023      	str	r3, [r4, #0]
 8009424:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009428:	f1ba 0f01 	cmp.w	sl, #1
 800942c:	f200 8118 	bhi.w	8009660 <_scanf_float+0x2b0>
 8009430:	9b01      	ldr	r3, [sp, #4]
 8009432:	429e      	cmp	r6, r3
 8009434:	f200 8109 	bhi.w	800964a <_scanf_float+0x29a>
 8009438:	2001      	movs	r0, #1
 800943a:	b007      	add	sp, #28
 800943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009440:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009444:	2a0d      	cmp	r2, #13
 8009446:	d8e6      	bhi.n	8009416 <_scanf_float+0x66>
 8009448:	a101      	add	r1, pc, #4	@ (adr r1, 8009450 <_scanf_float+0xa0>)
 800944a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009597 	.word	0x08009597
 8009454:	08009417 	.word	0x08009417
 8009458:	08009417 	.word	0x08009417
 800945c:	08009417 	.word	0x08009417
 8009460:	080095f7 	.word	0x080095f7
 8009464:	080095cf 	.word	0x080095cf
 8009468:	08009417 	.word	0x08009417
 800946c:	08009417 	.word	0x08009417
 8009470:	080095a5 	.word	0x080095a5
 8009474:	08009417 	.word	0x08009417
 8009478:	08009417 	.word	0x08009417
 800947c:	08009417 	.word	0x08009417
 8009480:	08009417 	.word	0x08009417
 8009484:	0800955d 	.word	0x0800955d
 8009488:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800948c:	e7da      	b.n	8009444 <_scanf_float+0x94>
 800948e:	290e      	cmp	r1, #14
 8009490:	d8c1      	bhi.n	8009416 <_scanf_float+0x66>
 8009492:	a001      	add	r0, pc, #4	@ (adr r0, 8009498 <_scanf_float+0xe8>)
 8009494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009498:	0800954d 	.word	0x0800954d
 800949c:	08009417 	.word	0x08009417
 80094a0:	0800954d 	.word	0x0800954d
 80094a4:	080095e3 	.word	0x080095e3
 80094a8:	08009417 	.word	0x08009417
 80094ac:	080094f5 	.word	0x080094f5
 80094b0:	08009533 	.word	0x08009533
 80094b4:	08009533 	.word	0x08009533
 80094b8:	08009533 	.word	0x08009533
 80094bc:	08009533 	.word	0x08009533
 80094c0:	08009533 	.word	0x08009533
 80094c4:	08009533 	.word	0x08009533
 80094c8:	08009533 	.word	0x08009533
 80094cc:	08009533 	.word	0x08009533
 80094d0:	08009533 	.word	0x08009533
 80094d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80094d6:	d809      	bhi.n	80094ec <_scanf_float+0x13c>
 80094d8:	2b60      	cmp	r3, #96	@ 0x60
 80094da:	d8b1      	bhi.n	8009440 <_scanf_float+0x90>
 80094dc:	2b54      	cmp	r3, #84	@ 0x54
 80094de:	d07b      	beq.n	80095d8 <_scanf_float+0x228>
 80094e0:	2b59      	cmp	r3, #89	@ 0x59
 80094e2:	d198      	bne.n	8009416 <_scanf_float+0x66>
 80094e4:	2d07      	cmp	r5, #7
 80094e6:	d196      	bne.n	8009416 <_scanf_float+0x66>
 80094e8:	2508      	movs	r5, #8
 80094ea:	e02c      	b.n	8009546 <_scanf_float+0x196>
 80094ec:	2b74      	cmp	r3, #116	@ 0x74
 80094ee:	d073      	beq.n	80095d8 <_scanf_float+0x228>
 80094f0:	2b79      	cmp	r3, #121	@ 0x79
 80094f2:	e7f6      	b.n	80094e2 <_scanf_float+0x132>
 80094f4:	6821      	ldr	r1, [r4, #0]
 80094f6:	05c8      	lsls	r0, r1, #23
 80094f8:	d51b      	bpl.n	8009532 <_scanf_float+0x182>
 80094fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80094fe:	6021      	str	r1, [r4, #0]
 8009500:	f109 0901 	add.w	r9, r9, #1
 8009504:	f1bb 0f00 	cmp.w	fp, #0
 8009508:	d003      	beq.n	8009512 <_scanf_float+0x162>
 800950a:	3201      	adds	r2, #1
 800950c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009510:	60a2      	str	r2, [r4, #8]
 8009512:	68a3      	ldr	r3, [r4, #8]
 8009514:	3b01      	subs	r3, #1
 8009516:	60a3      	str	r3, [r4, #8]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	3301      	adds	r3, #1
 800951c:	6123      	str	r3, [r4, #16]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	3b01      	subs	r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	607b      	str	r3, [r7, #4]
 8009526:	f340 8087 	ble.w	8009638 <_scanf_float+0x288>
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	3301      	adds	r3, #1
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	e764      	b.n	80093fc <_scanf_float+0x4c>
 8009532:	eb1a 0105 	adds.w	r1, sl, r5
 8009536:	f47f af6e 	bne.w	8009416 <_scanf_float+0x66>
 800953a:	460d      	mov	r5, r1
 800953c:	468a      	mov	sl, r1
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009544:	6022      	str	r2, [r4, #0]
 8009546:	f806 3b01 	strb.w	r3, [r6], #1
 800954a:	e7e2      	b.n	8009512 <_scanf_float+0x162>
 800954c:	6822      	ldr	r2, [r4, #0]
 800954e:	0610      	lsls	r0, r2, #24
 8009550:	f57f af61 	bpl.w	8009416 <_scanf_float+0x66>
 8009554:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009558:	6022      	str	r2, [r4, #0]
 800955a:	e7f4      	b.n	8009546 <_scanf_float+0x196>
 800955c:	f1ba 0f00 	cmp.w	sl, #0
 8009560:	d10e      	bne.n	8009580 <_scanf_float+0x1d0>
 8009562:	f1b9 0f00 	cmp.w	r9, #0
 8009566:	d10e      	bne.n	8009586 <_scanf_float+0x1d6>
 8009568:	6822      	ldr	r2, [r4, #0]
 800956a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800956e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009572:	d108      	bne.n	8009586 <_scanf_float+0x1d6>
 8009574:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009578:	f04f 0a01 	mov.w	sl, #1
 800957c:	6022      	str	r2, [r4, #0]
 800957e:	e7e2      	b.n	8009546 <_scanf_float+0x196>
 8009580:	f1ba 0f02 	cmp.w	sl, #2
 8009584:	d055      	beq.n	8009632 <_scanf_float+0x282>
 8009586:	2d01      	cmp	r5, #1
 8009588:	d002      	beq.n	8009590 <_scanf_float+0x1e0>
 800958a:	2d04      	cmp	r5, #4
 800958c:	f47f af43 	bne.w	8009416 <_scanf_float+0x66>
 8009590:	3501      	adds	r5, #1
 8009592:	b2ed      	uxtb	r5, r5
 8009594:	e7d7      	b.n	8009546 <_scanf_float+0x196>
 8009596:	f1ba 0f01 	cmp.w	sl, #1
 800959a:	f47f af3c 	bne.w	8009416 <_scanf_float+0x66>
 800959e:	f04f 0a02 	mov.w	sl, #2
 80095a2:	e7d0      	b.n	8009546 <_scanf_float+0x196>
 80095a4:	b97d      	cbnz	r5, 80095c6 <_scanf_float+0x216>
 80095a6:	f1b9 0f00 	cmp.w	r9, #0
 80095aa:	f47f af37 	bne.w	800941c <_scanf_float+0x6c>
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80095b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80095b8:	f040 8103 	bne.w	80097c2 <_scanf_float+0x412>
 80095bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80095c0:	2501      	movs	r5, #1
 80095c2:	6022      	str	r2, [r4, #0]
 80095c4:	e7bf      	b.n	8009546 <_scanf_float+0x196>
 80095c6:	2d03      	cmp	r5, #3
 80095c8:	d0e2      	beq.n	8009590 <_scanf_float+0x1e0>
 80095ca:	2d05      	cmp	r5, #5
 80095cc:	e7de      	b.n	800958c <_scanf_float+0x1dc>
 80095ce:	2d02      	cmp	r5, #2
 80095d0:	f47f af21 	bne.w	8009416 <_scanf_float+0x66>
 80095d4:	2503      	movs	r5, #3
 80095d6:	e7b6      	b.n	8009546 <_scanf_float+0x196>
 80095d8:	2d06      	cmp	r5, #6
 80095da:	f47f af1c 	bne.w	8009416 <_scanf_float+0x66>
 80095de:	2507      	movs	r5, #7
 80095e0:	e7b1      	b.n	8009546 <_scanf_float+0x196>
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	0591      	lsls	r1, r2, #22
 80095e6:	f57f af16 	bpl.w	8009416 <_scanf_float+0x66>
 80095ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80095ee:	6022      	str	r2, [r4, #0]
 80095f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80095f4:	e7a7      	b.n	8009546 <_scanf_float+0x196>
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80095fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009600:	d006      	beq.n	8009610 <_scanf_float+0x260>
 8009602:	0550      	lsls	r0, r2, #21
 8009604:	f57f af07 	bpl.w	8009416 <_scanf_float+0x66>
 8009608:	f1b9 0f00 	cmp.w	r9, #0
 800960c:	f000 80d9 	beq.w	80097c2 <_scanf_float+0x412>
 8009610:	0591      	lsls	r1, r2, #22
 8009612:	bf58      	it	pl
 8009614:	9902      	ldrpl	r1, [sp, #8]
 8009616:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800961a:	bf58      	it	pl
 800961c:	eba9 0101 	subpl.w	r1, r9, r1
 8009620:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009624:	f04f 0900 	mov.w	r9, #0
 8009628:	bf58      	it	pl
 800962a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800962e:	6022      	str	r2, [r4, #0]
 8009630:	e789      	b.n	8009546 <_scanf_float+0x196>
 8009632:	f04f 0a03 	mov.w	sl, #3
 8009636:	e786      	b.n	8009546 <_scanf_float+0x196>
 8009638:	4639      	mov	r1, r7
 800963a:	4640      	mov	r0, r8
 800963c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009640:	4798      	blx	r3
 8009642:	2800      	cmp	r0, #0
 8009644:	f43f aeda 	beq.w	80093fc <_scanf_float+0x4c>
 8009648:	e6e5      	b.n	8009416 <_scanf_float+0x66>
 800964a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800964e:	463a      	mov	r2, r7
 8009650:	4640      	mov	r0, r8
 8009652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009656:	4798      	blx	r3
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	3b01      	subs	r3, #1
 800965c:	6123      	str	r3, [r4, #16]
 800965e:	e6e7      	b.n	8009430 <_scanf_float+0x80>
 8009660:	1e6b      	subs	r3, r5, #1
 8009662:	2b06      	cmp	r3, #6
 8009664:	d824      	bhi.n	80096b0 <_scanf_float+0x300>
 8009666:	2d02      	cmp	r5, #2
 8009668:	d836      	bhi.n	80096d8 <_scanf_float+0x328>
 800966a:	9b01      	ldr	r3, [sp, #4]
 800966c:	429e      	cmp	r6, r3
 800966e:	f67f aee3 	bls.w	8009438 <_scanf_float+0x88>
 8009672:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009676:	463a      	mov	r2, r7
 8009678:	4640      	mov	r0, r8
 800967a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800967e:	4798      	blx	r3
 8009680:	6923      	ldr	r3, [r4, #16]
 8009682:	3b01      	subs	r3, #1
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	e7f0      	b.n	800966a <_scanf_float+0x2ba>
 8009688:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800968c:	463a      	mov	r2, r7
 800968e:	4640      	mov	r0, r8
 8009690:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009694:	4798      	blx	r3
 8009696:	6923      	ldr	r3, [r4, #16]
 8009698:	3b01      	subs	r3, #1
 800969a:	6123      	str	r3, [r4, #16]
 800969c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096a0:	fa5f fa8a 	uxtb.w	sl, sl
 80096a4:	f1ba 0f02 	cmp.w	sl, #2
 80096a8:	d1ee      	bne.n	8009688 <_scanf_float+0x2d8>
 80096aa:	3d03      	subs	r5, #3
 80096ac:	b2ed      	uxtb	r5, r5
 80096ae:	1b76      	subs	r6, r6, r5
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	05da      	lsls	r2, r3, #23
 80096b4:	d530      	bpl.n	8009718 <_scanf_float+0x368>
 80096b6:	055b      	lsls	r3, r3, #21
 80096b8:	d511      	bpl.n	80096de <_scanf_float+0x32e>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	429e      	cmp	r6, r3
 80096be:	f67f aebb 	bls.w	8009438 <_scanf_float+0x88>
 80096c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096c6:	463a      	mov	r2, r7
 80096c8:	4640      	mov	r0, r8
 80096ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096ce:	4798      	blx	r3
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	6123      	str	r3, [r4, #16]
 80096d6:	e7f0      	b.n	80096ba <_scanf_float+0x30a>
 80096d8:	46aa      	mov	sl, r5
 80096da:	46b3      	mov	fp, r6
 80096dc:	e7de      	b.n	800969c <_scanf_float+0x2ec>
 80096de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096e2:	6923      	ldr	r3, [r4, #16]
 80096e4:	2965      	cmp	r1, #101	@ 0x65
 80096e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80096ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80096ee:	6123      	str	r3, [r4, #16]
 80096f0:	d00c      	beq.n	800970c <_scanf_float+0x35c>
 80096f2:	2945      	cmp	r1, #69	@ 0x45
 80096f4:	d00a      	beq.n	800970c <_scanf_float+0x35c>
 80096f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80096fa:	463a      	mov	r2, r7
 80096fc:	4640      	mov	r0, r8
 80096fe:	4798      	blx	r3
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009706:	3b01      	subs	r3, #1
 8009708:	1eb5      	subs	r5, r6, #2
 800970a:	6123      	str	r3, [r4, #16]
 800970c:	463a      	mov	r2, r7
 800970e:	4640      	mov	r0, r8
 8009710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009714:	4798      	blx	r3
 8009716:	462e      	mov	r6, r5
 8009718:	6822      	ldr	r2, [r4, #0]
 800971a:	f012 0210 	ands.w	r2, r2, #16
 800971e:	d001      	beq.n	8009724 <_scanf_float+0x374>
 8009720:	2000      	movs	r0, #0
 8009722:	e68a      	b.n	800943a <_scanf_float+0x8a>
 8009724:	7032      	strb	r2, [r6, #0]
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800972c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009730:	d11c      	bne.n	800976c <_scanf_float+0x3bc>
 8009732:	9b02      	ldr	r3, [sp, #8]
 8009734:	454b      	cmp	r3, r9
 8009736:	eba3 0209 	sub.w	r2, r3, r9
 800973a:	d123      	bne.n	8009784 <_scanf_float+0x3d4>
 800973c:	2200      	movs	r2, #0
 800973e:	4640      	mov	r0, r8
 8009740:	9901      	ldr	r1, [sp, #4]
 8009742:	f002 fbed 	bl	800bf20 <_strtod_r>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	6825      	ldr	r5, [r4, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f015 0f02 	tst.w	r5, #2
 8009750:	4606      	mov	r6, r0
 8009752:	460f      	mov	r7, r1
 8009754:	f103 0204 	add.w	r2, r3, #4
 8009758:	d01f      	beq.n	800979a <_scanf_float+0x3ea>
 800975a:	9903      	ldr	r1, [sp, #12]
 800975c:	600a      	str	r2, [r1, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	e9c3 6700 	strd	r6, r7, [r3]
 8009764:	68e3      	ldr	r3, [r4, #12]
 8009766:	3301      	adds	r3, #1
 8009768:	60e3      	str	r3, [r4, #12]
 800976a:	e7d9      	b.n	8009720 <_scanf_float+0x370>
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0e4      	beq.n	800973c <_scanf_float+0x38c>
 8009772:	9905      	ldr	r1, [sp, #20]
 8009774:	230a      	movs	r3, #10
 8009776:	4640      	mov	r0, r8
 8009778:	3101      	adds	r1, #1
 800977a:	f002 fc51 	bl	800c020 <_strtol_r>
 800977e:	9b04      	ldr	r3, [sp, #16]
 8009780:	9e05      	ldr	r6, [sp, #20]
 8009782:	1ac2      	subs	r2, r0, r3
 8009784:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009788:	429e      	cmp	r6, r3
 800978a:	bf28      	it	cs
 800978c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009790:	4630      	mov	r0, r6
 8009792:	490d      	ldr	r1, [pc, #52]	@ (80097c8 <_scanf_float+0x418>)
 8009794:	f000 f8de 	bl	8009954 <siprintf>
 8009798:	e7d0      	b.n	800973c <_scanf_float+0x38c>
 800979a:	076d      	lsls	r5, r5, #29
 800979c:	d4dd      	bmi.n	800975a <_scanf_float+0x3aa>
 800979e:	9d03      	ldr	r5, [sp, #12]
 80097a0:	602a      	str	r2, [r5, #0]
 80097a2:	681d      	ldr	r5, [r3, #0]
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	f7f7 f99c 	bl	8000ae4 <__aeabi_dcmpun>
 80097ac:	b120      	cbz	r0, 80097b8 <_scanf_float+0x408>
 80097ae:	4807      	ldr	r0, [pc, #28]	@ (80097cc <_scanf_float+0x41c>)
 80097b0:	f000 f9c2 	bl	8009b38 <nanf>
 80097b4:	6028      	str	r0, [r5, #0]
 80097b6:	e7d5      	b.n	8009764 <_scanf_float+0x3b4>
 80097b8:	4630      	mov	r0, r6
 80097ba:	4639      	mov	r1, r7
 80097bc:	f7f7 f9f0 	bl	8000ba0 <__aeabi_d2f>
 80097c0:	e7f8      	b.n	80097b4 <_scanf_float+0x404>
 80097c2:	f04f 0900 	mov.w	r9, #0
 80097c6:	e62d      	b.n	8009424 <_scanf_float+0x74>
 80097c8:	0800db22 	.word	0x0800db22
 80097cc:	0800debd 	.word	0x0800debd

080097d0 <std>:
 80097d0:	2300      	movs	r3, #0
 80097d2:	b510      	push	{r4, lr}
 80097d4:	4604      	mov	r4, r0
 80097d6:	e9c0 3300 	strd	r3, r3, [r0]
 80097da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097de:	6083      	str	r3, [r0, #8]
 80097e0:	8181      	strh	r1, [r0, #12]
 80097e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097e4:	81c2      	strh	r2, [r0, #14]
 80097e6:	6183      	str	r3, [r0, #24]
 80097e8:	4619      	mov	r1, r3
 80097ea:	2208      	movs	r2, #8
 80097ec:	305c      	adds	r0, #92	@ 0x5c
 80097ee:	f000 f914 	bl	8009a1a <memset>
 80097f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009828 <std+0x58>)
 80097f4:	6224      	str	r4, [r4, #32]
 80097f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80097f8:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <std+0x5c>)
 80097fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009830 <std+0x60>)
 80097fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009800:	4b0c      	ldr	r3, [pc, #48]	@ (8009834 <std+0x64>)
 8009802:	6323      	str	r3, [r4, #48]	@ 0x30
 8009804:	4b0c      	ldr	r3, [pc, #48]	@ (8009838 <std+0x68>)
 8009806:	429c      	cmp	r4, r3
 8009808:	d006      	beq.n	8009818 <std+0x48>
 800980a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800980e:	4294      	cmp	r4, r2
 8009810:	d002      	beq.n	8009818 <std+0x48>
 8009812:	33d0      	adds	r3, #208	@ 0xd0
 8009814:	429c      	cmp	r4, r3
 8009816:	d105      	bne.n	8009824 <std+0x54>
 8009818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800981c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009820:	f000 b978 	b.w	8009b14 <__retarget_lock_init_recursive>
 8009824:	bd10      	pop	{r4, pc}
 8009826:	bf00      	nop
 8009828:	08009995 	.word	0x08009995
 800982c:	080099b7 	.word	0x080099b7
 8009830:	080099ef 	.word	0x080099ef
 8009834:	08009a13 	.word	0x08009a13
 8009838:	20000878 	.word	0x20000878

0800983c <stdio_exit_handler>:
 800983c:	4a02      	ldr	r2, [pc, #8]	@ (8009848 <stdio_exit_handler+0xc>)
 800983e:	4903      	ldr	r1, [pc, #12]	@ (800984c <stdio_exit_handler+0x10>)
 8009840:	4803      	ldr	r0, [pc, #12]	@ (8009850 <stdio_exit_handler+0x14>)
 8009842:	f000 b869 	b.w	8009918 <_fwalk_sglue>
 8009846:	bf00      	nop
 8009848:	20000058 	.word	0x20000058
 800984c:	0800c3d5 	.word	0x0800c3d5
 8009850:	20000068 	.word	0x20000068

08009854 <cleanup_stdio>:
 8009854:	6841      	ldr	r1, [r0, #4]
 8009856:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <cleanup_stdio+0x34>)
 8009858:	b510      	push	{r4, lr}
 800985a:	4299      	cmp	r1, r3
 800985c:	4604      	mov	r4, r0
 800985e:	d001      	beq.n	8009864 <cleanup_stdio+0x10>
 8009860:	f002 fdb8 	bl	800c3d4 <_fflush_r>
 8009864:	68a1      	ldr	r1, [r4, #8]
 8009866:	4b09      	ldr	r3, [pc, #36]	@ (800988c <cleanup_stdio+0x38>)
 8009868:	4299      	cmp	r1, r3
 800986a:	d002      	beq.n	8009872 <cleanup_stdio+0x1e>
 800986c:	4620      	mov	r0, r4
 800986e:	f002 fdb1 	bl	800c3d4 <_fflush_r>
 8009872:	68e1      	ldr	r1, [r4, #12]
 8009874:	4b06      	ldr	r3, [pc, #24]	@ (8009890 <cleanup_stdio+0x3c>)
 8009876:	4299      	cmp	r1, r3
 8009878:	d004      	beq.n	8009884 <cleanup_stdio+0x30>
 800987a:	4620      	mov	r0, r4
 800987c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009880:	f002 bda8 	b.w	800c3d4 <_fflush_r>
 8009884:	bd10      	pop	{r4, pc}
 8009886:	bf00      	nop
 8009888:	20000878 	.word	0x20000878
 800988c:	200008e0 	.word	0x200008e0
 8009890:	20000948 	.word	0x20000948

08009894 <global_stdio_init.part.0>:
 8009894:	b510      	push	{r4, lr}
 8009896:	4b0b      	ldr	r3, [pc, #44]	@ (80098c4 <global_stdio_init.part.0+0x30>)
 8009898:	4c0b      	ldr	r4, [pc, #44]	@ (80098c8 <global_stdio_init.part.0+0x34>)
 800989a:	4a0c      	ldr	r2, [pc, #48]	@ (80098cc <global_stdio_init.part.0+0x38>)
 800989c:	4620      	mov	r0, r4
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	2104      	movs	r1, #4
 80098a2:	2200      	movs	r2, #0
 80098a4:	f7ff ff94 	bl	80097d0 <std>
 80098a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80098ac:	2201      	movs	r2, #1
 80098ae:	2109      	movs	r1, #9
 80098b0:	f7ff ff8e 	bl	80097d0 <std>
 80098b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80098b8:	2202      	movs	r2, #2
 80098ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098be:	2112      	movs	r1, #18
 80098c0:	f7ff bf86 	b.w	80097d0 <std>
 80098c4:	200009b0 	.word	0x200009b0
 80098c8:	20000878 	.word	0x20000878
 80098cc:	0800983d 	.word	0x0800983d

080098d0 <__sfp_lock_acquire>:
 80098d0:	4801      	ldr	r0, [pc, #4]	@ (80098d8 <__sfp_lock_acquire+0x8>)
 80098d2:	f000 b920 	b.w	8009b16 <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	200009b9 	.word	0x200009b9

080098dc <__sfp_lock_release>:
 80098dc:	4801      	ldr	r0, [pc, #4]	@ (80098e4 <__sfp_lock_release+0x8>)
 80098de:	f000 b91b 	b.w	8009b18 <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	200009b9 	.word	0x200009b9

080098e8 <__sinit>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4604      	mov	r4, r0
 80098ec:	f7ff fff0 	bl	80098d0 <__sfp_lock_acquire>
 80098f0:	6a23      	ldr	r3, [r4, #32]
 80098f2:	b11b      	cbz	r3, 80098fc <__sinit+0x14>
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	f7ff bff0 	b.w	80098dc <__sfp_lock_release>
 80098fc:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <__sinit+0x28>)
 80098fe:	6223      	str	r3, [r4, #32]
 8009900:	4b04      	ldr	r3, [pc, #16]	@ (8009914 <__sinit+0x2c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1f5      	bne.n	80098f4 <__sinit+0xc>
 8009908:	f7ff ffc4 	bl	8009894 <global_stdio_init.part.0>
 800990c:	e7f2      	b.n	80098f4 <__sinit+0xc>
 800990e:	bf00      	nop
 8009910:	08009855 	.word	0x08009855
 8009914:	200009b0 	.word	0x200009b0

08009918 <_fwalk_sglue>:
 8009918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800991c:	4607      	mov	r7, r0
 800991e:	4688      	mov	r8, r1
 8009920:	4614      	mov	r4, r2
 8009922:	2600      	movs	r6, #0
 8009924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009928:	f1b9 0901 	subs.w	r9, r9, #1
 800992c:	d505      	bpl.n	800993a <_fwalk_sglue+0x22>
 800992e:	6824      	ldr	r4, [r4, #0]
 8009930:	2c00      	cmp	r4, #0
 8009932:	d1f7      	bne.n	8009924 <_fwalk_sglue+0xc>
 8009934:	4630      	mov	r0, r6
 8009936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993a:	89ab      	ldrh	r3, [r5, #12]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d907      	bls.n	8009950 <_fwalk_sglue+0x38>
 8009940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009944:	3301      	adds	r3, #1
 8009946:	d003      	beq.n	8009950 <_fwalk_sglue+0x38>
 8009948:	4629      	mov	r1, r5
 800994a:	4638      	mov	r0, r7
 800994c:	47c0      	blx	r8
 800994e:	4306      	orrs	r6, r0
 8009950:	3568      	adds	r5, #104	@ 0x68
 8009952:	e7e9      	b.n	8009928 <_fwalk_sglue+0x10>

08009954 <siprintf>:
 8009954:	b40e      	push	{r1, r2, r3}
 8009956:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800995a:	b500      	push	{lr}
 800995c:	b09c      	sub	sp, #112	@ 0x70
 800995e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009960:	9002      	str	r0, [sp, #8]
 8009962:	9006      	str	r0, [sp, #24]
 8009964:	9107      	str	r1, [sp, #28]
 8009966:	9104      	str	r1, [sp, #16]
 8009968:	4808      	ldr	r0, [pc, #32]	@ (800998c <siprintf+0x38>)
 800996a:	4909      	ldr	r1, [pc, #36]	@ (8009990 <siprintf+0x3c>)
 800996c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009970:	9105      	str	r1, [sp, #20]
 8009972:	6800      	ldr	r0, [r0, #0]
 8009974:	a902      	add	r1, sp, #8
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	f002 fbb0 	bl	800c0dc <_svfiprintf_r>
 800997c:	2200      	movs	r2, #0
 800997e:	9b02      	ldr	r3, [sp, #8]
 8009980:	701a      	strb	r2, [r3, #0]
 8009982:	b01c      	add	sp, #112	@ 0x70
 8009984:	f85d eb04 	ldr.w	lr, [sp], #4
 8009988:	b003      	add	sp, #12
 800998a:	4770      	bx	lr
 800998c:	20000064 	.word	0x20000064
 8009990:	ffff0208 	.word	0xffff0208

08009994 <__sread>:
 8009994:	b510      	push	{r4, lr}
 8009996:	460c      	mov	r4, r1
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	f000 f86c 	bl	8009a78 <_read_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	bfab      	itete	ge
 80099a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099a6:	89a3      	ldrhlt	r3, [r4, #12]
 80099a8:	181b      	addge	r3, r3, r0
 80099aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099ae:	bfac      	ite	ge
 80099b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099b2:	81a3      	strhlt	r3, [r4, #12]
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <__swrite>:
 80099b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ba:	461f      	mov	r7, r3
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	4605      	mov	r5, r0
 80099c0:	05db      	lsls	r3, r3, #23
 80099c2:	460c      	mov	r4, r1
 80099c4:	4616      	mov	r6, r2
 80099c6:	d505      	bpl.n	80099d4 <__swrite+0x1e>
 80099c8:	2302      	movs	r3, #2
 80099ca:	2200      	movs	r2, #0
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	f000 f840 	bl	8009a54 <_lseek_r>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	4632      	mov	r2, r6
 80099d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	4628      	mov	r0, r5
 80099e0:	463b      	mov	r3, r7
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ea:	f000 b857 	b.w	8009a9c <_write_r>

080099ee <__sseek>:
 80099ee:	b510      	push	{r4, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f6:	f000 f82d 	bl	8009a54 <_lseek_r>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	bf15      	itete	ne
 8009a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a0a:	81a3      	strheq	r3, [r4, #12]
 8009a0c:	bf18      	it	ne
 8009a0e:	81a3      	strhne	r3, [r4, #12]
 8009a10:	bd10      	pop	{r4, pc}

08009a12 <__sclose>:
 8009a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a16:	f000 b80d 	b.w	8009a34 <_close_r>

08009a1a <memset>:
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	4402      	add	r2, r0
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d100      	bne.n	8009a24 <memset+0xa>
 8009a22:	4770      	bx	lr
 8009a24:	f803 1b01 	strb.w	r1, [r3], #1
 8009a28:	e7f9      	b.n	8009a1e <memset+0x4>
	...

08009a2c <_localeconv_r>:
 8009a2c:	4800      	ldr	r0, [pc, #0]	@ (8009a30 <_localeconv_r+0x4>)
 8009a2e:	4770      	bx	lr
 8009a30:	200001a4 	.word	0x200001a4

08009a34 <_close_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	2300      	movs	r3, #0
 8009a38:	4d05      	ldr	r5, [pc, #20]	@ (8009a50 <_close_r+0x1c>)
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	602b      	str	r3, [r5, #0]
 8009a40:	f7fa fa2f 	bl	8003ea2 <_close>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d102      	bne.n	8009a4e <_close_r+0x1a>
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	b103      	cbz	r3, 8009a4e <_close_r+0x1a>
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	bd38      	pop	{r3, r4, r5, pc}
 8009a50:	200009b4 	.word	0x200009b4

08009a54 <_lseek_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4d05      	ldr	r5, [pc, #20]	@ (8009a74 <_lseek_r+0x20>)
 8009a60:	602a      	str	r2, [r5, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	f7fa fa41 	bl	8003eea <_lseek>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_lseek_r+0x1e>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_lseek_r+0x1e>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	200009b4 	.word	0x200009b4

08009a78 <_read_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	4611      	mov	r1, r2
 8009a80:	2200      	movs	r2, #0
 8009a82:	4d05      	ldr	r5, [pc, #20]	@ (8009a98 <_read_r+0x20>)
 8009a84:	602a      	str	r2, [r5, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7fa f9d2 	bl	8003e30 <_read>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_read_r+0x1e>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_read_r+0x1e>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	200009b4 	.word	0x200009b4

08009a9c <_write_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4d05      	ldr	r5, [pc, #20]	@ (8009abc <_write_r+0x20>)
 8009aa8:	602a      	str	r2, [r5, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f7fa f9dd 	bl	8003e6a <_write>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_write_r+0x1e>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_write_r+0x1e>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	200009b4 	.word	0x200009b4

08009ac0 <__errno>:
 8009ac0:	4b01      	ldr	r3, [pc, #4]	@ (8009ac8 <__errno+0x8>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	20000064 	.word	0x20000064

08009acc <__libc_init_array>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	2600      	movs	r6, #0
 8009ad0:	4d0c      	ldr	r5, [pc, #48]	@ (8009b04 <__libc_init_array+0x38>)
 8009ad2:	4c0d      	ldr	r4, [pc, #52]	@ (8009b08 <__libc_init_array+0x3c>)
 8009ad4:	1b64      	subs	r4, r4, r5
 8009ad6:	10a4      	asrs	r4, r4, #2
 8009ad8:	42a6      	cmp	r6, r4
 8009ada:	d109      	bne.n	8009af0 <__libc_init_array+0x24>
 8009adc:	f003 fb66 	bl	800d1ac <_init>
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	4d0a      	ldr	r5, [pc, #40]	@ (8009b0c <__libc_init_array+0x40>)
 8009ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8009b10 <__libc_init_array+0x44>)
 8009ae6:	1b64      	subs	r4, r4, r5
 8009ae8:	10a4      	asrs	r4, r4, #2
 8009aea:	42a6      	cmp	r6, r4
 8009aec:	d105      	bne.n	8009afa <__libc_init_array+0x2e>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af4:	4798      	blx	r3
 8009af6:	3601      	adds	r6, #1
 8009af8:	e7ee      	b.n	8009ad8 <__libc_init_array+0xc>
 8009afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afe:	4798      	blx	r3
 8009b00:	3601      	adds	r6, #1
 8009b02:	e7f2      	b.n	8009aea <__libc_init_array+0x1e>
 8009b04:	0800df28 	.word	0x0800df28
 8009b08:	0800df28 	.word	0x0800df28
 8009b0c:	0800df28 	.word	0x0800df28
 8009b10:	0800df2c 	.word	0x0800df2c

08009b14 <__retarget_lock_init_recursive>:
 8009b14:	4770      	bx	lr

08009b16 <__retarget_lock_acquire_recursive>:
 8009b16:	4770      	bx	lr

08009b18 <__retarget_lock_release_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <memchr>:
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	b2c9      	uxtb	r1, r1
 8009b20:	4402      	add	r2, r0
 8009b22:	4293      	cmp	r3, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	d101      	bne.n	8009b2c <memchr+0x12>
 8009b28:	2000      	movs	r0, #0
 8009b2a:	e003      	b.n	8009b34 <memchr+0x1a>
 8009b2c:	7804      	ldrb	r4, [r0, #0]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	428c      	cmp	r4, r1
 8009b32:	d1f6      	bne.n	8009b22 <memchr+0x8>
 8009b34:	bd10      	pop	{r4, pc}
	...

08009b38 <nanf>:
 8009b38:	4800      	ldr	r0, [pc, #0]	@ (8009b3c <nanf+0x4>)
 8009b3a:	4770      	bx	lr
 8009b3c:	7fc00000 	.word	0x7fc00000

08009b40 <quorem>:
 8009b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	6903      	ldr	r3, [r0, #16]
 8009b46:	690c      	ldr	r4, [r1, #16]
 8009b48:	4607      	mov	r7, r0
 8009b4a:	42a3      	cmp	r3, r4
 8009b4c:	db7e      	blt.n	8009c4c <quorem+0x10c>
 8009b4e:	3c01      	subs	r4, #1
 8009b50:	00a3      	lsls	r3, r4, #2
 8009b52:	f100 0514 	add.w	r5, r0, #20
 8009b56:	f101 0814 	add.w	r8, r1, #20
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b76:	d32e      	bcc.n	8009bd6 <quorem+0x96>
 8009b78:	f04f 0a00 	mov.w	sl, #0
 8009b7c:	46c4      	mov	ip, r8
 8009b7e:	46ae      	mov	lr, r5
 8009b80:	46d3      	mov	fp, sl
 8009b82:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b86:	b298      	uxth	r0, r3
 8009b88:	fb06 a000 	mla	r0, r6, r0, sl
 8009b8c:	0c1b      	lsrs	r3, r3, #16
 8009b8e:	0c02      	lsrs	r2, r0, #16
 8009b90:	fb06 2303 	mla	r3, r6, r3, r2
 8009b94:	f8de 2000 	ldr.w	r2, [lr]
 8009b98:	b280      	uxth	r0, r0
 8009b9a:	b292      	uxth	r2, r2
 8009b9c:	1a12      	subs	r2, r2, r0
 8009b9e:	445a      	add	r2, fp
 8009ba0:	f8de 0000 	ldr.w	r0, [lr]
 8009ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009bae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009bb2:	b292      	uxth	r2, r2
 8009bb4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009bb8:	45e1      	cmp	r9, ip
 8009bba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009bbe:	f84e 2b04 	str.w	r2, [lr], #4
 8009bc2:	d2de      	bcs.n	8009b82 <quorem+0x42>
 8009bc4:	9b00      	ldr	r3, [sp, #0]
 8009bc6:	58eb      	ldr	r3, [r5, r3]
 8009bc8:	b92b      	cbnz	r3, 8009bd6 <quorem+0x96>
 8009bca:	9b01      	ldr	r3, [sp, #4]
 8009bcc:	3b04      	subs	r3, #4
 8009bce:	429d      	cmp	r5, r3
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	d32f      	bcc.n	8009c34 <quorem+0xf4>
 8009bd4:	613c      	str	r4, [r7, #16]
 8009bd6:	4638      	mov	r0, r7
 8009bd8:	f001 f9c2 	bl	800af60 <__mcmp>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	db25      	blt.n	8009c2c <quorem+0xec>
 8009be0:	4629      	mov	r1, r5
 8009be2:	2000      	movs	r0, #0
 8009be4:	f858 2b04 	ldr.w	r2, [r8], #4
 8009be8:	f8d1 c000 	ldr.w	ip, [r1]
 8009bec:	fa1f fe82 	uxth.w	lr, r2
 8009bf0:	fa1f f38c 	uxth.w	r3, ip
 8009bf4:	eba3 030e 	sub.w	r3, r3, lr
 8009bf8:	4403      	add	r3, r0
 8009bfa:	0c12      	lsrs	r2, r2, #16
 8009bfc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009c00:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c0a:	45c1      	cmp	r9, r8
 8009c0c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c10:	f841 3b04 	str.w	r3, [r1], #4
 8009c14:	d2e6      	bcs.n	8009be4 <quorem+0xa4>
 8009c16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c1e:	b922      	cbnz	r2, 8009c2a <quorem+0xea>
 8009c20:	3b04      	subs	r3, #4
 8009c22:	429d      	cmp	r5, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	d30b      	bcc.n	8009c40 <quorem+0x100>
 8009c28:	613c      	str	r4, [r7, #16]
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	b003      	add	sp, #12
 8009c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c34:	6812      	ldr	r2, [r2, #0]
 8009c36:	3b04      	subs	r3, #4
 8009c38:	2a00      	cmp	r2, #0
 8009c3a:	d1cb      	bne.n	8009bd4 <quorem+0x94>
 8009c3c:	3c01      	subs	r4, #1
 8009c3e:	e7c6      	b.n	8009bce <quorem+0x8e>
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	3b04      	subs	r3, #4
 8009c44:	2a00      	cmp	r2, #0
 8009c46:	d1ef      	bne.n	8009c28 <quorem+0xe8>
 8009c48:	3c01      	subs	r4, #1
 8009c4a:	e7ea      	b.n	8009c22 <quorem+0xe2>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e7ee      	b.n	8009c2e <quorem+0xee>

08009c50 <_dtoa_r>:
 8009c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c54:	4614      	mov	r4, r2
 8009c56:	461d      	mov	r5, r3
 8009c58:	69c7      	ldr	r7, [r0, #28]
 8009c5a:	b097      	sub	sp, #92	@ 0x5c
 8009c5c:	4683      	mov	fp, r0
 8009c5e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c62:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009c64:	b97f      	cbnz	r7, 8009c86 <_dtoa_r+0x36>
 8009c66:	2010      	movs	r0, #16
 8009c68:	f000 fe02 	bl	800a870 <malloc>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009c72:	b920      	cbnz	r0, 8009c7e <_dtoa_r+0x2e>
 8009c74:	21ef      	movs	r1, #239	@ 0xef
 8009c76:	4ba8      	ldr	r3, [pc, #672]	@ (8009f18 <_dtoa_r+0x2c8>)
 8009c78:	48a8      	ldr	r0, [pc, #672]	@ (8009f1c <_dtoa_r+0x2cc>)
 8009c7a:	f002 fc23 	bl	800c4c4 <__assert_func>
 8009c7e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009c82:	6007      	str	r7, [r0, #0]
 8009c84:	60c7      	str	r7, [r0, #12]
 8009c86:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009c8a:	6819      	ldr	r1, [r3, #0]
 8009c8c:	b159      	cbz	r1, 8009ca6 <_dtoa_r+0x56>
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	2301      	movs	r3, #1
 8009c92:	4093      	lsls	r3, r2
 8009c94:	604a      	str	r2, [r1, #4]
 8009c96:	608b      	str	r3, [r1, #8]
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f000 fedf 	bl	800aa5c <_Bfree>
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	1e2b      	subs	r3, r5, #0
 8009ca8:	bfaf      	iteee	ge
 8009caa:	2300      	movge	r3, #0
 8009cac:	2201      	movlt	r2, #1
 8009cae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009cb2:	9303      	strlt	r3, [sp, #12]
 8009cb4:	bfa8      	it	ge
 8009cb6:	6033      	strge	r3, [r6, #0]
 8009cb8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009cbc:	4b98      	ldr	r3, [pc, #608]	@ (8009f20 <_dtoa_r+0x2d0>)
 8009cbe:	bfb8      	it	lt
 8009cc0:	6032      	strlt	r2, [r6, #0]
 8009cc2:	ea33 0308 	bics.w	r3, r3, r8
 8009cc6:	d112      	bne.n	8009cee <_dtoa_r+0x9e>
 8009cc8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009ccc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009cd4:	4323      	orrs	r3, r4
 8009cd6:	f000 8550 	beq.w	800a77a <_dtoa_r+0xb2a>
 8009cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009cdc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009f24 <_dtoa_r+0x2d4>
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 8552 	beq.w	800a78a <_dtoa_r+0xb3a>
 8009ce6:	f10a 0303 	add.w	r3, sl, #3
 8009cea:	f000 bd4c 	b.w	800a786 <_dtoa_r+0xb36>
 8009cee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cf2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	f7f6 febf 	bl	8000a80 <__aeabi_dcmpeq>
 8009d02:	4607      	mov	r7, r0
 8009d04:	b158      	cbz	r0, 8009d1e <_dtoa_r+0xce>
 8009d06:	2301      	movs	r3, #1
 8009d08:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009d0e:	b113      	cbz	r3, 8009d16 <_dtoa_r+0xc6>
 8009d10:	4b85      	ldr	r3, [pc, #532]	@ (8009f28 <_dtoa_r+0x2d8>)
 8009d12:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009d14:	6013      	str	r3, [r2, #0]
 8009d16:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009f2c <_dtoa_r+0x2dc>
 8009d1a:	f000 bd36 	b.w	800a78a <_dtoa_r+0xb3a>
 8009d1e:	ab14      	add	r3, sp, #80	@ 0x50
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	ab15      	add	r3, sp, #84	@ 0x54
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	4658      	mov	r0, fp
 8009d28:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d2c:	f001 fa30 	bl	800b190 <__d2b>
 8009d30:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009d34:	4681      	mov	r9, r0
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	d077      	beq.n	8009e2a <_dtoa_r+0x1da>
 8009d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d40:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009d44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d48:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009d4c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009d50:	9712      	str	r7, [sp, #72]	@ 0x48
 8009d52:	4619      	mov	r1, r3
 8009d54:	2200      	movs	r2, #0
 8009d56:	4b76      	ldr	r3, [pc, #472]	@ (8009f30 <_dtoa_r+0x2e0>)
 8009d58:	f7f6 fa72 	bl	8000240 <__aeabi_dsub>
 8009d5c:	a368      	add	r3, pc, #416	@ (adr r3, 8009f00 <_dtoa_r+0x2b0>)
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	f7f6 fc25 	bl	80005b0 <__aeabi_dmul>
 8009d66:	a368      	add	r3, pc, #416	@ (adr r3, 8009f08 <_dtoa_r+0x2b8>)
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7f6 fa6a 	bl	8000244 <__adddf3>
 8009d70:	4604      	mov	r4, r0
 8009d72:	4630      	mov	r0, r6
 8009d74:	460d      	mov	r5, r1
 8009d76:	f7f6 fbb1 	bl	80004dc <__aeabi_i2d>
 8009d7a:	a365      	add	r3, pc, #404	@ (adr r3, 8009f10 <_dtoa_r+0x2c0>)
 8009d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d80:	f7f6 fc16 	bl	80005b0 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	f7f6 fa5a 	bl	8000244 <__adddf3>
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	f7f6 febc 	bl	8000b10 <__aeabi_d2iz>
 8009d98:	2200      	movs	r2, #0
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fe77 	bl	8000a94 <__aeabi_dcmplt>
 8009da6:	b140      	cbz	r0, 8009dba <_dtoa_r+0x16a>
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7f6 fb97 	bl	80004dc <__aeabi_i2d>
 8009dae:	4622      	mov	r2, r4
 8009db0:	462b      	mov	r3, r5
 8009db2:	f7f6 fe65 	bl	8000a80 <__aeabi_dcmpeq>
 8009db6:	b900      	cbnz	r0, 8009dba <_dtoa_r+0x16a>
 8009db8:	3f01      	subs	r7, #1
 8009dba:	2f16      	cmp	r7, #22
 8009dbc:	d853      	bhi.n	8009e66 <_dtoa_r+0x216>
 8009dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8009f34 <_dtoa_r+0x2e4>)
 8009dc4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 fe62 	bl	8000a94 <__aeabi_dcmplt>
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d04a      	beq.n	8009e6a <_dtoa_r+0x21a>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	3f01      	subs	r7, #1
 8009dd8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ddc:	1b9b      	subs	r3, r3, r6
 8009dde:	1e5a      	subs	r2, r3, #1
 8009de0:	bf46      	itte	mi
 8009de2:	f1c3 0801 	rsbmi	r8, r3, #1
 8009de6:	2300      	movmi	r3, #0
 8009de8:	f04f 0800 	movpl.w	r8, #0
 8009dec:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dee:	bf48      	it	mi
 8009df0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009df2:	2f00      	cmp	r7, #0
 8009df4:	db3b      	blt.n	8009e6e <_dtoa_r+0x21e>
 8009df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df8:	970e      	str	r7, [sp, #56]	@ 0x38
 8009dfa:	443b      	add	r3, r7
 8009dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dfe:	2300      	movs	r3, #0
 8009e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e04:	2b09      	cmp	r3, #9
 8009e06:	d866      	bhi.n	8009ed6 <_dtoa_r+0x286>
 8009e08:	2b05      	cmp	r3, #5
 8009e0a:	bfc4      	itt	gt
 8009e0c:	3b04      	subgt	r3, #4
 8009e0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009e10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e12:	bfc8      	it	gt
 8009e14:	2400      	movgt	r4, #0
 8009e16:	f1a3 0302 	sub.w	r3, r3, #2
 8009e1a:	bfd8      	it	le
 8009e1c:	2401      	movle	r4, #1
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d864      	bhi.n	8009eec <_dtoa_r+0x29c>
 8009e22:	e8df f003 	tbb	[pc, r3]
 8009e26:	382b      	.short	0x382b
 8009e28:	5636      	.short	0x5636
 8009e2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009e2e:	441e      	add	r6, r3
 8009e30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	bfc1      	itttt	gt
 8009e38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009e3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009e40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009e44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009e48:	bfd6      	itet	le
 8009e4a:	f1c3 0320 	rsble	r3, r3, #32
 8009e4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009e52:	fa04 f003 	lslle.w	r0, r4, r3
 8009e56:	f7f6 fb31 	bl	80004bc <__aeabi_ui2d>
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009e60:	3e01      	subs	r6, #1
 8009e62:	9212      	str	r2, [sp, #72]	@ 0x48
 8009e64:	e775      	b.n	8009d52 <_dtoa_r+0x102>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e7b6      	b.n	8009dd8 <_dtoa_r+0x188>
 8009e6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009e6c:	e7b5      	b.n	8009dda <_dtoa_r+0x18a>
 8009e6e:	427b      	negs	r3, r7
 8009e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e72:	2300      	movs	r3, #0
 8009e74:	eba8 0807 	sub.w	r8, r8, r7
 8009e78:	930e      	str	r3, [sp, #56]	@ 0x38
 8009e7a:	e7c2      	b.n	8009e02 <_dtoa_r+0x1b2>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dc35      	bgt.n	8009ef2 <_dtoa_r+0x2a2>
 8009e86:	2301      	movs	r3, #1
 8009e88:	461a      	mov	r2, r3
 8009e8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009e8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8009e90:	e00b      	b.n	8009eaa <_dtoa_r+0x25a>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e7f3      	b.n	8009e7e <_dtoa_r+0x22e>
 8009e96:	2300      	movs	r3, #0
 8009e98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e9c:	18fb      	adds	r3, r7, r3
 8009e9e:	9308      	str	r3, [sp, #32]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	9307      	str	r3, [sp, #28]
 8009ea6:	bfb8      	it	lt
 8009ea8:	2301      	movlt	r3, #1
 8009eaa:	2100      	movs	r1, #0
 8009eac:	2204      	movs	r2, #4
 8009eae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009eb2:	f102 0514 	add.w	r5, r2, #20
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	d91f      	bls.n	8009efa <_dtoa_r+0x2aa>
 8009eba:	6041      	str	r1, [r0, #4]
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	f000 fd8d 	bl	800a9dc <_Balloc>
 8009ec2:	4682      	mov	sl, r0
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d139      	bne.n	8009f3c <_dtoa_r+0x2ec>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	f240 11af 	movw	r1, #431	@ 0x1af
 8009ece:	4b1a      	ldr	r3, [pc, #104]	@ (8009f38 <_dtoa_r+0x2e8>)
 8009ed0:	e6d2      	b.n	8009c78 <_dtoa_r+0x28>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	e7e0      	b.n	8009e98 <_dtoa_r+0x248>
 8009ed6:	2401      	movs	r4, #1
 8009ed8:	2300      	movs	r3, #0
 8009eda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009edc:	9320      	str	r3, [sp, #128]	@ 0x80
 8009ede:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ee8:	2312      	movs	r3, #18
 8009eea:	e7d0      	b.n	8009e8e <_dtoa_r+0x23e>
 8009eec:	2301      	movs	r3, #1
 8009eee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ef0:	e7f5      	b.n	8009ede <_dtoa_r+0x28e>
 8009ef2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ef4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ef8:	e7d7      	b.n	8009eaa <_dtoa_r+0x25a>
 8009efa:	3101      	adds	r1, #1
 8009efc:	0052      	lsls	r2, r2, #1
 8009efe:	e7d8      	b.n	8009eb2 <_dtoa_r+0x262>
 8009f00:	636f4361 	.word	0x636f4361
 8009f04:	3fd287a7 	.word	0x3fd287a7
 8009f08:	8b60c8b3 	.word	0x8b60c8b3
 8009f0c:	3fc68a28 	.word	0x3fc68a28
 8009f10:	509f79fb 	.word	0x509f79fb
 8009f14:	3fd34413 	.word	0x3fd34413
 8009f18:	0800db34 	.word	0x0800db34
 8009f1c:	0800db4b 	.word	0x0800db4b
 8009f20:	7ff00000 	.word	0x7ff00000
 8009f24:	0800db30 	.word	0x0800db30
 8009f28:	0800daff 	.word	0x0800daff
 8009f2c:	0800dafe 	.word	0x0800dafe
 8009f30:	3ff80000 	.word	0x3ff80000
 8009f34:	0800dc48 	.word	0x0800dc48
 8009f38:	0800dba3 	.word	0x0800dba3
 8009f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009f40:	6018      	str	r0, [r3, #0]
 8009f42:	9b07      	ldr	r3, [sp, #28]
 8009f44:	2b0e      	cmp	r3, #14
 8009f46:	f200 80a4 	bhi.w	800a092 <_dtoa_r+0x442>
 8009f4a:	2c00      	cmp	r4, #0
 8009f4c:	f000 80a1 	beq.w	800a092 <_dtoa_r+0x442>
 8009f50:	2f00      	cmp	r7, #0
 8009f52:	dd33      	ble.n	8009fbc <_dtoa_r+0x36c>
 8009f54:	4b86      	ldr	r3, [pc, #536]	@ (800a170 <_dtoa_r+0x520>)
 8009f56:	f007 020f 	and.w	r2, r7, #15
 8009f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f5e:	05f8      	lsls	r0, r7, #23
 8009f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009f68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009f6c:	d516      	bpl.n	8009f9c <_dtoa_r+0x34c>
 8009f6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f72:	4b80      	ldr	r3, [pc, #512]	@ (800a174 <_dtoa_r+0x524>)
 8009f74:	2603      	movs	r6, #3
 8009f76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f7a:	f7f6 fc43 	bl	8000804 <__aeabi_ddiv>
 8009f7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f82:	f004 040f 	and.w	r4, r4, #15
 8009f86:	4d7b      	ldr	r5, [pc, #492]	@ (800a174 <_dtoa_r+0x524>)
 8009f88:	b954      	cbnz	r4, 8009fa0 <_dtoa_r+0x350>
 8009f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f92:	f7f6 fc37 	bl	8000804 <__aeabi_ddiv>
 8009f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f9a:	e028      	b.n	8009fee <_dtoa_r+0x39e>
 8009f9c:	2602      	movs	r6, #2
 8009f9e:	e7f2      	b.n	8009f86 <_dtoa_r+0x336>
 8009fa0:	07e1      	lsls	r1, r4, #31
 8009fa2:	d508      	bpl.n	8009fb6 <_dtoa_r+0x366>
 8009fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009fac:	f7f6 fb00 	bl	80005b0 <__aeabi_dmul>
 8009fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fb4:	3601      	adds	r6, #1
 8009fb6:	1064      	asrs	r4, r4, #1
 8009fb8:	3508      	adds	r5, #8
 8009fba:	e7e5      	b.n	8009f88 <_dtoa_r+0x338>
 8009fbc:	f000 80d2 	beq.w	800a164 <_dtoa_r+0x514>
 8009fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fc4:	427c      	negs	r4, r7
 8009fc6:	4b6a      	ldr	r3, [pc, #424]	@ (800a170 <_dtoa_r+0x520>)
 8009fc8:	f004 020f 	and.w	r2, r4, #15
 8009fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 faec 	bl	80005b0 <__aeabi_dmul>
 8009fd8:	2602      	movs	r6, #2
 8009fda:	2300      	movs	r3, #0
 8009fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe0:	4d64      	ldr	r5, [pc, #400]	@ (800a174 <_dtoa_r+0x524>)
 8009fe2:	1124      	asrs	r4, r4, #4
 8009fe4:	2c00      	cmp	r4, #0
 8009fe6:	f040 80b2 	bne.w	800a14e <_dtoa_r+0x4fe>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1d3      	bne.n	8009f96 <_dtoa_r+0x346>
 8009fee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ff2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 80b7 	beq.w	800a168 <_dtoa_r+0x518>
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	4b5d      	ldr	r3, [pc, #372]	@ (800a178 <_dtoa_r+0x528>)
 800a002:	f7f6 fd47 	bl	8000a94 <__aeabi_dcmplt>
 800a006:	2800      	cmp	r0, #0
 800a008:	f000 80ae 	beq.w	800a168 <_dtoa_r+0x518>
 800a00c:	9b07      	ldr	r3, [sp, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 80aa 	beq.w	800a168 <_dtoa_r+0x518>
 800a014:	9b08      	ldr	r3, [sp, #32]
 800a016:	2b00      	cmp	r3, #0
 800a018:	dd37      	ble.n	800a08a <_dtoa_r+0x43a>
 800a01a:	1e7b      	subs	r3, r7, #1
 800a01c:	4620      	mov	r0, r4
 800a01e:	9304      	str	r3, [sp, #16]
 800a020:	2200      	movs	r2, #0
 800a022:	4629      	mov	r1, r5
 800a024:	4b55      	ldr	r3, [pc, #340]	@ (800a17c <_dtoa_r+0x52c>)
 800a026:	f7f6 fac3 	bl	80005b0 <__aeabi_dmul>
 800a02a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a02e:	9c08      	ldr	r4, [sp, #32]
 800a030:	3601      	adds	r6, #1
 800a032:	4630      	mov	r0, r6
 800a034:	f7f6 fa52 	bl	80004dc <__aeabi_i2d>
 800a038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a03c:	f7f6 fab8 	bl	80005b0 <__aeabi_dmul>
 800a040:	2200      	movs	r2, #0
 800a042:	4b4f      	ldr	r3, [pc, #316]	@ (800a180 <_dtoa_r+0x530>)
 800a044:	f7f6 f8fe 	bl	8000244 <__adddf3>
 800a048:	4605      	mov	r5, r0
 800a04a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a04e:	2c00      	cmp	r4, #0
 800a050:	f040 809a 	bne.w	800a188 <_dtoa_r+0x538>
 800a054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a058:	2200      	movs	r2, #0
 800a05a:	4b4a      	ldr	r3, [pc, #296]	@ (800a184 <_dtoa_r+0x534>)
 800a05c:	f7f6 f8f0 	bl	8000240 <__aeabi_dsub>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a068:	462a      	mov	r2, r5
 800a06a:	4633      	mov	r3, r6
 800a06c:	f7f6 fd30 	bl	8000ad0 <__aeabi_dcmpgt>
 800a070:	2800      	cmp	r0, #0
 800a072:	f040 828e 	bne.w	800a592 <_dtoa_r+0x942>
 800a076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07a:	462a      	mov	r2, r5
 800a07c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a080:	f7f6 fd08 	bl	8000a94 <__aeabi_dcmplt>
 800a084:	2800      	cmp	r0, #0
 800a086:	f040 8127 	bne.w	800a2d8 <_dtoa_r+0x688>
 800a08a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a08e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a092:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a094:	2b00      	cmp	r3, #0
 800a096:	f2c0 8163 	blt.w	800a360 <_dtoa_r+0x710>
 800a09a:	2f0e      	cmp	r7, #14
 800a09c:	f300 8160 	bgt.w	800a360 <_dtoa_r+0x710>
 800a0a0:	4b33      	ldr	r3, [pc, #204]	@ (800a170 <_dtoa_r+0x520>)
 800a0a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	da03      	bge.n	800a0bc <_dtoa_r+0x46c>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f340 8100 	ble.w	800a2bc <_dtoa_r+0x66c>
 800a0bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0c0:	4656      	mov	r6, sl
 800a0c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7f6 fb9b 	bl	8000804 <__aeabi_ddiv>
 800a0ce:	f7f6 fd1f 	bl	8000b10 <__aeabi_d2iz>
 800a0d2:	4680      	mov	r8, r0
 800a0d4:	f7f6 fa02 	bl	80004dc <__aeabi_i2d>
 800a0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0dc:	f7f6 fa68 	bl	80005b0 <__aeabi_dmul>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f8aa 	bl	8000240 <__aeabi_dsub>
 800a0ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a0f0:	9d07      	ldr	r5, [sp, #28]
 800a0f2:	f806 4b01 	strb.w	r4, [r6], #1
 800a0f6:	eba6 040a 	sub.w	r4, r6, sl
 800a0fa:	42a5      	cmp	r5, r4
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	f040 8116 	bne.w	800a330 <_dtoa_r+0x6e0>
 800a104:	f7f6 f89e 	bl	8000244 <__adddf3>
 800a108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a10c:	4604      	mov	r4, r0
 800a10e:	460d      	mov	r5, r1
 800a110:	f7f6 fcde 	bl	8000ad0 <__aeabi_dcmpgt>
 800a114:	2800      	cmp	r0, #0
 800a116:	f040 80f8 	bne.w	800a30a <_dtoa_r+0x6ba>
 800a11a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a11e:	4620      	mov	r0, r4
 800a120:	4629      	mov	r1, r5
 800a122:	f7f6 fcad 	bl	8000a80 <__aeabi_dcmpeq>
 800a126:	b118      	cbz	r0, 800a130 <_dtoa_r+0x4e0>
 800a128:	f018 0f01 	tst.w	r8, #1
 800a12c:	f040 80ed 	bne.w	800a30a <_dtoa_r+0x6ba>
 800a130:	4649      	mov	r1, r9
 800a132:	4658      	mov	r0, fp
 800a134:	f000 fc92 	bl	800aa5c <_Bfree>
 800a138:	2300      	movs	r3, #0
 800a13a:	7033      	strb	r3, [r6, #0]
 800a13c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a13e:	3701      	adds	r7, #1
 800a140:	601f      	str	r7, [r3, #0]
 800a142:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8320 	beq.w	800a78a <_dtoa_r+0xb3a>
 800a14a:	601e      	str	r6, [r3, #0]
 800a14c:	e31d      	b.n	800a78a <_dtoa_r+0xb3a>
 800a14e:	07e2      	lsls	r2, r4, #31
 800a150:	d505      	bpl.n	800a15e <_dtoa_r+0x50e>
 800a152:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a156:	f7f6 fa2b 	bl	80005b0 <__aeabi_dmul>
 800a15a:	2301      	movs	r3, #1
 800a15c:	3601      	adds	r6, #1
 800a15e:	1064      	asrs	r4, r4, #1
 800a160:	3508      	adds	r5, #8
 800a162:	e73f      	b.n	8009fe4 <_dtoa_r+0x394>
 800a164:	2602      	movs	r6, #2
 800a166:	e742      	b.n	8009fee <_dtoa_r+0x39e>
 800a168:	9c07      	ldr	r4, [sp, #28]
 800a16a:	9704      	str	r7, [sp, #16]
 800a16c:	e761      	b.n	800a032 <_dtoa_r+0x3e2>
 800a16e:	bf00      	nop
 800a170:	0800dc48 	.word	0x0800dc48
 800a174:	0800dc20 	.word	0x0800dc20
 800a178:	3ff00000 	.word	0x3ff00000
 800a17c:	40240000 	.word	0x40240000
 800a180:	401c0000 	.word	0x401c0000
 800a184:	40140000 	.word	0x40140000
 800a188:	4b70      	ldr	r3, [pc, #448]	@ (800a34c <_dtoa_r+0x6fc>)
 800a18a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a18c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a190:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a194:	4454      	add	r4, sl
 800a196:	2900      	cmp	r1, #0
 800a198:	d045      	beq.n	800a226 <_dtoa_r+0x5d6>
 800a19a:	2000      	movs	r0, #0
 800a19c:	496c      	ldr	r1, [pc, #432]	@ (800a350 <_dtoa_r+0x700>)
 800a19e:	f7f6 fb31 	bl	8000804 <__aeabi_ddiv>
 800a1a2:	4633      	mov	r3, r6
 800a1a4:	462a      	mov	r2, r5
 800a1a6:	f7f6 f84b 	bl	8000240 <__aeabi_dsub>
 800a1aa:	4656      	mov	r6, sl
 800a1ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a1b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b4:	f7f6 fcac 	bl	8000b10 <__aeabi_d2iz>
 800a1b8:	4605      	mov	r5, r0
 800a1ba:	f7f6 f98f 	bl	80004dc <__aeabi_i2d>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1c6:	f7f6 f83b 	bl	8000240 <__aeabi_dsub>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	3530      	adds	r5, #48	@ 0x30
 800a1d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1d8:	f806 5b01 	strb.w	r5, [r6], #1
 800a1dc:	f7f6 fc5a 	bl	8000a94 <__aeabi_dcmplt>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d163      	bne.n	800a2ac <_dtoa_r+0x65c>
 800a1e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	495a      	ldr	r1, [pc, #360]	@ (800a354 <_dtoa_r+0x704>)
 800a1ec:	f7f6 f828 	bl	8000240 <__aeabi_dsub>
 800a1f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1f4:	f7f6 fc4e 	bl	8000a94 <__aeabi_dcmplt>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	f040 8087 	bne.w	800a30c <_dtoa_r+0x6bc>
 800a1fe:	42a6      	cmp	r6, r4
 800a200:	f43f af43 	beq.w	800a08a <_dtoa_r+0x43a>
 800a204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a208:	2200      	movs	r2, #0
 800a20a:	4b53      	ldr	r3, [pc, #332]	@ (800a358 <_dtoa_r+0x708>)
 800a20c:	f7f6 f9d0 	bl	80005b0 <__aeabi_dmul>
 800a210:	2200      	movs	r2, #0
 800a212:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a21a:	4b4f      	ldr	r3, [pc, #316]	@ (800a358 <_dtoa_r+0x708>)
 800a21c:	f7f6 f9c8 	bl	80005b0 <__aeabi_dmul>
 800a220:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a224:	e7c4      	b.n	800a1b0 <_dtoa_r+0x560>
 800a226:	4631      	mov	r1, r6
 800a228:	4628      	mov	r0, r5
 800a22a:	f7f6 f9c1 	bl	80005b0 <__aeabi_dmul>
 800a22e:	4656      	mov	r6, sl
 800a230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a234:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a23a:	f7f6 fc69 	bl	8000b10 <__aeabi_d2iz>
 800a23e:	4605      	mov	r5, r0
 800a240:	f7f6 f94c 	bl	80004dc <__aeabi_i2d>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a24c:	f7f5 fff8 	bl	8000240 <__aeabi_dsub>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	3530      	adds	r5, #48	@ 0x30
 800a256:	f806 5b01 	strb.w	r5, [r6], #1
 800a25a:	42a6      	cmp	r6, r4
 800a25c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	d124      	bne.n	800a2b0 <_dtoa_r+0x660>
 800a266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a26a:	4b39      	ldr	r3, [pc, #228]	@ (800a350 <_dtoa_r+0x700>)
 800a26c:	f7f5 ffea 	bl	8000244 <__adddf3>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a278:	f7f6 fc2a 	bl	8000ad0 <__aeabi_dcmpgt>
 800a27c:	2800      	cmp	r0, #0
 800a27e:	d145      	bne.n	800a30c <_dtoa_r+0x6bc>
 800a280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a284:	2000      	movs	r0, #0
 800a286:	4932      	ldr	r1, [pc, #200]	@ (800a350 <_dtoa_r+0x700>)
 800a288:	f7f5 ffda 	bl	8000240 <__aeabi_dsub>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a294:	f7f6 fbfe 	bl	8000a94 <__aeabi_dcmplt>
 800a298:	2800      	cmp	r0, #0
 800a29a:	f43f aef6 	beq.w	800a08a <_dtoa_r+0x43a>
 800a29e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a2a0:	1e73      	subs	r3, r6, #1
 800a2a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a2a8:	2b30      	cmp	r3, #48	@ 0x30
 800a2aa:	d0f8      	beq.n	800a29e <_dtoa_r+0x64e>
 800a2ac:	9f04      	ldr	r7, [sp, #16]
 800a2ae:	e73f      	b.n	800a130 <_dtoa_r+0x4e0>
 800a2b0:	4b29      	ldr	r3, [pc, #164]	@ (800a358 <_dtoa_r+0x708>)
 800a2b2:	f7f6 f97d 	bl	80005b0 <__aeabi_dmul>
 800a2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2ba:	e7bc      	b.n	800a236 <_dtoa_r+0x5e6>
 800a2bc:	d10c      	bne.n	800a2d8 <_dtoa_r+0x688>
 800a2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4b25      	ldr	r3, [pc, #148]	@ (800a35c <_dtoa_r+0x70c>)
 800a2c6:	f7f6 f973 	bl	80005b0 <__aeabi_dmul>
 800a2ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2ce:	f7f6 fbf5 	bl	8000abc <__aeabi_dcmpge>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	f000 815b 	beq.w	800a58e <_dtoa_r+0x93e>
 800a2d8:	2400      	movs	r4, #0
 800a2da:	4625      	mov	r5, r4
 800a2dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2de:	4656      	mov	r6, sl
 800a2e0:	43db      	mvns	r3, r3
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	2700      	movs	r7, #0
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	4658      	mov	r0, fp
 800a2ea:	f000 fbb7 	bl	800aa5c <_Bfree>
 800a2ee:	2d00      	cmp	r5, #0
 800a2f0:	d0dc      	beq.n	800a2ac <_dtoa_r+0x65c>
 800a2f2:	b12f      	cbz	r7, 800a300 <_dtoa_r+0x6b0>
 800a2f4:	42af      	cmp	r7, r5
 800a2f6:	d003      	beq.n	800a300 <_dtoa_r+0x6b0>
 800a2f8:	4639      	mov	r1, r7
 800a2fa:	4658      	mov	r0, fp
 800a2fc:	f000 fbae 	bl	800aa5c <_Bfree>
 800a300:	4629      	mov	r1, r5
 800a302:	4658      	mov	r0, fp
 800a304:	f000 fbaa 	bl	800aa5c <_Bfree>
 800a308:	e7d0      	b.n	800a2ac <_dtoa_r+0x65c>
 800a30a:	9704      	str	r7, [sp, #16]
 800a30c:	4633      	mov	r3, r6
 800a30e:	461e      	mov	r6, r3
 800a310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a314:	2a39      	cmp	r2, #57	@ 0x39
 800a316:	d107      	bne.n	800a328 <_dtoa_r+0x6d8>
 800a318:	459a      	cmp	sl, r3
 800a31a:	d1f8      	bne.n	800a30e <_dtoa_r+0x6be>
 800a31c:	9a04      	ldr	r2, [sp, #16]
 800a31e:	3201      	adds	r2, #1
 800a320:	9204      	str	r2, [sp, #16]
 800a322:	2230      	movs	r2, #48	@ 0x30
 800a324:	f88a 2000 	strb.w	r2, [sl]
 800a328:	781a      	ldrb	r2, [r3, #0]
 800a32a:	3201      	adds	r2, #1
 800a32c:	701a      	strb	r2, [r3, #0]
 800a32e:	e7bd      	b.n	800a2ac <_dtoa_r+0x65c>
 800a330:	2200      	movs	r2, #0
 800a332:	4b09      	ldr	r3, [pc, #36]	@ (800a358 <_dtoa_r+0x708>)
 800a334:	f7f6 f93c 	bl	80005b0 <__aeabi_dmul>
 800a338:	2200      	movs	r2, #0
 800a33a:	2300      	movs	r3, #0
 800a33c:	4604      	mov	r4, r0
 800a33e:	460d      	mov	r5, r1
 800a340:	f7f6 fb9e 	bl	8000a80 <__aeabi_dcmpeq>
 800a344:	2800      	cmp	r0, #0
 800a346:	f43f aebc 	beq.w	800a0c2 <_dtoa_r+0x472>
 800a34a:	e6f1      	b.n	800a130 <_dtoa_r+0x4e0>
 800a34c:	0800dc48 	.word	0x0800dc48
 800a350:	3fe00000 	.word	0x3fe00000
 800a354:	3ff00000 	.word	0x3ff00000
 800a358:	40240000 	.word	0x40240000
 800a35c:	40140000 	.word	0x40140000
 800a360:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a362:	2a00      	cmp	r2, #0
 800a364:	f000 80db 	beq.w	800a51e <_dtoa_r+0x8ce>
 800a368:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a36a:	2a01      	cmp	r2, #1
 800a36c:	f300 80bf 	bgt.w	800a4ee <_dtoa_r+0x89e>
 800a370:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a372:	2a00      	cmp	r2, #0
 800a374:	f000 80b7 	beq.w	800a4e6 <_dtoa_r+0x896>
 800a378:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a37c:	4646      	mov	r6, r8
 800a37e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a382:	2101      	movs	r1, #1
 800a384:	441a      	add	r2, r3
 800a386:	4658      	mov	r0, fp
 800a388:	4498      	add	r8, r3
 800a38a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a38c:	f000 fc64 	bl	800ac58 <__i2b>
 800a390:	4605      	mov	r5, r0
 800a392:	b15e      	cbz	r6, 800a3ac <_dtoa_r+0x75c>
 800a394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	dd08      	ble.n	800a3ac <_dtoa_r+0x75c>
 800a39a:	42b3      	cmp	r3, r6
 800a39c:	bfa8      	it	ge
 800a39e:	4633      	movge	r3, r6
 800a3a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3a2:	eba8 0803 	sub.w	r8, r8, r3
 800a3a6:	1af6      	subs	r6, r6, r3
 800a3a8:	1ad3      	subs	r3, r2, r3
 800a3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ae:	b1f3      	cbz	r3, 800a3ee <_dtoa_r+0x79e>
 800a3b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80b7 	beq.w	800a526 <_dtoa_r+0x8d6>
 800a3b8:	b18c      	cbz	r4, 800a3de <_dtoa_r+0x78e>
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4622      	mov	r2, r4
 800a3be:	4658      	mov	r0, fp
 800a3c0:	f000 fd08 	bl	800add4 <__pow5mult>
 800a3c4:	464a      	mov	r2, r9
 800a3c6:	4601      	mov	r1, r0
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	4658      	mov	r0, fp
 800a3cc:	f000 fc5a 	bl	800ac84 <__multiply>
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	9004      	str	r0, [sp, #16]
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	f000 fb41 	bl	800aa5c <_Bfree>
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	4699      	mov	r9, r3
 800a3de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3e0:	1b1a      	subs	r2, r3, r4
 800a3e2:	d004      	beq.n	800a3ee <_dtoa_r+0x79e>
 800a3e4:	4649      	mov	r1, r9
 800a3e6:	4658      	mov	r0, fp
 800a3e8:	f000 fcf4 	bl	800add4 <__pow5mult>
 800a3ec:	4681      	mov	r9, r0
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	f000 fc31 	bl	800ac58 <__i2b>
 800a3f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 81c9 	beq.w	800a792 <_dtoa_r+0xb42>
 800a400:	461a      	mov	r2, r3
 800a402:	4601      	mov	r1, r0
 800a404:	4658      	mov	r0, fp
 800a406:	f000 fce5 	bl	800add4 <__pow5mult>
 800a40a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a40c:	4604      	mov	r4, r0
 800a40e:	2b01      	cmp	r3, #1
 800a410:	f300 808f 	bgt.w	800a532 <_dtoa_r+0x8e2>
 800a414:	9b02      	ldr	r3, [sp, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f040 8087 	bne.w	800a52a <_dtoa_r+0x8da>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 8083 	bne.w	800a52e <_dtoa_r+0x8de>
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a42e:	0d1b      	lsrs	r3, r3, #20
 800a430:	051b      	lsls	r3, r3, #20
 800a432:	b12b      	cbz	r3, 800a440 <_dtoa_r+0x7f0>
 800a434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a436:	f108 0801 	add.w	r8, r8, #1
 800a43a:	3301      	adds	r3, #1
 800a43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a43e:	2301      	movs	r3, #1
 800a440:	930a      	str	r3, [sp, #40]	@ 0x28
 800a442:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a444:	2b00      	cmp	r3, #0
 800a446:	f000 81aa 	beq.w	800a79e <_dtoa_r+0xb4e>
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a450:	6918      	ldr	r0, [r3, #16]
 800a452:	f000 fbb5 	bl	800abc0 <__hi0bits>
 800a456:	f1c0 0020 	rsb	r0, r0, #32
 800a45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a45c:	4418      	add	r0, r3
 800a45e:	f010 001f 	ands.w	r0, r0, #31
 800a462:	d071      	beq.n	800a548 <_dtoa_r+0x8f8>
 800a464:	f1c0 0320 	rsb	r3, r0, #32
 800a468:	2b04      	cmp	r3, #4
 800a46a:	dd65      	ble.n	800a538 <_dtoa_r+0x8e8>
 800a46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a46e:	f1c0 001c 	rsb	r0, r0, #28
 800a472:	4403      	add	r3, r0
 800a474:	4480      	add	r8, r0
 800a476:	4406      	add	r6, r0
 800a478:	9309      	str	r3, [sp, #36]	@ 0x24
 800a47a:	f1b8 0f00 	cmp.w	r8, #0
 800a47e:	dd05      	ble.n	800a48c <_dtoa_r+0x83c>
 800a480:	4649      	mov	r1, r9
 800a482:	4642      	mov	r2, r8
 800a484:	4658      	mov	r0, fp
 800a486:	f000 fcff 	bl	800ae88 <__lshift>
 800a48a:	4681      	mov	r9, r0
 800a48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd05      	ble.n	800a49e <_dtoa_r+0x84e>
 800a492:	4621      	mov	r1, r4
 800a494:	461a      	mov	r2, r3
 800a496:	4658      	mov	r0, fp
 800a498:	f000 fcf6 	bl	800ae88 <__lshift>
 800a49c:	4604      	mov	r4, r0
 800a49e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d053      	beq.n	800a54c <_dtoa_r+0x8fc>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4648      	mov	r0, r9
 800a4a8:	f000 fd5a 	bl	800af60 <__mcmp>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	da4d      	bge.n	800a54c <_dtoa_r+0x8fc>
 800a4b0:	1e7b      	subs	r3, r7, #1
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	220a      	movs	r2, #10
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 faf0 	bl	800aaa0 <__multadd>
 800a4c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4c2:	4681      	mov	r9, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 816c 	beq.w	800a7a2 <_dtoa_r+0xb52>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	4629      	mov	r1, r5
 800a4ce:	220a      	movs	r2, #10
 800a4d0:	4658      	mov	r0, fp
 800a4d2:	f000 fae5 	bl	800aaa0 <__multadd>
 800a4d6:	9b08      	ldr	r3, [sp, #32]
 800a4d8:	4605      	mov	r5, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	dc61      	bgt.n	800a5a2 <_dtoa_r+0x952>
 800a4de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	dc3b      	bgt.n	800a55c <_dtoa_r+0x90c>
 800a4e4:	e05d      	b.n	800a5a2 <_dtoa_r+0x952>
 800a4e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a4ec:	e746      	b.n	800a37c <_dtoa_r+0x72c>
 800a4ee:	9b07      	ldr	r3, [sp, #28]
 800a4f0:	1e5c      	subs	r4, r3, #1
 800a4f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f4:	42a3      	cmp	r3, r4
 800a4f6:	bfbf      	itttt	lt
 800a4f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a4fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a4fc:	1ae3      	sublt	r3, r4, r3
 800a4fe:	18d2      	addlt	r2, r2, r3
 800a500:	bfa8      	it	ge
 800a502:	1b1c      	subge	r4, r3, r4
 800a504:	9b07      	ldr	r3, [sp, #28]
 800a506:	bfbe      	ittt	lt
 800a508:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a50a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a50c:	2400      	movlt	r4, #0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfb5      	itete	lt
 800a512:	eba8 0603 	sublt.w	r6, r8, r3
 800a516:	4646      	movge	r6, r8
 800a518:	2300      	movlt	r3, #0
 800a51a:	9b07      	ldrge	r3, [sp, #28]
 800a51c:	e730      	b.n	800a380 <_dtoa_r+0x730>
 800a51e:	4646      	mov	r6, r8
 800a520:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a522:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a524:	e735      	b.n	800a392 <_dtoa_r+0x742>
 800a526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a528:	e75c      	b.n	800a3e4 <_dtoa_r+0x794>
 800a52a:	2300      	movs	r3, #0
 800a52c:	e788      	b.n	800a440 <_dtoa_r+0x7f0>
 800a52e:	9b02      	ldr	r3, [sp, #8]
 800a530:	e786      	b.n	800a440 <_dtoa_r+0x7f0>
 800a532:	2300      	movs	r3, #0
 800a534:	930a      	str	r3, [sp, #40]	@ 0x28
 800a536:	e788      	b.n	800a44a <_dtoa_r+0x7fa>
 800a538:	d09f      	beq.n	800a47a <_dtoa_r+0x82a>
 800a53a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53c:	331c      	adds	r3, #28
 800a53e:	441a      	add	r2, r3
 800a540:	4498      	add	r8, r3
 800a542:	441e      	add	r6, r3
 800a544:	9209      	str	r2, [sp, #36]	@ 0x24
 800a546:	e798      	b.n	800a47a <_dtoa_r+0x82a>
 800a548:	4603      	mov	r3, r0
 800a54a:	e7f6      	b.n	800a53a <_dtoa_r+0x8ea>
 800a54c:	9b07      	ldr	r3, [sp, #28]
 800a54e:	9704      	str	r7, [sp, #16]
 800a550:	2b00      	cmp	r3, #0
 800a552:	dc20      	bgt.n	800a596 <_dtoa_r+0x946>
 800a554:	9308      	str	r3, [sp, #32]
 800a556:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a558:	2b02      	cmp	r3, #2
 800a55a:	dd1e      	ble.n	800a59a <_dtoa_r+0x94a>
 800a55c:	9b08      	ldr	r3, [sp, #32]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f47f aebc 	bne.w	800a2dc <_dtoa_r+0x68c>
 800a564:	4621      	mov	r1, r4
 800a566:	2205      	movs	r2, #5
 800a568:	4658      	mov	r0, fp
 800a56a:	f000 fa99 	bl	800aaa0 <__multadd>
 800a56e:	4601      	mov	r1, r0
 800a570:	4604      	mov	r4, r0
 800a572:	4648      	mov	r0, r9
 800a574:	f000 fcf4 	bl	800af60 <__mcmp>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f77f aeaf 	ble.w	800a2dc <_dtoa_r+0x68c>
 800a57e:	2331      	movs	r3, #49	@ 0x31
 800a580:	4656      	mov	r6, sl
 800a582:	f806 3b01 	strb.w	r3, [r6], #1
 800a586:	9b04      	ldr	r3, [sp, #16]
 800a588:	3301      	adds	r3, #1
 800a58a:	9304      	str	r3, [sp, #16]
 800a58c:	e6aa      	b.n	800a2e4 <_dtoa_r+0x694>
 800a58e:	9c07      	ldr	r4, [sp, #28]
 800a590:	9704      	str	r7, [sp, #16]
 800a592:	4625      	mov	r5, r4
 800a594:	e7f3      	b.n	800a57e <_dtoa_r+0x92e>
 800a596:	9b07      	ldr	r3, [sp, #28]
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 8104 	beq.w	800a7aa <_dtoa_r+0xb5a>
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	dd05      	ble.n	800a5b2 <_dtoa_r+0x962>
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	4658      	mov	r0, fp
 800a5ac:	f000 fc6c 	bl	800ae88 <__lshift>
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d05a      	beq.n	800a66e <_dtoa_r+0xa1e>
 800a5b8:	4658      	mov	r0, fp
 800a5ba:	6869      	ldr	r1, [r5, #4]
 800a5bc:	f000 fa0e 	bl	800a9dc <_Balloc>
 800a5c0:	4606      	mov	r6, r0
 800a5c2:	b928      	cbnz	r0, 800a5d0 <_dtoa_r+0x980>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a5ca:	4b83      	ldr	r3, [pc, #524]	@ (800a7d8 <_dtoa_r+0xb88>)
 800a5cc:	f7ff bb54 	b.w	8009c78 <_dtoa_r+0x28>
 800a5d0:	692a      	ldr	r2, [r5, #16]
 800a5d2:	f105 010c 	add.w	r1, r5, #12
 800a5d6:	3202      	adds	r2, #2
 800a5d8:	0092      	lsls	r2, r2, #2
 800a5da:	300c      	adds	r0, #12
 800a5dc:	f001 ff5e 	bl	800c49c <memcpy>
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4658      	mov	r0, fp
 800a5e6:	f000 fc4f 	bl	800ae88 <__lshift>
 800a5ea:	462f      	mov	r7, r5
 800a5ec:	4605      	mov	r5, r0
 800a5ee:	f10a 0301 	add.w	r3, sl, #1
 800a5f2:	9307      	str	r3, [sp, #28]
 800a5f4:	9b08      	ldr	r3, [sp, #32]
 800a5f6:	4453      	add	r3, sl
 800a5f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5fa:	9b02      	ldr	r3, [sp, #8]
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	930a      	str	r3, [sp, #40]	@ 0x28
 800a602:	9b07      	ldr	r3, [sp, #28]
 800a604:	4621      	mov	r1, r4
 800a606:	3b01      	subs	r3, #1
 800a608:	4648      	mov	r0, r9
 800a60a:	9302      	str	r3, [sp, #8]
 800a60c:	f7ff fa98 	bl	8009b40 <quorem>
 800a610:	4639      	mov	r1, r7
 800a612:	9008      	str	r0, [sp, #32]
 800a614:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a618:	4648      	mov	r0, r9
 800a61a:	f000 fca1 	bl	800af60 <__mcmp>
 800a61e:	462a      	mov	r2, r5
 800a620:	9009      	str	r0, [sp, #36]	@ 0x24
 800a622:	4621      	mov	r1, r4
 800a624:	4658      	mov	r0, fp
 800a626:	f000 fcb7 	bl	800af98 <__mdiff>
 800a62a:	68c2      	ldr	r2, [r0, #12]
 800a62c:	4606      	mov	r6, r0
 800a62e:	bb02      	cbnz	r2, 800a672 <_dtoa_r+0xa22>
 800a630:	4601      	mov	r1, r0
 800a632:	4648      	mov	r0, r9
 800a634:	f000 fc94 	bl	800af60 <__mcmp>
 800a638:	4602      	mov	r2, r0
 800a63a:	4631      	mov	r1, r6
 800a63c:	4658      	mov	r0, fp
 800a63e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a640:	f000 fa0c 	bl	800aa5c <_Bfree>
 800a644:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a646:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a648:	9e07      	ldr	r6, [sp, #28]
 800a64a:	ea43 0102 	orr.w	r1, r3, r2
 800a64e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a650:	4319      	orrs	r1, r3
 800a652:	d110      	bne.n	800a676 <_dtoa_r+0xa26>
 800a654:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a658:	d029      	beq.n	800a6ae <_dtoa_r+0xa5e>
 800a65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd02      	ble.n	800a666 <_dtoa_r+0xa16>
 800a660:	9b08      	ldr	r3, [sp, #32]
 800a662:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a666:	9b02      	ldr	r3, [sp, #8]
 800a668:	f883 8000 	strb.w	r8, [r3]
 800a66c:	e63b      	b.n	800a2e6 <_dtoa_r+0x696>
 800a66e:	4628      	mov	r0, r5
 800a670:	e7bb      	b.n	800a5ea <_dtoa_r+0x99a>
 800a672:	2201      	movs	r2, #1
 800a674:	e7e1      	b.n	800a63a <_dtoa_r+0x9ea>
 800a676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	db04      	blt.n	800a686 <_dtoa_r+0xa36>
 800a67c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a67e:	430b      	orrs	r3, r1
 800a680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a682:	430b      	orrs	r3, r1
 800a684:	d120      	bne.n	800a6c8 <_dtoa_r+0xa78>
 800a686:	2a00      	cmp	r2, #0
 800a688:	dded      	ble.n	800a666 <_dtoa_r+0xa16>
 800a68a:	4649      	mov	r1, r9
 800a68c:	2201      	movs	r2, #1
 800a68e:	4658      	mov	r0, fp
 800a690:	f000 fbfa 	bl	800ae88 <__lshift>
 800a694:	4621      	mov	r1, r4
 800a696:	4681      	mov	r9, r0
 800a698:	f000 fc62 	bl	800af60 <__mcmp>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	dc03      	bgt.n	800a6a8 <_dtoa_r+0xa58>
 800a6a0:	d1e1      	bne.n	800a666 <_dtoa_r+0xa16>
 800a6a2:	f018 0f01 	tst.w	r8, #1
 800a6a6:	d0de      	beq.n	800a666 <_dtoa_r+0xa16>
 800a6a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6ac:	d1d8      	bne.n	800a660 <_dtoa_r+0xa10>
 800a6ae:	2339      	movs	r3, #57	@ 0x39
 800a6b0:	9a02      	ldr	r2, [sp, #8]
 800a6b2:	7013      	strb	r3, [r2, #0]
 800a6b4:	4633      	mov	r3, r6
 800a6b6:	461e      	mov	r6, r3
 800a6b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	2a39      	cmp	r2, #57	@ 0x39
 800a6c0:	d052      	beq.n	800a768 <_dtoa_r+0xb18>
 800a6c2:	3201      	adds	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
 800a6c6:	e60e      	b.n	800a2e6 <_dtoa_r+0x696>
 800a6c8:	2a00      	cmp	r2, #0
 800a6ca:	dd07      	ble.n	800a6dc <_dtoa_r+0xa8c>
 800a6cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a6d0:	d0ed      	beq.n	800a6ae <_dtoa_r+0xa5e>
 800a6d2:	9a02      	ldr	r2, [sp, #8]
 800a6d4:	f108 0301 	add.w	r3, r8, #1
 800a6d8:	7013      	strb	r3, [r2, #0]
 800a6da:	e604      	b.n	800a2e6 <_dtoa_r+0x696>
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	9a07      	ldr	r2, [sp, #28]
 800a6e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a6e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d028      	beq.n	800a73c <_dtoa_r+0xaec>
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	220a      	movs	r2, #10
 800a6f0:	4658      	mov	r0, fp
 800a6f2:	f000 f9d5 	bl	800aaa0 <__multadd>
 800a6f6:	42af      	cmp	r7, r5
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	f04f 0300 	mov.w	r3, #0
 800a6fe:	f04f 020a 	mov.w	r2, #10
 800a702:	4639      	mov	r1, r7
 800a704:	4658      	mov	r0, fp
 800a706:	d107      	bne.n	800a718 <_dtoa_r+0xac8>
 800a708:	f000 f9ca 	bl	800aaa0 <__multadd>
 800a70c:	4607      	mov	r7, r0
 800a70e:	4605      	mov	r5, r0
 800a710:	9b07      	ldr	r3, [sp, #28]
 800a712:	3301      	adds	r3, #1
 800a714:	9307      	str	r3, [sp, #28]
 800a716:	e774      	b.n	800a602 <_dtoa_r+0x9b2>
 800a718:	f000 f9c2 	bl	800aaa0 <__multadd>
 800a71c:	4629      	mov	r1, r5
 800a71e:	4607      	mov	r7, r0
 800a720:	2300      	movs	r3, #0
 800a722:	220a      	movs	r2, #10
 800a724:	4658      	mov	r0, fp
 800a726:	f000 f9bb 	bl	800aaa0 <__multadd>
 800a72a:	4605      	mov	r5, r0
 800a72c:	e7f0      	b.n	800a710 <_dtoa_r+0xac0>
 800a72e:	9b08      	ldr	r3, [sp, #32]
 800a730:	2700      	movs	r7, #0
 800a732:	2b00      	cmp	r3, #0
 800a734:	bfcc      	ite	gt
 800a736:	461e      	movgt	r6, r3
 800a738:	2601      	movle	r6, #1
 800a73a:	4456      	add	r6, sl
 800a73c:	4649      	mov	r1, r9
 800a73e:	2201      	movs	r2, #1
 800a740:	4658      	mov	r0, fp
 800a742:	f000 fba1 	bl	800ae88 <__lshift>
 800a746:	4621      	mov	r1, r4
 800a748:	4681      	mov	r9, r0
 800a74a:	f000 fc09 	bl	800af60 <__mcmp>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dcb0      	bgt.n	800a6b4 <_dtoa_r+0xa64>
 800a752:	d102      	bne.n	800a75a <_dtoa_r+0xb0a>
 800a754:	f018 0f01 	tst.w	r8, #1
 800a758:	d1ac      	bne.n	800a6b4 <_dtoa_r+0xa64>
 800a75a:	4633      	mov	r3, r6
 800a75c:	461e      	mov	r6, r3
 800a75e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a762:	2a30      	cmp	r2, #48	@ 0x30
 800a764:	d0fa      	beq.n	800a75c <_dtoa_r+0xb0c>
 800a766:	e5be      	b.n	800a2e6 <_dtoa_r+0x696>
 800a768:	459a      	cmp	sl, r3
 800a76a:	d1a4      	bne.n	800a6b6 <_dtoa_r+0xa66>
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	3301      	adds	r3, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	2331      	movs	r3, #49	@ 0x31
 800a774:	f88a 3000 	strb.w	r3, [sl]
 800a778:	e5b5      	b.n	800a2e6 <_dtoa_r+0x696>
 800a77a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a77c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a7dc <_dtoa_r+0xb8c>
 800a780:	b11b      	cbz	r3, 800a78a <_dtoa_r+0xb3a>
 800a782:	f10a 0308 	add.w	r3, sl, #8
 800a786:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	4650      	mov	r0, sl
 800a78c:	b017      	add	sp, #92	@ 0x5c
 800a78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a794:	2b01      	cmp	r3, #1
 800a796:	f77f ae3d 	ble.w	800a414 <_dtoa_r+0x7c4>
 800a79a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a79c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a79e:	2001      	movs	r0, #1
 800a7a0:	e65b      	b.n	800a45a <_dtoa_r+0x80a>
 800a7a2:	9b08      	ldr	r3, [sp, #32]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f77f aed6 	ble.w	800a556 <_dtoa_r+0x906>
 800a7aa:	4656      	mov	r6, sl
 800a7ac:	4621      	mov	r1, r4
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	f7ff f9c6 	bl	8009b40 <quorem>
 800a7b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a7b8:	9b08      	ldr	r3, [sp, #32]
 800a7ba:	f806 8b01 	strb.w	r8, [r6], #1
 800a7be:	eba6 020a 	sub.w	r2, r6, sl
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	ddb3      	ble.n	800a72e <_dtoa_r+0xade>
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	220a      	movs	r2, #10
 800a7cc:	4658      	mov	r0, fp
 800a7ce:	f000 f967 	bl	800aaa0 <__multadd>
 800a7d2:	4681      	mov	r9, r0
 800a7d4:	e7ea      	b.n	800a7ac <_dtoa_r+0xb5c>
 800a7d6:	bf00      	nop
 800a7d8:	0800dba3 	.word	0x0800dba3
 800a7dc:	0800db27 	.word	0x0800db27

0800a7e0 <_free_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	d040      	beq.n	800a86a <_free_r+0x8a>
 800a7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ec:	1f0c      	subs	r4, r1, #4
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	bfb8      	it	lt
 800a7f2:	18e4      	addlt	r4, r4, r3
 800a7f4:	f000 f8e6 	bl	800a9c4 <__malloc_lock>
 800a7f8:	4a1c      	ldr	r2, [pc, #112]	@ (800a86c <_free_r+0x8c>)
 800a7fa:	6813      	ldr	r3, [r2, #0]
 800a7fc:	b933      	cbnz	r3, 800a80c <_free_r+0x2c>
 800a7fe:	6063      	str	r3, [r4, #4]
 800a800:	6014      	str	r4, [r2, #0]
 800a802:	4628      	mov	r0, r5
 800a804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a808:	f000 b8e2 	b.w	800a9d0 <__malloc_unlock>
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	d908      	bls.n	800a822 <_free_r+0x42>
 800a810:	6820      	ldr	r0, [r4, #0]
 800a812:	1821      	adds	r1, r4, r0
 800a814:	428b      	cmp	r3, r1
 800a816:	bf01      	itttt	eq
 800a818:	6819      	ldreq	r1, [r3, #0]
 800a81a:	685b      	ldreq	r3, [r3, #4]
 800a81c:	1809      	addeq	r1, r1, r0
 800a81e:	6021      	streq	r1, [r4, #0]
 800a820:	e7ed      	b.n	800a7fe <_free_r+0x1e>
 800a822:	461a      	mov	r2, r3
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	b10b      	cbz	r3, 800a82c <_free_r+0x4c>
 800a828:	42a3      	cmp	r3, r4
 800a82a:	d9fa      	bls.n	800a822 <_free_r+0x42>
 800a82c:	6811      	ldr	r1, [r2, #0]
 800a82e:	1850      	adds	r0, r2, r1
 800a830:	42a0      	cmp	r0, r4
 800a832:	d10b      	bne.n	800a84c <_free_r+0x6c>
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	4401      	add	r1, r0
 800a838:	1850      	adds	r0, r2, r1
 800a83a:	4283      	cmp	r3, r0
 800a83c:	6011      	str	r1, [r2, #0]
 800a83e:	d1e0      	bne.n	800a802 <_free_r+0x22>
 800a840:	6818      	ldr	r0, [r3, #0]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	4408      	add	r0, r1
 800a846:	6010      	str	r0, [r2, #0]
 800a848:	6053      	str	r3, [r2, #4]
 800a84a:	e7da      	b.n	800a802 <_free_r+0x22>
 800a84c:	d902      	bls.n	800a854 <_free_r+0x74>
 800a84e:	230c      	movs	r3, #12
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	e7d6      	b.n	800a802 <_free_r+0x22>
 800a854:	6820      	ldr	r0, [r4, #0]
 800a856:	1821      	adds	r1, r4, r0
 800a858:	428b      	cmp	r3, r1
 800a85a:	bf01      	itttt	eq
 800a85c:	6819      	ldreq	r1, [r3, #0]
 800a85e:	685b      	ldreq	r3, [r3, #4]
 800a860:	1809      	addeq	r1, r1, r0
 800a862:	6021      	streq	r1, [r4, #0]
 800a864:	6063      	str	r3, [r4, #4]
 800a866:	6054      	str	r4, [r2, #4]
 800a868:	e7cb      	b.n	800a802 <_free_r+0x22>
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
 800a86c:	200009c0 	.word	0x200009c0

0800a870 <malloc>:
 800a870:	4b02      	ldr	r3, [pc, #8]	@ (800a87c <malloc+0xc>)
 800a872:	4601      	mov	r1, r0
 800a874:	6818      	ldr	r0, [r3, #0]
 800a876:	f000 b825 	b.w	800a8c4 <_malloc_r>
 800a87a:	bf00      	nop
 800a87c:	20000064 	.word	0x20000064

0800a880 <sbrk_aligned>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	4e0f      	ldr	r6, [pc, #60]	@ (800a8c0 <sbrk_aligned+0x40>)
 800a884:	460c      	mov	r4, r1
 800a886:	6831      	ldr	r1, [r6, #0]
 800a888:	4605      	mov	r5, r0
 800a88a:	b911      	cbnz	r1, 800a892 <sbrk_aligned+0x12>
 800a88c:	f001 fdf6 	bl	800c47c <_sbrk_r>
 800a890:	6030      	str	r0, [r6, #0]
 800a892:	4621      	mov	r1, r4
 800a894:	4628      	mov	r0, r5
 800a896:	f001 fdf1 	bl	800c47c <_sbrk_r>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d103      	bne.n	800a8a6 <sbrk_aligned+0x26>
 800a89e:	f04f 34ff 	mov.w	r4, #4294967295
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	bd70      	pop	{r4, r5, r6, pc}
 800a8a6:	1cc4      	adds	r4, r0, #3
 800a8a8:	f024 0403 	bic.w	r4, r4, #3
 800a8ac:	42a0      	cmp	r0, r4
 800a8ae:	d0f8      	beq.n	800a8a2 <sbrk_aligned+0x22>
 800a8b0:	1a21      	subs	r1, r4, r0
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f001 fde2 	bl	800c47c <_sbrk_r>
 800a8b8:	3001      	adds	r0, #1
 800a8ba:	d1f2      	bne.n	800a8a2 <sbrk_aligned+0x22>
 800a8bc:	e7ef      	b.n	800a89e <sbrk_aligned+0x1e>
 800a8be:	bf00      	nop
 800a8c0:	200009bc 	.word	0x200009bc

0800a8c4 <_malloc_r>:
 800a8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c8:	1ccd      	adds	r5, r1, #3
 800a8ca:	f025 0503 	bic.w	r5, r5, #3
 800a8ce:	3508      	adds	r5, #8
 800a8d0:	2d0c      	cmp	r5, #12
 800a8d2:	bf38      	it	cc
 800a8d4:	250c      	movcc	r5, #12
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	4606      	mov	r6, r0
 800a8da:	db01      	blt.n	800a8e0 <_malloc_r+0x1c>
 800a8dc:	42a9      	cmp	r1, r5
 800a8de:	d904      	bls.n	800a8ea <_malloc_r+0x26>
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	6033      	str	r3, [r6, #0]
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9c0 <_malloc_r+0xfc>
 800a8ee:	f000 f869 	bl	800a9c4 <__malloc_lock>
 800a8f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	bb44      	cbnz	r4, 800a94c <_malloc_r+0x88>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff ffbf 	bl	800a880 <sbrk_aligned>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	4604      	mov	r4, r0
 800a906:	d158      	bne.n	800a9ba <_malloc_r+0xf6>
 800a908:	f8d8 4000 	ldr.w	r4, [r8]
 800a90c:	4627      	mov	r7, r4
 800a90e:	2f00      	cmp	r7, #0
 800a910:	d143      	bne.n	800a99a <_malloc_r+0xd6>
 800a912:	2c00      	cmp	r4, #0
 800a914:	d04b      	beq.n	800a9ae <_malloc_r+0xea>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	4639      	mov	r1, r7
 800a91a:	4630      	mov	r0, r6
 800a91c:	eb04 0903 	add.w	r9, r4, r3
 800a920:	f001 fdac 	bl	800c47c <_sbrk_r>
 800a924:	4581      	cmp	r9, r0
 800a926:	d142      	bne.n	800a9ae <_malloc_r+0xea>
 800a928:	6821      	ldr	r1, [r4, #0]
 800a92a:	4630      	mov	r0, r6
 800a92c:	1a6d      	subs	r5, r5, r1
 800a92e:	4629      	mov	r1, r5
 800a930:	f7ff ffa6 	bl	800a880 <sbrk_aligned>
 800a934:	3001      	adds	r0, #1
 800a936:	d03a      	beq.n	800a9ae <_malloc_r+0xea>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	442b      	add	r3, r5
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	f8d8 3000 	ldr.w	r3, [r8]
 800a942:	685a      	ldr	r2, [r3, #4]
 800a944:	bb62      	cbnz	r2, 800a9a0 <_malloc_r+0xdc>
 800a946:	f8c8 7000 	str.w	r7, [r8]
 800a94a:	e00f      	b.n	800a96c <_malloc_r+0xa8>
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	1b52      	subs	r2, r2, r5
 800a950:	d420      	bmi.n	800a994 <_malloc_r+0xd0>
 800a952:	2a0b      	cmp	r2, #11
 800a954:	d917      	bls.n	800a986 <_malloc_r+0xc2>
 800a956:	1961      	adds	r1, r4, r5
 800a958:	42a3      	cmp	r3, r4
 800a95a:	6025      	str	r5, [r4, #0]
 800a95c:	bf18      	it	ne
 800a95e:	6059      	strne	r1, [r3, #4]
 800a960:	6863      	ldr	r3, [r4, #4]
 800a962:	bf08      	it	eq
 800a964:	f8c8 1000 	streq.w	r1, [r8]
 800a968:	5162      	str	r2, [r4, r5]
 800a96a:	604b      	str	r3, [r1, #4]
 800a96c:	4630      	mov	r0, r6
 800a96e:	f000 f82f 	bl	800a9d0 <__malloc_unlock>
 800a972:	f104 000b 	add.w	r0, r4, #11
 800a976:	1d23      	adds	r3, r4, #4
 800a978:	f020 0007 	bic.w	r0, r0, #7
 800a97c:	1ac2      	subs	r2, r0, r3
 800a97e:	bf1c      	itt	ne
 800a980:	1a1b      	subne	r3, r3, r0
 800a982:	50a3      	strne	r3, [r4, r2]
 800a984:	e7af      	b.n	800a8e6 <_malloc_r+0x22>
 800a986:	6862      	ldr	r2, [r4, #4]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	bf0c      	ite	eq
 800a98c:	f8c8 2000 	streq.w	r2, [r8]
 800a990:	605a      	strne	r2, [r3, #4]
 800a992:	e7eb      	b.n	800a96c <_malloc_r+0xa8>
 800a994:	4623      	mov	r3, r4
 800a996:	6864      	ldr	r4, [r4, #4]
 800a998:	e7ae      	b.n	800a8f8 <_malloc_r+0x34>
 800a99a:	463c      	mov	r4, r7
 800a99c:	687f      	ldr	r7, [r7, #4]
 800a99e:	e7b6      	b.n	800a90e <_malloc_r+0x4a>
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d1fb      	bne.n	800a9a0 <_malloc_r+0xdc>
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6053      	str	r3, [r2, #4]
 800a9ac:	e7de      	b.n	800a96c <_malloc_r+0xa8>
 800a9ae:	230c      	movs	r3, #12
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	6033      	str	r3, [r6, #0]
 800a9b4:	f000 f80c 	bl	800a9d0 <__malloc_unlock>
 800a9b8:	e794      	b.n	800a8e4 <_malloc_r+0x20>
 800a9ba:	6005      	str	r5, [r0, #0]
 800a9bc:	e7d6      	b.n	800a96c <_malloc_r+0xa8>
 800a9be:	bf00      	nop
 800a9c0:	200009c0 	.word	0x200009c0

0800a9c4 <__malloc_lock>:
 800a9c4:	4801      	ldr	r0, [pc, #4]	@ (800a9cc <__malloc_lock+0x8>)
 800a9c6:	f7ff b8a6 	b.w	8009b16 <__retarget_lock_acquire_recursive>
 800a9ca:	bf00      	nop
 800a9cc:	200009b8 	.word	0x200009b8

0800a9d0 <__malloc_unlock>:
 800a9d0:	4801      	ldr	r0, [pc, #4]	@ (800a9d8 <__malloc_unlock+0x8>)
 800a9d2:	f7ff b8a1 	b.w	8009b18 <__retarget_lock_release_recursive>
 800a9d6:	bf00      	nop
 800a9d8:	200009b8 	.word	0x200009b8

0800a9dc <_Balloc>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	69c6      	ldr	r6, [r0, #28]
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	460d      	mov	r5, r1
 800a9e4:	b976      	cbnz	r6, 800aa04 <_Balloc+0x28>
 800a9e6:	2010      	movs	r0, #16
 800a9e8:	f7ff ff42 	bl	800a870 <malloc>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	61e0      	str	r0, [r4, #28]
 800a9f0:	b920      	cbnz	r0, 800a9fc <_Balloc+0x20>
 800a9f2:	216b      	movs	r1, #107	@ 0x6b
 800a9f4:	4b17      	ldr	r3, [pc, #92]	@ (800aa54 <_Balloc+0x78>)
 800a9f6:	4818      	ldr	r0, [pc, #96]	@ (800aa58 <_Balloc+0x7c>)
 800a9f8:	f001 fd64 	bl	800c4c4 <__assert_func>
 800a9fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa00:	6006      	str	r6, [r0, #0]
 800aa02:	60c6      	str	r6, [r0, #12]
 800aa04:	69e6      	ldr	r6, [r4, #28]
 800aa06:	68f3      	ldr	r3, [r6, #12]
 800aa08:	b183      	cbz	r3, 800aa2c <_Balloc+0x50>
 800aa0a:	69e3      	ldr	r3, [r4, #28]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa12:	b9b8      	cbnz	r0, 800aa44 <_Balloc+0x68>
 800aa14:	2101      	movs	r1, #1
 800aa16:	fa01 f605 	lsl.w	r6, r1, r5
 800aa1a:	1d72      	adds	r2, r6, #5
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	0092      	lsls	r2, r2, #2
 800aa20:	f001 fd6e 	bl	800c500 <_calloc_r>
 800aa24:	b160      	cbz	r0, 800aa40 <_Balloc+0x64>
 800aa26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa2a:	e00e      	b.n	800aa4a <_Balloc+0x6e>
 800aa2c:	2221      	movs	r2, #33	@ 0x21
 800aa2e:	2104      	movs	r1, #4
 800aa30:	4620      	mov	r0, r4
 800aa32:	f001 fd65 	bl	800c500 <_calloc_r>
 800aa36:	69e3      	ldr	r3, [r4, #28]
 800aa38:	60f0      	str	r0, [r6, #12]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1e4      	bne.n	800aa0a <_Balloc+0x2e>
 800aa40:	2000      	movs	r0, #0
 800aa42:	bd70      	pop	{r4, r5, r6, pc}
 800aa44:	6802      	ldr	r2, [r0, #0]
 800aa46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa50:	e7f7      	b.n	800aa42 <_Balloc+0x66>
 800aa52:	bf00      	nop
 800aa54:	0800db34 	.word	0x0800db34
 800aa58:	0800dbb4 	.word	0x0800dbb4

0800aa5c <_Bfree>:
 800aa5c:	b570      	push	{r4, r5, r6, lr}
 800aa5e:	69c6      	ldr	r6, [r0, #28]
 800aa60:	4605      	mov	r5, r0
 800aa62:	460c      	mov	r4, r1
 800aa64:	b976      	cbnz	r6, 800aa84 <_Bfree+0x28>
 800aa66:	2010      	movs	r0, #16
 800aa68:	f7ff ff02 	bl	800a870 <malloc>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	61e8      	str	r0, [r5, #28]
 800aa70:	b920      	cbnz	r0, 800aa7c <_Bfree+0x20>
 800aa72:	218f      	movs	r1, #143	@ 0x8f
 800aa74:	4b08      	ldr	r3, [pc, #32]	@ (800aa98 <_Bfree+0x3c>)
 800aa76:	4809      	ldr	r0, [pc, #36]	@ (800aa9c <_Bfree+0x40>)
 800aa78:	f001 fd24 	bl	800c4c4 <__assert_func>
 800aa7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa80:	6006      	str	r6, [r0, #0]
 800aa82:	60c6      	str	r6, [r0, #12]
 800aa84:	b13c      	cbz	r4, 800aa96 <_Bfree+0x3a>
 800aa86:	69eb      	ldr	r3, [r5, #28]
 800aa88:	6862      	ldr	r2, [r4, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa90:	6021      	str	r1, [r4, #0]
 800aa92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	0800db34 	.word	0x0800db34
 800aa9c:	0800dbb4 	.word	0x0800dbb4

0800aaa0 <__multadd>:
 800aaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	461e      	mov	r6, r3
 800aaaa:	2000      	movs	r0, #0
 800aaac:	690d      	ldr	r5, [r1, #16]
 800aaae:	f101 0c14 	add.w	ip, r1, #20
 800aab2:	f8dc 3000 	ldr.w	r3, [ip]
 800aab6:	3001      	adds	r0, #1
 800aab8:	b299      	uxth	r1, r3
 800aaba:	fb02 6101 	mla	r1, r2, r1, r6
 800aabe:	0c1e      	lsrs	r6, r3, #16
 800aac0:	0c0b      	lsrs	r3, r1, #16
 800aac2:	fb02 3306 	mla	r3, r2, r6, r3
 800aac6:	b289      	uxth	r1, r1
 800aac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aacc:	4285      	cmp	r5, r0
 800aace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aad2:	f84c 1b04 	str.w	r1, [ip], #4
 800aad6:	dcec      	bgt.n	800aab2 <__multadd+0x12>
 800aad8:	b30e      	cbz	r6, 800ab1e <__multadd+0x7e>
 800aada:	68a3      	ldr	r3, [r4, #8]
 800aadc:	42ab      	cmp	r3, r5
 800aade:	dc19      	bgt.n	800ab14 <__multadd+0x74>
 800aae0:	6861      	ldr	r1, [r4, #4]
 800aae2:	4638      	mov	r0, r7
 800aae4:	3101      	adds	r1, #1
 800aae6:	f7ff ff79 	bl	800a9dc <_Balloc>
 800aaea:	4680      	mov	r8, r0
 800aaec:	b928      	cbnz	r0, 800aafa <__multadd+0x5a>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	21ba      	movs	r1, #186	@ 0xba
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ab24 <__multadd+0x84>)
 800aaf4:	480c      	ldr	r0, [pc, #48]	@ (800ab28 <__multadd+0x88>)
 800aaf6:	f001 fce5 	bl	800c4c4 <__assert_func>
 800aafa:	6922      	ldr	r2, [r4, #16]
 800aafc:	f104 010c 	add.w	r1, r4, #12
 800ab00:	3202      	adds	r2, #2
 800ab02:	0092      	lsls	r2, r2, #2
 800ab04:	300c      	adds	r0, #12
 800ab06:	f001 fcc9 	bl	800c49c <memcpy>
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	f7ff ffa5 	bl	800aa5c <_Bfree>
 800ab12:	4644      	mov	r4, r8
 800ab14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab18:	3501      	adds	r5, #1
 800ab1a:	615e      	str	r6, [r3, #20]
 800ab1c:	6125      	str	r5, [r4, #16]
 800ab1e:	4620      	mov	r0, r4
 800ab20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab24:	0800dba3 	.word	0x0800dba3
 800ab28:	0800dbb4 	.word	0x0800dbb4

0800ab2c <__s2b>:
 800ab2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab30:	4615      	mov	r5, r2
 800ab32:	2209      	movs	r2, #9
 800ab34:	461f      	mov	r7, r3
 800ab36:	3308      	adds	r3, #8
 800ab38:	460c      	mov	r4, r1
 800ab3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab3e:	4606      	mov	r6, r0
 800ab40:	2201      	movs	r2, #1
 800ab42:	2100      	movs	r1, #0
 800ab44:	429a      	cmp	r2, r3
 800ab46:	db09      	blt.n	800ab5c <__s2b+0x30>
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff ff47 	bl	800a9dc <_Balloc>
 800ab4e:	b940      	cbnz	r0, 800ab62 <__s2b+0x36>
 800ab50:	4602      	mov	r2, r0
 800ab52:	21d3      	movs	r1, #211	@ 0xd3
 800ab54:	4b18      	ldr	r3, [pc, #96]	@ (800abb8 <__s2b+0x8c>)
 800ab56:	4819      	ldr	r0, [pc, #100]	@ (800abbc <__s2b+0x90>)
 800ab58:	f001 fcb4 	bl	800c4c4 <__assert_func>
 800ab5c:	0052      	lsls	r2, r2, #1
 800ab5e:	3101      	adds	r1, #1
 800ab60:	e7f0      	b.n	800ab44 <__s2b+0x18>
 800ab62:	9b08      	ldr	r3, [sp, #32]
 800ab64:	2d09      	cmp	r5, #9
 800ab66:	6143      	str	r3, [r0, #20]
 800ab68:	f04f 0301 	mov.w	r3, #1
 800ab6c:	6103      	str	r3, [r0, #16]
 800ab6e:	dd16      	ble.n	800ab9e <__s2b+0x72>
 800ab70:	f104 0909 	add.w	r9, r4, #9
 800ab74:	46c8      	mov	r8, r9
 800ab76:	442c      	add	r4, r5
 800ab78:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab7c:	4601      	mov	r1, r0
 800ab7e:	220a      	movs	r2, #10
 800ab80:	4630      	mov	r0, r6
 800ab82:	3b30      	subs	r3, #48	@ 0x30
 800ab84:	f7ff ff8c 	bl	800aaa0 <__multadd>
 800ab88:	45a0      	cmp	r8, r4
 800ab8a:	d1f5      	bne.n	800ab78 <__s2b+0x4c>
 800ab8c:	f1a5 0408 	sub.w	r4, r5, #8
 800ab90:	444c      	add	r4, r9
 800ab92:	1b2d      	subs	r5, r5, r4
 800ab94:	1963      	adds	r3, r4, r5
 800ab96:	42bb      	cmp	r3, r7
 800ab98:	db04      	blt.n	800aba4 <__s2b+0x78>
 800ab9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9e:	2509      	movs	r5, #9
 800aba0:	340a      	adds	r4, #10
 800aba2:	e7f6      	b.n	800ab92 <__s2b+0x66>
 800aba4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aba8:	4601      	mov	r1, r0
 800abaa:	220a      	movs	r2, #10
 800abac:	4630      	mov	r0, r6
 800abae:	3b30      	subs	r3, #48	@ 0x30
 800abb0:	f7ff ff76 	bl	800aaa0 <__multadd>
 800abb4:	e7ee      	b.n	800ab94 <__s2b+0x68>
 800abb6:	bf00      	nop
 800abb8:	0800dba3 	.word	0x0800dba3
 800abbc:	0800dbb4 	.word	0x0800dbb4

0800abc0 <__hi0bits>:
 800abc0:	4603      	mov	r3, r0
 800abc2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abc6:	bf3a      	itte	cc
 800abc8:	0403      	lslcc	r3, r0, #16
 800abca:	2010      	movcc	r0, #16
 800abcc:	2000      	movcs	r0, #0
 800abce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abd2:	bf3c      	itt	cc
 800abd4:	021b      	lslcc	r3, r3, #8
 800abd6:	3008      	addcc	r0, #8
 800abd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abdc:	bf3c      	itt	cc
 800abde:	011b      	lslcc	r3, r3, #4
 800abe0:	3004      	addcc	r0, #4
 800abe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abe6:	bf3c      	itt	cc
 800abe8:	009b      	lslcc	r3, r3, #2
 800abea:	3002      	addcc	r0, #2
 800abec:	2b00      	cmp	r3, #0
 800abee:	db05      	blt.n	800abfc <__hi0bits+0x3c>
 800abf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abf4:	f100 0001 	add.w	r0, r0, #1
 800abf8:	bf08      	it	eq
 800abfa:	2020      	moveq	r0, #32
 800abfc:	4770      	bx	lr

0800abfe <__lo0bits>:
 800abfe:	6803      	ldr	r3, [r0, #0]
 800ac00:	4602      	mov	r2, r0
 800ac02:	f013 0007 	ands.w	r0, r3, #7
 800ac06:	d00b      	beq.n	800ac20 <__lo0bits+0x22>
 800ac08:	07d9      	lsls	r1, r3, #31
 800ac0a:	d421      	bmi.n	800ac50 <__lo0bits+0x52>
 800ac0c:	0798      	lsls	r0, r3, #30
 800ac0e:	bf49      	itett	mi
 800ac10:	085b      	lsrmi	r3, r3, #1
 800ac12:	089b      	lsrpl	r3, r3, #2
 800ac14:	2001      	movmi	r0, #1
 800ac16:	6013      	strmi	r3, [r2, #0]
 800ac18:	bf5c      	itt	pl
 800ac1a:	2002      	movpl	r0, #2
 800ac1c:	6013      	strpl	r3, [r2, #0]
 800ac1e:	4770      	bx	lr
 800ac20:	b299      	uxth	r1, r3
 800ac22:	b909      	cbnz	r1, 800ac28 <__lo0bits+0x2a>
 800ac24:	2010      	movs	r0, #16
 800ac26:	0c1b      	lsrs	r3, r3, #16
 800ac28:	b2d9      	uxtb	r1, r3
 800ac2a:	b909      	cbnz	r1, 800ac30 <__lo0bits+0x32>
 800ac2c:	3008      	adds	r0, #8
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	0719      	lsls	r1, r3, #28
 800ac32:	bf04      	itt	eq
 800ac34:	091b      	lsreq	r3, r3, #4
 800ac36:	3004      	addeq	r0, #4
 800ac38:	0799      	lsls	r1, r3, #30
 800ac3a:	bf04      	itt	eq
 800ac3c:	089b      	lsreq	r3, r3, #2
 800ac3e:	3002      	addeq	r0, #2
 800ac40:	07d9      	lsls	r1, r3, #31
 800ac42:	d403      	bmi.n	800ac4c <__lo0bits+0x4e>
 800ac44:	085b      	lsrs	r3, r3, #1
 800ac46:	f100 0001 	add.w	r0, r0, #1
 800ac4a:	d003      	beq.n	800ac54 <__lo0bits+0x56>
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	4770      	bx	lr
 800ac50:	2000      	movs	r0, #0
 800ac52:	4770      	bx	lr
 800ac54:	2020      	movs	r0, #32
 800ac56:	4770      	bx	lr

0800ac58 <__i2b>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	f7ff febd 	bl	800a9dc <_Balloc>
 800ac62:	4602      	mov	r2, r0
 800ac64:	b928      	cbnz	r0, 800ac72 <__i2b+0x1a>
 800ac66:	f240 1145 	movw	r1, #325	@ 0x145
 800ac6a:	4b04      	ldr	r3, [pc, #16]	@ (800ac7c <__i2b+0x24>)
 800ac6c:	4804      	ldr	r0, [pc, #16]	@ (800ac80 <__i2b+0x28>)
 800ac6e:	f001 fc29 	bl	800c4c4 <__assert_func>
 800ac72:	2301      	movs	r3, #1
 800ac74:	6144      	str	r4, [r0, #20]
 800ac76:	6103      	str	r3, [r0, #16]
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	bf00      	nop
 800ac7c:	0800dba3 	.word	0x0800dba3
 800ac80:	0800dbb4 	.word	0x0800dbb4

0800ac84 <__multiply>:
 800ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	4614      	mov	r4, r2
 800ac8a:	690a      	ldr	r2, [r1, #16]
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	460f      	mov	r7, r1
 800ac90:	429a      	cmp	r2, r3
 800ac92:	bfa2      	ittt	ge
 800ac94:	4623      	movge	r3, r4
 800ac96:	460c      	movge	r4, r1
 800ac98:	461f      	movge	r7, r3
 800ac9a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ac9e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aca2:	68a3      	ldr	r3, [r4, #8]
 800aca4:	6861      	ldr	r1, [r4, #4]
 800aca6:	eb0a 0609 	add.w	r6, sl, r9
 800acaa:	42b3      	cmp	r3, r6
 800acac:	b085      	sub	sp, #20
 800acae:	bfb8      	it	lt
 800acb0:	3101      	addlt	r1, #1
 800acb2:	f7ff fe93 	bl	800a9dc <_Balloc>
 800acb6:	b930      	cbnz	r0, 800acc6 <__multiply+0x42>
 800acb8:	4602      	mov	r2, r0
 800acba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800acbe:	4b43      	ldr	r3, [pc, #268]	@ (800adcc <__multiply+0x148>)
 800acc0:	4843      	ldr	r0, [pc, #268]	@ (800add0 <__multiply+0x14c>)
 800acc2:	f001 fbff 	bl	800c4c4 <__assert_func>
 800acc6:	f100 0514 	add.w	r5, r0, #20
 800acca:	462b      	mov	r3, r5
 800accc:	2200      	movs	r2, #0
 800acce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800acd2:	4543      	cmp	r3, r8
 800acd4:	d321      	bcc.n	800ad1a <__multiply+0x96>
 800acd6:	f107 0114 	add.w	r1, r7, #20
 800acda:	f104 0214 	add.w	r2, r4, #20
 800acde:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ace2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ace6:	9302      	str	r3, [sp, #8]
 800ace8:	1b13      	subs	r3, r2, r4
 800acea:	3b15      	subs	r3, #21
 800acec:	f023 0303 	bic.w	r3, r3, #3
 800acf0:	3304      	adds	r3, #4
 800acf2:	f104 0715 	add.w	r7, r4, #21
 800acf6:	42ba      	cmp	r2, r7
 800acf8:	bf38      	it	cc
 800acfa:	2304      	movcc	r3, #4
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	9b02      	ldr	r3, [sp, #8]
 800ad00:	9103      	str	r1, [sp, #12]
 800ad02:	428b      	cmp	r3, r1
 800ad04:	d80c      	bhi.n	800ad20 <__multiply+0x9c>
 800ad06:	2e00      	cmp	r6, #0
 800ad08:	dd03      	ble.n	800ad12 <__multiply+0x8e>
 800ad0a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d05a      	beq.n	800adc8 <__multiply+0x144>
 800ad12:	6106      	str	r6, [r0, #16]
 800ad14:	b005      	add	sp, #20
 800ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1a:	f843 2b04 	str.w	r2, [r3], #4
 800ad1e:	e7d8      	b.n	800acd2 <__multiply+0x4e>
 800ad20:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad24:	f1ba 0f00 	cmp.w	sl, #0
 800ad28:	d023      	beq.n	800ad72 <__multiply+0xee>
 800ad2a:	46a9      	mov	r9, r5
 800ad2c:	f04f 0c00 	mov.w	ip, #0
 800ad30:	f104 0e14 	add.w	lr, r4, #20
 800ad34:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad38:	f8d9 3000 	ldr.w	r3, [r9]
 800ad3c:	fa1f fb87 	uxth.w	fp, r7
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad46:	4463      	add	r3, ip
 800ad48:	f8d9 c000 	ldr.w	ip, [r9]
 800ad4c:	0c3f      	lsrs	r7, r7, #16
 800ad4e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ad52:	fb0a c707 	mla	r7, sl, r7, ip
 800ad56:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ad60:	4572      	cmp	r2, lr
 800ad62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ad66:	f849 3b04 	str.w	r3, [r9], #4
 800ad6a:	d8e3      	bhi.n	800ad34 <__multiply+0xb0>
 800ad6c:	9b01      	ldr	r3, [sp, #4]
 800ad6e:	f845 c003 	str.w	ip, [r5, r3]
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	3104      	adds	r1, #4
 800ad76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad7a:	f1b9 0f00 	cmp.w	r9, #0
 800ad7e:	d021      	beq.n	800adc4 <__multiply+0x140>
 800ad80:	46ae      	mov	lr, r5
 800ad82:	f04f 0a00 	mov.w	sl, #0
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	f104 0c14 	add.w	ip, r4, #20
 800ad8c:	f8bc b000 	ldrh.w	fp, [ip]
 800ad90:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	fb09 770b 	mla	r7, r9, fp, r7
 800ad9a:	4457      	add	r7, sl
 800ad9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ada0:	f84e 3b04 	str.w	r3, [lr], #4
 800ada4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ada8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adac:	f8be 3000 	ldrh.w	r3, [lr]
 800adb0:	4562      	cmp	r2, ip
 800adb2:	fb09 330a 	mla	r3, r9, sl, r3
 800adb6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800adba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adbe:	d8e5      	bhi.n	800ad8c <__multiply+0x108>
 800adc0:	9f01      	ldr	r7, [sp, #4]
 800adc2:	51eb      	str	r3, [r5, r7]
 800adc4:	3504      	adds	r5, #4
 800adc6:	e79a      	b.n	800acfe <__multiply+0x7a>
 800adc8:	3e01      	subs	r6, #1
 800adca:	e79c      	b.n	800ad06 <__multiply+0x82>
 800adcc:	0800dba3 	.word	0x0800dba3
 800add0:	0800dbb4 	.word	0x0800dbb4

0800add4 <__pow5mult>:
 800add4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add8:	4615      	mov	r5, r2
 800adda:	f012 0203 	ands.w	r2, r2, #3
 800adde:	4607      	mov	r7, r0
 800ade0:	460e      	mov	r6, r1
 800ade2:	d007      	beq.n	800adf4 <__pow5mult+0x20>
 800ade4:	4c25      	ldr	r4, [pc, #148]	@ (800ae7c <__pow5mult+0xa8>)
 800ade6:	3a01      	subs	r2, #1
 800ade8:	2300      	movs	r3, #0
 800adea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adee:	f7ff fe57 	bl	800aaa0 <__multadd>
 800adf2:	4606      	mov	r6, r0
 800adf4:	10ad      	asrs	r5, r5, #2
 800adf6:	d03d      	beq.n	800ae74 <__pow5mult+0xa0>
 800adf8:	69fc      	ldr	r4, [r7, #28]
 800adfa:	b97c      	cbnz	r4, 800ae1c <__pow5mult+0x48>
 800adfc:	2010      	movs	r0, #16
 800adfe:	f7ff fd37 	bl	800a870 <malloc>
 800ae02:	4602      	mov	r2, r0
 800ae04:	61f8      	str	r0, [r7, #28]
 800ae06:	b928      	cbnz	r0, 800ae14 <__pow5mult+0x40>
 800ae08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ae80 <__pow5mult+0xac>)
 800ae0e:	481d      	ldr	r0, [pc, #116]	@ (800ae84 <__pow5mult+0xb0>)
 800ae10:	f001 fb58 	bl	800c4c4 <__assert_func>
 800ae14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae18:	6004      	str	r4, [r0, #0]
 800ae1a:	60c4      	str	r4, [r0, #12]
 800ae1c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae24:	b94c      	cbnz	r4, 800ae3a <__pow5mult+0x66>
 800ae26:	f240 2171 	movw	r1, #625	@ 0x271
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	f7ff ff14 	bl	800ac58 <__i2b>
 800ae30:	2300      	movs	r3, #0
 800ae32:	4604      	mov	r4, r0
 800ae34:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae38:	6003      	str	r3, [r0, #0]
 800ae3a:	f04f 0900 	mov.w	r9, #0
 800ae3e:	07eb      	lsls	r3, r5, #31
 800ae40:	d50a      	bpl.n	800ae58 <__pow5mult+0x84>
 800ae42:	4631      	mov	r1, r6
 800ae44:	4622      	mov	r2, r4
 800ae46:	4638      	mov	r0, r7
 800ae48:	f7ff ff1c 	bl	800ac84 <__multiply>
 800ae4c:	4680      	mov	r8, r0
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7ff fe03 	bl	800aa5c <_Bfree>
 800ae56:	4646      	mov	r6, r8
 800ae58:	106d      	asrs	r5, r5, #1
 800ae5a:	d00b      	beq.n	800ae74 <__pow5mult+0xa0>
 800ae5c:	6820      	ldr	r0, [r4, #0]
 800ae5e:	b938      	cbnz	r0, 800ae70 <__pow5mult+0x9c>
 800ae60:	4622      	mov	r2, r4
 800ae62:	4621      	mov	r1, r4
 800ae64:	4638      	mov	r0, r7
 800ae66:	f7ff ff0d 	bl	800ac84 <__multiply>
 800ae6a:	6020      	str	r0, [r4, #0]
 800ae6c:	f8c0 9000 	str.w	r9, [r0]
 800ae70:	4604      	mov	r4, r0
 800ae72:	e7e4      	b.n	800ae3e <__pow5mult+0x6a>
 800ae74:	4630      	mov	r0, r6
 800ae76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800dc10 	.word	0x0800dc10
 800ae80:	0800db34 	.word	0x0800db34
 800ae84:	0800dbb4 	.word	0x0800dbb4

0800ae88 <__lshift>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	460c      	mov	r4, r1
 800ae8e:	4607      	mov	r7, r0
 800ae90:	4691      	mov	r9, r2
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	6849      	ldr	r1, [r1, #4]
 800ae96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae9a:	68a3      	ldr	r3, [r4, #8]
 800ae9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aea0:	f108 0601 	add.w	r6, r8, #1
 800aea4:	42b3      	cmp	r3, r6
 800aea6:	db0b      	blt.n	800aec0 <__lshift+0x38>
 800aea8:	4638      	mov	r0, r7
 800aeaa:	f7ff fd97 	bl	800a9dc <_Balloc>
 800aeae:	4605      	mov	r5, r0
 800aeb0:	b948      	cbnz	r0, 800aec6 <__lshift+0x3e>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aeb8:	4b27      	ldr	r3, [pc, #156]	@ (800af58 <__lshift+0xd0>)
 800aeba:	4828      	ldr	r0, [pc, #160]	@ (800af5c <__lshift+0xd4>)
 800aebc:	f001 fb02 	bl	800c4c4 <__assert_func>
 800aec0:	3101      	adds	r1, #1
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	e7ee      	b.n	800aea4 <__lshift+0x1c>
 800aec6:	2300      	movs	r3, #0
 800aec8:	f100 0114 	add.w	r1, r0, #20
 800aecc:	f100 0210 	add.w	r2, r0, #16
 800aed0:	4618      	mov	r0, r3
 800aed2:	4553      	cmp	r3, sl
 800aed4:	db33      	blt.n	800af3e <__lshift+0xb6>
 800aed6:	6920      	ldr	r0, [r4, #16]
 800aed8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aedc:	f104 0314 	add.w	r3, r4, #20
 800aee0:	f019 091f 	ands.w	r9, r9, #31
 800aee4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aee8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aeec:	d02b      	beq.n	800af46 <__lshift+0xbe>
 800aeee:	468a      	mov	sl, r1
 800aef0:	2200      	movs	r2, #0
 800aef2:	f1c9 0e20 	rsb	lr, r9, #32
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	fa00 f009 	lsl.w	r0, r0, r9
 800aefc:	4310      	orrs	r0, r2
 800aefe:	f84a 0b04 	str.w	r0, [sl], #4
 800af02:	f853 2b04 	ldr.w	r2, [r3], #4
 800af06:	459c      	cmp	ip, r3
 800af08:	fa22 f20e 	lsr.w	r2, r2, lr
 800af0c:	d8f3      	bhi.n	800aef6 <__lshift+0x6e>
 800af0e:	ebac 0304 	sub.w	r3, ip, r4
 800af12:	3b15      	subs	r3, #21
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	3304      	adds	r3, #4
 800af1a:	f104 0015 	add.w	r0, r4, #21
 800af1e:	4584      	cmp	ip, r0
 800af20:	bf38      	it	cc
 800af22:	2304      	movcc	r3, #4
 800af24:	50ca      	str	r2, [r1, r3]
 800af26:	b10a      	cbz	r2, 800af2c <__lshift+0xa4>
 800af28:	f108 0602 	add.w	r6, r8, #2
 800af2c:	3e01      	subs	r6, #1
 800af2e:	4638      	mov	r0, r7
 800af30:	4621      	mov	r1, r4
 800af32:	612e      	str	r6, [r5, #16]
 800af34:	f7ff fd92 	bl	800aa5c <_Bfree>
 800af38:	4628      	mov	r0, r5
 800af3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af42:	3301      	adds	r3, #1
 800af44:	e7c5      	b.n	800aed2 <__lshift+0x4a>
 800af46:	3904      	subs	r1, #4
 800af48:	f853 2b04 	ldr.w	r2, [r3], #4
 800af4c:	459c      	cmp	ip, r3
 800af4e:	f841 2f04 	str.w	r2, [r1, #4]!
 800af52:	d8f9      	bhi.n	800af48 <__lshift+0xc0>
 800af54:	e7ea      	b.n	800af2c <__lshift+0xa4>
 800af56:	bf00      	nop
 800af58:	0800dba3 	.word	0x0800dba3
 800af5c:	0800dbb4 	.word	0x0800dbb4

0800af60 <__mcmp>:
 800af60:	4603      	mov	r3, r0
 800af62:	690a      	ldr	r2, [r1, #16]
 800af64:	6900      	ldr	r0, [r0, #16]
 800af66:	b530      	push	{r4, r5, lr}
 800af68:	1a80      	subs	r0, r0, r2
 800af6a:	d10e      	bne.n	800af8a <__mcmp+0x2a>
 800af6c:	3314      	adds	r3, #20
 800af6e:	3114      	adds	r1, #20
 800af70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af80:	4295      	cmp	r5, r2
 800af82:	d003      	beq.n	800af8c <__mcmp+0x2c>
 800af84:	d205      	bcs.n	800af92 <__mcmp+0x32>
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	bd30      	pop	{r4, r5, pc}
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	d3f3      	bcc.n	800af78 <__mcmp+0x18>
 800af90:	e7fb      	b.n	800af8a <__mcmp+0x2a>
 800af92:	2001      	movs	r0, #1
 800af94:	e7f9      	b.n	800af8a <__mcmp+0x2a>
	...

0800af98 <__mdiff>:
 800af98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af9c:	4689      	mov	r9, r1
 800af9e:	4606      	mov	r6, r0
 800afa0:	4611      	mov	r1, r2
 800afa2:	4648      	mov	r0, r9
 800afa4:	4614      	mov	r4, r2
 800afa6:	f7ff ffdb 	bl	800af60 <__mcmp>
 800afaa:	1e05      	subs	r5, r0, #0
 800afac:	d112      	bne.n	800afd4 <__mdiff+0x3c>
 800afae:	4629      	mov	r1, r5
 800afb0:	4630      	mov	r0, r6
 800afb2:	f7ff fd13 	bl	800a9dc <_Balloc>
 800afb6:	4602      	mov	r2, r0
 800afb8:	b928      	cbnz	r0, 800afc6 <__mdiff+0x2e>
 800afba:	f240 2137 	movw	r1, #567	@ 0x237
 800afbe:	4b3e      	ldr	r3, [pc, #248]	@ (800b0b8 <__mdiff+0x120>)
 800afc0:	483e      	ldr	r0, [pc, #248]	@ (800b0bc <__mdiff+0x124>)
 800afc2:	f001 fa7f 	bl	800c4c4 <__assert_func>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afcc:	4610      	mov	r0, r2
 800afce:	b003      	add	sp, #12
 800afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd4:	bfbc      	itt	lt
 800afd6:	464b      	movlt	r3, r9
 800afd8:	46a1      	movlt	r9, r4
 800afda:	4630      	mov	r0, r6
 800afdc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afe0:	bfba      	itte	lt
 800afe2:	461c      	movlt	r4, r3
 800afe4:	2501      	movlt	r5, #1
 800afe6:	2500      	movge	r5, #0
 800afe8:	f7ff fcf8 	bl	800a9dc <_Balloc>
 800afec:	4602      	mov	r2, r0
 800afee:	b918      	cbnz	r0, 800aff8 <__mdiff+0x60>
 800aff0:	f240 2145 	movw	r1, #581	@ 0x245
 800aff4:	4b30      	ldr	r3, [pc, #192]	@ (800b0b8 <__mdiff+0x120>)
 800aff6:	e7e3      	b.n	800afc0 <__mdiff+0x28>
 800aff8:	f100 0b14 	add.w	fp, r0, #20
 800affc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b000:	f109 0310 	add.w	r3, r9, #16
 800b004:	60c5      	str	r5, [r0, #12]
 800b006:	f04f 0c00 	mov.w	ip, #0
 800b00a:	f109 0514 	add.w	r5, r9, #20
 800b00e:	46d9      	mov	r9, fp
 800b010:	6926      	ldr	r6, [r4, #16]
 800b012:	f104 0e14 	add.w	lr, r4, #20
 800b016:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b01a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b01e:	9301      	str	r3, [sp, #4]
 800b020:	9b01      	ldr	r3, [sp, #4]
 800b022:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b026:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b02a:	b281      	uxth	r1, r0
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	fa1f f38a 	uxth.w	r3, sl
 800b032:	1a5b      	subs	r3, r3, r1
 800b034:	0c00      	lsrs	r0, r0, #16
 800b036:	4463      	add	r3, ip
 800b038:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b03c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b040:	b29b      	uxth	r3, r3
 800b042:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b046:	4576      	cmp	r6, lr
 800b048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b04c:	f849 3b04 	str.w	r3, [r9], #4
 800b050:	d8e6      	bhi.n	800b020 <__mdiff+0x88>
 800b052:	1b33      	subs	r3, r6, r4
 800b054:	3b15      	subs	r3, #21
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	3415      	adds	r4, #21
 800b05c:	3304      	adds	r3, #4
 800b05e:	42a6      	cmp	r6, r4
 800b060:	bf38      	it	cc
 800b062:	2304      	movcc	r3, #4
 800b064:	441d      	add	r5, r3
 800b066:	445b      	add	r3, fp
 800b068:	461e      	mov	r6, r3
 800b06a:	462c      	mov	r4, r5
 800b06c:	4544      	cmp	r4, r8
 800b06e:	d30e      	bcc.n	800b08e <__mdiff+0xf6>
 800b070:	f108 0103 	add.w	r1, r8, #3
 800b074:	1b49      	subs	r1, r1, r5
 800b076:	f021 0103 	bic.w	r1, r1, #3
 800b07a:	3d03      	subs	r5, #3
 800b07c:	45a8      	cmp	r8, r5
 800b07e:	bf38      	it	cc
 800b080:	2100      	movcc	r1, #0
 800b082:	440b      	add	r3, r1
 800b084:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b088:	b199      	cbz	r1, 800b0b2 <__mdiff+0x11a>
 800b08a:	6117      	str	r7, [r2, #16]
 800b08c:	e79e      	b.n	800afcc <__mdiff+0x34>
 800b08e:	46e6      	mov	lr, ip
 800b090:	f854 1b04 	ldr.w	r1, [r4], #4
 800b094:	fa1f fc81 	uxth.w	ip, r1
 800b098:	44f4      	add	ip, lr
 800b09a:	0c08      	lsrs	r0, r1, #16
 800b09c:	4471      	add	r1, lr
 800b09e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b0a2:	b289      	uxth	r1, r1
 800b0a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0ac:	f846 1b04 	str.w	r1, [r6], #4
 800b0b0:	e7dc      	b.n	800b06c <__mdiff+0xd4>
 800b0b2:	3f01      	subs	r7, #1
 800b0b4:	e7e6      	b.n	800b084 <__mdiff+0xec>
 800b0b6:	bf00      	nop
 800b0b8:	0800dba3 	.word	0x0800dba3
 800b0bc:	0800dbb4 	.word	0x0800dbb4

0800b0c0 <__ulp>:
 800b0c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b0fc <__ulp+0x3c>)
 800b0c2:	400b      	ands	r3, r1
 800b0c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dc08      	bgt.n	800b0de <__ulp+0x1e>
 800b0cc:	425b      	negs	r3, r3
 800b0ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b0d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0d6:	da04      	bge.n	800b0e2 <__ulp+0x22>
 800b0d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b0dc:	4113      	asrs	r3, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	e008      	b.n	800b0f4 <__ulp+0x34>
 800b0e2:	f1a2 0314 	sub.w	r3, r2, #20
 800b0e6:	2b1e      	cmp	r3, #30
 800b0e8:	bfd6      	itet	le
 800b0ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b0ee:	2201      	movgt	r2, #1
 800b0f0:	40da      	lsrle	r2, r3
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	7ff00000 	.word	0x7ff00000

0800b100 <__b2d>:
 800b100:	6902      	ldr	r2, [r0, #16]
 800b102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b104:	f100 0614 	add.w	r6, r0, #20
 800b108:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b10c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b110:	4f1e      	ldr	r7, [pc, #120]	@ (800b18c <__b2d+0x8c>)
 800b112:	4620      	mov	r0, r4
 800b114:	f7ff fd54 	bl	800abc0 <__hi0bits>
 800b118:	4603      	mov	r3, r0
 800b11a:	f1c0 0020 	rsb	r0, r0, #32
 800b11e:	2b0a      	cmp	r3, #10
 800b120:	f1a2 0504 	sub.w	r5, r2, #4
 800b124:	6008      	str	r0, [r1, #0]
 800b126:	dc12      	bgt.n	800b14e <__b2d+0x4e>
 800b128:	42ae      	cmp	r6, r5
 800b12a:	bf2c      	ite	cs
 800b12c:	2200      	movcs	r2, #0
 800b12e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b132:	f1c3 0c0b 	rsb	ip, r3, #11
 800b136:	3315      	adds	r3, #21
 800b138:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b13c:	fa04 f303 	lsl.w	r3, r4, r3
 800b140:	fa22 f20c 	lsr.w	r2, r2, ip
 800b144:	ea4e 0107 	orr.w	r1, lr, r7
 800b148:	431a      	orrs	r2, r3
 800b14a:	4610      	mov	r0, r2
 800b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b14e:	42ae      	cmp	r6, r5
 800b150:	bf36      	itet	cc
 800b152:	f1a2 0508 	subcc.w	r5, r2, #8
 800b156:	2200      	movcs	r2, #0
 800b158:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b15c:	3b0b      	subs	r3, #11
 800b15e:	d012      	beq.n	800b186 <__b2d+0x86>
 800b160:	f1c3 0720 	rsb	r7, r3, #32
 800b164:	fa22 f107 	lsr.w	r1, r2, r7
 800b168:	409c      	lsls	r4, r3
 800b16a:	430c      	orrs	r4, r1
 800b16c:	42b5      	cmp	r5, r6
 800b16e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b172:	bf94      	ite	ls
 800b174:	2400      	movls	r4, #0
 800b176:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b17a:	409a      	lsls	r2, r3
 800b17c:	40fc      	lsrs	r4, r7
 800b17e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b182:	4322      	orrs	r2, r4
 800b184:	e7e1      	b.n	800b14a <__b2d+0x4a>
 800b186:	ea44 0107 	orr.w	r1, r4, r7
 800b18a:	e7de      	b.n	800b14a <__b2d+0x4a>
 800b18c:	3ff00000 	.word	0x3ff00000

0800b190 <__d2b>:
 800b190:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b194:	2101      	movs	r1, #1
 800b196:	4690      	mov	r8, r2
 800b198:	4699      	mov	r9, r3
 800b19a:	9e08      	ldr	r6, [sp, #32]
 800b19c:	f7ff fc1e 	bl	800a9dc <_Balloc>
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	b930      	cbnz	r0, 800b1b2 <__d2b+0x22>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1aa:	4b23      	ldr	r3, [pc, #140]	@ (800b238 <__d2b+0xa8>)
 800b1ac:	4823      	ldr	r0, [pc, #140]	@ (800b23c <__d2b+0xac>)
 800b1ae:	f001 f989 	bl	800c4c4 <__assert_func>
 800b1b2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1ba:	b10d      	cbz	r5, 800b1c0 <__d2b+0x30>
 800b1bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	f1b8 0300 	subs.w	r3, r8, #0
 800b1c6:	d024      	beq.n	800b212 <__d2b+0x82>
 800b1c8:	4668      	mov	r0, sp
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	f7ff fd17 	bl	800abfe <__lo0bits>
 800b1d0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1d4:	b1d8      	cbz	r0, 800b20e <__d2b+0x7e>
 800b1d6:	f1c0 0320 	rsb	r3, r0, #32
 800b1da:	fa02 f303 	lsl.w	r3, r2, r3
 800b1de:	430b      	orrs	r3, r1
 800b1e0:	40c2      	lsrs	r2, r0
 800b1e2:	6163      	str	r3, [r4, #20]
 800b1e4:	9201      	str	r2, [sp, #4]
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	bf0c      	ite	eq
 800b1ec:	2201      	moveq	r2, #1
 800b1ee:	2202      	movne	r2, #2
 800b1f0:	61a3      	str	r3, [r4, #24]
 800b1f2:	6122      	str	r2, [r4, #16]
 800b1f4:	b1ad      	cbz	r5, 800b222 <__d2b+0x92>
 800b1f6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b1fa:	4405      	add	r5, r0
 800b1fc:	6035      	str	r5, [r6, #0]
 800b1fe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	6018      	str	r0, [r3, #0]
 800b206:	4620      	mov	r0, r4
 800b208:	b002      	add	sp, #8
 800b20a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b20e:	6161      	str	r1, [r4, #20]
 800b210:	e7e9      	b.n	800b1e6 <__d2b+0x56>
 800b212:	a801      	add	r0, sp, #4
 800b214:	f7ff fcf3 	bl	800abfe <__lo0bits>
 800b218:	9b01      	ldr	r3, [sp, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	6163      	str	r3, [r4, #20]
 800b21e:	3020      	adds	r0, #32
 800b220:	e7e7      	b.n	800b1f2 <__d2b+0x62>
 800b222:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b22a:	6030      	str	r0, [r6, #0]
 800b22c:	6918      	ldr	r0, [r3, #16]
 800b22e:	f7ff fcc7 	bl	800abc0 <__hi0bits>
 800b232:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b236:	e7e4      	b.n	800b202 <__d2b+0x72>
 800b238:	0800dba3 	.word	0x0800dba3
 800b23c:	0800dbb4 	.word	0x0800dbb4

0800b240 <__ratio>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	b085      	sub	sp, #20
 800b246:	e9cd 1000 	strd	r1, r0, [sp]
 800b24a:	a902      	add	r1, sp, #8
 800b24c:	f7ff ff58 	bl	800b100 <__b2d>
 800b250:	468b      	mov	fp, r1
 800b252:	4606      	mov	r6, r0
 800b254:	460f      	mov	r7, r1
 800b256:	9800      	ldr	r0, [sp, #0]
 800b258:	a903      	add	r1, sp, #12
 800b25a:	f7ff ff51 	bl	800b100 <__b2d>
 800b25e:	460d      	mov	r5, r1
 800b260:	9b01      	ldr	r3, [sp, #4]
 800b262:	4689      	mov	r9, r1
 800b264:	6919      	ldr	r1, [r3, #16]
 800b266:	9b00      	ldr	r3, [sp, #0]
 800b268:	4604      	mov	r4, r0
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	4630      	mov	r0, r6
 800b26e:	1ac9      	subs	r1, r1, r3
 800b270:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b274:	1a9b      	subs	r3, r3, r2
 800b276:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bfcd      	iteet	gt
 800b27e:	463a      	movgt	r2, r7
 800b280:	462a      	movle	r2, r5
 800b282:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b286:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b28a:	bfd8      	it	le
 800b28c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b290:	464b      	mov	r3, r9
 800b292:	4622      	mov	r2, r4
 800b294:	4659      	mov	r1, fp
 800b296:	f7f5 fab5 	bl	8000804 <__aeabi_ddiv>
 800b29a:	b005      	add	sp, #20
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2a0 <__copybits>:
 800b2a0:	3901      	subs	r1, #1
 800b2a2:	b570      	push	{r4, r5, r6, lr}
 800b2a4:	1149      	asrs	r1, r1, #5
 800b2a6:	6914      	ldr	r4, [r2, #16]
 800b2a8:	3101      	adds	r1, #1
 800b2aa:	f102 0314 	add.w	r3, r2, #20
 800b2ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2b6:	1f05      	subs	r5, r0, #4
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	d30c      	bcc.n	800b2d6 <__copybits+0x36>
 800b2bc:	1aa3      	subs	r3, r4, r2
 800b2be:	3b11      	subs	r3, #17
 800b2c0:	f023 0303 	bic.w	r3, r3, #3
 800b2c4:	3211      	adds	r2, #17
 800b2c6:	42a2      	cmp	r2, r4
 800b2c8:	bf88      	it	hi
 800b2ca:	2300      	movhi	r3, #0
 800b2cc:	4418      	add	r0, r3
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	4288      	cmp	r0, r1
 800b2d2:	d305      	bcc.n	800b2e0 <__copybits+0x40>
 800b2d4:	bd70      	pop	{r4, r5, r6, pc}
 800b2d6:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2da:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2de:	e7eb      	b.n	800b2b8 <__copybits+0x18>
 800b2e0:	f840 3b04 	str.w	r3, [r0], #4
 800b2e4:	e7f4      	b.n	800b2d0 <__copybits+0x30>

0800b2e6 <__any_on>:
 800b2e6:	f100 0214 	add.w	r2, r0, #20
 800b2ea:	6900      	ldr	r0, [r0, #16]
 800b2ec:	114b      	asrs	r3, r1, #5
 800b2ee:	4298      	cmp	r0, r3
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	db11      	blt.n	800b318 <__any_on+0x32>
 800b2f4:	dd0a      	ble.n	800b30c <__any_on+0x26>
 800b2f6:	f011 011f 	ands.w	r1, r1, #31
 800b2fa:	d007      	beq.n	800b30c <__any_on+0x26>
 800b2fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b300:	fa24 f001 	lsr.w	r0, r4, r1
 800b304:	fa00 f101 	lsl.w	r1, r0, r1
 800b308:	428c      	cmp	r4, r1
 800b30a:	d10b      	bne.n	800b324 <__any_on+0x3e>
 800b30c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b310:	4293      	cmp	r3, r2
 800b312:	d803      	bhi.n	800b31c <__any_on+0x36>
 800b314:	2000      	movs	r0, #0
 800b316:	bd10      	pop	{r4, pc}
 800b318:	4603      	mov	r3, r0
 800b31a:	e7f7      	b.n	800b30c <__any_on+0x26>
 800b31c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b320:	2900      	cmp	r1, #0
 800b322:	d0f5      	beq.n	800b310 <__any_on+0x2a>
 800b324:	2001      	movs	r0, #1
 800b326:	e7f6      	b.n	800b316 <__any_on+0x30>

0800b328 <sulp>:
 800b328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b32c:	460f      	mov	r7, r1
 800b32e:	4690      	mov	r8, r2
 800b330:	f7ff fec6 	bl	800b0c0 <__ulp>
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	f1b8 0f00 	cmp.w	r8, #0
 800b33c:	d011      	beq.n	800b362 <sulp+0x3a>
 800b33e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b342:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b346:	2b00      	cmp	r3, #0
 800b348:	dd0b      	ble.n	800b362 <sulp+0x3a>
 800b34a:	2400      	movs	r4, #0
 800b34c:	051b      	lsls	r3, r3, #20
 800b34e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b352:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b356:	4622      	mov	r2, r4
 800b358:	462b      	mov	r3, r5
 800b35a:	f7f5 f929 	bl	80005b0 <__aeabi_dmul>
 800b35e:	4604      	mov	r4, r0
 800b360:	460d      	mov	r5, r1
 800b362:	4620      	mov	r0, r4
 800b364:	4629      	mov	r1, r5
 800b366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b36a:	0000      	movs	r0, r0
 800b36c:	0000      	movs	r0, r0
	...

0800b370 <_strtod_l>:
 800b370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b374:	b09f      	sub	sp, #124	@ 0x7c
 800b376:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b378:	2200      	movs	r2, #0
 800b37a:	460c      	mov	r4, r1
 800b37c:	921a      	str	r2, [sp, #104]	@ 0x68
 800b37e:	f04f 0a00 	mov.w	sl, #0
 800b382:	f04f 0b00 	mov.w	fp, #0
 800b386:	460a      	mov	r2, r1
 800b388:	9005      	str	r0, [sp, #20]
 800b38a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b38c:	7811      	ldrb	r1, [r2, #0]
 800b38e:	292b      	cmp	r1, #43	@ 0x2b
 800b390:	d048      	beq.n	800b424 <_strtod_l+0xb4>
 800b392:	d836      	bhi.n	800b402 <_strtod_l+0x92>
 800b394:	290d      	cmp	r1, #13
 800b396:	d830      	bhi.n	800b3fa <_strtod_l+0x8a>
 800b398:	2908      	cmp	r1, #8
 800b39a:	d830      	bhi.n	800b3fe <_strtod_l+0x8e>
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d039      	beq.n	800b414 <_strtod_l+0xa4>
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b3a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b3a6:	782a      	ldrb	r2, [r5, #0]
 800b3a8:	2a30      	cmp	r2, #48	@ 0x30
 800b3aa:	f040 80b1 	bne.w	800b510 <_strtod_l+0x1a0>
 800b3ae:	786a      	ldrb	r2, [r5, #1]
 800b3b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b3b4:	2a58      	cmp	r2, #88	@ 0x58
 800b3b6:	d16c      	bne.n	800b492 <_strtod_l+0x122>
 800b3b8:	9302      	str	r3, [sp, #8]
 800b3ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3bc:	4a8e      	ldr	r2, [pc, #568]	@ (800b5f8 <_strtod_l+0x288>)
 800b3be:	9301      	str	r3, [sp, #4]
 800b3c0:	ab1a      	add	r3, sp, #104	@ 0x68
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	9805      	ldr	r0, [sp, #20]
 800b3c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b3c8:	a919      	add	r1, sp, #100	@ 0x64
 800b3ca:	f001 f915 	bl	800c5f8 <__gethex>
 800b3ce:	f010 060f 	ands.w	r6, r0, #15
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	d005      	beq.n	800b3e2 <_strtod_l+0x72>
 800b3d6:	2e06      	cmp	r6, #6
 800b3d8:	d126      	bne.n	800b428 <_strtod_l+0xb8>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	3501      	adds	r5, #1
 800b3de:	9519      	str	r5, [sp, #100]	@ 0x64
 800b3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f040 8584 	bne.w	800bef2 <_strtod_l+0xb82>
 800b3ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3ec:	b1bb      	cbz	r3, 800b41e <_strtod_l+0xae>
 800b3ee:	4650      	mov	r0, sl
 800b3f0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800b3f4:	b01f      	add	sp, #124	@ 0x7c
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fa:	2920      	cmp	r1, #32
 800b3fc:	d1d0      	bne.n	800b3a0 <_strtod_l+0x30>
 800b3fe:	3201      	adds	r2, #1
 800b400:	e7c3      	b.n	800b38a <_strtod_l+0x1a>
 800b402:	292d      	cmp	r1, #45	@ 0x2d
 800b404:	d1cc      	bne.n	800b3a0 <_strtod_l+0x30>
 800b406:	2101      	movs	r1, #1
 800b408:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b40a:	1c51      	adds	r1, r2, #1
 800b40c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b40e:	7852      	ldrb	r2, [r2, #1]
 800b410:	2a00      	cmp	r2, #0
 800b412:	d1c7      	bne.n	800b3a4 <_strtod_l+0x34>
 800b414:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b416:	9419      	str	r4, [sp, #100]	@ 0x64
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f040 8568 	bne.w	800beee <_strtod_l+0xb7e>
 800b41e:	4650      	mov	r0, sl
 800b420:	4659      	mov	r1, fp
 800b422:	e7e7      	b.n	800b3f4 <_strtod_l+0x84>
 800b424:	2100      	movs	r1, #0
 800b426:	e7ef      	b.n	800b408 <_strtod_l+0x98>
 800b428:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b42a:	b13a      	cbz	r2, 800b43c <_strtod_l+0xcc>
 800b42c:	2135      	movs	r1, #53	@ 0x35
 800b42e:	a81c      	add	r0, sp, #112	@ 0x70
 800b430:	f7ff ff36 	bl	800b2a0 <__copybits>
 800b434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b436:	9805      	ldr	r0, [sp, #20]
 800b438:	f7ff fb10 	bl	800aa5c <_Bfree>
 800b43c:	3e01      	subs	r6, #1
 800b43e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b440:	2e04      	cmp	r6, #4
 800b442:	d806      	bhi.n	800b452 <_strtod_l+0xe2>
 800b444:	e8df f006 	tbb	[pc, r6]
 800b448:	201d0314 	.word	0x201d0314
 800b44c:	14          	.byte	0x14
 800b44d:	00          	.byte	0x00
 800b44e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b452:	05e1      	lsls	r1, r4, #23
 800b454:	bf48      	it	mi
 800b456:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b45a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b45e:	0d1b      	lsrs	r3, r3, #20
 800b460:	051b      	lsls	r3, r3, #20
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1bd      	bne.n	800b3e2 <_strtod_l+0x72>
 800b466:	f7fe fb2b 	bl	8009ac0 <__errno>
 800b46a:	2322      	movs	r3, #34	@ 0x22
 800b46c:	6003      	str	r3, [r0, #0]
 800b46e:	e7b8      	b.n	800b3e2 <_strtod_l+0x72>
 800b470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b474:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b478:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b47c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b480:	e7e7      	b.n	800b452 <_strtod_l+0xe2>
 800b482:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800b5fc <_strtod_l+0x28c>
 800b486:	e7e4      	b.n	800b452 <_strtod_l+0xe2>
 800b488:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b48c:	f04f 3aff 	mov.w	sl, #4294967295
 800b490:	e7df      	b.n	800b452 <_strtod_l+0xe2>
 800b492:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b494:	1c5a      	adds	r2, r3, #1
 800b496:	9219      	str	r2, [sp, #100]	@ 0x64
 800b498:	785b      	ldrb	r3, [r3, #1]
 800b49a:	2b30      	cmp	r3, #48	@ 0x30
 800b49c:	d0f9      	beq.n	800b492 <_strtod_l+0x122>
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d09f      	beq.n	800b3e2 <_strtod_l+0x72>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4a8:	220a      	movs	r2, #10
 800b4aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	461f      	mov	r7, r3
 800b4b0:	9308      	str	r3, [sp, #32]
 800b4b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4b4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b4b6:	7805      	ldrb	r5, [r0, #0]
 800b4b8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b4bc:	b2d9      	uxtb	r1, r3
 800b4be:	2909      	cmp	r1, #9
 800b4c0:	d928      	bls.n	800b514 <_strtod_l+0x1a4>
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	494e      	ldr	r1, [pc, #312]	@ (800b600 <_strtod_l+0x290>)
 800b4c6:	f000 ffc7 	bl	800c458 <strncmp>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d032      	beq.n	800b534 <_strtod_l+0x1c4>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	462a      	mov	r2, r5
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	463d      	mov	r5, r7
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2a65      	cmp	r2, #101	@ 0x65
 800b4da:	d001      	beq.n	800b4e0 <_strtod_l+0x170>
 800b4dc:	2a45      	cmp	r2, #69	@ 0x45
 800b4de:	d114      	bne.n	800b50a <_strtod_l+0x19a>
 800b4e0:	b91d      	cbnz	r5, 800b4ea <_strtod_l+0x17a>
 800b4e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4e4:	4302      	orrs	r2, r0
 800b4e6:	d095      	beq.n	800b414 <_strtod_l+0xa4>
 800b4e8:	2500      	movs	r5, #0
 800b4ea:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b4ec:	1c62      	adds	r2, r4, #1
 800b4ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4f0:	7862      	ldrb	r2, [r4, #1]
 800b4f2:	2a2b      	cmp	r2, #43	@ 0x2b
 800b4f4:	d077      	beq.n	800b5e6 <_strtod_l+0x276>
 800b4f6:	2a2d      	cmp	r2, #45	@ 0x2d
 800b4f8:	d07b      	beq.n	800b5f2 <_strtod_l+0x282>
 800b4fa:	f04f 0c00 	mov.w	ip, #0
 800b4fe:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b502:	2909      	cmp	r1, #9
 800b504:	f240 8082 	bls.w	800b60c <_strtod_l+0x29c>
 800b508:	9419      	str	r4, [sp, #100]	@ 0x64
 800b50a:	f04f 0800 	mov.w	r8, #0
 800b50e:	e0a2      	b.n	800b656 <_strtod_l+0x2e6>
 800b510:	2300      	movs	r3, #0
 800b512:	e7c7      	b.n	800b4a4 <_strtod_l+0x134>
 800b514:	2f08      	cmp	r7, #8
 800b516:	bfd5      	itete	le
 800b518:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b51a:	9908      	ldrgt	r1, [sp, #32]
 800b51c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b520:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b524:	f100 0001 	add.w	r0, r0, #1
 800b528:	bfd4      	ite	le
 800b52a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b52c:	9308      	strgt	r3, [sp, #32]
 800b52e:	3701      	adds	r7, #1
 800b530:	9019      	str	r0, [sp, #100]	@ 0x64
 800b532:	e7bf      	b.n	800b4b4 <_strtod_l+0x144>
 800b534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	9219      	str	r2, [sp, #100]	@ 0x64
 800b53a:	785a      	ldrb	r2, [r3, #1]
 800b53c:	b37f      	cbz	r7, 800b59e <_strtod_l+0x22e>
 800b53e:	4681      	mov	r9, r0
 800b540:	463d      	mov	r5, r7
 800b542:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b546:	2b09      	cmp	r3, #9
 800b548:	d912      	bls.n	800b570 <_strtod_l+0x200>
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7c4      	b.n	800b4d8 <_strtod_l+0x168>
 800b54e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b550:	3001      	adds	r0, #1
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	9219      	str	r2, [sp, #100]	@ 0x64
 800b556:	785a      	ldrb	r2, [r3, #1]
 800b558:	2a30      	cmp	r2, #48	@ 0x30
 800b55a:	d0f8      	beq.n	800b54e <_strtod_l+0x1de>
 800b55c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b560:	2b08      	cmp	r3, #8
 800b562:	f200 84cb 	bhi.w	800befc <_strtod_l+0xb8c>
 800b566:	4681      	mov	r9, r0
 800b568:	2000      	movs	r0, #0
 800b56a:	4605      	mov	r5, r0
 800b56c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b56e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b570:	3a30      	subs	r2, #48	@ 0x30
 800b572:	f100 0301 	add.w	r3, r0, #1
 800b576:	d02a      	beq.n	800b5ce <_strtod_l+0x25e>
 800b578:	4499      	add	r9, r3
 800b57a:	210a      	movs	r1, #10
 800b57c:	462b      	mov	r3, r5
 800b57e:	eb00 0c05 	add.w	ip, r0, r5
 800b582:	4563      	cmp	r3, ip
 800b584:	d10d      	bne.n	800b5a2 <_strtod_l+0x232>
 800b586:	1c69      	adds	r1, r5, #1
 800b588:	4401      	add	r1, r0
 800b58a:	4428      	add	r0, r5
 800b58c:	2808      	cmp	r0, #8
 800b58e:	dc16      	bgt.n	800b5be <_strtod_l+0x24e>
 800b590:	230a      	movs	r3, #10
 800b592:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b594:	fb03 2300 	mla	r3, r3, r0, r2
 800b598:	930a      	str	r3, [sp, #40]	@ 0x28
 800b59a:	2300      	movs	r3, #0
 800b59c:	e018      	b.n	800b5d0 <_strtod_l+0x260>
 800b59e:	4638      	mov	r0, r7
 800b5a0:	e7da      	b.n	800b558 <_strtod_l+0x1e8>
 800b5a2:	2b08      	cmp	r3, #8
 800b5a4:	f103 0301 	add.w	r3, r3, #1
 800b5a8:	dc03      	bgt.n	800b5b2 <_strtod_l+0x242>
 800b5aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b5ac:	434e      	muls	r6, r1
 800b5ae:	960a      	str	r6, [sp, #40]	@ 0x28
 800b5b0:	e7e7      	b.n	800b582 <_strtod_l+0x212>
 800b5b2:	2b10      	cmp	r3, #16
 800b5b4:	bfde      	ittt	le
 800b5b6:	9e08      	ldrle	r6, [sp, #32]
 800b5b8:	434e      	mulle	r6, r1
 800b5ba:	9608      	strle	r6, [sp, #32]
 800b5bc:	e7e1      	b.n	800b582 <_strtod_l+0x212>
 800b5be:	280f      	cmp	r0, #15
 800b5c0:	dceb      	bgt.n	800b59a <_strtod_l+0x22a>
 800b5c2:	230a      	movs	r3, #10
 800b5c4:	9808      	ldr	r0, [sp, #32]
 800b5c6:	fb03 2300 	mla	r3, r3, r0, r2
 800b5ca:	9308      	str	r3, [sp, #32]
 800b5cc:	e7e5      	b.n	800b59a <_strtod_l+0x22a>
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b5d2:	460d      	mov	r5, r1
 800b5d4:	1c50      	adds	r0, r2, #1
 800b5d6:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5d8:	7852      	ldrb	r2, [r2, #1]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	e7b1      	b.n	800b542 <_strtod_l+0x1d2>
 800b5de:	f04f 0900 	mov.w	r9, #0
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e77d      	b.n	800b4e2 <_strtod_l+0x172>
 800b5e6:	f04f 0c00 	mov.w	ip, #0
 800b5ea:	1ca2      	adds	r2, r4, #2
 800b5ec:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5ee:	78a2      	ldrb	r2, [r4, #2]
 800b5f0:	e785      	b.n	800b4fe <_strtod_l+0x18e>
 800b5f2:	f04f 0c01 	mov.w	ip, #1
 800b5f6:	e7f8      	b.n	800b5ea <_strtod_l+0x27a>
 800b5f8:	0800dd28 	.word	0x0800dd28
 800b5fc:	7ff00000 	.word	0x7ff00000
 800b600:	0800dd10 	.word	0x0800dd10
 800b604:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b606:	1c51      	adds	r1, r2, #1
 800b608:	9119      	str	r1, [sp, #100]	@ 0x64
 800b60a:	7852      	ldrb	r2, [r2, #1]
 800b60c:	2a30      	cmp	r2, #48	@ 0x30
 800b60e:	d0f9      	beq.n	800b604 <_strtod_l+0x294>
 800b610:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b614:	2908      	cmp	r1, #8
 800b616:	f63f af78 	bhi.w	800b50a <_strtod_l+0x19a>
 800b61a:	f04f 080a 	mov.w	r8, #10
 800b61e:	3a30      	subs	r2, #48	@ 0x30
 800b620:	920e      	str	r2, [sp, #56]	@ 0x38
 800b622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b624:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b626:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b628:	1c56      	adds	r6, r2, #1
 800b62a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b62c:	7852      	ldrb	r2, [r2, #1]
 800b62e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b632:	f1be 0f09 	cmp.w	lr, #9
 800b636:	d939      	bls.n	800b6ac <_strtod_l+0x33c>
 800b638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b63a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b63e:	1a76      	subs	r6, r6, r1
 800b640:	2e08      	cmp	r6, #8
 800b642:	dc03      	bgt.n	800b64c <_strtod_l+0x2dc>
 800b644:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b646:	4588      	cmp	r8, r1
 800b648:	bfa8      	it	ge
 800b64a:	4688      	movge	r8, r1
 800b64c:	f1bc 0f00 	cmp.w	ip, #0
 800b650:	d001      	beq.n	800b656 <_strtod_l+0x2e6>
 800b652:	f1c8 0800 	rsb	r8, r8, #0
 800b656:	2d00      	cmp	r5, #0
 800b658:	d14e      	bne.n	800b6f8 <_strtod_l+0x388>
 800b65a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b65c:	4308      	orrs	r0, r1
 800b65e:	f47f aec0 	bne.w	800b3e2 <_strtod_l+0x72>
 800b662:	2b00      	cmp	r3, #0
 800b664:	f47f aed6 	bne.w	800b414 <_strtod_l+0xa4>
 800b668:	2a69      	cmp	r2, #105	@ 0x69
 800b66a:	d028      	beq.n	800b6be <_strtod_l+0x34e>
 800b66c:	dc25      	bgt.n	800b6ba <_strtod_l+0x34a>
 800b66e:	2a49      	cmp	r2, #73	@ 0x49
 800b670:	d025      	beq.n	800b6be <_strtod_l+0x34e>
 800b672:	2a4e      	cmp	r2, #78	@ 0x4e
 800b674:	f47f aece 	bne.w	800b414 <_strtod_l+0xa4>
 800b678:	499a      	ldr	r1, [pc, #616]	@ (800b8e4 <_strtod_l+0x574>)
 800b67a:	a819      	add	r0, sp, #100	@ 0x64
 800b67c:	f001 f9de 	bl	800ca3c <__match>
 800b680:	2800      	cmp	r0, #0
 800b682:	f43f aec7 	beq.w	800b414 <_strtod_l+0xa4>
 800b686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b28      	cmp	r3, #40	@ 0x28
 800b68c:	d12e      	bne.n	800b6ec <_strtod_l+0x37c>
 800b68e:	4996      	ldr	r1, [pc, #600]	@ (800b8e8 <_strtod_l+0x578>)
 800b690:	aa1c      	add	r2, sp, #112	@ 0x70
 800b692:	a819      	add	r0, sp, #100	@ 0x64
 800b694:	f001 f9e6 	bl	800ca64 <__hexnan>
 800b698:	2805      	cmp	r0, #5
 800b69a:	d127      	bne.n	800b6ec <_strtod_l+0x37c>
 800b69c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b69e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b6a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b6a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b6aa:	e69a      	b.n	800b3e2 <_strtod_l+0x72>
 800b6ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b6ae:	fb08 2101 	mla	r1, r8, r1, r2
 800b6b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b6b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6b8:	e7b5      	b.n	800b626 <_strtod_l+0x2b6>
 800b6ba:	2a6e      	cmp	r2, #110	@ 0x6e
 800b6bc:	e7da      	b.n	800b674 <_strtod_l+0x304>
 800b6be:	498b      	ldr	r1, [pc, #556]	@ (800b8ec <_strtod_l+0x57c>)
 800b6c0:	a819      	add	r0, sp, #100	@ 0x64
 800b6c2:	f001 f9bb 	bl	800ca3c <__match>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	f43f aea4 	beq.w	800b414 <_strtod_l+0xa4>
 800b6cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6ce:	4988      	ldr	r1, [pc, #544]	@ (800b8f0 <_strtod_l+0x580>)
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	a819      	add	r0, sp, #100	@ 0x64
 800b6d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6d6:	f001 f9b1 	bl	800ca3c <__match>
 800b6da:	b910      	cbnz	r0, 800b6e2 <_strtod_l+0x372>
 800b6dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6de:	3301      	adds	r3, #1
 800b6e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b6e2:	f04f 0a00 	mov.w	sl, #0
 800b6e6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800b8f4 <_strtod_l+0x584>
 800b6ea:	e67a      	b.n	800b3e2 <_strtod_l+0x72>
 800b6ec:	4882      	ldr	r0, [pc, #520]	@ (800b8f8 <_strtod_l+0x588>)
 800b6ee:	f000 fee3 	bl	800c4b8 <nan>
 800b6f2:	4682      	mov	sl, r0
 800b6f4:	468b      	mov	fp, r1
 800b6f6:	e674      	b.n	800b3e2 <_strtod_l+0x72>
 800b6f8:	eba8 0309 	sub.w	r3, r8, r9
 800b6fc:	2f00      	cmp	r7, #0
 800b6fe:	bf08      	it	eq
 800b700:	462f      	moveq	r7, r5
 800b702:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b704:	2d10      	cmp	r5, #16
 800b706:	462c      	mov	r4, r5
 800b708:	9309      	str	r3, [sp, #36]	@ 0x24
 800b70a:	bfa8      	it	ge
 800b70c:	2410      	movge	r4, #16
 800b70e:	f7f4 fed5 	bl	80004bc <__aeabi_ui2d>
 800b712:	2d09      	cmp	r5, #9
 800b714:	4682      	mov	sl, r0
 800b716:	468b      	mov	fp, r1
 800b718:	dc11      	bgt.n	800b73e <_strtod_l+0x3ce>
 800b71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f43f ae60 	beq.w	800b3e2 <_strtod_l+0x72>
 800b722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b724:	dd76      	ble.n	800b814 <_strtod_l+0x4a4>
 800b726:	2b16      	cmp	r3, #22
 800b728:	dc5d      	bgt.n	800b7e6 <_strtod_l+0x476>
 800b72a:	4974      	ldr	r1, [pc, #464]	@ (800b8fc <_strtod_l+0x58c>)
 800b72c:	4652      	mov	r2, sl
 800b72e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b732:	465b      	mov	r3, fp
 800b734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b738:	f7f4 ff3a 	bl	80005b0 <__aeabi_dmul>
 800b73c:	e7d9      	b.n	800b6f2 <_strtod_l+0x382>
 800b73e:	4b6f      	ldr	r3, [pc, #444]	@ (800b8fc <_strtod_l+0x58c>)
 800b740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b744:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b748:	f7f4 ff32 	bl	80005b0 <__aeabi_dmul>
 800b74c:	4682      	mov	sl, r0
 800b74e:	9808      	ldr	r0, [sp, #32]
 800b750:	468b      	mov	fp, r1
 800b752:	f7f4 feb3 	bl	80004bc <__aeabi_ui2d>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	4650      	mov	r0, sl
 800b75c:	4659      	mov	r1, fp
 800b75e:	f7f4 fd71 	bl	8000244 <__adddf3>
 800b762:	2d0f      	cmp	r5, #15
 800b764:	4682      	mov	sl, r0
 800b766:	468b      	mov	fp, r1
 800b768:	ddd7      	ble.n	800b71a <_strtod_l+0x3aa>
 800b76a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b76c:	1b2c      	subs	r4, r5, r4
 800b76e:	441c      	add	r4, r3
 800b770:	2c00      	cmp	r4, #0
 800b772:	f340 8096 	ble.w	800b8a2 <_strtod_l+0x532>
 800b776:	f014 030f 	ands.w	r3, r4, #15
 800b77a:	d00a      	beq.n	800b792 <_strtod_l+0x422>
 800b77c:	495f      	ldr	r1, [pc, #380]	@ (800b8fc <_strtod_l+0x58c>)
 800b77e:	4652      	mov	r2, sl
 800b780:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b784:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b788:	465b      	mov	r3, fp
 800b78a:	f7f4 ff11 	bl	80005b0 <__aeabi_dmul>
 800b78e:	4682      	mov	sl, r0
 800b790:	468b      	mov	fp, r1
 800b792:	f034 040f 	bics.w	r4, r4, #15
 800b796:	d073      	beq.n	800b880 <_strtod_l+0x510>
 800b798:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b79c:	dd48      	ble.n	800b830 <_strtod_l+0x4c0>
 800b79e:	2400      	movs	r4, #0
 800b7a0:	46a0      	mov	r8, r4
 800b7a2:	46a1      	mov	r9, r4
 800b7a4:	940a      	str	r4, [sp, #40]	@ 0x28
 800b7a6:	2322      	movs	r3, #34	@ 0x22
 800b7a8:	f04f 0a00 	mov.w	sl, #0
 800b7ac:	9a05      	ldr	r2, [sp, #20]
 800b7ae:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800b8f4 <_strtod_l+0x584>
 800b7b2:	6013      	str	r3, [r2, #0]
 800b7b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f43f ae13 	beq.w	800b3e2 <_strtod_l+0x72>
 800b7bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b7be:	9805      	ldr	r0, [sp, #20]
 800b7c0:	f7ff f94c 	bl	800aa5c <_Bfree>
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	9805      	ldr	r0, [sp, #20]
 800b7c8:	f7ff f948 	bl	800aa5c <_Bfree>
 800b7cc:	4641      	mov	r1, r8
 800b7ce:	9805      	ldr	r0, [sp, #20]
 800b7d0:	f7ff f944 	bl	800aa5c <_Bfree>
 800b7d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7d6:	9805      	ldr	r0, [sp, #20]
 800b7d8:	f7ff f940 	bl	800aa5c <_Bfree>
 800b7dc:	4621      	mov	r1, r4
 800b7de:	9805      	ldr	r0, [sp, #20]
 800b7e0:	f7ff f93c 	bl	800aa5c <_Bfree>
 800b7e4:	e5fd      	b.n	800b3e2 <_strtod_l+0x72>
 800b7e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	dbbc      	blt.n	800b76a <_strtod_l+0x3fa>
 800b7f0:	4c42      	ldr	r4, [pc, #264]	@ (800b8fc <_strtod_l+0x58c>)
 800b7f2:	f1c5 050f 	rsb	r5, r5, #15
 800b7f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b7fa:	4652      	mov	r2, sl
 800b7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b800:	465b      	mov	r3, fp
 800b802:	f7f4 fed5 	bl	80005b0 <__aeabi_dmul>
 800b806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b808:	1b5d      	subs	r5, r3, r5
 800b80a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b80e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b812:	e791      	b.n	800b738 <_strtod_l+0x3c8>
 800b814:	3316      	adds	r3, #22
 800b816:	dba8      	blt.n	800b76a <_strtod_l+0x3fa>
 800b818:	4b38      	ldr	r3, [pc, #224]	@ (800b8fc <_strtod_l+0x58c>)
 800b81a:	eba9 0808 	sub.w	r8, r9, r8
 800b81e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b822:	4650      	mov	r0, sl
 800b824:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b828:	4659      	mov	r1, fp
 800b82a:	f7f4 ffeb 	bl	8000804 <__aeabi_ddiv>
 800b82e:	e760      	b.n	800b6f2 <_strtod_l+0x382>
 800b830:	4b33      	ldr	r3, [pc, #204]	@ (800b900 <_strtod_l+0x590>)
 800b832:	4650      	mov	r0, sl
 800b834:	9308      	str	r3, [sp, #32]
 800b836:	2300      	movs	r3, #0
 800b838:	4659      	mov	r1, fp
 800b83a:	461e      	mov	r6, r3
 800b83c:	1124      	asrs	r4, r4, #4
 800b83e:	2c01      	cmp	r4, #1
 800b840:	dc21      	bgt.n	800b886 <_strtod_l+0x516>
 800b842:	b10b      	cbz	r3, 800b848 <_strtod_l+0x4d8>
 800b844:	4682      	mov	sl, r0
 800b846:	468b      	mov	fp, r1
 800b848:	492d      	ldr	r1, [pc, #180]	@ (800b900 <_strtod_l+0x590>)
 800b84a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b84e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b852:	4652      	mov	r2, sl
 800b854:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b858:	465b      	mov	r3, fp
 800b85a:	f7f4 fea9 	bl	80005b0 <__aeabi_dmul>
 800b85e:	4b25      	ldr	r3, [pc, #148]	@ (800b8f4 <_strtod_l+0x584>)
 800b860:	460a      	mov	r2, r1
 800b862:	400b      	ands	r3, r1
 800b864:	4927      	ldr	r1, [pc, #156]	@ (800b904 <_strtod_l+0x594>)
 800b866:	4682      	mov	sl, r0
 800b868:	428b      	cmp	r3, r1
 800b86a:	d898      	bhi.n	800b79e <_strtod_l+0x42e>
 800b86c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b870:	428b      	cmp	r3, r1
 800b872:	bf86      	itte	hi
 800b874:	f04f 3aff 	movhi.w	sl, #4294967295
 800b878:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b908 <_strtod_l+0x598>
 800b87c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b880:	2300      	movs	r3, #0
 800b882:	9308      	str	r3, [sp, #32]
 800b884:	e07a      	b.n	800b97c <_strtod_l+0x60c>
 800b886:	07e2      	lsls	r2, r4, #31
 800b888:	d505      	bpl.n	800b896 <_strtod_l+0x526>
 800b88a:	9b08      	ldr	r3, [sp, #32]
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fe8e 	bl	80005b0 <__aeabi_dmul>
 800b894:	2301      	movs	r3, #1
 800b896:	9a08      	ldr	r2, [sp, #32]
 800b898:	3601      	adds	r6, #1
 800b89a:	3208      	adds	r2, #8
 800b89c:	1064      	asrs	r4, r4, #1
 800b89e:	9208      	str	r2, [sp, #32]
 800b8a0:	e7cd      	b.n	800b83e <_strtod_l+0x4ce>
 800b8a2:	d0ed      	beq.n	800b880 <_strtod_l+0x510>
 800b8a4:	4264      	negs	r4, r4
 800b8a6:	f014 020f 	ands.w	r2, r4, #15
 800b8aa:	d00a      	beq.n	800b8c2 <_strtod_l+0x552>
 800b8ac:	4b13      	ldr	r3, [pc, #76]	@ (800b8fc <_strtod_l+0x58c>)
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8b4:	4659      	mov	r1, fp
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	f7f4 ffa3 	bl	8000804 <__aeabi_ddiv>
 800b8be:	4682      	mov	sl, r0
 800b8c0:	468b      	mov	fp, r1
 800b8c2:	1124      	asrs	r4, r4, #4
 800b8c4:	d0dc      	beq.n	800b880 <_strtod_l+0x510>
 800b8c6:	2c1f      	cmp	r4, #31
 800b8c8:	dd20      	ble.n	800b90c <_strtod_l+0x59c>
 800b8ca:	2400      	movs	r4, #0
 800b8cc:	46a0      	mov	r8, r4
 800b8ce:	46a1      	mov	r9, r4
 800b8d0:	940a      	str	r4, [sp, #40]	@ 0x28
 800b8d2:	2322      	movs	r3, #34	@ 0x22
 800b8d4:	9a05      	ldr	r2, [sp, #20]
 800b8d6:	f04f 0a00 	mov.w	sl, #0
 800b8da:	f04f 0b00 	mov.w	fp, #0
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	e768      	b.n	800b7b4 <_strtod_l+0x444>
 800b8e2:	bf00      	nop
 800b8e4:	0800dafb 	.word	0x0800dafb
 800b8e8:	0800dd14 	.word	0x0800dd14
 800b8ec:	0800daf3 	.word	0x0800daf3
 800b8f0:	0800db2a 	.word	0x0800db2a
 800b8f4:	7ff00000 	.word	0x7ff00000
 800b8f8:	0800debd 	.word	0x0800debd
 800b8fc:	0800dc48 	.word	0x0800dc48
 800b900:	0800dc20 	.word	0x0800dc20
 800b904:	7ca00000 	.word	0x7ca00000
 800b908:	7fefffff 	.word	0x7fefffff
 800b90c:	f014 0310 	ands.w	r3, r4, #16
 800b910:	bf18      	it	ne
 800b912:	236a      	movne	r3, #106	@ 0x6a
 800b914:	4650      	mov	r0, sl
 800b916:	9308      	str	r3, [sp, #32]
 800b918:	4659      	mov	r1, fp
 800b91a:	2300      	movs	r3, #0
 800b91c:	4ea9      	ldr	r6, [pc, #676]	@ (800bbc4 <_strtod_l+0x854>)
 800b91e:	07e2      	lsls	r2, r4, #31
 800b920:	d504      	bpl.n	800b92c <_strtod_l+0x5bc>
 800b922:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b926:	f7f4 fe43 	bl	80005b0 <__aeabi_dmul>
 800b92a:	2301      	movs	r3, #1
 800b92c:	1064      	asrs	r4, r4, #1
 800b92e:	f106 0608 	add.w	r6, r6, #8
 800b932:	d1f4      	bne.n	800b91e <_strtod_l+0x5ae>
 800b934:	b10b      	cbz	r3, 800b93a <_strtod_l+0x5ca>
 800b936:	4682      	mov	sl, r0
 800b938:	468b      	mov	fp, r1
 800b93a:	9b08      	ldr	r3, [sp, #32]
 800b93c:	b1b3      	cbz	r3, 800b96c <_strtod_l+0x5fc>
 800b93e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b946:	2b00      	cmp	r3, #0
 800b948:	4659      	mov	r1, fp
 800b94a:	dd0f      	ble.n	800b96c <_strtod_l+0x5fc>
 800b94c:	2b1f      	cmp	r3, #31
 800b94e:	dd57      	ble.n	800ba00 <_strtod_l+0x690>
 800b950:	2b34      	cmp	r3, #52	@ 0x34
 800b952:	bfd8      	it	le
 800b954:	f04f 33ff 	movle.w	r3, #4294967295
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	bfcf      	iteee	gt
 800b95e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b962:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b966:	4093      	lslle	r3, r2
 800b968:	ea03 0b01 	andle.w	fp, r3, r1
 800b96c:	2200      	movs	r2, #0
 800b96e:	2300      	movs	r3, #0
 800b970:	4650      	mov	r0, sl
 800b972:	4659      	mov	r1, fp
 800b974:	f7f5 f884 	bl	8000a80 <__aeabi_dcmpeq>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d1a6      	bne.n	800b8ca <_strtod_l+0x55a>
 800b97c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97e:	463a      	mov	r2, r7
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b984:	462b      	mov	r3, r5
 800b986:	9805      	ldr	r0, [sp, #20]
 800b988:	f7ff f8d0 	bl	800ab2c <__s2b>
 800b98c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b98e:	2800      	cmp	r0, #0
 800b990:	f43f af05 	beq.w	800b79e <_strtod_l+0x42e>
 800b994:	2400      	movs	r4, #0
 800b996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b998:	eba9 0308 	sub.w	r3, r9, r8
 800b99c:	2a00      	cmp	r2, #0
 800b99e:	bfa8      	it	ge
 800b9a0:	2300      	movge	r3, #0
 800b9a2:	46a0      	mov	r8, r4
 800b9a4:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b9aa:	9316      	str	r3, [sp, #88]	@ 0x58
 800b9ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ae:	9805      	ldr	r0, [sp, #20]
 800b9b0:	6859      	ldr	r1, [r3, #4]
 800b9b2:	f7ff f813 	bl	800a9dc <_Balloc>
 800b9b6:	4681      	mov	r9, r0
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	f43f aef4 	beq.w	800b7a6 <_strtod_l+0x436>
 800b9be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9c0:	300c      	adds	r0, #12
 800b9c2:	691a      	ldr	r2, [r3, #16]
 800b9c4:	f103 010c 	add.w	r1, r3, #12
 800b9c8:	3202      	adds	r2, #2
 800b9ca:	0092      	lsls	r2, r2, #2
 800b9cc:	f000 fd66 	bl	800c49c <memcpy>
 800b9d0:	ab1c      	add	r3, sp, #112	@ 0x70
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	4652      	mov	r2, sl
 800b9da:	465b      	mov	r3, fp
 800b9dc:	9805      	ldr	r0, [sp, #20]
 800b9de:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b9e2:	f7ff fbd5 	bl	800b190 <__d2b>
 800b9e6:	901a      	str	r0, [sp, #104]	@ 0x68
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	f43f aedc 	beq.w	800b7a6 <_strtod_l+0x436>
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	9805      	ldr	r0, [sp, #20]
 800b9f2:	f7ff f931 	bl	800ac58 <__i2b>
 800b9f6:	4680      	mov	r8, r0
 800b9f8:	b948      	cbnz	r0, 800ba0e <_strtod_l+0x69e>
 800b9fa:	f04f 0800 	mov.w	r8, #0
 800b9fe:	e6d2      	b.n	800b7a6 <_strtod_l+0x436>
 800ba00:	f04f 32ff 	mov.w	r2, #4294967295
 800ba04:	fa02 f303 	lsl.w	r3, r2, r3
 800ba08:	ea03 0a0a 	and.w	sl, r3, sl
 800ba0c:	e7ae      	b.n	800b96c <_strtod_l+0x5fc>
 800ba0e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba10:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba12:	2d00      	cmp	r5, #0
 800ba14:	bfab      	itete	ge
 800ba16:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba18:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba1a:	18ef      	addge	r7, r5, r3
 800ba1c:	1b5e      	sublt	r6, r3, r5
 800ba1e:	9b08      	ldr	r3, [sp, #32]
 800ba20:	bfa8      	it	ge
 800ba22:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ba24:	eba5 0503 	sub.w	r5, r5, r3
 800ba28:	4415      	add	r5, r2
 800ba2a:	4b67      	ldr	r3, [pc, #412]	@ (800bbc8 <_strtod_l+0x858>)
 800ba2c:	f105 35ff 	add.w	r5, r5, #4294967295
 800ba30:	bfb8      	it	lt
 800ba32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ba34:	429d      	cmp	r5, r3
 800ba36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba3a:	da50      	bge.n	800bade <_strtod_l+0x76e>
 800ba3c:	1b5b      	subs	r3, r3, r5
 800ba3e:	2b1f      	cmp	r3, #31
 800ba40:	f04f 0101 	mov.w	r1, #1
 800ba44:	eba2 0203 	sub.w	r2, r2, r3
 800ba48:	dc3d      	bgt.n	800bac6 <_strtod_l+0x756>
 800ba4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba50:	2300      	movs	r3, #0
 800ba52:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba54:	18bd      	adds	r5, r7, r2
 800ba56:	9b08      	ldr	r3, [sp, #32]
 800ba58:	42af      	cmp	r7, r5
 800ba5a:	4416      	add	r6, r2
 800ba5c:	441e      	add	r6, r3
 800ba5e:	463b      	mov	r3, r7
 800ba60:	bfa8      	it	ge
 800ba62:	462b      	movge	r3, r5
 800ba64:	42b3      	cmp	r3, r6
 800ba66:	bfa8      	it	ge
 800ba68:	4633      	movge	r3, r6
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	bfc2      	ittt	gt
 800ba6e:	1aed      	subgt	r5, r5, r3
 800ba70:	1af6      	subgt	r6, r6, r3
 800ba72:	1aff      	subgt	r7, r7, r3
 800ba74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	dd16      	ble.n	800baa8 <_strtod_l+0x738>
 800ba7a:	4641      	mov	r1, r8
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	9805      	ldr	r0, [sp, #20]
 800ba80:	f7ff f9a8 	bl	800add4 <__pow5mult>
 800ba84:	4680      	mov	r8, r0
 800ba86:	2800      	cmp	r0, #0
 800ba88:	d0b7      	beq.n	800b9fa <_strtod_l+0x68a>
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ba8e:	9805      	ldr	r0, [sp, #20]
 800ba90:	f7ff f8f8 	bl	800ac84 <__multiply>
 800ba94:	900e      	str	r0, [sp, #56]	@ 0x38
 800ba96:	2800      	cmp	r0, #0
 800ba98:	f43f ae85 	beq.w	800b7a6 <_strtod_l+0x436>
 800ba9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba9e:	9805      	ldr	r0, [sp, #20]
 800baa0:	f7fe ffdc 	bl	800aa5c <_Bfree>
 800baa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa6:	931a      	str	r3, [sp, #104]	@ 0x68
 800baa8:	2d00      	cmp	r5, #0
 800baaa:	dc1d      	bgt.n	800bae8 <_strtod_l+0x778>
 800baac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd23      	ble.n	800bafa <_strtod_l+0x78a>
 800bab2:	4649      	mov	r1, r9
 800bab4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bab6:	9805      	ldr	r0, [sp, #20]
 800bab8:	f7ff f98c 	bl	800add4 <__pow5mult>
 800babc:	4681      	mov	r9, r0
 800babe:	b9e0      	cbnz	r0, 800bafa <_strtod_l+0x78a>
 800bac0:	f04f 0900 	mov.w	r9, #0
 800bac4:	e66f      	b.n	800b7a6 <_strtod_l+0x436>
 800bac6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800baca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bace:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bad2:	35e2      	adds	r5, #226	@ 0xe2
 800bad4:	fa01 f305 	lsl.w	r3, r1, r5
 800bad8:	9310      	str	r3, [sp, #64]	@ 0x40
 800bada:	9113      	str	r1, [sp, #76]	@ 0x4c
 800badc:	e7ba      	b.n	800ba54 <_strtod_l+0x6e4>
 800bade:	2300      	movs	r3, #0
 800bae0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bae2:	2301      	movs	r3, #1
 800bae4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bae6:	e7b5      	b.n	800ba54 <_strtod_l+0x6e4>
 800bae8:	462a      	mov	r2, r5
 800baea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800baec:	9805      	ldr	r0, [sp, #20]
 800baee:	f7ff f9cb 	bl	800ae88 <__lshift>
 800baf2:	901a      	str	r0, [sp, #104]	@ 0x68
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d1d9      	bne.n	800baac <_strtod_l+0x73c>
 800baf8:	e655      	b.n	800b7a6 <_strtod_l+0x436>
 800bafa:	2e00      	cmp	r6, #0
 800bafc:	dd07      	ble.n	800bb0e <_strtod_l+0x79e>
 800bafe:	4649      	mov	r1, r9
 800bb00:	4632      	mov	r2, r6
 800bb02:	9805      	ldr	r0, [sp, #20]
 800bb04:	f7ff f9c0 	bl	800ae88 <__lshift>
 800bb08:	4681      	mov	r9, r0
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d0d8      	beq.n	800bac0 <_strtod_l+0x750>
 800bb0e:	2f00      	cmp	r7, #0
 800bb10:	dd08      	ble.n	800bb24 <_strtod_l+0x7b4>
 800bb12:	4641      	mov	r1, r8
 800bb14:	463a      	mov	r2, r7
 800bb16:	9805      	ldr	r0, [sp, #20]
 800bb18:	f7ff f9b6 	bl	800ae88 <__lshift>
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f43f ae41 	beq.w	800b7a6 <_strtod_l+0x436>
 800bb24:	464a      	mov	r2, r9
 800bb26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb28:	9805      	ldr	r0, [sp, #20]
 800bb2a:	f7ff fa35 	bl	800af98 <__mdiff>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	2800      	cmp	r0, #0
 800bb32:	f43f ae38 	beq.w	800b7a6 <_strtod_l+0x436>
 800bb36:	68c3      	ldr	r3, [r0, #12]
 800bb38:	4641      	mov	r1, r8
 800bb3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	60c3      	str	r3, [r0, #12]
 800bb40:	f7ff fa0e 	bl	800af60 <__mcmp>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	da45      	bge.n	800bbd4 <_strtod_l+0x864>
 800bb48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb4a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb4e:	d16b      	bne.n	800bc28 <_strtod_l+0x8b8>
 800bb50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d167      	bne.n	800bc28 <_strtod_l+0x8b8>
 800bb58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb5c:	0d1b      	lsrs	r3, r3, #20
 800bb5e:	051b      	lsls	r3, r3, #20
 800bb60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb64:	d960      	bls.n	800bc28 <_strtod_l+0x8b8>
 800bb66:	6963      	ldr	r3, [r4, #20]
 800bb68:	b913      	cbnz	r3, 800bb70 <_strtod_l+0x800>
 800bb6a:	6923      	ldr	r3, [r4, #16]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	dd5b      	ble.n	800bc28 <_strtod_l+0x8b8>
 800bb70:	4621      	mov	r1, r4
 800bb72:	2201      	movs	r2, #1
 800bb74:	9805      	ldr	r0, [sp, #20]
 800bb76:	f7ff f987 	bl	800ae88 <__lshift>
 800bb7a:	4641      	mov	r1, r8
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	f7ff f9ef 	bl	800af60 <__mcmp>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	dd50      	ble.n	800bc28 <_strtod_l+0x8b8>
 800bb86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bb8a:	9a08      	ldr	r2, [sp, #32]
 800bb8c:	0d1b      	lsrs	r3, r3, #20
 800bb8e:	051b      	lsls	r3, r3, #20
 800bb90:	2a00      	cmp	r2, #0
 800bb92:	d06a      	beq.n	800bc6a <_strtod_l+0x8fa>
 800bb94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bb98:	d867      	bhi.n	800bc6a <_strtod_l+0x8fa>
 800bb9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bb9e:	f67f ae98 	bls.w	800b8d2 <_strtod_l+0x562>
 800bba2:	4650      	mov	r0, sl
 800bba4:	4659      	mov	r1, fp
 800bba6:	4b09      	ldr	r3, [pc, #36]	@ (800bbcc <_strtod_l+0x85c>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f7f4 fd01 	bl	80005b0 <__aeabi_dmul>
 800bbae:	4b08      	ldr	r3, [pc, #32]	@ (800bbd0 <_strtod_l+0x860>)
 800bbb0:	4682      	mov	sl, r0
 800bbb2:	400b      	ands	r3, r1
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f47f ae00 	bne.w	800b7bc <_strtod_l+0x44c>
 800bbbc:	2322      	movs	r3, #34	@ 0x22
 800bbbe:	9a05      	ldr	r2, [sp, #20]
 800bbc0:	6013      	str	r3, [r2, #0]
 800bbc2:	e5fb      	b.n	800b7bc <_strtod_l+0x44c>
 800bbc4:	0800dd40 	.word	0x0800dd40
 800bbc8:	fffffc02 	.word	0xfffffc02
 800bbcc:	39500000 	.word	0x39500000
 800bbd0:	7ff00000 	.word	0x7ff00000
 800bbd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bbd8:	d165      	bne.n	800bca6 <_strtod_l+0x936>
 800bbda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bbdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbe0:	b35a      	cbz	r2, 800bc3a <_strtod_l+0x8ca>
 800bbe2:	4a99      	ldr	r2, [pc, #612]	@ (800be48 <_strtod_l+0xad8>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d12b      	bne.n	800bc40 <_strtod_l+0x8d0>
 800bbe8:	9b08      	ldr	r3, [sp, #32]
 800bbea:	4651      	mov	r1, sl
 800bbec:	b303      	cbz	r3, 800bc30 <_strtod_l+0x8c0>
 800bbee:	465a      	mov	r2, fp
 800bbf0:	4b96      	ldr	r3, [pc, #600]	@ (800be4c <_strtod_l+0xadc>)
 800bbf2:	4013      	ands	r3, r2
 800bbf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfc:	d81b      	bhi.n	800bc36 <_strtod_l+0x8c6>
 800bbfe:	0d1b      	lsrs	r3, r3, #20
 800bc00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc04:	fa02 f303 	lsl.w	r3, r2, r3
 800bc08:	4299      	cmp	r1, r3
 800bc0a:	d119      	bne.n	800bc40 <_strtod_l+0x8d0>
 800bc0c:	4b90      	ldr	r3, [pc, #576]	@ (800be50 <_strtod_l+0xae0>)
 800bc0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d102      	bne.n	800bc1a <_strtod_l+0x8aa>
 800bc14:	3101      	adds	r1, #1
 800bc16:	f43f adc6 	beq.w	800b7a6 <_strtod_l+0x436>
 800bc1a:	f04f 0a00 	mov.w	sl, #0
 800bc1e:	4b8b      	ldr	r3, [pc, #556]	@ (800be4c <_strtod_l+0xadc>)
 800bc20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc22:	401a      	ands	r2, r3
 800bc24:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bc28:	9b08      	ldr	r3, [sp, #32]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1b9      	bne.n	800bba2 <_strtod_l+0x832>
 800bc2e:	e5c5      	b.n	800b7bc <_strtod_l+0x44c>
 800bc30:	f04f 33ff 	mov.w	r3, #4294967295
 800bc34:	e7e8      	b.n	800bc08 <_strtod_l+0x898>
 800bc36:	4613      	mov	r3, r2
 800bc38:	e7e6      	b.n	800bc08 <_strtod_l+0x898>
 800bc3a:	ea53 030a 	orrs.w	r3, r3, sl
 800bc3e:	d0a2      	beq.n	800bb86 <_strtod_l+0x816>
 800bc40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc42:	b1db      	cbz	r3, 800bc7c <_strtod_l+0x90c>
 800bc44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc46:	4213      	tst	r3, r2
 800bc48:	d0ee      	beq.n	800bc28 <_strtod_l+0x8b8>
 800bc4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc4c:	4650      	mov	r0, sl
 800bc4e:	4659      	mov	r1, fp
 800bc50:	9a08      	ldr	r2, [sp, #32]
 800bc52:	b1bb      	cbz	r3, 800bc84 <_strtod_l+0x914>
 800bc54:	f7ff fb68 	bl	800b328 <sulp>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc60:	f7f4 faf0 	bl	8000244 <__adddf3>
 800bc64:	4682      	mov	sl, r0
 800bc66:	468b      	mov	fp, r1
 800bc68:	e7de      	b.n	800bc28 <_strtod_l+0x8b8>
 800bc6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bc6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bc72:	f04f 3aff 	mov.w	sl, #4294967295
 800bc76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bc7a:	e7d5      	b.n	800bc28 <_strtod_l+0x8b8>
 800bc7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc7e:	ea13 0f0a 	tst.w	r3, sl
 800bc82:	e7e1      	b.n	800bc48 <_strtod_l+0x8d8>
 800bc84:	f7ff fb50 	bl	800b328 <sulp>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc90:	f7f4 fad6 	bl	8000240 <__aeabi_dsub>
 800bc94:	2200      	movs	r2, #0
 800bc96:	2300      	movs	r3, #0
 800bc98:	4682      	mov	sl, r0
 800bc9a:	468b      	mov	fp, r1
 800bc9c:	f7f4 fef0 	bl	8000a80 <__aeabi_dcmpeq>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d0c1      	beq.n	800bc28 <_strtod_l+0x8b8>
 800bca4:	e615      	b.n	800b8d2 <_strtod_l+0x562>
 800bca6:	4641      	mov	r1, r8
 800bca8:	4620      	mov	r0, r4
 800bcaa:	f7ff fac9 	bl	800b240 <__ratio>
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	460f      	mov	r7, r1
 800bcb8:	f7f4 fef6 	bl	8000aa8 <__aeabi_dcmple>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d06d      	beq.n	800bd9c <_strtod_l+0xa2c>
 800bcc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d178      	bne.n	800bdb8 <_strtod_l+0xa48>
 800bcc6:	f1ba 0f00 	cmp.w	sl, #0
 800bcca:	d156      	bne.n	800bd7a <_strtod_l+0xa0a>
 800bccc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d158      	bne.n	800bd88 <_strtod_l+0xa18>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	4b5d      	ldr	r3, [pc, #372]	@ (800be54 <_strtod_l+0xae4>)
 800bcde:	f7f4 fed9 	bl	8000a94 <__aeabi_dcmplt>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d157      	bne.n	800bd96 <_strtod_l+0xa26>
 800bce6:	4630      	mov	r0, r6
 800bce8:	4639      	mov	r1, r7
 800bcea:	2200      	movs	r2, #0
 800bcec:	4b5a      	ldr	r3, [pc, #360]	@ (800be58 <_strtod_l+0xae8>)
 800bcee:	f7f4 fc5f 	bl	80005b0 <__aeabi_dmul>
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	460f      	mov	r7, r1
 800bcf6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bcfa:	9606      	str	r6, [sp, #24]
 800bcfc:	9307      	str	r3, [sp, #28]
 800bcfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd02:	4d52      	ldr	r5, [pc, #328]	@ (800be4c <_strtod_l+0xadc>)
 800bd04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd0a:	401d      	ands	r5, r3
 800bd0c:	4b53      	ldr	r3, [pc, #332]	@ (800be5c <_strtod_l+0xaec>)
 800bd0e:	429d      	cmp	r5, r3
 800bd10:	f040 80aa 	bne.w	800be68 <_strtod_l+0xaf8>
 800bd14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd16:	4650      	mov	r0, sl
 800bd18:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd1c:	4659      	mov	r1, fp
 800bd1e:	f7ff f9cf 	bl	800b0c0 <__ulp>
 800bd22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd26:	f7f4 fc43 	bl	80005b0 <__aeabi_dmul>
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	f7f4 fa89 	bl	8000244 <__adddf3>
 800bd32:	460b      	mov	r3, r1
 800bd34:	4945      	ldr	r1, [pc, #276]	@ (800be4c <_strtod_l+0xadc>)
 800bd36:	4a4a      	ldr	r2, [pc, #296]	@ (800be60 <_strtod_l+0xaf0>)
 800bd38:	4019      	ands	r1, r3
 800bd3a:	4291      	cmp	r1, r2
 800bd3c:	4682      	mov	sl, r0
 800bd3e:	d942      	bls.n	800bdc6 <_strtod_l+0xa56>
 800bd40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bd42:	4b43      	ldr	r3, [pc, #268]	@ (800be50 <_strtod_l+0xae0>)
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d103      	bne.n	800bd50 <_strtod_l+0x9e0>
 800bd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	f43f ad2b 	beq.w	800b7a6 <_strtod_l+0x436>
 800bd50:	f04f 3aff 	mov.w	sl, #4294967295
 800bd54:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800be50 <_strtod_l+0xae0>
 800bd58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bd5a:	9805      	ldr	r0, [sp, #20]
 800bd5c:	f7fe fe7e 	bl	800aa5c <_Bfree>
 800bd60:	4649      	mov	r1, r9
 800bd62:	9805      	ldr	r0, [sp, #20]
 800bd64:	f7fe fe7a 	bl	800aa5c <_Bfree>
 800bd68:	4641      	mov	r1, r8
 800bd6a:	9805      	ldr	r0, [sp, #20]
 800bd6c:	f7fe fe76 	bl	800aa5c <_Bfree>
 800bd70:	4621      	mov	r1, r4
 800bd72:	9805      	ldr	r0, [sp, #20]
 800bd74:	f7fe fe72 	bl	800aa5c <_Bfree>
 800bd78:	e618      	b.n	800b9ac <_strtod_l+0x63c>
 800bd7a:	f1ba 0f01 	cmp.w	sl, #1
 800bd7e:	d103      	bne.n	800bd88 <_strtod_l+0xa18>
 800bd80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f43f ada5 	beq.w	800b8d2 <_strtod_l+0x562>
 800bd88:	2200      	movs	r2, #0
 800bd8a:	4b36      	ldr	r3, [pc, #216]	@ (800be64 <_strtod_l+0xaf4>)
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd92:	4f30      	ldr	r7, [pc, #192]	@ (800be54 <_strtod_l+0xae4>)
 800bd94:	e7b3      	b.n	800bcfe <_strtod_l+0x98e>
 800bd96:	2600      	movs	r6, #0
 800bd98:	4f2f      	ldr	r7, [pc, #188]	@ (800be58 <_strtod_l+0xae8>)
 800bd9a:	e7ac      	b.n	800bcf6 <_strtod_l+0x986>
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	4639      	mov	r1, r7
 800bda0:	4b2d      	ldr	r3, [pc, #180]	@ (800be58 <_strtod_l+0xae8>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	f7f4 fc04 	bl	80005b0 <__aeabi_dmul>
 800bda8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdaa:	4606      	mov	r6, r0
 800bdac:	460f      	mov	r7, r1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0a1      	beq.n	800bcf6 <_strtod_l+0x986>
 800bdb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bdb6:	e7a2      	b.n	800bcfe <_strtod_l+0x98e>
 800bdb8:	2200      	movs	r2, #0
 800bdba:	4b26      	ldr	r3, [pc, #152]	@ (800be54 <_strtod_l+0xae4>)
 800bdbc:	4616      	mov	r6, r2
 800bdbe:	461f      	mov	r7, r3
 800bdc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bdc4:	e79b      	b.n	800bcfe <_strtod_l+0x98e>
 800bdc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bdca:	9b08      	ldr	r3, [sp, #32]
 800bdcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1c1      	bne.n	800bd58 <_strtod_l+0x9e8>
 800bdd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bdd8:	0d1b      	lsrs	r3, r3, #20
 800bdda:	051b      	lsls	r3, r3, #20
 800bddc:	429d      	cmp	r5, r3
 800bdde:	d1bb      	bne.n	800bd58 <_strtod_l+0x9e8>
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f5 fa26 	bl	8001234 <__aeabi_d2lz>
 800bde8:	f7f4 fbb4 	bl	8000554 <__aeabi_l2d>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	4639      	mov	r1, r7
 800bdf4:	f7f4 fa24 	bl	8000240 <__aeabi_dsub>
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be00:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be06:	ea46 060a 	orr.w	r6, r6, sl
 800be0a:	431e      	orrs	r6, r3
 800be0c:	d069      	beq.n	800bee2 <_strtod_l+0xb72>
 800be0e:	a30a      	add	r3, pc, #40	@ (adr r3, 800be38 <_strtod_l+0xac8>)
 800be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be14:	f7f4 fe3e 	bl	8000a94 <__aeabi_dcmplt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	f47f accf 	bne.w	800b7bc <_strtod_l+0x44c>
 800be1e:	a308      	add	r3, pc, #32	@ (adr r3, 800be40 <_strtod_l+0xad0>)
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be28:	f7f4 fe52 	bl	8000ad0 <__aeabi_dcmpgt>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d093      	beq.n	800bd58 <_strtod_l+0x9e8>
 800be30:	e4c4      	b.n	800b7bc <_strtod_l+0x44c>
 800be32:	bf00      	nop
 800be34:	f3af 8000 	nop.w
 800be38:	94a03595 	.word	0x94a03595
 800be3c:	3fdfffff 	.word	0x3fdfffff
 800be40:	35afe535 	.word	0x35afe535
 800be44:	3fe00000 	.word	0x3fe00000
 800be48:	000fffff 	.word	0x000fffff
 800be4c:	7ff00000 	.word	0x7ff00000
 800be50:	7fefffff 	.word	0x7fefffff
 800be54:	3ff00000 	.word	0x3ff00000
 800be58:	3fe00000 	.word	0x3fe00000
 800be5c:	7fe00000 	.word	0x7fe00000
 800be60:	7c9fffff 	.word	0x7c9fffff
 800be64:	bff00000 	.word	0xbff00000
 800be68:	9b08      	ldr	r3, [sp, #32]
 800be6a:	b323      	cbz	r3, 800beb6 <_strtod_l+0xb46>
 800be6c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800be70:	d821      	bhi.n	800beb6 <_strtod_l+0xb46>
 800be72:	a327      	add	r3, pc, #156	@ (adr r3, 800bf10 <_strtod_l+0xba0>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe14 	bl	8000aa8 <__aeabi_dcmple>
 800be80:	b1a0      	cbz	r0, 800beac <_strtod_l+0xb3c>
 800be82:	4639      	mov	r1, r7
 800be84:	4630      	mov	r0, r6
 800be86:	f7f4 fe6b 	bl	8000b60 <__aeabi_d2uiz>
 800be8a:	2801      	cmp	r0, #1
 800be8c:	bf38      	it	cc
 800be8e:	2001      	movcc	r0, #1
 800be90:	f7f4 fb14 	bl	80004bc <__aeabi_ui2d>
 800be94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	b9fb      	cbnz	r3, 800bedc <_strtod_l+0xb6c>
 800be9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bea0:	9014      	str	r0, [sp, #80]	@ 0x50
 800bea2:	9315      	str	r3, [sp, #84]	@ 0x54
 800bea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bea8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800beac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800beae:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800beb2:	1b5b      	subs	r3, r3, r5
 800beb4:	9311      	str	r3, [sp, #68]	@ 0x44
 800beb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beba:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bebe:	f7ff f8ff 	bl	800b0c0 <__ulp>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4650      	mov	r0, sl
 800bec8:	4659      	mov	r1, fp
 800beca:	f7f4 fb71 	bl	80005b0 <__aeabi_dmul>
 800bece:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bed2:	f7f4 f9b7 	bl	8000244 <__adddf3>
 800bed6:	4682      	mov	sl, r0
 800bed8:	468b      	mov	fp, r1
 800beda:	e776      	b.n	800bdca <_strtod_l+0xa5a>
 800bedc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bee0:	e7e0      	b.n	800bea4 <_strtod_l+0xb34>
 800bee2:	a30d      	add	r3, pc, #52	@ (adr r3, 800bf18 <_strtod_l+0xba8>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 fdd4 	bl	8000a94 <__aeabi_dcmplt>
 800beec:	e79e      	b.n	800be2c <_strtod_l+0xabc>
 800beee:	2300      	movs	r3, #0
 800bef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bef2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bef4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bef6:	6013      	str	r3, [r2, #0]
 800bef8:	f7ff ba77 	b.w	800b3ea <_strtod_l+0x7a>
 800befc:	2a65      	cmp	r2, #101	@ 0x65
 800befe:	f43f ab6e 	beq.w	800b5de <_strtod_l+0x26e>
 800bf02:	2a45      	cmp	r2, #69	@ 0x45
 800bf04:	f43f ab6b 	beq.w	800b5de <_strtod_l+0x26e>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	f7ff bba6 	b.w	800b65a <_strtod_l+0x2ea>
 800bf0e:	bf00      	nop
 800bf10:	ffc00000 	.word	0xffc00000
 800bf14:	41dfffff 	.word	0x41dfffff
 800bf18:	94a03595 	.word	0x94a03595
 800bf1c:	3fcfffff 	.word	0x3fcfffff

0800bf20 <_strtod_r>:
 800bf20:	4b01      	ldr	r3, [pc, #4]	@ (800bf28 <_strtod_r+0x8>)
 800bf22:	f7ff ba25 	b.w	800b370 <_strtod_l>
 800bf26:	bf00      	nop
 800bf28:	200000b4 	.word	0x200000b4

0800bf2c <_strtol_l.constprop.0>:
 800bf2c:	2b24      	cmp	r3, #36	@ 0x24
 800bf2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf32:	4686      	mov	lr, r0
 800bf34:	4690      	mov	r8, r2
 800bf36:	d801      	bhi.n	800bf3c <_strtol_l.constprop.0+0x10>
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d106      	bne.n	800bf4a <_strtol_l.constprop.0+0x1e>
 800bf3c:	f7fd fdc0 	bl	8009ac0 <__errno>
 800bf40:	2316      	movs	r3, #22
 800bf42:	6003      	str	r3, [r0, #0]
 800bf44:	2000      	movs	r0, #0
 800bf46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4a:	460d      	mov	r5, r1
 800bf4c:	4833      	ldr	r0, [pc, #204]	@ (800c01c <_strtol_l.constprop.0+0xf0>)
 800bf4e:	462a      	mov	r2, r5
 800bf50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf54:	5d06      	ldrb	r6, [r0, r4]
 800bf56:	f016 0608 	ands.w	r6, r6, #8
 800bf5a:	d1f8      	bne.n	800bf4e <_strtol_l.constprop.0+0x22>
 800bf5c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf5e:	d12d      	bne.n	800bfbc <_strtol_l.constprop.0+0x90>
 800bf60:	2601      	movs	r6, #1
 800bf62:	782c      	ldrb	r4, [r5, #0]
 800bf64:	1c95      	adds	r5, r2, #2
 800bf66:	f033 0210 	bics.w	r2, r3, #16
 800bf6a:	d109      	bne.n	800bf80 <_strtol_l.constprop.0+0x54>
 800bf6c:	2c30      	cmp	r4, #48	@ 0x30
 800bf6e:	d12a      	bne.n	800bfc6 <_strtol_l.constprop.0+0x9a>
 800bf70:	782a      	ldrb	r2, [r5, #0]
 800bf72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bf76:	2a58      	cmp	r2, #88	@ 0x58
 800bf78:	d125      	bne.n	800bfc6 <_strtol_l.constprop.0+0x9a>
 800bf7a:	2310      	movs	r3, #16
 800bf7c:	786c      	ldrb	r4, [r5, #1]
 800bf7e:	3502      	adds	r5, #2
 800bf80:	2200      	movs	r2, #0
 800bf82:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bf86:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf8a:	fbbc f9f3 	udiv	r9, ip, r3
 800bf8e:	4610      	mov	r0, r2
 800bf90:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf98:	2f09      	cmp	r7, #9
 800bf9a:	d81b      	bhi.n	800bfd4 <_strtol_l.constprop.0+0xa8>
 800bf9c:	463c      	mov	r4, r7
 800bf9e:	42a3      	cmp	r3, r4
 800bfa0:	dd27      	ble.n	800bff2 <_strtol_l.constprop.0+0xc6>
 800bfa2:	1c57      	adds	r7, r2, #1
 800bfa4:	d007      	beq.n	800bfb6 <_strtol_l.constprop.0+0x8a>
 800bfa6:	4581      	cmp	r9, r0
 800bfa8:	d320      	bcc.n	800bfec <_strtol_l.constprop.0+0xc0>
 800bfaa:	d101      	bne.n	800bfb0 <_strtol_l.constprop.0+0x84>
 800bfac:	45a2      	cmp	sl, r4
 800bfae:	db1d      	blt.n	800bfec <_strtol_l.constprop.0+0xc0>
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	fb00 4003 	mla	r0, r0, r3, r4
 800bfb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfba:	e7eb      	b.n	800bf94 <_strtol_l.constprop.0+0x68>
 800bfbc:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfbe:	bf04      	itt	eq
 800bfc0:	782c      	ldrbeq	r4, [r5, #0]
 800bfc2:	1c95      	addeq	r5, r2, #2
 800bfc4:	e7cf      	b.n	800bf66 <_strtol_l.constprop.0+0x3a>
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1da      	bne.n	800bf80 <_strtol_l.constprop.0+0x54>
 800bfca:	2c30      	cmp	r4, #48	@ 0x30
 800bfcc:	bf0c      	ite	eq
 800bfce:	2308      	moveq	r3, #8
 800bfd0:	230a      	movne	r3, #10
 800bfd2:	e7d5      	b.n	800bf80 <_strtol_l.constprop.0+0x54>
 800bfd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bfd8:	2f19      	cmp	r7, #25
 800bfda:	d801      	bhi.n	800bfe0 <_strtol_l.constprop.0+0xb4>
 800bfdc:	3c37      	subs	r4, #55	@ 0x37
 800bfde:	e7de      	b.n	800bf9e <_strtol_l.constprop.0+0x72>
 800bfe0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bfe4:	2f19      	cmp	r7, #25
 800bfe6:	d804      	bhi.n	800bff2 <_strtol_l.constprop.0+0xc6>
 800bfe8:	3c57      	subs	r4, #87	@ 0x57
 800bfea:	e7d8      	b.n	800bf9e <_strtol_l.constprop.0+0x72>
 800bfec:	f04f 32ff 	mov.w	r2, #4294967295
 800bff0:	e7e1      	b.n	800bfb6 <_strtol_l.constprop.0+0x8a>
 800bff2:	1c53      	adds	r3, r2, #1
 800bff4:	d108      	bne.n	800c008 <_strtol_l.constprop.0+0xdc>
 800bff6:	2322      	movs	r3, #34	@ 0x22
 800bff8:	4660      	mov	r0, ip
 800bffa:	f8ce 3000 	str.w	r3, [lr]
 800bffe:	f1b8 0f00 	cmp.w	r8, #0
 800c002:	d0a0      	beq.n	800bf46 <_strtol_l.constprop.0+0x1a>
 800c004:	1e69      	subs	r1, r5, #1
 800c006:	e006      	b.n	800c016 <_strtol_l.constprop.0+0xea>
 800c008:	b106      	cbz	r6, 800c00c <_strtol_l.constprop.0+0xe0>
 800c00a:	4240      	negs	r0, r0
 800c00c:	f1b8 0f00 	cmp.w	r8, #0
 800c010:	d099      	beq.n	800bf46 <_strtol_l.constprop.0+0x1a>
 800c012:	2a00      	cmp	r2, #0
 800c014:	d1f6      	bne.n	800c004 <_strtol_l.constprop.0+0xd8>
 800c016:	f8c8 1000 	str.w	r1, [r8]
 800c01a:	e794      	b.n	800bf46 <_strtol_l.constprop.0+0x1a>
 800c01c:	0800dd69 	.word	0x0800dd69

0800c020 <_strtol_r>:
 800c020:	f7ff bf84 	b.w	800bf2c <_strtol_l.constprop.0>

0800c024 <__ssputs_r>:
 800c024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c028:	461f      	mov	r7, r3
 800c02a:	688e      	ldr	r6, [r1, #8]
 800c02c:	4682      	mov	sl, r0
 800c02e:	42be      	cmp	r6, r7
 800c030:	460c      	mov	r4, r1
 800c032:	4690      	mov	r8, r2
 800c034:	680b      	ldr	r3, [r1, #0]
 800c036:	d82d      	bhi.n	800c094 <__ssputs_r+0x70>
 800c038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c03c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c040:	d026      	beq.n	800c090 <__ssputs_r+0x6c>
 800c042:	6965      	ldr	r5, [r4, #20]
 800c044:	6909      	ldr	r1, [r1, #16]
 800c046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c04a:	eba3 0901 	sub.w	r9, r3, r1
 800c04e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c052:	1c7b      	adds	r3, r7, #1
 800c054:	444b      	add	r3, r9
 800c056:	106d      	asrs	r5, r5, #1
 800c058:	429d      	cmp	r5, r3
 800c05a:	bf38      	it	cc
 800c05c:	461d      	movcc	r5, r3
 800c05e:	0553      	lsls	r3, r2, #21
 800c060:	d527      	bpl.n	800c0b2 <__ssputs_r+0x8e>
 800c062:	4629      	mov	r1, r5
 800c064:	f7fe fc2e 	bl	800a8c4 <_malloc_r>
 800c068:	4606      	mov	r6, r0
 800c06a:	b360      	cbz	r0, 800c0c6 <__ssputs_r+0xa2>
 800c06c:	464a      	mov	r2, r9
 800c06e:	6921      	ldr	r1, [r4, #16]
 800c070:	f000 fa14 	bl	800c49c <memcpy>
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	6126      	str	r6, [r4, #16]
 800c082:	444e      	add	r6, r9
 800c084:	6026      	str	r6, [r4, #0]
 800c086:	463e      	mov	r6, r7
 800c088:	6165      	str	r5, [r4, #20]
 800c08a:	eba5 0509 	sub.w	r5, r5, r9
 800c08e:	60a5      	str	r5, [r4, #8]
 800c090:	42be      	cmp	r6, r7
 800c092:	d900      	bls.n	800c096 <__ssputs_r+0x72>
 800c094:	463e      	mov	r6, r7
 800c096:	4632      	mov	r2, r6
 800c098:	4641      	mov	r1, r8
 800c09a:	6820      	ldr	r0, [r4, #0]
 800c09c:	f000 f9c2 	bl	800c424 <memmove>
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	68a3      	ldr	r3, [r4, #8]
 800c0a4:	1b9b      	subs	r3, r3, r6
 800c0a6:	60a3      	str	r3, [r4, #8]
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	4433      	add	r3, r6
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b2:	462a      	mov	r2, r5
 800c0b4:	f000 fd83 	bl	800cbbe <_realloc_r>
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d1e0      	bne.n	800c080 <__ssputs_r+0x5c>
 800c0be:	4650      	mov	r0, sl
 800c0c0:	6921      	ldr	r1, [r4, #16]
 800c0c2:	f7fe fb8d 	bl	800a7e0 <_free_r>
 800c0c6:	230c      	movs	r3, #12
 800c0c8:	f8ca 3000 	str.w	r3, [sl]
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0d6:	81a3      	strh	r3, [r4, #12]
 800c0d8:	e7e9      	b.n	800c0ae <__ssputs_r+0x8a>
	...

0800c0dc <_svfiprintf_r>:
 800c0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e0:	4698      	mov	r8, r3
 800c0e2:	898b      	ldrh	r3, [r1, #12]
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	061b      	lsls	r3, r3, #24
 800c0e8:	460d      	mov	r5, r1
 800c0ea:	4614      	mov	r4, r2
 800c0ec:	b09d      	sub	sp, #116	@ 0x74
 800c0ee:	d510      	bpl.n	800c112 <_svfiprintf_r+0x36>
 800c0f0:	690b      	ldr	r3, [r1, #16]
 800c0f2:	b973      	cbnz	r3, 800c112 <_svfiprintf_r+0x36>
 800c0f4:	2140      	movs	r1, #64	@ 0x40
 800c0f6:	f7fe fbe5 	bl	800a8c4 <_malloc_r>
 800c0fa:	6028      	str	r0, [r5, #0]
 800c0fc:	6128      	str	r0, [r5, #16]
 800c0fe:	b930      	cbnz	r0, 800c10e <_svfiprintf_r+0x32>
 800c100:	230c      	movs	r3, #12
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	b01d      	add	sp, #116	@ 0x74
 800c10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10e:	2340      	movs	r3, #64	@ 0x40
 800c110:	616b      	str	r3, [r5, #20]
 800c112:	2300      	movs	r3, #0
 800c114:	9309      	str	r3, [sp, #36]	@ 0x24
 800c116:	2320      	movs	r3, #32
 800c118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c11c:	2330      	movs	r3, #48	@ 0x30
 800c11e:	f04f 0901 	mov.w	r9, #1
 800c122:	f8cd 800c 	str.w	r8, [sp, #12]
 800c126:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c2c0 <_svfiprintf_r+0x1e4>
 800c12a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c12e:	4623      	mov	r3, r4
 800c130:	469a      	mov	sl, r3
 800c132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c136:	b10a      	cbz	r2, 800c13c <_svfiprintf_r+0x60>
 800c138:	2a25      	cmp	r2, #37	@ 0x25
 800c13a:	d1f9      	bne.n	800c130 <_svfiprintf_r+0x54>
 800c13c:	ebba 0b04 	subs.w	fp, sl, r4
 800c140:	d00b      	beq.n	800c15a <_svfiprintf_r+0x7e>
 800c142:	465b      	mov	r3, fp
 800c144:	4622      	mov	r2, r4
 800c146:	4629      	mov	r1, r5
 800c148:	4638      	mov	r0, r7
 800c14a:	f7ff ff6b 	bl	800c024 <__ssputs_r>
 800c14e:	3001      	adds	r0, #1
 800c150:	f000 80a7 	beq.w	800c2a2 <_svfiprintf_r+0x1c6>
 800c154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c156:	445a      	add	r2, fp
 800c158:	9209      	str	r2, [sp, #36]	@ 0x24
 800c15a:	f89a 3000 	ldrb.w	r3, [sl]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 809f 	beq.w	800c2a2 <_svfiprintf_r+0x1c6>
 800c164:	2300      	movs	r3, #0
 800c166:	f04f 32ff 	mov.w	r2, #4294967295
 800c16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c16e:	f10a 0a01 	add.w	sl, sl, #1
 800c172:	9304      	str	r3, [sp, #16]
 800c174:	9307      	str	r3, [sp, #28]
 800c176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c17a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c17c:	4654      	mov	r4, sl
 800c17e:	2205      	movs	r2, #5
 800c180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c184:	484e      	ldr	r0, [pc, #312]	@ (800c2c0 <_svfiprintf_r+0x1e4>)
 800c186:	f7fd fcc8 	bl	8009b1a <memchr>
 800c18a:	9a04      	ldr	r2, [sp, #16]
 800c18c:	b9d8      	cbnz	r0, 800c1c6 <_svfiprintf_r+0xea>
 800c18e:	06d0      	lsls	r0, r2, #27
 800c190:	bf44      	itt	mi
 800c192:	2320      	movmi	r3, #32
 800c194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c198:	0711      	lsls	r1, r2, #28
 800c19a:	bf44      	itt	mi
 800c19c:	232b      	movmi	r3, #43	@ 0x2b
 800c19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1a8:	d015      	beq.n	800c1d6 <_svfiprintf_r+0xfa>
 800c1aa:	4654      	mov	r4, sl
 800c1ac:	2000      	movs	r0, #0
 800c1ae:	f04f 0c0a 	mov.w	ip, #10
 800c1b2:	9a07      	ldr	r2, [sp, #28]
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ba:	3b30      	subs	r3, #48	@ 0x30
 800c1bc:	2b09      	cmp	r3, #9
 800c1be:	d94b      	bls.n	800c258 <_svfiprintf_r+0x17c>
 800c1c0:	b1b0      	cbz	r0, 800c1f0 <_svfiprintf_r+0x114>
 800c1c2:	9207      	str	r2, [sp, #28]
 800c1c4:	e014      	b.n	800c1f0 <_svfiprintf_r+0x114>
 800c1c6:	eba0 0308 	sub.w	r3, r0, r8
 800c1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	46a2      	mov	sl, r4
 800c1d2:	9304      	str	r3, [sp, #16]
 800c1d4:	e7d2      	b.n	800c17c <_svfiprintf_r+0xa0>
 800c1d6:	9b03      	ldr	r3, [sp, #12]
 800c1d8:	1d19      	adds	r1, r3, #4
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	9103      	str	r1, [sp, #12]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	bfbb      	ittet	lt
 800c1e2:	425b      	neglt	r3, r3
 800c1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800c1e8:	9307      	strge	r3, [sp, #28]
 800c1ea:	9307      	strlt	r3, [sp, #28]
 800c1ec:	bfb8      	it	lt
 800c1ee:	9204      	strlt	r2, [sp, #16]
 800c1f0:	7823      	ldrb	r3, [r4, #0]
 800c1f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1f4:	d10a      	bne.n	800c20c <_svfiprintf_r+0x130>
 800c1f6:	7863      	ldrb	r3, [r4, #1]
 800c1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1fa:	d132      	bne.n	800c262 <_svfiprintf_r+0x186>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	3402      	adds	r4, #2
 800c200:	1d1a      	adds	r2, r3, #4
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	9203      	str	r2, [sp, #12]
 800c206:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c20a:	9305      	str	r3, [sp, #20]
 800c20c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c2c4 <_svfiprintf_r+0x1e8>
 800c210:	2203      	movs	r2, #3
 800c212:	4650      	mov	r0, sl
 800c214:	7821      	ldrb	r1, [r4, #0]
 800c216:	f7fd fc80 	bl	8009b1a <memchr>
 800c21a:	b138      	cbz	r0, 800c22c <_svfiprintf_r+0x150>
 800c21c:	2240      	movs	r2, #64	@ 0x40
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	eba0 000a 	sub.w	r0, r0, sl
 800c224:	4082      	lsls	r2, r0
 800c226:	4313      	orrs	r3, r2
 800c228:	3401      	adds	r4, #1
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	2206      	movs	r2, #6
 800c232:	4825      	ldr	r0, [pc, #148]	@ (800c2c8 <_svfiprintf_r+0x1ec>)
 800c234:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c238:	f7fd fc6f 	bl	8009b1a <memchr>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d036      	beq.n	800c2ae <_svfiprintf_r+0x1d2>
 800c240:	4b22      	ldr	r3, [pc, #136]	@ (800c2cc <_svfiprintf_r+0x1f0>)
 800c242:	bb1b      	cbnz	r3, 800c28c <_svfiprintf_r+0x1b0>
 800c244:	9b03      	ldr	r3, [sp, #12]
 800c246:	3307      	adds	r3, #7
 800c248:	f023 0307 	bic.w	r3, r3, #7
 800c24c:	3308      	adds	r3, #8
 800c24e:	9303      	str	r3, [sp, #12]
 800c250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c252:	4433      	add	r3, r6
 800c254:	9309      	str	r3, [sp, #36]	@ 0x24
 800c256:	e76a      	b.n	800c12e <_svfiprintf_r+0x52>
 800c258:	460c      	mov	r4, r1
 800c25a:	2001      	movs	r0, #1
 800c25c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c260:	e7a8      	b.n	800c1b4 <_svfiprintf_r+0xd8>
 800c262:	2300      	movs	r3, #0
 800c264:	f04f 0c0a 	mov.w	ip, #10
 800c268:	4619      	mov	r1, r3
 800c26a:	3401      	adds	r4, #1
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	4620      	mov	r0, r4
 800c270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c274:	3a30      	subs	r2, #48	@ 0x30
 800c276:	2a09      	cmp	r2, #9
 800c278:	d903      	bls.n	800c282 <_svfiprintf_r+0x1a6>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0c6      	beq.n	800c20c <_svfiprintf_r+0x130>
 800c27e:	9105      	str	r1, [sp, #20]
 800c280:	e7c4      	b.n	800c20c <_svfiprintf_r+0x130>
 800c282:	4604      	mov	r4, r0
 800c284:	2301      	movs	r3, #1
 800c286:	fb0c 2101 	mla	r1, ip, r1, r2
 800c28a:	e7f0      	b.n	800c26e <_svfiprintf_r+0x192>
 800c28c:	ab03      	add	r3, sp, #12
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	462a      	mov	r2, r5
 800c292:	4638      	mov	r0, r7
 800c294:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d0 <_svfiprintf_r+0x1f4>)
 800c296:	a904      	add	r1, sp, #16
 800c298:	f7fc fccc 	bl	8008c34 <_printf_float>
 800c29c:	1c42      	adds	r2, r0, #1
 800c29e:	4606      	mov	r6, r0
 800c2a0:	d1d6      	bne.n	800c250 <_svfiprintf_r+0x174>
 800c2a2:	89ab      	ldrh	r3, [r5, #12]
 800c2a4:	065b      	lsls	r3, r3, #25
 800c2a6:	f53f af2d 	bmi.w	800c104 <_svfiprintf_r+0x28>
 800c2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2ac:	e72c      	b.n	800c108 <_svfiprintf_r+0x2c>
 800c2ae:	ab03      	add	r3, sp, #12
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <_svfiprintf_r+0x1f4>)
 800c2b8:	a904      	add	r1, sp, #16
 800c2ba:	f7fc ff59 	bl	8009170 <_printf_i>
 800c2be:	e7ed      	b.n	800c29c <_svfiprintf_r+0x1c0>
 800c2c0:	0800de69 	.word	0x0800de69
 800c2c4:	0800de6f 	.word	0x0800de6f
 800c2c8:	0800de73 	.word	0x0800de73
 800c2cc:	08008c35 	.word	0x08008c35
 800c2d0:	0800c025 	.word	0x0800c025

0800c2d4 <__sflush_r>:
 800c2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	0716      	lsls	r6, r2, #28
 800c2dc:	4605      	mov	r5, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	d454      	bmi.n	800c38c <__sflush_r+0xb8>
 800c2e2:	684b      	ldr	r3, [r1, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	dc02      	bgt.n	800c2ee <__sflush_r+0x1a>
 800c2e8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dd48      	ble.n	800c380 <__sflush_r+0xac>
 800c2ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2f0:	2e00      	cmp	r6, #0
 800c2f2:	d045      	beq.n	800c380 <__sflush_r+0xac>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c2fa:	682f      	ldr	r7, [r5, #0]
 800c2fc:	6a21      	ldr	r1, [r4, #32]
 800c2fe:	602b      	str	r3, [r5, #0]
 800c300:	d030      	beq.n	800c364 <__sflush_r+0x90>
 800c302:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	0759      	lsls	r1, r3, #29
 800c308:	d505      	bpl.n	800c316 <__sflush_r+0x42>
 800c30a:	6863      	ldr	r3, [r4, #4]
 800c30c:	1ad2      	subs	r2, r2, r3
 800c30e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c310:	b10b      	cbz	r3, 800c316 <__sflush_r+0x42>
 800c312:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c314:	1ad2      	subs	r2, r2, r3
 800c316:	2300      	movs	r3, #0
 800c318:	4628      	mov	r0, r5
 800c31a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c31c:	6a21      	ldr	r1, [r4, #32]
 800c31e:	47b0      	blx	r6
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	d106      	bne.n	800c334 <__sflush_r+0x60>
 800c326:	6829      	ldr	r1, [r5, #0]
 800c328:	291d      	cmp	r1, #29
 800c32a:	d82b      	bhi.n	800c384 <__sflush_r+0xb0>
 800c32c:	4a28      	ldr	r2, [pc, #160]	@ (800c3d0 <__sflush_r+0xfc>)
 800c32e:	410a      	asrs	r2, r1
 800c330:	07d6      	lsls	r6, r2, #31
 800c332:	d427      	bmi.n	800c384 <__sflush_r+0xb0>
 800c334:	2200      	movs	r2, #0
 800c336:	6062      	str	r2, [r4, #4]
 800c338:	6922      	ldr	r2, [r4, #16]
 800c33a:	04d9      	lsls	r1, r3, #19
 800c33c:	6022      	str	r2, [r4, #0]
 800c33e:	d504      	bpl.n	800c34a <__sflush_r+0x76>
 800c340:	1c42      	adds	r2, r0, #1
 800c342:	d101      	bne.n	800c348 <__sflush_r+0x74>
 800c344:	682b      	ldr	r3, [r5, #0]
 800c346:	b903      	cbnz	r3, 800c34a <__sflush_r+0x76>
 800c348:	6560      	str	r0, [r4, #84]	@ 0x54
 800c34a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c34c:	602f      	str	r7, [r5, #0]
 800c34e:	b1b9      	cbz	r1, 800c380 <__sflush_r+0xac>
 800c350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c354:	4299      	cmp	r1, r3
 800c356:	d002      	beq.n	800c35e <__sflush_r+0x8a>
 800c358:	4628      	mov	r0, r5
 800c35a:	f7fe fa41 	bl	800a7e0 <_free_r>
 800c35e:	2300      	movs	r3, #0
 800c360:	6363      	str	r3, [r4, #52]	@ 0x34
 800c362:	e00d      	b.n	800c380 <__sflush_r+0xac>
 800c364:	2301      	movs	r3, #1
 800c366:	4628      	mov	r0, r5
 800c368:	47b0      	blx	r6
 800c36a:	4602      	mov	r2, r0
 800c36c:	1c50      	adds	r0, r2, #1
 800c36e:	d1c9      	bne.n	800c304 <__sflush_r+0x30>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d0c6      	beq.n	800c304 <__sflush_r+0x30>
 800c376:	2b1d      	cmp	r3, #29
 800c378:	d001      	beq.n	800c37e <__sflush_r+0xaa>
 800c37a:	2b16      	cmp	r3, #22
 800c37c:	d11d      	bne.n	800c3ba <__sflush_r+0xe6>
 800c37e:	602f      	str	r7, [r5, #0]
 800c380:	2000      	movs	r0, #0
 800c382:	e021      	b.n	800c3c8 <__sflush_r+0xf4>
 800c384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c388:	b21b      	sxth	r3, r3
 800c38a:	e01a      	b.n	800c3c2 <__sflush_r+0xee>
 800c38c:	690f      	ldr	r7, [r1, #16]
 800c38e:	2f00      	cmp	r7, #0
 800c390:	d0f6      	beq.n	800c380 <__sflush_r+0xac>
 800c392:	0793      	lsls	r3, r2, #30
 800c394:	bf18      	it	ne
 800c396:	2300      	movne	r3, #0
 800c398:	680e      	ldr	r6, [r1, #0]
 800c39a:	bf08      	it	eq
 800c39c:	694b      	ldreq	r3, [r1, #20]
 800c39e:	1bf6      	subs	r6, r6, r7
 800c3a0:	600f      	str	r7, [r1, #0]
 800c3a2:	608b      	str	r3, [r1, #8]
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	ddeb      	ble.n	800c380 <__sflush_r+0xac>
 800c3a8:	4633      	mov	r3, r6
 800c3aa:	463a      	mov	r2, r7
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	6a21      	ldr	r1, [r4, #32]
 800c3b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c3b4:	47e0      	blx	ip
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	dc07      	bgt.n	800c3ca <__sflush_r+0xf6>
 800c3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3ca:	4407      	add	r7, r0
 800c3cc:	1a36      	subs	r6, r6, r0
 800c3ce:	e7e9      	b.n	800c3a4 <__sflush_r+0xd0>
 800c3d0:	dfbffffe 	.word	0xdfbffffe

0800c3d4 <_fflush_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	690b      	ldr	r3, [r1, #16]
 800c3d8:	4605      	mov	r5, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	b913      	cbnz	r3, 800c3e4 <_fflush_r+0x10>
 800c3de:	2500      	movs	r5, #0
 800c3e0:	4628      	mov	r0, r5
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	b118      	cbz	r0, 800c3ee <_fflush_r+0x1a>
 800c3e6:	6a03      	ldr	r3, [r0, #32]
 800c3e8:	b90b      	cbnz	r3, 800c3ee <_fflush_r+0x1a>
 800c3ea:	f7fd fa7d 	bl	80098e8 <__sinit>
 800c3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d0f3      	beq.n	800c3de <_fflush_r+0xa>
 800c3f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c3f8:	07d0      	lsls	r0, r2, #31
 800c3fa:	d404      	bmi.n	800c406 <_fflush_r+0x32>
 800c3fc:	0599      	lsls	r1, r3, #22
 800c3fe:	d402      	bmi.n	800c406 <_fflush_r+0x32>
 800c400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c402:	f7fd fb88 	bl	8009b16 <__retarget_lock_acquire_recursive>
 800c406:	4628      	mov	r0, r5
 800c408:	4621      	mov	r1, r4
 800c40a:	f7ff ff63 	bl	800c2d4 <__sflush_r>
 800c40e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c410:	4605      	mov	r5, r0
 800c412:	07da      	lsls	r2, r3, #31
 800c414:	d4e4      	bmi.n	800c3e0 <_fflush_r+0xc>
 800c416:	89a3      	ldrh	r3, [r4, #12]
 800c418:	059b      	lsls	r3, r3, #22
 800c41a:	d4e1      	bmi.n	800c3e0 <_fflush_r+0xc>
 800c41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c41e:	f7fd fb7b 	bl	8009b18 <__retarget_lock_release_recursive>
 800c422:	e7dd      	b.n	800c3e0 <_fflush_r+0xc>

0800c424 <memmove>:
 800c424:	4288      	cmp	r0, r1
 800c426:	b510      	push	{r4, lr}
 800c428:	eb01 0402 	add.w	r4, r1, r2
 800c42c:	d902      	bls.n	800c434 <memmove+0x10>
 800c42e:	4284      	cmp	r4, r0
 800c430:	4623      	mov	r3, r4
 800c432:	d807      	bhi.n	800c444 <memmove+0x20>
 800c434:	1e43      	subs	r3, r0, #1
 800c436:	42a1      	cmp	r1, r4
 800c438:	d008      	beq.n	800c44c <memmove+0x28>
 800c43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c43e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c442:	e7f8      	b.n	800c436 <memmove+0x12>
 800c444:	4601      	mov	r1, r0
 800c446:	4402      	add	r2, r0
 800c448:	428a      	cmp	r2, r1
 800c44a:	d100      	bne.n	800c44e <memmove+0x2a>
 800c44c:	bd10      	pop	{r4, pc}
 800c44e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c456:	e7f7      	b.n	800c448 <memmove+0x24>

0800c458 <strncmp>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	b16a      	cbz	r2, 800c478 <strncmp+0x20>
 800c45c:	3901      	subs	r1, #1
 800c45e:	1884      	adds	r4, r0, r2
 800c460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c464:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c468:	429a      	cmp	r2, r3
 800c46a:	d103      	bne.n	800c474 <strncmp+0x1c>
 800c46c:	42a0      	cmp	r0, r4
 800c46e:	d001      	beq.n	800c474 <strncmp+0x1c>
 800c470:	2a00      	cmp	r2, #0
 800c472:	d1f5      	bne.n	800c460 <strncmp+0x8>
 800c474:	1ad0      	subs	r0, r2, r3
 800c476:	bd10      	pop	{r4, pc}
 800c478:	4610      	mov	r0, r2
 800c47a:	e7fc      	b.n	800c476 <strncmp+0x1e>

0800c47c <_sbrk_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	2300      	movs	r3, #0
 800c480:	4d05      	ldr	r5, [pc, #20]	@ (800c498 <_sbrk_r+0x1c>)
 800c482:	4604      	mov	r4, r0
 800c484:	4608      	mov	r0, r1
 800c486:	602b      	str	r3, [r5, #0]
 800c488:	f7f7 fd3c 	bl	8003f04 <_sbrk>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_sbrk_r+0x1a>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	b103      	cbz	r3, 800c496 <_sbrk_r+0x1a>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	200009b4 	.word	0x200009b4

0800c49c <memcpy>:
 800c49c:	440a      	add	r2, r1
 800c49e:	4291      	cmp	r1, r2
 800c4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c4a4:	d100      	bne.n	800c4a8 <memcpy+0xc>
 800c4a6:	4770      	bx	lr
 800c4a8:	b510      	push	{r4, lr}
 800c4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4ae:	4291      	cmp	r1, r2
 800c4b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4b4:	d1f9      	bne.n	800c4aa <memcpy+0xe>
 800c4b6:	bd10      	pop	{r4, pc}

0800c4b8 <nan>:
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	4901      	ldr	r1, [pc, #4]	@ (800c4c0 <nan+0x8>)
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	7ff80000 	.word	0x7ff80000

0800c4c4 <__assert_func>:
 800c4c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4c6:	4614      	mov	r4, r2
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	4b09      	ldr	r3, [pc, #36]	@ (800c4f0 <__assert_func+0x2c>)
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68d8      	ldr	r0, [r3, #12]
 800c4d2:	b954      	cbnz	r4, 800c4ea <__assert_func+0x26>
 800c4d4:	4b07      	ldr	r3, [pc, #28]	@ (800c4f4 <__assert_func+0x30>)
 800c4d6:	461c      	mov	r4, r3
 800c4d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4dc:	9100      	str	r1, [sp, #0]
 800c4de:	462b      	mov	r3, r5
 800c4e0:	4905      	ldr	r1, [pc, #20]	@ (800c4f8 <__assert_func+0x34>)
 800c4e2:	f000 fba7 	bl	800cc34 <fiprintf>
 800c4e6:	f000 fbb7 	bl	800cc58 <abort>
 800c4ea:	4b04      	ldr	r3, [pc, #16]	@ (800c4fc <__assert_func+0x38>)
 800c4ec:	e7f4      	b.n	800c4d8 <__assert_func+0x14>
 800c4ee:	bf00      	nop
 800c4f0:	20000064 	.word	0x20000064
 800c4f4:	0800debd 	.word	0x0800debd
 800c4f8:	0800de8f 	.word	0x0800de8f
 800c4fc:	0800de82 	.word	0x0800de82

0800c500 <_calloc_r>:
 800c500:	b570      	push	{r4, r5, r6, lr}
 800c502:	fba1 5402 	umull	r5, r4, r1, r2
 800c506:	b93c      	cbnz	r4, 800c518 <_calloc_r+0x18>
 800c508:	4629      	mov	r1, r5
 800c50a:	f7fe f9db 	bl	800a8c4 <_malloc_r>
 800c50e:	4606      	mov	r6, r0
 800c510:	b928      	cbnz	r0, 800c51e <_calloc_r+0x1e>
 800c512:	2600      	movs	r6, #0
 800c514:	4630      	mov	r0, r6
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	220c      	movs	r2, #12
 800c51a:	6002      	str	r2, [r0, #0]
 800c51c:	e7f9      	b.n	800c512 <_calloc_r+0x12>
 800c51e:	462a      	mov	r2, r5
 800c520:	4621      	mov	r1, r4
 800c522:	f7fd fa7a 	bl	8009a1a <memset>
 800c526:	e7f5      	b.n	800c514 <_calloc_r+0x14>

0800c528 <rshift>:
 800c528:	6903      	ldr	r3, [r0, #16]
 800c52a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c52e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c532:	f100 0414 	add.w	r4, r0, #20
 800c536:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c53a:	dd46      	ble.n	800c5ca <rshift+0xa2>
 800c53c:	f011 011f 	ands.w	r1, r1, #31
 800c540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c548:	d10c      	bne.n	800c564 <rshift+0x3c>
 800c54a:	4629      	mov	r1, r5
 800c54c:	f100 0710 	add.w	r7, r0, #16
 800c550:	42b1      	cmp	r1, r6
 800c552:	d335      	bcc.n	800c5c0 <rshift+0x98>
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	1eea      	subs	r2, r5, #3
 800c55a:	4296      	cmp	r6, r2
 800c55c:	bf38      	it	cc
 800c55e:	2300      	movcc	r3, #0
 800c560:	4423      	add	r3, r4
 800c562:	e015      	b.n	800c590 <rshift+0x68>
 800c564:	46a1      	mov	r9, r4
 800c566:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c56a:	f1c1 0820 	rsb	r8, r1, #32
 800c56e:	40cf      	lsrs	r7, r1
 800c570:	f105 0e04 	add.w	lr, r5, #4
 800c574:	4576      	cmp	r6, lr
 800c576:	46f4      	mov	ip, lr
 800c578:	d816      	bhi.n	800c5a8 <rshift+0x80>
 800c57a:	1a9a      	subs	r2, r3, r2
 800c57c:	0092      	lsls	r2, r2, #2
 800c57e:	3a04      	subs	r2, #4
 800c580:	3501      	adds	r5, #1
 800c582:	42ae      	cmp	r6, r5
 800c584:	bf38      	it	cc
 800c586:	2200      	movcc	r2, #0
 800c588:	18a3      	adds	r3, r4, r2
 800c58a:	50a7      	str	r7, [r4, r2]
 800c58c:	b107      	cbz	r7, 800c590 <rshift+0x68>
 800c58e:	3304      	adds	r3, #4
 800c590:	42a3      	cmp	r3, r4
 800c592:	eba3 0204 	sub.w	r2, r3, r4
 800c596:	bf08      	it	eq
 800c598:	2300      	moveq	r3, #0
 800c59a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c59e:	6102      	str	r2, [r0, #16]
 800c5a0:	bf08      	it	eq
 800c5a2:	6143      	streq	r3, [r0, #20]
 800c5a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5a8:	f8dc c000 	ldr.w	ip, [ip]
 800c5ac:	fa0c fc08 	lsl.w	ip, ip, r8
 800c5b0:	ea4c 0707 	orr.w	r7, ip, r7
 800c5b4:	f849 7b04 	str.w	r7, [r9], #4
 800c5b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c5bc:	40cf      	lsrs	r7, r1
 800c5be:	e7d9      	b.n	800c574 <rshift+0x4c>
 800c5c0:	f851 cb04 	ldr.w	ip, [r1], #4
 800c5c4:	f847 cf04 	str.w	ip, [r7, #4]!
 800c5c8:	e7c2      	b.n	800c550 <rshift+0x28>
 800c5ca:	4623      	mov	r3, r4
 800c5cc:	e7e0      	b.n	800c590 <rshift+0x68>

0800c5ce <__hexdig_fun>:
 800c5ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c5d2:	2b09      	cmp	r3, #9
 800c5d4:	d802      	bhi.n	800c5dc <__hexdig_fun+0xe>
 800c5d6:	3820      	subs	r0, #32
 800c5d8:	b2c0      	uxtb	r0, r0
 800c5da:	4770      	bx	lr
 800c5dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c5e0:	2b05      	cmp	r3, #5
 800c5e2:	d801      	bhi.n	800c5e8 <__hexdig_fun+0x1a>
 800c5e4:	3847      	subs	r0, #71	@ 0x47
 800c5e6:	e7f7      	b.n	800c5d8 <__hexdig_fun+0xa>
 800c5e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c5ec:	2b05      	cmp	r3, #5
 800c5ee:	d801      	bhi.n	800c5f4 <__hexdig_fun+0x26>
 800c5f0:	3827      	subs	r0, #39	@ 0x27
 800c5f2:	e7f1      	b.n	800c5d8 <__hexdig_fun+0xa>
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	4770      	bx	lr

0800c5f8 <__gethex>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	468a      	mov	sl, r1
 800c5fe:	4690      	mov	r8, r2
 800c600:	b085      	sub	sp, #20
 800c602:	9302      	str	r3, [sp, #8]
 800c604:	680b      	ldr	r3, [r1, #0]
 800c606:	9001      	str	r0, [sp, #4]
 800c608:	1c9c      	adds	r4, r3, #2
 800c60a:	46a1      	mov	r9, r4
 800c60c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c610:	2830      	cmp	r0, #48	@ 0x30
 800c612:	d0fa      	beq.n	800c60a <__gethex+0x12>
 800c614:	eba9 0303 	sub.w	r3, r9, r3
 800c618:	f1a3 0b02 	sub.w	fp, r3, #2
 800c61c:	f7ff ffd7 	bl	800c5ce <__hexdig_fun>
 800c620:	4605      	mov	r5, r0
 800c622:	2800      	cmp	r0, #0
 800c624:	d168      	bne.n	800c6f8 <__gethex+0x100>
 800c626:	2201      	movs	r2, #1
 800c628:	4648      	mov	r0, r9
 800c62a:	499f      	ldr	r1, [pc, #636]	@ (800c8a8 <__gethex+0x2b0>)
 800c62c:	f7ff ff14 	bl	800c458 <strncmp>
 800c630:	4607      	mov	r7, r0
 800c632:	2800      	cmp	r0, #0
 800c634:	d167      	bne.n	800c706 <__gethex+0x10e>
 800c636:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c63a:	4626      	mov	r6, r4
 800c63c:	f7ff ffc7 	bl	800c5ce <__hexdig_fun>
 800c640:	2800      	cmp	r0, #0
 800c642:	d062      	beq.n	800c70a <__gethex+0x112>
 800c644:	4623      	mov	r3, r4
 800c646:	7818      	ldrb	r0, [r3, #0]
 800c648:	4699      	mov	r9, r3
 800c64a:	2830      	cmp	r0, #48	@ 0x30
 800c64c:	f103 0301 	add.w	r3, r3, #1
 800c650:	d0f9      	beq.n	800c646 <__gethex+0x4e>
 800c652:	f7ff ffbc 	bl	800c5ce <__hexdig_fun>
 800c656:	fab0 f580 	clz	r5, r0
 800c65a:	f04f 0b01 	mov.w	fp, #1
 800c65e:	096d      	lsrs	r5, r5, #5
 800c660:	464a      	mov	r2, r9
 800c662:	4616      	mov	r6, r2
 800c664:	7830      	ldrb	r0, [r6, #0]
 800c666:	3201      	adds	r2, #1
 800c668:	f7ff ffb1 	bl	800c5ce <__hexdig_fun>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d1f8      	bne.n	800c662 <__gethex+0x6a>
 800c670:	2201      	movs	r2, #1
 800c672:	4630      	mov	r0, r6
 800c674:	498c      	ldr	r1, [pc, #560]	@ (800c8a8 <__gethex+0x2b0>)
 800c676:	f7ff feef 	bl	800c458 <strncmp>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d13f      	bne.n	800c6fe <__gethex+0x106>
 800c67e:	b944      	cbnz	r4, 800c692 <__gethex+0x9a>
 800c680:	1c74      	adds	r4, r6, #1
 800c682:	4622      	mov	r2, r4
 800c684:	4616      	mov	r6, r2
 800c686:	7830      	ldrb	r0, [r6, #0]
 800c688:	3201      	adds	r2, #1
 800c68a:	f7ff ffa0 	bl	800c5ce <__hexdig_fun>
 800c68e:	2800      	cmp	r0, #0
 800c690:	d1f8      	bne.n	800c684 <__gethex+0x8c>
 800c692:	1ba4      	subs	r4, r4, r6
 800c694:	00a7      	lsls	r7, r4, #2
 800c696:	7833      	ldrb	r3, [r6, #0]
 800c698:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c69c:	2b50      	cmp	r3, #80	@ 0x50
 800c69e:	d13e      	bne.n	800c71e <__gethex+0x126>
 800c6a0:	7873      	ldrb	r3, [r6, #1]
 800c6a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800c6a4:	d033      	beq.n	800c70e <__gethex+0x116>
 800c6a6:	2b2d      	cmp	r3, #45	@ 0x2d
 800c6a8:	d034      	beq.n	800c714 <__gethex+0x11c>
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	1c71      	adds	r1, r6, #1
 800c6ae:	7808      	ldrb	r0, [r1, #0]
 800c6b0:	f7ff ff8d 	bl	800c5ce <__hexdig_fun>
 800c6b4:	1e43      	subs	r3, r0, #1
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b18      	cmp	r3, #24
 800c6ba:	d830      	bhi.n	800c71e <__gethex+0x126>
 800c6bc:	f1a0 0210 	sub.w	r2, r0, #16
 800c6c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c6c4:	f7ff ff83 	bl	800c5ce <__hexdig_fun>
 800c6c8:	f100 3cff 	add.w	ip, r0, #4294967295
 800c6cc:	fa5f fc8c 	uxtb.w	ip, ip
 800c6d0:	f1bc 0f18 	cmp.w	ip, #24
 800c6d4:	f04f 030a 	mov.w	r3, #10
 800c6d8:	d91e      	bls.n	800c718 <__gethex+0x120>
 800c6da:	b104      	cbz	r4, 800c6de <__gethex+0xe6>
 800c6dc:	4252      	negs	r2, r2
 800c6de:	4417      	add	r7, r2
 800c6e0:	f8ca 1000 	str.w	r1, [sl]
 800c6e4:	b1ed      	cbz	r5, 800c722 <__gethex+0x12a>
 800c6e6:	f1bb 0f00 	cmp.w	fp, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2506      	moveq	r5, #6
 800c6ee:	2500      	movne	r5, #0
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	b005      	add	sp, #20
 800c6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6f8:	2500      	movs	r5, #0
 800c6fa:	462c      	mov	r4, r5
 800c6fc:	e7b0      	b.n	800c660 <__gethex+0x68>
 800c6fe:	2c00      	cmp	r4, #0
 800c700:	d1c7      	bne.n	800c692 <__gethex+0x9a>
 800c702:	4627      	mov	r7, r4
 800c704:	e7c7      	b.n	800c696 <__gethex+0x9e>
 800c706:	464e      	mov	r6, r9
 800c708:	462f      	mov	r7, r5
 800c70a:	2501      	movs	r5, #1
 800c70c:	e7c3      	b.n	800c696 <__gethex+0x9e>
 800c70e:	2400      	movs	r4, #0
 800c710:	1cb1      	adds	r1, r6, #2
 800c712:	e7cc      	b.n	800c6ae <__gethex+0xb6>
 800c714:	2401      	movs	r4, #1
 800c716:	e7fb      	b.n	800c710 <__gethex+0x118>
 800c718:	fb03 0002 	mla	r0, r3, r2, r0
 800c71c:	e7ce      	b.n	800c6bc <__gethex+0xc4>
 800c71e:	4631      	mov	r1, r6
 800c720:	e7de      	b.n	800c6e0 <__gethex+0xe8>
 800c722:	4629      	mov	r1, r5
 800c724:	eba6 0309 	sub.w	r3, r6, r9
 800c728:	3b01      	subs	r3, #1
 800c72a:	2b07      	cmp	r3, #7
 800c72c:	dc0a      	bgt.n	800c744 <__gethex+0x14c>
 800c72e:	9801      	ldr	r0, [sp, #4]
 800c730:	f7fe f954 	bl	800a9dc <_Balloc>
 800c734:	4604      	mov	r4, r0
 800c736:	b940      	cbnz	r0, 800c74a <__gethex+0x152>
 800c738:	4602      	mov	r2, r0
 800c73a:	21e4      	movs	r1, #228	@ 0xe4
 800c73c:	4b5b      	ldr	r3, [pc, #364]	@ (800c8ac <__gethex+0x2b4>)
 800c73e:	485c      	ldr	r0, [pc, #368]	@ (800c8b0 <__gethex+0x2b8>)
 800c740:	f7ff fec0 	bl	800c4c4 <__assert_func>
 800c744:	3101      	adds	r1, #1
 800c746:	105b      	asrs	r3, r3, #1
 800c748:	e7ef      	b.n	800c72a <__gethex+0x132>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f100 0a14 	add.w	sl, r0, #20
 800c750:	4655      	mov	r5, sl
 800c752:	469b      	mov	fp, r3
 800c754:	45b1      	cmp	r9, r6
 800c756:	d337      	bcc.n	800c7c8 <__gethex+0x1d0>
 800c758:	f845 bb04 	str.w	fp, [r5], #4
 800c75c:	eba5 050a 	sub.w	r5, r5, sl
 800c760:	10ad      	asrs	r5, r5, #2
 800c762:	6125      	str	r5, [r4, #16]
 800c764:	4658      	mov	r0, fp
 800c766:	f7fe fa2b 	bl	800abc0 <__hi0bits>
 800c76a:	016d      	lsls	r5, r5, #5
 800c76c:	f8d8 6000 	ldr.w	r6, [r8]
 800c770:	1a2d      	subs	r5, r5, r0
 800c772:	42b5      	cmp	r5, r6
 800c774:	dd54      	ble.n	800c820 <__gethex+0x228>
 800c776:	1bad      	subs	r5, r5, r6
 800c778:	4629      	mov	r1, r5
 800c77a:	4620      	mov	r0, r4
 800c77c:	f7fe fdb3 	bl	800b2e6 <__any_on>
 800c780:	4681      	mov	r9, r0
 800c782:	b178      	cbz	r0, 800c7a4 <__gethex+0x1ac>
 800c784:	f04f 0901 	mov.w	r9, #1
 800c788:	1e6b      	subs	r3, r5, #1
 800c78a:	1159      	asrs	r1, r3, #5
 800c78c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c790:	f003 021f 	and.w	r2, r3, #31
 800c794:	fa09 f202 	lsl.w	r2, r9, r2
 800c798:	420a      	tst	r2, r1
 800c79a:	d003      	beq.n	800c7a4 <__gethex+0x1ac>
 800c79c:	454b      	cmp	r3, r9
 800c79e:	dc36      	bgt.n	800c80e <__gethex+0x216>
 800c7a0:	f04f 0902 	mov.w	r9, #2
 800c7a4:	4629      	mov	r1, r5
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f7ff febe 	bl	800c528 <rshift>
 800c7ac:	442f      	add	r7, r5
 800c7ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7b2:	42bb      	cmp	r3, r7
 800c7b4:	da42      	bge.n	800c83c <__gethex+0x244>
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	9801      	ldr	r0, [sp, #4]
 800c7ba:	f7fe f94f 	bl	800aa5c <_Bfree>
 800c7be:	2300      	movs	r3, #0
 800c7c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7c2:	25a3      	movs	r5, #163	@ 0xa3
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	e793      	b.n	800c6f0 <__gethex+0xf8>
 800c7c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c7cc:	2a2e      	cmp	r2, #46	@ 0x2e
 800c7ce:	d012      	beq.n	800c7f6 <__gethex+0x1fe>
 800c7d0:	2b20      	cmp	r3, #32
 800c7d2:	d104      	bne.n	800c7de <__gethex+0x1e6>
 800c7d4:	f845 bb04 	str.w	fp, [r5], #4
 800c7d8:	f04f 0b00 	mov.w	fp, #0
 800c7dc:	465b      	mov	r3, fp
 800c7de:	7830      	ldrb	r0, [r6, #0]
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	f7ff fef4 	bl	800c5ce <__hexdig_fun>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	f000 000f 	and.w	r0, r0, #15
 800c7ec:	4098      	lsls	r0, r3
 800c7ee:	ea4b 0b00 	orr.w	fp, fp, r0
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	e7ae      	b.n	800c754 <__gethex+0x15c>
 800c7f6:	45b1      	cmp	r9, r6
 800c7f8:	d8ea      	bhi.n	800c7d0 <__gethex+0x1d8>
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	492a      	ldr	r1, [pc, #168]	@ (800c8a8 <__gethex+0x2b0>)
 800c800:	9303      	str	r3, [sp, #12]
 800c802:	f7ff fe29 	bl	800c458 <strncmp>
 800c806:	9b03      	ldr	r3, [sp, #12]
 800c808:	2800      	cmp	r0, #0
 800c80a:	d1e1      	bne.n	800c7d0 <__gethex+0x1d8>
 800c80c:	e7a2      	b.n	800c754 <__gethex+0x15c>
 800c80e:	4620      	mov	r0, r4
 800c810:	1ea9      	subs	r1, r5, #2
 800c812:	f7fe fd68 	bl	800b2e6 <__any_on>
 800c816:	2800      	cmp	r0, #0
 800c818:	d0c2      	beq.n	800c7a0 <__gethex+0x1a8>
 800c81a:	f04f 0903 	mov.w	r9, #3
 800c81e:	e7c1      	b.n	800c7a4 <__gethex+0x1ac>
 800c820:	da09      	bge.n	800c836 <__gethex+0x23e>
 800c822:	1b75      	subs	r5, r6, r5
 800c824:	4621      	mov	r1, r4
 800c826:	462a      	mov	r2, r5
 800c828:	9801      	ldr	r0, [sp, #4]
 800c82a:	f7fe fb2d 	bl	800ae88 <__lshift>
 800c82e:	4604      	mov	r4, r0
 800c830:	1b7f      	subs	r7, r7, r5
 800c832:	f100 0a14 	add.w	sl, r0, #20
 800c836:	f04f 0900 	mov.w	r9, #0
 800c83a:	e7b8      	b.n	800c7ae <__gethex+0x1b6>
 800c83c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c840:	42bd      	cmp	r5, r7
 800c842:	dd6f      	ble.n	800c924 <__gethex+0x32c>
 800c844:	1bed      	subs	r5, r5, r7
 800c846:	42ae      	cmp	r6, r5
 800c848:	dc34      	bgt.n	800c8b4 <__gethex+0x2bc>
 800c84a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d022      	beq.n	800c898 <__gethex+0x2a0>
 800c852:	2b03      	cmp	r3, #3
 800c854:	d024      	beq.n	800c8a0 <__gethex+0x2a8>
 800c856:	2b01      	cmp	r3, #1
 800c858:	d115      	bne.n	800c886 <__gethex+0x28e>
 800c85a:	42ae      	cmp	r6, r5
 800c85c:	d113      	bne.n	800c886 <__gethex+0x28e>
 800c85e:	2e01      	cmp	r6, #1
 800c860:	d10b      	bne.n	800c87a <__gethex+0x282>
 800c862:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c866:	9a02      	ldr	r2, [sp, #8]
 800c868:	2562      	movs	r5, #98	@ 0x62
 800c86a:	6013      	str	r3, [r2, #0]
 800c86c:	2301      	movs	r3, #1
 800c86e:	6123      	str	r3, [r4, #16]
 800c870:	f8ca 3000 	str.w	r3, [sl]
 800c874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c876:	601c      	str	r4, [r3, #0]
 800c878:	e73a      	b.n	800c6f0 <__gethex+0xf8>
 800c87a:	4620      	mov	r0, r4
 800c87c:	1e71      	subs	r1, r6, #1
 800c87e:	f7fe fd32 	bl	800b2e6 <__any_on>
 800c882:	2800      	cmp	r0, #0
 800c884:	d1ed      	bne.n	800c862 <__gethex+0x26a>
 800c886:	4621      	mov	r1, r4
 800c888:	9801      	ldr	r0, [sp, #4]
 800c88a:	f7fe f8e7 	bl	800aa5c <_Bfree>
 800c88e:	2300      	movs	r3, #0
 800c890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c892:	2550      	movs	r5, #80	@ 0x50
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	e72b      	b.n	800c6f0 <__gethex+0xf8>
 800c898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d1f3      	bne.n	800c886 <__gethex+0x28e>
 800c89e:	e7e0      	b.n	800c862 <__gethex+0x26a>
 800c8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1dd      	bne.n	800c862 <__gethex+0x26a>
 800c8a6:	e7ee      	b.n	800c886 <__gethex+0x28e>
 800c8a8:	0800dd10 	.word	0x0800dd10
 800c8ac:	0800dba3 	.word	0x0800dba3
 800c8b0:	0800debe 	.word	0x0800debe
 800c8b4:	1e6f      	subs	r7, r5, #1
 800c8b6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ba:	d130      	bne.n	800c91e <__gethex+0x326>
 800c8bc:	b127      	cbz	r7, 800c8c8 <__gethex+0x2d0>
 800c8be:	4639      	mov	r1, r7
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7fe fd10 	bl	800b2e6 <__any_on>
 800c8c6:	4681      	mov	r9, r0
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4629      	mov	r1, r5
 800c8cc:	1b76      	subs	r6, r6, r5
 800c8ce:	2502      	movs	r5, #2
 800c8d0:	117a      	asrs	r2, r7, #5
 800c8d2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c8d6:	f007 071f 	and.w	r7, r7, #31
 800c8da:	40bb      	lsls	r3, r7
 800c8dc:	4213      	tst	r3, r2
 800c8de:	4620      	mov	r0, r4
 800c8e0:	bf18      	it	ne
 800c8e2:	f049 0902 	orrne.w	r9, r9, #2
 800c8e6:	f7ff fe1f 	bl	800c528 <rshift>
 800c8ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c8ee:	f1b9 0f00 	cmp.w	r9, #0
 800c8f2:	d047      	beq.n	800c984 <__gethex+0x38c>
 800c8f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8f8:	2b02      	cmp	r3, #2
 800c8fa:	d015      	beq.n	800c928 <__gethex+0x330>
 800c8fc:	2b03      	cmp	r3, #3
 800c8fe:	d017      	beq.n	800c930 <__gethex+0x338>
 800c900:	2b01      	cmp	r3, #1
 800c902:	d109      	bne.n	800c918 <__gethex+0x320>
 800c904:	f019 0f02 	tst.w	r9, #2
 800c908:	d006      	beq.n	800c918 <__gethex+0x320>
 800c90a:	f8da 3000 	ldr.w	r3, [sl]
 800c90e:	ea49 0903 	orr.w	r9, r9, r3
 800c912:	f019 0f01 	tst.w	r9, #1
 800c916:	d10e      	bne.n	800c936 <__gethex+0x33e>
 800c918:	f045 0510 	orr.w	r5, r5, #16
 800c91c:	e032      	b.n	800c984 <__gethex+0x38c>
 800c91e:	f04f 0901 	mov.w	r9, #1
 800c922:	e7d1      	b.n	800c8c8 <__gethex+0x2d0>
 800c924:	2501      	movs	r5, #1
 800c926:	e7e2      	b.n	800c8ee <__gethex+0x2f6>
 800c928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c92a:	f1c3 0301 	rsb	r3, r3, #1
 800c92e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d0f0      	beq.n	800c918 <__gethex+0x320>
 800c936:	f04f 0c00 	mov.w	ip, #0
 800c93a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c93e:	f104 0314 	add.w	r3, r4, #20
 800c942:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c946:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c950:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c954:	d01b      	beq.n	800c98e <__gethex+0x396>
 800c956:	3201      	adds	r2, #1
 800c958:	6002      	str	r2, [r0, #0]
 800c95a:	2d02      	cmp	r5, #2
 800c95c:	f104 0314 	add.w	r3, r4, #20
 800c960:	d13c      	bne.n	800c9dc <__gethex+0x3e4>
 800c962:	f8d8 2000 	ldr.w	r2, [r8]
 800c966:	3a01      	subs	r2, #1
 800c968:	42b2      	cmp	r2, r6
 800c96a:	d109      	bne.n	800c980 <__gethex+0x388>
 800c96c:	2201      	movs	r2, #1
 800c96e:	1171      	asrs	r1, r6, #5
 800c970:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c974:	f006 061f 	and.w	r6, r6, #31
 800c978:	fa02 f606 	lsl.w	r6, r2, r6
 800c97c:	421e      	tst	r6, r3
 800c97e:	d13a      	bne.n	800c9f6 <__gethex+0x3fe>
 800c980:	f045 0520 	orr.w	r5, r5, #32
 800c984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c986:	601c      	str	r4, [r3, #0]
 800c988:	9b02      	ldr	r3, [sp, #8]
 800c98a:	601f      	str	r7, [r3, #0]
 800c98c:	e6b0      	b.n	800c6f0 <__gethex+0xf8>
 800c98e:	4299      	cmp	r1, r3
 800c990:	f843 cc04 	str.w	ip, [r3, #-4]
 800c994:	d8d9      	bhi.n	800c94a <__gethex+0x352>
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	459b      	cmp	fp, r3
 800c99a:	db17      	blt.n	800c9cc <__gethex+0x3d4>
 800c99c:	6861      	ldr	r1, [r4, #4]
 800c99e:	9801      	ldr	r0, [sp, #4]
 800c9a0:	3101      	adds	r1, #1
 800c9a2:	f7fe f81b 	bl	800a9dc <_Balloc>
 800c9a6:	4681      	mov	r9, r0
 800c9a8:	b918      	cbnz	r0, 800c9b2 <__gethex+0x3ba>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	2184      	movs	r1, #132	@ 0x84
 800c9ae:	4b19      	ldr	r3, [pc, #100]	@ (800ca14 <__gethex+0x41c>)
 800c9b0:	e6c5      	b.n	800c73e <__gethex+0x146>
 800c9b2:	6922      	ldr	r2, [r4, #16]
 800c9b4:	f104 010c 	add.w	r1, r4, #12
 800c9b8:	3202      	adds	r2, #2
 800c9ba:	0092      	lsls	r2, r2, #2
 800c9bc:	300c      	adds	r0, #12
 800c9be:	f7ff fd6d 	bl	800c49c <memcpy>
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	9801      	ldr	r0, [sp, #4]
 800c9c6:	f7fe f849 	bl	800aa5c <_Bfree>
 800c9ca:	464c      	mov	r4, r9
 800c9cc:	6923      	ldr	r3, [r4, #16]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	6122      	str	r2, [r4, #16]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9d8:	615a      	str	r2, [r3, #20]
 800c9da:	e7be      	b.n	800c95a <__gethex+0x362>
 800c9dc:	6922      	ldr	r2, [r4, #16]
 800c9de:	455a      	cmp	r2, fp
 800c9e0:	dd0b      	ble.n	800c9fa <__gethex+0x402>
 800c9e2:	2101      	movs	r1, #1
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f7ff fd9f 	bl	800c528 <rshift>
 800c9ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c9ee:	3701      	adds	r7, #1
 800c9f0:	42bb      	cmp	r3, r7
 800c9f2:	f6ff aee0 	blt.w	800c7b6 <__gethex+0x1be>
 800c9f6:	2501      	movs	r5, #1
 800c9f8:	e7c2      	b.n	800c980 <__gethex+0x388>
 800c9fa:	f016 061f 	ands.w	r6, r6, #31
 800c9fe:	d0fa      	beq.n	800c9f6 <__gethex+0x3fe>
 800ca00:	4453      	add	r3, sl
 800ca02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca06:	f7fe f8db 	bl	800abc0 <__hi0bits>
 800ca0a:	f1c6 0620 	rsb	r6, r6, #32
 800ca0e:	42b0      	cmp	r0, r6
 800ca10:	dbe7      	blt.n	800c9e2 <__gethex+0x3ea>
 800ca12:	e7f0      	b.n	800c9f6 <__gethex+0x3fe>
 800ca14:	0800dba3 	.word	0x0800dba3

0800ca18 <L_shift>:
 800ca18:	f1c2 0208 	rsb	r2, r2, #8
 800ca1c:	0092      	lsls	r2, r2, #2
 800ca1e:	b570      	push	{r4, r5, r6, lr}
 800ca20:	f1c2 0620 	rsb	r6, r2, #32
 800ca24:	6843      	ldr	r3, [r0, #4]
 800ca26:	6804      	ldr	r4, [r0, #0]
 800ca28:	fa03 f506 	lsl.w	r5, r3, r6
 800ca2c:	432c      	orrs	r4, r5
 800ca2e:	40d3      	lsrs	r3, r2
 800ca30:	6004      	str	r4, [r0, #0]
 800ca32:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca36:	4288      	cmp	r0, r1
 800ca38:	d3f4      	bcc.n	800ca24 <L_shift+0xc>
 800ca3a:	bd70      	pop	{r4, r5, r6, pc}

0800ca3c <__match>:
 800ca3c:	b530      	push	{r4, r5, lr}
 800ca3e:	6803      	ldr	r3, [r0, #0]
 800ca40:	3301      	adds	r3, #1
 800ca42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca46:	b914      	cbnz	r4, 800ca4e <__match+0x12>
 800ca48:	6003      	str	r3, [r0, #0]
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	bd30      	pop	{r4, r5, pc}
 800ca4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca52:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ca56:	2d19      	cmp	r5, #25
 800ca58:	bf98      	it	ls
 800ca5a:	3220      	addls	r2, #32
 800ca5c:	42a2      	cmp	r2, r4
 800ca5e:	d0f0      	beq.n	800ca42 <__match+0x6>
 800ca60:	2000      	movs	r0, #0
 800ca62:	e7f3      	b.n	800ca4c <__match+0x10>

0800ca64 <__hexnan>:
 800ca64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca68:	2500      	movs	r5, #0
 800ca6a:	680b      	ldr	r3, [r1, #0]
 800ca6c:	4682      	mov	sl, r0
 800ca6e:	115e      	asrs	r6, r3, #5
 800ca70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca74:	f013 031f 	ands.w	r3, r3, #31
 800ca78:	bf18      	it	ne
 800ca7a:	3604      	addne	r6, #4
 800ca7c:	1f37      	subs	r7, r6, #4
 800ca7e:	4690      	mov	r8, r2
 800ca80:	46b9      	mov	r9, r7
 800ca82:	463c      	mov	r4, r7
 800ca84:	46ab      	mov	fp, r5
 800ca86:	b087      	sub	sp, #28
 800ca88:	6801      	ldr	r1, [r0, #0]
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca90:	9502      	str	r5, [sp, #8]
 800ca92:	784a      	ldrb	r2, [r1, #1]
 800ca94:	1c4b      	adds	r3, r1, #1
 800ca96:	9303      	str	r3, [sp, #12]
 800ca98:	b342      	cbz	r2, 800caec <__hexnan+0x88>
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	9105      	str	r1, [sp, #20]
 800ca9e:	9204      	str	r2, [sp, #16]
 800caa0:	f7ff fd95 	bl	800c5ce <__hexdig_fun>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d151      	bne.n	800cb4c <__hexnan+0xe8>
 800caa8:	9a04      	ldr	r2, [sp, #16]
 800caaa:	9905      	ldr	r1, [sp, #20]
 800caac:	2a20      	cmp	r2, #32
 800caae:	d818      	bhi.n	800cae2 <__hexnan+0x7e>
 800cab0:	9b02      	ldr	r3, [sp, #8]
 800cab2:	459b      	cmp	fp, r3
 800cab4:	dd13      	ble.n	800cade <__hexnan+0x7a>
 800cab6:	454c      	cmp	r4, r9
 800cab8:	d206      	bcs.n	800cac8 <__hexnan+0x64>
 800caba:	2d07      	cmp	r5, #7
 800cabc:	dc04      	bgt.n	800cac8 <__hexnan+0x64>
 800cabe:	462a      	mov	r2, r5
 800cac0:	4649      	mov	r1, r9
 800cac2:	4620      	mov	r0, r4
 800cac4:	f7ff ffa8 	bl	800ca18 <L_shift>
 800cac8:	4544      	cmp	r4, r8
 800caca:	d952      	bls.n	800cb72 <__hexnan+0x10e>
 800cacc:	2300      	movs	r3, #0
 800cace:	f1a4 0904 	sub.w	r9, r4, #4
 800cad2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cad6:	461d      	mov	r5, r3
 800cad8:	464c      	mov	r4, r9
 800cada:	f8cd b008 	str.w	fp, [sp, #8]
 800cade:	9903      	ldr	r1, [sp, #12]
 800cae0:	e7d7      	b.n	800ca92 <__hexnan+0x2e>
 800cae2:	2a29      	cmp	r2, #41	@ 0x29
 800cae4:	d157      	bne.n	800cb96 <__hexnan+0x132>
 800cae6:	3102      	adds	r1, #2
 800cae8:	f8ca 1000 	str.w	r1, [sl]
 800caec:	f1bb 0f00 	cmp.w	fp, #0
 800caf0:	d051      	beq.n	800cb96 <__hexnan+0x132>
 800caf2:	454c      	cmp	r4, r9
 800caf4:	d206      	bcs.n	800cb04 <__hexnan+0xa0>
 800caf6:	2d07      	cmp	r5, #7
 800caf8:	dc04      	bgt.n	800cb04 <__hexnan+0xa0>
 800cafa:	462a      	mov	r2, r5
 800cafc:	4649      	mov	r1, r9
 800cafe:	4620      	mov	r0, r4
 800cb00:	f7ff ff8a 	bl	800ca18 <L_shift>
 800cb04:	4544      	cmp	r4, r8
 800cb06:	d936      	bls.n	800cb76 <__hexnan+0x112>
 800cb08:	4623      	mov	r3, r4
 800cb0a:	f1a8 0204 	sub.w	r2, r8, #4
 800cb0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb12:	429f      	cmp	r7, r3
 800cb14:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb18:	d2f9      	bcs.n	800cb0e <__hexnan+0xaa>
 800cb1a:	1b3b      	subs	r3, r7, r4
 800cb1c:	f023 0303 	bic.w	r3, r3, #3
 800cb20:	3304      	adds	r3, #4
 800cb22:	3401      	adds	r4, #1
 800cb24:	3e03      	subs	r6, #3
 800cb26:	42b4      	cmp	r4, r6
 800cb28:	bf88      	it	hi
 800cb2a:	2304      	movhi	r3, #4
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4443      	add	r3, r8
 800cb30:	f843 2b04 	str.w	r2, [r3], #4
 800cb34:	429f      	cmp	r7, r3
 800cb36:	d2fb      	bcs.n	800cb30 <__hexnan+0xcc>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	b91b      	cbnz	r3, 800cb44 <__hexnan+0xe0>
 800cb3c:	4547      	cmp	r7, r8
 800cb3e:	d128      	bne.n	800cb92 <__hexnan+0x12e>
 800cb40:	2301      	movs	r3, #1
 800cb42:	603b      	str	r3, [r7, #0]
 800cb44:	2005      	movs	r0, #5
 800cb46:	b007      	add	sp, #28
 800cb48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4c:	3501      	adds	r5, #1
 800cb4e:	2d08      	cmp	r5, #8
 800cb50:	f10b 0b01 	add.w	fp, fp, #1
 800cb54:	dd06      	ble.n	800cb64 <__hexnan+0x100>
 800cb56:	4544      	cmp	r4, r8
 800cb58:	d9c1      	bls.n	800cade <__hexnan+0x7a>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	2501      	movs	r5, #1
 800cb5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb62:	3c04      	subs	r4, #4
 800cb64:	6822      	ldr	r2, [r4, #0]
 800cb66:	f000 000f 	and.w	r0, r0, #15
 800cb6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cb6e:	6020      	str	r0, [r4, #0]
 800cb70:	e7b5      	b.n	800cade <__hexnan+0x7a>
 800cb72:	2508      	movs	r5, #8
 800cb74:	e7b3      	b.n	800cade <__hexnan+0x7a>
 800cb76:	9b01      	ldr	r3, [sp, #4]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d0dd      	beq.n	800cb38 <__hexnan+0xd4>
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb80:	f1c3 0320 	rsb	r3, r3, #32
 800cb84:	40da      	lsrs	r2, r3
 800cb86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb90:	e7d2      	b.n	800cb38 <__hexnan+0xd4>
 800cb92:	3f04      	subs	r7, #4
 800cb94:	e7d0      	b.n	800cb38 <__hexnan+0xd4>
 800cb96:	2004      	movs	r0, #4
 800cb98:	e7d5      	b.n	800cb46 <__hexnan+0xe2>

0800cb9a <__ascii_mbtowc>:
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	b901      	cbnz	r1, 800cba0 <__ascii_mbtowc+0x6>
 800cb9e:	a901      	add	r1, sp, #4
 800cba0:	b142      	cbz	r2, 800cbb4 <__ascii_mbtowc+0x1a>
 800cba2:	b14b      	cbz	r3, 800cbb8 <__ascii_mbtowc+0x1e>
 800cba4:	7813      	ldrb	r3, [r2, #0]
 800cba6:	600b      	str	r3, [r1, #0]
 800cba8:	7812      	ldrb	r2, [r2, #0]
 800cbaa:	1e10      	subs	r0, r2, #0
 800cbac:	bf18      	it	ne
 800cbae:	2001      	movne	r0, #1
 800cbb0:	b002      	add	sp, #8
 800cbb2:	4770      	bx	lr
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	e7fb      	b.n	800cbb0 <__ascii_mbtowc+0x16>
 800cbb8:	f06f 0001 	mvn.w	r0, #1
 800cbbc:	e7f8      	b.n	800cbb0 <__ascii_mbtowc+0x16>

0800cbbe <_realloc_r>:
 800cbbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	4615      	mov	r5, r2
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	b921      	cbnz	r1, 800cbd4 <_realloc_r+0x16>
 800cbca:	4611      	mov	r1, r2
 800cbcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	f7fd be78 	b.w	800a8c4 <_malloc_r>
 800cbd4:	b92a      	cbnz	r2, 800cbe2 <_realloc_r+0x24>
 800cbd6:	f7fd fe03 	bl	800a7e0 <_free_r>
 800cbda:	2400      	movs	r4, #0
 800cbdc:	4620      	mov	r0, r4
 800cbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe2:	f000 f840 	bl	800cc66 <_malloc_usable_size_r>
 800cbe6:	4285      	cmp	r5, r0
 800cbe8:	4606      	mov	r6, r0
 800cbea:	d802      	bhi.n	800cbf2 <_realloc_r+0x34>
 800cbec:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbf0:	d8f4      	bhi.n	800cbdc <_realloc_r+0x1e>
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	f7fd fe65 	bl	800a8c4 <_malloc_r>
 800cbfa:	4607      	mov	r7, r0
 800cbfc:	2800      	cmp	r0, #0
 800cbfe:	d0ec      	beq.n	800cbda <_realloc_r+0x1c>
 800cc00:	42b5      	cmp	r5, r6
 800cc02:	462a      	mov	r2, r5
 800cc04:	4621      	mov	r1, r4
 800cc06:	bf28      	it	cs
 800cc08:	4632      	movcs	r2, r6
 800cc0a:	f7ff fc47 	bl	800c49c <memcpy>
 800cc0e:	4621      	mov	r1, r4
 800cc10:	4640      	mov	r0, r8
 800cc12:	f7fd fde5 	bl	800a7e0 <_free_r>
 800cc16:	463c      	mov	r4, r7
 800cc18:	e7e0      	b.n	800cbdc <_realloc_r+0x1e>

0800cc1a <__ascii_wctomb>:
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	4608      	mov	r0, r1
 800cc1e:	b141      	cbz	r1, 800cc32 <__ascii_wctomb+0x18>
 800cc20:	2aff      	cmp	r2, #255	@ 0xff
 800cc22:	d904      	bls.n	800cc2e <__ascii_wctomb+0x14>
 800cc24:	228a      	movs	r2, #138	@ 0x8a
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	4770      	bx	lr
 800cc2e:	2001      	movs	r0, #1
 800cc30:	700a      	strb	r2, [r1, #0]
 800cc32:	4770      	bx	lr

0800cc34 <fiprintf>:
 800cc34:	b40e      	push	{r1, r2, r3}
 800cc36:	b503      	push	{r0, r1, lr}
 800cc38:	4601      	mov	r1, r0
 800cc3a:	ab03      	add	r3, sp, #12
 800cc3c:	4805      	ldr	r0, [pc, #20]	@ (800cc54 <fiprintf+0x20>)
 800cc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc42:	6800      	ldr	r0, [r0, #0]
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	f000 f83d 	bl	800ccc4 <_vfiprintf_r>
 800cc4a:	b002      	add	sp, #8
 800cc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc50:	b003      	add	sp, #12
 800cc52:	4770      	bx	lr
 800cc54:	20000064 	.word	0x20000064

0800cc58 <abort>:
 800cc58:	2006      	movs	r0, #6
 800cc5a:	b508      	push	{r3, lr}
 800cc5c:	f000 fa06 	bl	800d06c <raise>
 800cc60:	2001      	movs	r0, #1
 800cc62:	f7f7 f8da 	bl	8003e1a <_exit>

0800cc66 <_malloc_usable_size_r>:
 800cc66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc6a:	1f18      	subs	r0, r3, #4
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	bfbc      	itt	lt
 800cc70:	580b      	ldrlt	r3, [r1, r0]
 800cc72:	18c0      	addlt	r0, r0, r3
 800cc74:	4770      	bx	lr

0800cc76 <__sfputc_r>:
 800cc76:	6893      	ldr	r3, [r2, #8]
 800cc78:	b410      	push	{r4}
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	6093      	str	r3, [r2, #8]
 800cc80:	da07      	bge.n	800cc92 <__sfputc_r+0x1c>
 800cc82:	6994      	ldr	r4, [r2, #24]
 800cc84:	42a3      	cmp	r3, r4
 800cc86:	db01      	blt.n	800cc8c <__sfputc_r+0x16>
 800cc88:	290a      	cmp	r1, #10
 800cc8a:	d102      	bne.n	800cc92 <__sfputc_r+0x1c>
 800cc8c:	bc10      	pop	{r4}
 800cc8e:	f000 b931 	b.w	800cef4 <__swbuf_r>
 800cc92:	6813      	ldr	r3, [r2, #0]
 800cc94:	1c58      	adds	r0, r3, #1
 800cc96:	6010      	str	r0, [r2, #0]
 800cc98:	7019      	strb	r1, [r3, #0]
 800cc9a:	4608      	mov	r0, r1
 800cc9c:	bc10      	pop	{r4}
 800cc9e:	4770      	bx	lr

0800cca0 <__sfputs_r>:
 800cca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	4614      	mov	r4, r2
 800cca8:	18d5      	adds	r5, r2, r3
 800ccaa:	42ac      	cmp	r4, r5
 800ccac:	d101      	bne.n	800ccb2 <__sfputs_r+0x12>
 800ccae:	2000      	movs	r0, #0
 800ccb0:	e007      	b.n	800ccc2 <__sfputs_r+0x22>
 800ccb2:	463a      	mov	r2, r7
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccba:	f7ff ffdc 	bl	800cc76 <__sfputc_r>
 800ccbe:	1c43      	adds	r3, r0, #1
 800ccc0:	d1f3      	bne.n	800ccaa <__sfputs_r+0xa>
 800ccc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ccc4 <_vfiprintf_r>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	460d      	mov	r5, r1
 800ccca:	4614      	mov	r4, r2
 800cccc:	4698      	mov	r8, r3
 800ccce:	4606      	mov	r6, r0
 800ccd0:	b09d      	sub	sp, #116	@ 0x74
 800ccd2:	b118      	cbz	r0, 800ccdc <_vfiprintf_r+0x18>
 800ccd4:	6a03      	ldr	r3, [r0, #32]
 800ccd6:	b90b      	cbnz	r3, 800ccdc <_vfiprintf_r+0x18>
 800ccd8:	f7fc fe06 	bl	80098e8 <__sinit>
 800ccdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccde:	07d9      	lsls	r1, r3, #31
 800cce0:	d405      	bmi.n	800ccee <_vfiprintf_r+0x2a>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	059a      	lsls	r2, r3, #22
 800cce6:	d402      	bmi.n	800ccee <_vfiprintf_r+0x2a>
 800cce8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccea:	f7fc ff14 	bl	8009b16 <__retarget_lock_acquire_recursive>
 800ccee:	89ab      	ldrh	r3, [r5, #12]
 800ccf0:	071b      	lsls	r3, r3, #28
 800ccf2:	d501      	bpl.n	800ccf8 <_vfiprintf_r+0x34>
 800ccf4:	692b      	ldr	r3, [r5, #16]
 800ccf6:	b99b      	cbnz	r3, 800cd20 <_vfiprintf_r+0x5c>
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	f000 f938 	bl	800cf70 <__swsetup_r>
 800cd00:	b170      	cbz	r0, 800cd20 <_vfiprintf_r+0x5c>
 800cd02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd04:	07dc      	lsls	r4, r3, #31
 800cd06:	d504      	bpl.n	800cd12 <_vfiprintf_r+0x4e>
 800cd08:	f04f 30ff 	mov.w	r0, #4294967295
 800cd0c:	b01d      	add	sp, #116	@ 0x74
 800cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd12:	89ab      	ldrh	r3, [r5, #12]
 800cd14:	0598      	lsls	r0, r3, #22
 800cd16:	d4f7      	bmi.n	800cd08 <_vfiprintf_r+0x44>
 800cd18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cd1a:	f7fc fefd 	bl	8009b18 <__retarget_lock_release_recursive>
 800cd1e:	e7f3      	b.n	800cd08 <_vfiprintf_r+0x44>
 800cd20:	2300      	movs	r3, #0
 800cd22:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd24:	2320      	movs	r3, #32
 800cd26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cd2a:	2330      	movs	r3, #48	@ 0x30
 800cd2c:	f04f 0901 	mov.w	r9, #1
 800cd30:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd34:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cee0 <_vfiprintf_r+0x21c>
 800cd38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cd3c:	4623      	mov	r3, r4
 800cd3e:	469a      	mov	sl, r3
 800cd40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd44:	b10a      	cbz	r2, 800cd4a <_vfiprintf_r+0x86>
 800cd46:	2a25      	cmp	r2, #37	@ 0x25
 800cd48:	d1f9      	bne.n	800cd3e <_vfiprintf_r+0x7a>
 800cd4a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd4e:	d00b      	beq.n	800cd68 <_vfiprintf_r+0xa4>
 800cd50:	465b      	mov	r3, fp
 800cd52:	4622      	mov	r2, r4
 800cd54:	4629      	mov	r1, r5
 800cd56:	4630      	mov	r0, r6
 800cd58:	f7ff ffa2 	bl	800cca0 <__sfputs_r>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	f000 80a7 	beq.w	800ceb0 <_vfiprintf_r+0x1ec>
 800cd62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd64:	445a      	add	r2, fp
 800cd66:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd68:	f89a 3000 	ldrb.w	r3, [sl]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	f000 809f 	beq.w	800ceb0 <_vfiprintf_r+0x1ec>
 800cd72:	2300      	movs	r3, #0
 800cd74:	f04f 32ff 	mov.w	r2, #4294967295
 800cd78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd7c:	f10a 0a01 	add.w	sl, sl, #1
 800cd80:	9304      	str	r3, [sp, #16]
 800cd82:	9307      	str	r3, [sp, #28]
 800cd84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd88:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd8a:	4654      	mov	r4, sl
 800cd8c:	2205      	movs	r2, #5
 800cd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd92:	4853      	ldr	r0, [pc, #332]	@ (800cee0 <_vfiprintf_r+0x21c>)
 800cd94:	f7fc fec1 	bl	8009b1a <memchr>
 800cd98:	9a04      	ldr	r2, [sp, #16]
 800cd9a:	b9d8      	cbnz	r0, 800cdd4 <_vfiprintf_r+0x110>
 800cd9c:	06d1      	lsls	r1, r2, #27
 800cd9e:	bf44      	itt	mi
 800cda0:	2320      	movmi	r3, #32
 800cda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cda6:	0713      	lsls	r3, r2, #28
 800cda8:	bf44      	itt	mi
 800cdaa:	232b      	movmi	r3, #43	@ 0x2b
 800cdac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cdb0:	f89a 3000 	ldrb.w	r3, [sl]
 800cdb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdb6:	d015      	beq.n	800cde4 <_vfiprintf_r+0x120>
 800cdb8:	4654      	mov	r4, sl
 800cdba:	2000      	movs	r0, #0
 800cdbc:	f04f 0c0a 	mov.w	ip, #10
 800cdc0:	9a07      	ldr	r2, [sp, #28]
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdc8:	3b30      	subs	r3, #48	@ 0x30
 800cdca:	2b09      	cmp	r3, #9
 800cdcc:	d94b      	bls.n	800ce66 <_vfiprintf_r+0x1a2>
 800cdce:	b1b0      	cbz	r0, 800cdfe <_vfiprintf_r+0x13a>
 800cdd0:	9207      	str	r2, [sp, #28]
 800cdd2:	e014      	b.n	800cdfe <_vfiprintf_r+0x13a>
 800cdd4:	eba0 0308 	sub.w	r3, r0, r8
 800cdd8:	fa09 f303 	lsl.w	r3, r9, r3
 800cddc:	4313      	orrs	r3, r2
 800cdde:	46a2      	mov	sl, r4
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	e7d2      	b.n	800cd8a <_vfiprintf_r+0xc6>
 800cde4:	9b03      	ldr	r3, [sp, #12]
 800cde6:	1d19      	adds	r1, r3, #4
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	9103      	str	r1, [sp, #12]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	bfbb      	ittet	lt
 800cdf0:	425b      	neglt	r3, r3
 800cdf2:	f042 0202 	orrlt.w	r2, r2, #2
 800cdf6:	9307      	strge	r3, [sp, #28]
 800cdf8:	9307      	strlt	r3, [sp, #28]
 800cdfa:	bfb8      	it	lt
 800cdfc:	9204      	strlt	r2, [sp, #16]
 800cdfe:	7823      	ldrb	r3, [r4, #0]
 800ce00:	2b2e      	cmp	r3, #46	@ 0x2e
 800ce02:	d10a      	bne.n	800ce1a <_vfiprintf_r+0x156>
 800ce04:	7863      	ldrb	r3, [r4, #1]
 800ce06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce08:	d132      	bne.n	800ce70 <_vfiprintf_r+0x1ac>
 800ce0a:	9b03      	ldr	r3, [sp, #12]
 800ce0c:	3402      	adds	r4, #2
 800ce0e:	1d1a      	adds	r2, r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	9203      	str	r2, [sp, #12]
 800ce14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ce18:	9305      	str	r3, [sp, #20]
 800ce1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cee4 <_vfiprintf_r+0x220>
 800ce1e:	2203      	movs	r2, #3
 800ce20:	4650      	mov	r0, sl
 800ce22:	7821      	ldrb	r1, [r4, #0]
 800ce24:	f7fc fe79 	bl	8009b1a <memchr>
 800ce28:	b138      	cbz	r0, 800ce3a <_vfiprintf_r+0x176>
 800ce2a:	2240      	movs	r2, #64	@ 0x40
 800ce2c:	9b04      	ldr	r3, [sp, #16]
 800ce2e:	eba0 000a 	sub.w	r0, r0, sl
 800ce32:	4082      	lsls	r2, r0
 800ce34:	4313      	orrs	r3, r2
 800ce36:	3401      	adds	r4, #1
 800ce38:	9304      	str	r3, [sp, #16]
 800ce3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3e:	2206      	movs	r2, #6
 800ce40:	4829      	ldr	r0, [pc, #164]	@ (800cee8 <_vfiprintf_r+0x224>)
 800ce42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce46:	f7fc fe68 	bl	8009b1a <memchr>
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	d03f      	beq.n	800cece <_vfiprintf_r+0x20a>
 800ce4e:	4b27      	ldr	r3, [pc, #156]	@ (800ceec <_vfiprintf_r+0x228>)
 800ce50:	bb1b      	cbnz	r3, 800ce9a <_vfiprintf_r+0x1d6>
 800ce52:	9b03      	ldr	r3, [sp, #12]
 800ce54:	3307      	adds	r3, #7
 800ce56:	f023 0307 	bic.w	r3, r3, #7
 800ce5a:	3308      	adds	r3, #8
 800ce5c:	9303      	str	r3, [sp, #12]
 800ce5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce60:	443b      	add	r3, r7
 800ce62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce64:	e76a      	b.n	800cd3c <_vfiprintf_r+0x78>
 800ce66:	460c      	mov	r4, r1
 800ce68:	2001      	movs	r0, #1
 800ce6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce6e:	e7a8      	b.n	800cdc2 <_vfiprintf_r+0xfe>
 800ce70:	2300      	movs	r3, #0
 800ce72:	f04f 0c0a 	mov.w	ip, #10
 800ce76:	4619      	mov	r1, r3
 800ce78:	3401      	adds	r4, #1
 800ce7a:	9305      	str	r3, [sp, #20]
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce82:	3a30      	subs	r2, #48	@ 0x30
 800ce84:	2a09      	cmp	r2, #9
 800ce86:	d903      	bls.n	800ce90 <_vfiprintf_r+0x1cc>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d0c6      	beq.n	800ce1a <_vfiprintf_r+0x156>
 800ce8c:	9105      	str	r1, [sp, #20]
 800ce8e:	e7c4      	b.n	800ce1a <_vfiprintf_r+0x156>
 800ce90:	4604      	mov	r4, r0
 800ce92:	2301      	movs	r3, #1
 800ce94:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce98:	e7f0      	b.n	800ce7c <_vfiprintf_r+0x1b8>
 800ce9a:	ab03      	add	r3, sp, #12
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	462a      	mov	r2, r5
 800cea0:	4630      	mov	r0, r6
 800cea2:	4b13      	ldr	r3, [pc, #76]	@ (800cef0 <_vfiprintf_r+0x22c>)
 800cea4:	a904      	add	r1, sp, #16
 800cea6:	f7fb fec5 	bl	8008c34 <_printf_float>
 800ceaa:	4607      	mov	r7, r0
 800ceac:	1c78      	adds	r0, r7, #1
 800ceae:	d1d6      	bne.n	800ce5e <_vfiprintf_r+0x19a>
 800ceb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceb2:	07d9      	lsls	r1, r3, #31
 800ceb4:	d405      	bmi.n	800cec2 <_vfiprintf_r+0x1fe>
 800ceb6:	89ab      	ldrh	r3, [r5, #12]
 800ceb8:	059a      	lsls	r2, r3, #22
 800ceba:	d402      	bmi.n	800cec2 <_vfiprintf_r+0x1fe>
 800cebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cebe:	f7fc fe2b 	bl	8009b18 <__retarget_lock_release_recursive>
 800cec2:	89ab      	ldrh	r3, [r5, #12]
 800cec4:	065b      	lsls	r3, r3, #25
 800cec6:	f53f af1f 	bmi.w	800cd08 <_vfiprintf_r+0x44>
 800ceca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cecc:	e71e      	b.n	800cd0c <_vfiprintf_r+0x48>
 800cece:	ab03      	add	r3, sp, #12
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	462a      	mov	r2, r5
 800ced4:	4630      	mov	r0, r6
 800ced6:	4b06      	ldr	r3, [pc, #24]	@ (800cef0 <_vfiprintf_r+0x22c>)
 800ced8:	a904      	add	r1, sp, #16
 800ceda:	f7fc f949 	bl	8009170 <_printf_i>
 800cede:	e7e4      	b.n	800ceaa <_vfiprintf_r+0x1e6>
 800cee0:	0800de69 	.word	0x0800de69
 800cee4:	0800de6f 	.word	0x0800de6f
 800cee8:	0800de73 	.word	0x0800de73
 800ceec:	08008c35 	.word	0x08008c35
 800cef0:	0800cca1 	.word	0x0800cca1

0800cef4 <__swbuf_r>:
 800cef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cef6:	460e      	mov	r6, r1
 800cef8:	4614      	mov	r4, r2
 800cefa:	4605      	mov	r5, r0
 800cefc:	b118      	cbz	r0, 800cf06 <__swbuf_r+0x12>
 800cefe:	6a03      	ldr	r3, [r0, #32]
 800cf00:	b90b      	cbnz	r3, 800cf06 <__swbuf_r+0x12>
 800cf02:	f7fc fcf1 	bl	80098e8 <__sinit>
 800cf06:	69a3      	ldr	r3, [r4, #24]
 800cf08:	60a3      	str	r3, [r4, #8]
 800cf0a:	89a3      	ldrh	r3, [r4, #12]
 800cf0c:	071a      	lsls	r2, r3, #28
 800cf0e:	d501      	bpl.n	800cf14 <__swbuf_r+0x20>
 800cf10:	6923      	ldr	r3, [r4, #16]
 800cf12:	b943      	cbnz	r3, 800cf26 <__swbuf_r+0x32>
 800cf14:	4621      	mov	r1, r4
 800cf16:	4628      	mov	r0, r5
 800cf18:	f000 f82a 	bl	800cf70 <__swsetup_r>
 800cf1c:	b118      	cbz	r0, 800cf26 <__swbuf_r+0x32>
 800cf1e:	f04f 37ff 	mov.w	r7, #4294967295
 800cf22:	4638      	mov	r0, r7
 800cf24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	6922      	ldr	r2, [r4, #16]
 800cf2a:	b2f6      	uxtb	r6, r6
 800cf2c:	1a98      	subs	r0, r3, r2
 800cf2e:	6963      	ldr	r3, [r4, #20]
 800cf30:	4637      	mov	r7, r6
 800cf32:	4283      	cmp	r3, r0
 800cf34:	dc05      	bgt.n	800cf42 <__swbuf_r+0x4e>
 800cf36:	4621      	mov	r1, r4
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f7ff fa4b 	bl	800c3d4 <_fflush_r>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d1ed      	bne.n	800cf1e <__swbuf_r+0x2a>
 800cf42:	68a3      	ldr	r3, [r4, #8]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	60a3      	str	r3, [r4, #8]
 800cf48:	6823      	ldr	r3, [r4, #0]
 800cf4a:	1c5a      	adds	r2, r3, #1
 800cf4c:	6022      	str	r2, [r4, #0]
 800cf4e:	701e      	strb	r6, [r3, #0]
 800cf50:	6962      	ldr	r2, [r4, #20]
 800cf52:	1c43      	adds	r3, r0, #1
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d004      	beq.n	800cf62 <__swbuf_r+0x6e>
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	07db      	lsls	r3, r3, #31
 800cf5c:	d5e1      	bpl.n	800cf22 <__swbuf_r+0x2e>
 800cf5e:	2e0a      	cmp	r6, #10
 800cf60:	d1df      	bne.n	800cf22 <__swbuf_r+0x2e>
 800cf62:	4621      	mov	r1, r4
 800cf64:	4628      	mov	r0, r5
 800cf66:	f7ff fa35 	bl	800c3d4 <_fflush_r>
 800cf6a:	2800      	cmp	r0, #0
 800cf6c:	d0d9      	beq.n	800cf22 <__swbuf_r+0x2e>
 800cf6e:	e7d6      	b.n	800cf1e <__swbuf_r+0x2a>

0800cf70 <__swsetup_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4b29      	ldr	r3, [pc, #164]	@ (800d018 <__swsetup_r+0xa8>)
 800cf74:	4605      	mov	r5, r0
 800cf76:	6818      	ldr	r0, [r3, #0]
 800cf78:	460c      	mov	r4, r1
 800cf7a:	b118      	cbz	r0, 800cf84 <__swsetup_r+0x14>
 800cf7c:	6a03      	ldr	r3, [r0, #32]
 800cf7e:	b90b      	cbnz	r3, 800cf84 <__swsetup_r+0x14>
 800cf80:	f7fc fcb2 	bl	80098e8 <__sinit>
 800cf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf88:	0719      	lsls	r1, r3, #28
 800cf8a:	d422      	bmi.n	800cfd2 <__swsetup_r+0x62>
 800cf8c:	06da      	lsls	r2, r3, #27
 800cf8e:	d407      	bmi.n	800cfa0 <__swsetup_r+0x30>
 800cf90:	2209      	movs	r2, #9
 800cf92:	602a      	str	r2, [r5, #0]
 800cf94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf98:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9c:	81a3      	strh	r3, [r4, #12]
 800cf9e:	e033      	b.n	800d008 <__swsetup_r+0x98>
 800cfa0:	0758      	lsls	r0, r3, #29
 800cfa2:	d512      	bpl.n	800cfca <__swsetup_r+0x5a>
 800cfa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfa6:	b141      	cbz	r1, 800cfba <__swsetup_r+0x4a>
 800cfa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfac:	4299      	cmp	r1, r3
 800cfae:	d002      	beq.n	800cfb6 <__swsetup_r+0x46>
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f7fd fc15 	bl	800a7e0 <_free_r>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfba:	89a3      	ldrh	r3, [r4, #12]
 800cfbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	6063      	str	r3, [r4, #4]
 800cfc6:	6923      	ldr	r3, [r4, #16]
 800cfc8:	6023      	str	r3, [r4, #0]
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f043 0308 	orr.w	r3, r3, #8
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	6923      	ldr	r3, [r4, #16]
 800cfd4:	b94b      	cbnz	r3, 800cfea <__swsetup_r+0x7a>
 800cfd6:	89a3      	ldrh	r3, [r4, #12]
 800cfd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfe0:	d003      	beq.n	800cfea <__swsetup_r+0x7a>
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	f000 f882 	bl	800d0ee <__smakebuf_r>
 800cfea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfee:	f013 0201 	ands.w	r2, r3, #1
 800cff2:	d00a      	beq.n	800d00a <__swsetup_r+0x9a>
 800cff4:	2200      	movs	r2, #0
 800cff6:	60a2      	str	r2, [r4, #8]
 800cff8:	6962      	ldr	r2, [r4, #20]
 800cffa:	4252      	negs	r2, r2
 800cffc:	61a2      	str	r2, [r4, #24]
 800cffe:	6922      	ldr	r2, [r4, #16]
 800d000:	b942      	cbnz	r2, 800d014 <__swsetup_r+0xa4>
 800d002:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d006:	d1c5      	bne.n	800cf94 <__swsetup_r+0x24>
 800d008:	bd38      	pop	{r3, r4, r5, pc}
 800d00a:	0799      	lsls	r1, r3, #30
 800d00c:	bf58      	it	pl
 800d00e:	6962      	ldrpl	r2, [r4, #20]
 800d010:	60a2      	str	r2, [r4, #8]
 800d012:	e7f4      	b.n	800cffe <__swsetup_r+0x8e>
 800d014:	2000      	movs	r0, #0
 800d016:	e7f7      	b.n	800d008 <__swsetup_r+0x98>
 800d018:	20000064 	.word	0x20000064

0800d01c <_raise_r>:
 800d01c:	291f      	cmp	r1, #31
 800d01e:	b538      	push	{r3, r4, r5, lr}
 800d020:	4605      	mov	r5, r0
 800d022:	460c      	mov	r4, r1
 800d024:	d904      	bls.n	800d030 <_raise_r+0x14>
 800d026:	2316      	movs	r3, #22
 800d028:	6003      	str	r3, [r0, #0]
 800d02a:	f04f 30ff 	mov.w	r0, #4294967295
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d032:	b112      	cbz	r2, 800d03a <_raise_r+0x1e>
 800d034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d038:	b94b      	cbnz	r3, 800d04e <_raise_r+0x32>
 800d03a:	4628      	mov	r0, r5
 800d03c:	f000 f830 	bl	800d0a0 <_getpid_r>
 800d040:	4622      	mov	r2, r4
 800d042:	4601      	mov	r1, r0
 800d044:	4628      	mov	r0, r5
 800d046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d04a:	f000 b817 	b.w	800d07c <_kill_r>
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d00a      	beq.n	800d068 <_raise_r+0x4c>
 800d052:	1c59      	adds	r1, r3, #1
 800d054:	d103      	bne.n	800d05e <_raise_r+0x42>
 800d056:	2316      	movs	r3, #22
 800d058:	6003      	str	r3, [r0, #0]
 800d05a:	2001      	movs	r0, #1
 800d05c:	e7e7      	b.n	800d02e <_raise_r+0x12>
 800d05e:	2100      	movs	r1, #0
 800d060:	4620      	mov	r0, r4
 800d062:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d066:	4798      	blx	r3
 800d068:	2000      	movs	r0, #0
 800d06a:	e7e0      	b.n	800d02e <_raise_r+0x12>

0800d06c <raise>:
 800d06c:	4b02      	ldr	r3, [pc, #8]	@ (800d078 <raise+0xc>)
 800d06e:	4601      	mov	r1, r0
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	f7ff bfd3 	b.w	800d01c <_raise_r>
 800d076:	bf00      	nop
 800d078:	20000064 	.word	0x20000064

0800d07c <_kill_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	2300      	movs	r3, #0
 800d080:	4d06      	ldr	r5, [pc, #24]	@ (800d09c <_kill_r+0x20>)
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	602b      	str	r3, [r5, #0]
 800d08a:	f7f6 feb6 	bl	8003dfa <_kill>
 800d08e:	1c43      	adds	r3, r0, #1
 800d090:	d102      	bne.n	800d098 <_kill_r+0x1c>
 800d092:	682b      	ldr	r3, [r5, #0]
 800d094:	b103      	cbz	r3, 800d098 <_kill_r+0x1c>
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	bd38      	pop	{r3, r4, r5, pc}
 800d09a:	bf00      	nop
 800d09c:	200009b4 	.word	0x200009b4

0800d0a0 <_getpid_r>:
 800d0a0:	f7f6 bea4 	b.w	8003dec <_getpid>

0800d0a4 <__swhatbuf_r>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ac:	4615      	mov	r5, r2
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	461e      	mov	r6, r3
 800d0b2:	b096      	sub	sp, #88	@ 0x58
 800d0b4:	da0c      	bge.n	800d0d0 <__swhatbuf_r+0x2c>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d0be:	bf14      	ite	ne
 800d0c0:	2340      	movne	r3, #64	@ 0x40
 800d0c2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	6031      	str	r1, [r6, #0]
 800d0ca:	602b      	str	r3, [r5, #0]
 800d0cc:	b016      	add	sp, #88	@ 0x58
 800d0ce:	bd70      	pop	{r4, r5, r6, pc}
 800d0d0:	466a      	mov	r2, sp
 800d0d2:	f000 f849 	bl	800d168 <_fstat_r>
 800d0d6:	2800      	cmp	r0, #0
 800d0d8:	dbed      	blt.n	800d0b6 <__swhatbuf_r+0x12>
 800d0da:	9901      	ldr	r1, [sp, #4]
 800d0dc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0e0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0e4:	4259      	negs	r1, r3
 800d0e6:	4159      	adcs	r1, r3
 800d0e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0ec:	e7eb      	b.n	800d0c6 <__swhatbuf_r+0x22>

0800d0ee <__smakebuf_r>:
 800d0ee:	898b      	ldrh	r3, [r1, #12]
 800d0f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0f2:	079d      	lsls	r5, r3, #30
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	d507      	bpl.n	800d10a <__smakebuf_r+0x1c>
 800d0fa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0fe:	6023      	str	r3, [r4, #0]
 800d100:	6123      	str	r3, [r4, #16]
 800d102:	2301      	movs	r3, #1
 800d104:	6163      	str	r3, [r4, #20]
 800d106:	b003      	add	sp, #12
 800d108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d10a:	466a      	mov	r2, sp
 800d10c:	ab01      	add	r3, sp, #4
 800d10e:	f7ff ffc9 	bl	800d0a4 <__swhatbuf_r>
 800d112:	9f00      	ldr	r7, [sp, #0]
 800d114:	4605      	mov	r5, r0
 800d116:	4639      	mov	r1, r7
 800d118:	4630      	mov	r0, r6
 800d11a:	f7fd fbd3 	bl	800a8c4 <_malloc_r>
 800d11e:	b948      	cbnz	r0, 800d134 <__smakebuf_r+0x46>
 800d120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d124:	059a      	lsls	r2, r3, #22
 800d126:	d4ee      	bmi.n	800d106 <__smakebuf_r+0x18>
 800d128:	f023 0303 	bic.w	r3, r3, #3
 800d12c:	f043 0302 	orr.w	r3, r3, #2
 800d130:	81a3      	strh	r3, [r4, #12]
 800d132:	e7e2      	b.n	800d0fa <__smakebuf_r+0xc>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d13a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	9b01      	ldr	r3, [sp, #4]
 800d142:	6020      	str	r0, [r4, #0]
 800d144:	b15b      	cbz	r3, 800d15e <__smakebuf_r+0x70>
 800d146:	4630      	mov	r0, r6
 800d148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14c:	f000 f81e 	bl	800d18c <_isatty_r>
 800d150:	b128      	cbz	r0, 800d15e <__smakebuf_r+0x70>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	f023 0303 	bic.w	r3, r3, #3
 800d158:	f043 0301 	orr.w	r3, r3, #1
 800d15c:	81a3      	strh	r3, [r4, #12]
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	431d      	orrs	r5, r3
 800d162:	81a5      	strh	r5, [r4, #12]
 800d164:	e7cf      	b.n	800d106 <__smakebuf_r+0x18>
	...

0800d168 <_fstat_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	2300      	movs	r3, #0
 800d16c:	4d06      	ldr	r5, [pc, #24]	@ (800d188 <_fstat_r+0x20>)
 800d16e:	4604      	mov	r4, r0
 800d170:	4608      	mov	r0, r1
 800d172:	4611      	mov	r1, r2
 800d174:	602b      	str	r3, [r5, #0]
 800d176:	f7f6 fe9f 	bl	8003eb8 <_fstat>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	d102      	bne.n	800d184 <_fstat_r+0x1c>
 800d17e:	682b      	ldr	r3, [r5, #0]
 800d180:	b103      	cbz	r3, 800d184 <_fstat_r+0x1c>
 800d182:	6023      	str	r3, [r4, #0]
 800d184:	bd38      	pop	{r3, r4, r5, pc}
 800d186:	bf00      	nop
 800d188:	200009b4 	.word	0x200009b4

0800d18c <_isatty_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	2300      	movs	r3, #0
 800d190:	4d05      	ldr	r5, [pc, #20]	@ (800d1a8 <_isatty_r+0x1c>)
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	602b      	str	r3, [r5, #0]
 800d198:	f7f6 fe9d 	bl	8003ed6 <_isatty>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_isatty_r+0x1a>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_isatty_r+0x1a>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	200009b4 	.word	0x200009b4

0800d1ac <_init>:
 800d1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ae:	bf00      	nop
 800d1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1b2:	bc08      	pop	{r3}
 800d1b4:	469e      	mov	lr, r3
 800d1b6:	4770      	bx	lr

0800d1b8 <_fini>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	bf00      	nop
 800d1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1be:	bc08      	pop	{r3}
 800d1c0:	469e      	mov	lr, r3
 800d1c2:	4770      	bx	lr
